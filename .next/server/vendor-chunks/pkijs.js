"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pkijs";
exports.ids = ["vendor-chunks/pkijs"];
exports.modules = {

/***/ "(ssr)/./node_modules/pkijs/build/index.es.js":
/*!**********************************************!*\
  !*** ./node_modules/pkijs/build/index.es.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractCryptoEngine: () => (/* binding */ AbstractCryptoEngine),\n/* harmony export */   AccessDescription: () => (/* binding */ AccessDescription),\n/* harmony export */   Accuracy: () => (/* binding */ Accuracy),\n/* harmony export */   AlgorithmIdentifier: () => (/* binding */ AlgorithmIdentifier),\n/* harmony export */   AltName: () => (/* binding */ AltName),\n/* harmony export */   ArgumentError: () => (/* binding */ ArgumentError),\n/* harmony export */   AsnError: () => (/* binding */ AsnError),\n/* harmony export */   AttCertValidityPeriod: () => (/* binding */ AttCertValidityPeriod),\n/* harmony export */   Attribute: () => (/* binding */ Attribute),\n/* harmony export */   AttributeCertificateInfoV1: () => (/* binding */ AttributeCertificateInfoV1),\n/* harmony export */   AttributeCertificateInfoV2: () => (/* binding */ AttributeCertificateInfoV2),\n/* harmony export */   AttributeCertificateV1: () => (/* binding */ AttributeCertificateV1),\n/* harmony export */   AttributeCertificateV2: () => (/* binding */ AttributeCertificateV2),\n/* harmony export */   AttributeTypeAndValue: () => (/* binding */ AttributeTypeAndValue),\n/* harmony export */   AuthenticatedSafe: () => (/* binding */ AuthenticatedSafe),\n/* harmony export */   AuthorityKeyIdentifier: () => (/* binding */ AuthorityKeyIdentifier),\n/* harmony export */   BasicConstraints: () => (/* binding */ BasicConstraints),\n/* harmony export */   BasicOCSPResponse: () => (/* binding */ BasicOCSPResponse),\n/* harmony export */   CAVersion: () => (/* binding */ CAVersion),\n/* harmony export */   CRLBag: () => (/* binding */ CRLBag),\n/* harmony export */   CRLDistributionPoints: () => (/* binding */ CRLDistributionPoints),\n/* harmony export */   CertBag: () => (/* binding */ CertBag),\n/* harmony export */   CertID: () => (/* binding */ CertID),\n/* harmony export */   Certificate: () => (/* binding */ Certificate),\n/* harmony export */   CertificateChainValidationEngine: () => (/* binding */ CertificateChainValidationEngine),\n/* harmony export */   CertificatePolicies: () => (/* binding */ CertificatePolicies),\n/* harmony export */   CertificateRevocationList: () => (/* binding */ CertificateRevocationList),\n/* harmony export */   CertificateSet: () => (/* binding */ CertificateSet),\n/* harmony export */   CertificateTemplate: () => (/* binding */ CertificateTemplate),\n/* harmony export */   CertificationRequest: () => (/* binding */ CertificationRequest),\n/* harmony export */   ChainValidationCode: () => (/* binding */ ChainValidationCode),\n/* harmony export */   ChainValidationError: () => (/* binding */ ChainValidationError),\n/* harmony export */   ContentInfo: () => (/* binding */ ContentInfo),\n/* harmony export */   CryptoEngine: () => (/* binding */ CryptoEngine),\n/* harmony export */   DigestInfo: () => (/* binding */ DigestInfo),\n/* harmony export */   DistributionPoint: () => (/* binding */ DistributionPoint),\n/* harmony export */   ECCCMSSharedInfo: () => (/* binding */ ECCCMSSharedInfo),\n/* harmony export */   ECNamedCurves: () => (/* binding */ ECNamedCurves),\n/* harmony export */   ECPrivateKey: () => (/* binding */ ECPrivateKey),\n/* harmony export */   ECPublicKey: () => (/* binding */ ECPublicKey),\n/* harmony export */   EncapsulatedContentInfo: () => (/* binding */ EncapsulatedContentInfo),\n/* harmony export */   EncryptedContentInfo: () => (/* binding */ EncryptedContentInfo),\n/* harmony export */   EncryptedData: () => (/* binding */ EncryptedData),\n/* harmony export */   EnvelopedData: () => (/* binding */ EnvelopedData),\n/* harmony export */   ExtKeyUsage: () => (/* binding */ ExtKeyUsage),\n/* harmony export */   Extension: () => (/* binding */ Extension),\n/* harmony export */   ExtensionValueFactory: () => (/* binding */ ExtensionValueFactory),\n/* harmony export */   Extensions: () => (/* binding */ Extensions),\n/* harmony export */   GeneralName: () => (/* binding */ GeneralName),\n/* harmony export */   GeneralNames: () => (/* binding */ GeneralNames),\n/* harmony export */   GeneralSubtree: () => (/* binding */ GeneralSubtree),\n/* harmony export */   HASHED_MESSAGE: () => (/* binding */ HASHED_MESSAGE),\n/* harmony export */   HASH_ALGORITHM: () => (/* binding */ HASH_ALGORITHM),\n/* harmony export */   Holder: () => (/* binding */ Holder),\n/* harmony export */   InfoAccess: () => (/* binding */ InfoAccess),\n/* harmony export */   IssuerAndSerialNumber: () => (/* binding */ IssuerAndSerialNumber),\n/* harmony export */   IssuerSerial: () => (/* binding */ IssuerSerial),\n/* harmony export */   IssuingDistributionPoint: () => (/* binding */ IssuingDistributionPoint),\n/* harmony export */   KEKIdentifier: () => (/* binding */ KEKIdentifier),\n/* harmony export */   KEKRecipientInfo: () => (/* binding */ KEKRecipientInfo),\n/* harmony export */   KeyAgreeRecipientIdentifier: () => (/* binding */ KeyAgreeRecipientIdentifier),\n/* harmony export */   KeyAgreeRecipientInfo: () => (/* binding */ KeyAgreeRecipientInfo),\n/* harmony export */   KeyBag: () => (/* binding */ KeyBag),\n/* harmony export */   KeyTransRecipientInfo: () => (/* binding */ KeyTransRecipientInfo),\n/* harmony export */   MICROS: () => (/* binding */ MICROS),\n/* harmony export */   MILLIS: () => (/* binding */ MILLIS),\n/* harmony export */   MacData: () => (/* binding */ MacData),\n/* harmony export */   MessageImprint: () => (/* binding */ MessageImprint),\n/* harmony export */   NameConstraints: () => (/* binding */ NameConstraints),\n/* harmony export */   OCSPRequest: () => (/* binding */ OCSPRequest),\n/* harmony export */   OCSPResponse: () => (/* binding */ OCSPResponse),\n/* harmony export */   ObjectDigestInfo: () => (/* binding */ ObjectDigestInfo),\n/* harmony export */   OriginatorIdentifierOrKey: () => (/* binding */ OriginatorIdentifierOrKey),\n/* harmony export */   OriginatorInfo: () => (/* binding */ OriginatorInfo),\n/* harmony export */   OriginatorPublicKey: () => (/* binding */ OriginatorPublicKey),\n/* harmony export */   OtherCertificateFormat: () => (/* binding */ OtherCertificateFormat),\n/* harmony export */   OtherKeyAttribute: () => (/* binding */ OtherKeyAttribute),\n/* harmony export */   OtherPrimeInfo: () => (/* binding */ OtherPrimeInfo),\n/* harmony export */   OtherRecipientInfo: () => (/* binding */ OtherRecipientInfo),\n/* harmony export */   OtherRevocationInfoFormat: () => (/* binding */ OtherRevocationInfoFormat),\n/* harmony export */   PBES2Params: () => (/* binding */ PBES2Params),\n/* harmony export */   PBKDF2Params: () => (/* binding */ PBKDF2Params),\n/* harmony export */   PFX: () => (/* binding */ PFX),\n/* harmony export */   PKCS8ShroudedKeyBag: () => (/* binding */ PKCS8ShroudedKeyBag),\n/* harmony export */   PKIStatus: () => (/* binding */ PKIStatus),\n/* harmony export */   PKIStatusInfo: () => (/* binding */ PKIStatusInfo),\n/* harmony export */   POLICY_IDENTIFIER: () => (/* binding */ POLICY_IDENTIFIER),\n/* harmony export */   POLICY_QUALIFIERS: () => (/* binding */ POLICY_QUALIFIERS),\n/* harmony export */   ParameterError: () => (/* binding */ ParameterError),\n/* harmony export */   PasswordRecipientinfo: () => (/* binding */ PasswordRecipientinfo),\n/* harmony export */   PkiObject: () => (/* binding */ PkiObject),\n/* harmony export */   PolicyConstraints: () => (/* binding */ PolicyConstraints),\n/* harmony export */   PolicyInformation: () => (/* binding */ PolicyInformation),\n/* harmony export */   PolicyMapping: () => (/* binding */ PolicyMapping),\n/* harmony export */   PolicyMappings: () => (/* binding */ PolicyMappings),\n/* harmony export */   PolicyQualifierInfo: () => (/* binding */ PolicyQualifierInfo),\n/* harmony export */   PrivateKeyInfo: () => (/* binding */ PrivateKeyInfo),\n/* harmony export */   PrivateKeyUsagePeriod: () => (/* binding */ PrivateKeyUsagePeriod),\n/* harmony export */   PublicKeyInfo: () => (/* binding */ PublicKeyInfo),\n/* harmony export */   QCStatement: () => (/* binding */ QCStatement),\n/* harmony export */   QCStatements: () => (/* binding */ QCStatements),\n/* harmony export */   RDN: () => (/* binding */ RDN),\n/* harmony export */   RSAESOAEPParams: () => (/* binding */ RSAESOAEPParams),\n/* harmony export */   RSAPrivateKey: () => (/* binding */ RSAPrivateKey),\n/* harmony export */   RSAPublicKey: () => (/* binding */ RSAPublicKey),\n/* harmony export */   RSASSAPSSParams: () => (/* binding */ RSASSAPSSParams),\n/* harmony export */   RecipientEncryptedKey: () => (/* binding */ RecipientEncryptedKey),\n/* harmony export */   RecipientEncryptedKeys: () => (/* binding */ RecipientEncryptedKeys),\n/* harmony export */   RecipientIdentifier: () => (/* binding */ RecipientIdentifier),\n/* harmony export */   RecipientInfo: () => (/* binding */ RecipientInfo),\n/* harmony export */   RecipientKeyIdentifier: () => (/* binding */ RecipientKeyIdentifier),\n/* harmony export */   RelativeDistinguishedNames: () => (/* binding */ RelativeDistinguishedNames),\n/* harmony export */   Request: () => (/* binding */ Request),\n/* harmony export */   ResponseBytes: () => (/* binding */ ResponseBytes),\n/* harmony export */   ResponseData: () => (/* binding */ ResponseData),\n/* harmony export */   RevocationInfoChoices: () => (/* binding */ RevocationInfoChoices),\n/* harmony export */   RevokedCertificate: () => (/* binding */ RevokedCertificate),\n/* harmony export */   SECONDS: () => (/* binding */ SECONDS),\n/* harmony export */   SafeBag: () => (/* binding */ SafeBag),\n/* harmony export */   SafeBagValueFactory: () => (/* binding */ SafeBagValueFactory),\n/* harmony export */   SafeContents: () => (/* binding */ SafeContents),\n/* harmony export */   SecretBag: () => (/* binding */ SecretBag),\n/* harmony export */   Signature: () => (/* binding */ Signature),\n/* harmony export */   SignedAndUnsignedAttributes: () => (/* binding */ SignedAndUnsignedAttributes),\n/* harmony export */   SignedCertificateTimestamp: () => (/* binding */ SignedCertificateTimestamp),\n/* harmony export */   SignedCertificateTimestampList: () => (/* binding */ SignedCertificateTimestampList),\n/* harmony export */   SignedData: () => (/* binding */ SignedData),\n/* harmony export */   SignedDataVerifyError: () => (/* binding */ SignedDataVerifyError),\n/* harmony export */   SignerInfo: () => (/* binding */ SignerInfo),\n/* harmony export */   SingleResponse: () => (/* binding */ SingleResponse),\n/* harmony export */   SubjectDirectoryAttributes: () => (/* binding */ SubjectDirectoryAttributes),\n/* harmony export */   TBSRequest: () => (/* binding */ TBSRequest),\n/* harmony export */   TSTInfo: () => (/* binding */ TSTInfo),\n/* harmony export */   TYPE: () => (/* binding */ TYPE$4),\n/* harmony export */   TYPE_AND_VALUES: () => (/* binding */ TYPE_AND_VALUES),\n/* harmony export */   Time: () => (/* binding */ Time),\n/* harmony export */   TimeStampReq: () => (/* binding */ TimeStampReq),\n/* harmony export */   TimeStampResp: () => (/* binding */ TimeStampResp),\n/* harmony export */   TimeType: () => (/* binding */ TimeType),\n/* harmony export */   V2Form: () => (/* binding */ V2Form),\n/* harmony export */   VALUE: () => (/* binding */ VALUE$5),\n/* harmony export */   VALUE_BEFORE_DECODE: () => (/* binding */ VALUE_BEFORE_DECODE),\n/* harmony export */   checkCA: () => (/* binding */ checkCA),\n/* harmony export */   createCMSECDSASignature: () => (/* binding */ createCMSECDSASignature),\n/* harmony export */   createECDSASignatureFromCMS: () => (/* binding */ createECDSASignatureFromCMS),\n/* harmony export */   engine: () => (/* binding */ engine),\n/* harmony export */   getAlgorithmByOID: () => (/* binding */ getAlgorithmByOID),\n/* harmony export */   getAlgorithmParameters: () => (/* binding */ getAlgorithmParameters),\n/* harmony export */   getCrypto: () => (/* binding */ getCrypto),\n/* harmony export */   getEngine: () => (/* binding */ getEngine),\n/* harmony export */   getHashAlgorithm: () => (/* binding */ getHashAlgorithm),\n/* harmony export */   getOIDByAlgorithm: () => (/* binding */ getOIDByAlgorithm),\n/* harmony export */   getRandomValues: () => (/* binding */ getRandomValues),\n/* harmony export */   id_AnyPolicy: () => (/* binding */ id_AnyPolicy),\n/* harmony export */   id_AuthorityInfoAccess: () => (/* binding */ id_AuthorityInfoAccess),\n/* harmony export */   id_AuthorityKeyIdentifier: () => (/* binding */ id_AuthorityKeyIdentifier),\n/* harmony export */   id_BaseCRLNumber: () => (/* binding */ id_BaseCRLNumber),\n/* harmony export */   id_BasicConstraints: () => (/* binding */ id_BasicConstraints),\n/* harmony export */   id_CRLBag_X509CRL: () => (/* binding */ id_CRLBag_X509CRL),\n/* harmony export */   id_CRLDistributionPoints: () => (/* binding */ id_CRLDistributionPoints),\n/* harmony export */   id_CRLNumber: () => (/* binding */ id_CRLNumber),\n/* harmony export */   id_CRLReason: () => (/* binding */ id_CRLReason),\n/* harmony export */   id_CertBag_AttributeCertificate: () => (/* binding */ id_CertBag_AttributeCertificate),\n/* harmony export */   id_CertBag_SDSICertificate: () => (/* binding */ id_CertBag_SDSICertificate),\n/* harmony export */   id_CertBag_X509Certificate: () => (/* binding */ id_CertBag_X509Certificate),\n/* harmony export */   id_CertificateIssuer: () => (/* binding */ id_CertificateIssuer),\n/* harmony export */   id_CertificatePolicies: () => (/* binding */ id_CertificatePolicies),\n/* harmony export */   id_ContentType_Data: () => (/* binding */ id_ContentType_Data),\n/* harmony export */   id_ContentType_EncryptedData: () => (/* binding */ id_ContentType_EncryptedData),\n/* harmony export */   id_ContentType_EnvelopedData: () => (/* binding */ id_ContentType_EnvelopedData),\n/* harmony export */   id_ContentType_SignedData: () => (/* binding */ id_ContentType_SignedData),\n/* harmony export */   id_ExtKeyUsage: () => (/* binding */ id_ExtKeyUsage),\n/* harmony export */   id_FreshestCRL: () => (/* binding */ id_FreshestCRL),\n/* harmony export */   id_InhibitAnyPolicy: () => (/* binding */ id_InhibitAnyPolicy),\n/* harmony export */   id_InvalidityDate: () => (/* binding */ id_InvalidityDate),\n/* harmony export */   id_IssuerAltName: () => (/* binding */ id_IssuerAltName),\n/* harmony export */   id_IssuingDistributionPoint: () => (/* binding */ id_IssuingDistributionPoint),\n/* harmony export */   id_KeyUsage: () => (/* binding */ id_KeyUsage),\n/* harmony export */   id_MicrosoftAppPolicies: () => (/* binding */ id_MicrosoftAppPolicies),\n/* harmony export */   id_MicrosoftCaVersion: () => (/* binding */ id_MicrosoftCaVersion),\n/* harmony export */   id_MicrosoftCertTemplateV1: () => (/* binding */ id_MicrosoftCertTemplateV1),\n/* harmony export */   id_MicrosoftCertTemplateV2: () => (/* binding */ id_MicrosoftCertTemplateV2),\n/* harmony export */   id_MicrosoftPrevCaCertHash: () => (/* binding */ id_MicrosoftPrevCaCertHash),\n/* harmony export */   id_NameConstraints: () => (/* binding */ id_NameConstraints),\n/* harmony export */   id_PKIX_OCSP_Basic: () => (/* binding */ id_PKIX_OCSP_Basic),\n/* harmony export */   id_PolicyConstraints: () => (/* binding */ id_PolicyConstraints),\n/* harmony export */   id_PolicyMappings: () => (/* binding */ id_PolicyMappings),\n/* harmony export */   id_PrivateKeyUsagePeriod: () => (/* binding */ id_PrivateKeyUsagePeriod),\n/* harmony export */   id_QCStatements: () => (/* binding */ id_QCStatements),\n/* harmony export */   id_SignedCertificateTimestampList: () => (/* binding */ id_SignedCertificateTimestampList),\n/* harmony export */   id_SubjectAltName: () => (/* binding */ id_SubjectAltName),\n/* harmony export */   id_SubjectDirectoryAttributes: () => (/* binding */ id_SubjectDirectoryAttributes),\n/* harmony export */   id_SubjectInfoAccess: () => (/* binding */ id_SubjectInfoAccess),\n/* harmony export */   id_SubjectKeyIdentifier: () => (/* binding */ id_SubjectKeyIdentifier),\n/* harmony export */   id_ad: () => (/* binding */ id_ad),\n/* harmony export */   id_ad_caIssuers: () => (/* binding */ id_ad_caIssuers),\n/* harmony export */   id_ad_ocsp: () => (/* binding */ id_ad_ocsp),\n/* harmony export */   id_eContentType_TSTInfo: () => (/* binding */ id_eContentType_TSTInfo),\n/* harmony export */   id_pkix: () => (/* binding */ id_pkix),\n/* harmony export */   id_sha1: () => (/* binding */ id_sha1),\n/* harmony export */   id_sha256: () => (/* binding */ id_sha256),\n/* harmony export */   id_sha384: () => (/* binding */ id_sha384),\n/* harmony export */   id_sha512: () => (/* binding */ id_sha512),\n/* harmony export */   kdf: () => (/* binding */ kdf),\n/* harmony export */   setEngine: () => (/* binding */ setEngine),\n/* harmony export */   stringPrep: () => (/* binding */ stringPrep),\n/* harmony export */   verifySCTsForCertificate: () => (/* binding */ verifySCTsForCertificate)\n/* harmony export */ });\n/* harmony import */ var asn1js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! asn1js */ \"(ssr)/./node_modules/asn1js/build/index.es.js\");\n/* harmony import */ var pvtsutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pvtsutils */ \"(ssr)/./node_modules/pvtsutils/build/index.es.js\");\n/* harmony import */ var pvutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! pvutils */ \"(ssr)/./node_modules/pvutils/build/utils.es.js\");\n/* harmony import */ var bytestreamjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! bytestreamjs */ \"(ssr)/./node_modules/bytestreamjs/build/mjs/index.js\");\n/* harmony import */ var _noble_hashes_sha1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/sha1 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha1.js\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @noble/hashes/sha512 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha512.js\");\n/*!\n * Copyright (c) 2014, GlobalSign\n * Copyright (c) 2015-2019, Peculiar Ventures\n * All rights reserved.\n * \n * Author 2014-2019, Yury Strozhevsky\n * \n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * \n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n * \n * * Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n * \n * * Neither the name of the {organization} nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n * \n */\n\n\n\n\n\n\n\n\n\n\nconst EMPTY_BUFFER = new ArrayBuffer(0);\nconst EMPTY_STRING = \"\";\n\nclass ArgumentError extends TypeError {\n    constructor() {\n        super(...arguments);\n        this.name = ArgumentError.NAME;\n    }\n    static isType(value, type) {\n        if (typeof type === \"string\") {\n            if (type === \"Array\" && Array.isArray(value)) {\n                return true;\n            }\n            else if (type === \"ArrayBuffer\" && value instanceof ArrayBuffer) {\n                return true;\n            }\n            else if (type === \"ArrayBufferView\" && ArrayBuffer.isView(value)) {\n                return true;\n            }\n            else if (typeof value === type) {\n                return true;\n            }\n        }\n        else if (value instanceof type) {\n            return true;\n        }\n        return false;\n    }\n    static assert(value, name, ...types) {\n        for (const type of types) {\n            if (this.isType(value, type)) {\n                return;\n            }\n        }\n        const typeNames = types.map(o => o instanceof Function && \"name\" in o ? o.name : `${o}`);\n        throw new ArgumentError(`Parameter '${name}' is not of type ${typeNames.length > 1 ? `(${typeNames.join(\" or \")})` : typeNames[0]}`);\n    }\n}\nArgumentError.NAME = \"ArgumentError\";\n\nclass ParameterError extends TypeError {\n    static assert(...args) {\n        let target = null;\n        let params;\n        let fields;\n        if (typeof args[0] === \"string\") {\n            target = args[0];\n            params = args[1];\n            fields = args.slice(2);\n        }\n        else {\n            params = args[0];\n            fields = args.slice(1);\n        }\n        ArgumentError.assert(params, \"parameters\", \"object\");\n        for (const field of fields) {\n            const value = params[field];\n            if (value === undefined || value === null) {\n                throw new ParameterError(field, target);\n            }\n        }\n    }\n    static assertEmpty(value, name, target) {\n        if (value === undefined || value === null) {\n            throw new ParameterError(name, target);\n        }\n    }\n    constructor(field, target = null, message) {\n        super();\n        this.name = ParameterError.NAME;\n        this.field = field;\n        if (target) {\n            this.target = target;\n        }\n        if (message) {\n            this.message = message;\n        }\n        else {\n            this.message = `Absent mandatory parameter '${field}' ${target ? ` in '${target}'` : EMPTY_STRING}`;\n        }\n    }\n}\nParameterError.NAME = \"ParameterError\";\n\nclass AsnError extends Error {\n    static assertSchema(asn1, target) {\n        if (!asn1.verified) {\n            throw new Error(`Object's schema was not verified against input data for ${target}`);\n        }\n    }\n    static assert(asn, target) {\n        if (asn.offset === -1) {\n            throw new AsnError(`Error during parsing of ASN.1 data. Data is not correct for '${target}'.`);\n        }\n    }\n    constructor(message) {\n        super(message);\n        this.name = \"AsnError\";\n    }\n}\n\nclass PkiObject {\n    static blockName() {\n        return this.CLASS_NAME;\n    }\n    static fromBER(raw) {\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(raw);\n        AsnError.assert(asn1, this.name);\n        try {\n            return new this({ schema: asn1.result });\n        }\n        catch (e) {\n            throw new AsnError(`Cannot create '${this.CLASS_NAME}' from ASN.1 object`);\n        }\n    }\n    static defaultValues(memberName) {\n        throw new Error(`Invalid member name for ${this.CLASS_NAME} class: ${memberName}`);\n    }\n    static schema(parameters = {}) {\n        throw new Error(`Method '${this.CLASS_NAME}.schema' should be overridden`);\n    }\n    get className() {\n        return this.constructor.CLASS_NAME;\n    }\n    toString(encoding = \"hex\") {\n        let schema;\n        try {\n            schema = this.toSchema();\n        }\n        catch {\n            schema = this.toSchema(true);\n        }\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToString(schema.toBER(), encoding);\n    }\n}\nPkiObject.CLASS_NAME = \"PkiObject\";\n\nfunction stringPrep(inputString) {\n    let isSpace = false;\n    let cutResult = EMPTY_STRING;\n    const result = inputString.trim();\n    for (let i = 0; i < result.length; i++) {\n        if (result.charCodeAt(i) === 32) {\n            if (isSpace === false)\n                isSpace = true;\n        }\n        else {\n            if (isSpace) {\n                cutResult += \" \";\n                isSpace = false;\n            }\n            cutResult += result[i];\n        }\n    }\n    return cutResult.toLowerCase();\n}\n\nconst TYPE$5 = \"type\";\nconst VALUE$6 = \"value\";\nclass AttributeTypeAndValue extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TYPE$5, AttributeTypeAndValue.defaultValues(TYPE$5));\n        this.value = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUE$6, AttributeTypeAndValue.defaultValues(VALUE$6));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE$5:\n                return EMPTY_STRING;\n            case VALUE$6:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.type || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.value || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            TYPE$5,\n            \"typeValue\"\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AttributeTypeAndValue.schema({\n            names: {\n                type: TYPE$5,\n                value: \"typeValue\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.type = asn1.result.type.valueBlock.toString();\n        this.value = asn1.result.typeValue;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.type }),\n                this.value\n            ]\n        }));\n    }\n    toJSON() {\n        const _object = {\n            type: this.type\n        };\n        if (Object.keys(this.value).length !== 0) {\n            _object.value = (this.value).toJSON();\n        }\n        else {\n            _object.value = this.value;\n        }\n        return _object;\n    }\n    isEqual(compareTo) {\n        const stringBlockNames = [\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.Utf8String.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.BmpString.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.UniversalString.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.NumericString.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.TeletexString.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.VideotexString.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.IA5String.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.GraphicString.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.VisibleString.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralString.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.CharacterString.blockName()\n        ];\n        if (compareTo instanceof ArrayBuffer) {\n            return pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(this.value.valueBeforeDecodeView, compareTo);\n        }\n        if (compareTo.constructor.blockName() === AttributeTypeAndValue.blockName()) {\n            if (this.type !== compareTo.type)\n                return false;\n            const isStringPair = [false, false];\n            const thisName = this.value.constructor.blockName();\n            for (const name of stringBlockNames) {\n                if (thisName === name) {\n                    isStringPair[0] = true;\n                }\n                if (compareTo.value.constructor.blockName() === name) {\n                    isStringPair[1] = true;\n                }\n            }\n            if (isStringPair[0] !== isStringPair[1]) {\n                return false;\n            }\n            const isString = (isStringPair[0] && isStringPair[1]);\n            if (isString) {\n                const value1 = stringPrep(this.value.valueBlock.value);\n                const value2 = stringPrep(compareTo.value.valueBlock.value);\n                if (value1.localeCompare(value2) !== 0)\n                    return false;\n            }\n            else {\n                if (!pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(this.value.valueBeforeDecodeView, compareTo.value.valueBeforeDecodeView))\n                    return false;\n            }\n            return true;\n        }\n        return false;\n    }\n}\nAttributeTypeAndValue.CLASS_NAME = \"AttributeTypeAndValue\";\n\nconst TYPE_AND_VALUES = \"typesAndValues\";\nconst VALUE_BEFORE_DECODE = \"valueBeforeDecode\";\nconst RDN = \"RDN\";\nclass RelativeDistinguishedNames extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.typesAndValues = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TYPE_AND_VALUES, RelativeDistinguishedNames.defaultValues(TYPE_AND_VALUES));\n        this.valueBeforeDecode = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUE_BEFORE_DECODE, RelativeDistinguishedNames.defaultValues(VALUE_BEFORE_DECODE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE_AND_VALUES:\n                return [];\n            case VALUE_BEFORE_DECODE:\n                return EMPTY_BUFFER;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TYPE_AND_VALUES:\n                return (memberValue.length === 0);\n            case VALUE_BEFORE_DECODE:\n                return (memberValue.byteLength === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.repeatedSequence || EMPTY_STRING),\n                    value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                        value: [\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                                name: (names.repeatedSet || EMPTY_STRING),\n                                value: AttributeTypeAndValue.schema(names.typeAndValue || {})\n                            })\n                        ]\n                    })\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            RDN,\n            TYPE_AND_VALUES\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RelativeDistinguishedNames.schema({\n            names: {\n                blockName: RDN,\n                repeatedSet: TYPE_AND_VALUES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (TYPE_AND_VALUES in asn1.result) {\n            this.typesAndValues = Array.from(asn1.result.typesAndValues, element => new AttributeTypeAndValue({ schema: element }));\n        }\n        this.valueBeforeDecode = asn1.result.RDN.valueBeforeDecodeView.slice().buffer;\n    }\n    toSchema() {\n        if (this.valueBeforeDecode.byteLength === 0) {\n            return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                        value: Array.from(this.typesAndValues, o => o.toSchema())\n                    })]\n            }));\n        }\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.valueBeforeDecode);\n        AsnError.assert(asn1, \"RelativeDistinguishedNames\");\n        if (!(asn1.result instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence)) {\n            throw new Error(\"ASN.1 result should be SEQUENCE\");\n        }\n        return asn1.result;\n    }\n    toJSON() {\n        return {\n            typesAndValues: Array.from(this.typesAndValues, o => o.toJSON())\n        };\n    }\n    isEqual(compareTo) {\n        if (compareTo instanceof RelativeDistinguishedNames) {\n            if (this.typesAndValues.length !== compareTo.typesAndValues.length)\n                return false;\n            for (const [index, typeAndValue] of this.typesAndValues.entries()) {\n                if (typeAndValue.isEqual(compareTo.typesAndValues[index]) === false)\n                    return false;\n            }\n            return true;\n        }\n        if (compareTo instanceof ArrayBuffer) {\n            return pvutils__WEBPACK_IMPORTED_MODULE_2__.isEqualBuffer(this.valueBeforeDecode, compareTo);\n        }\n        return false;\n    }\n}\nRelativeDistinguishedNames.CLASS_NAME = \"RelativeDistinguishedNames\";\n\nconst TYPE$4 = \"type\";\nconst VALUE$5 = \"value\";\nfunction builtInStandardAttributes(parameters = {}, optional = false) {\n    const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n    return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n        optional,\n        value: [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 2,\n                    tagNumber: 1\n                },\n                name: (names.country_name || EMPTY_STRING),\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                        value: [\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.NumericString(),\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString()\n                        ]\n                    })\n                ]\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 2,\n                    tagNumber: 2\n                },\n                name: (names.administration_domain_name || EMPTY_STRING),\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                        value: [\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.NumericString(),\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString()\n                        ]\n                    })\n                ]\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                name: (names.network_address || EMPTY_STRING),\n                isHexOnly: true\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                name: (names.terminal_identifier || EMPTY_STRING),\n                isHexOnly: true\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                name: (names.private_domain_name || EMPTY_STRING),\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                        value: [\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.NumericString(),\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString()\n                        ]\n                    })\n                ]\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                name: (names.organization_name || EMPTY_STRING),\n                isHexOnly: true\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                optional: true,\n                name: (names.numeric_user_identifier || EMPTY_STRING),\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 4\n                },\n                isHexOnly: true\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                name: (names.personal_name || EMPTY_STRING),\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 5\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: 0\n                        },\n                        isHexOnly: true\n                    }),\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                        optional: true,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: 1\n                        },\n                        isHexOnly: true\n                    }),\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                        optional: true,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: 2\n                        },\n                        isHexOnly: true\n                    }),\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                        optional: true,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: 3\n                        },\n                        isHexOnly: true\n                    })\n                ]\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                name: (names.organizational_unit_names || EMPTY_STRING),\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 6\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                        value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString()\n                    })\n                ]\n            })\n        ]\n    }));\n}\nfunction builtInDomainDefinedAttributes(optional = false) {\n    return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n        optional,\n        value: [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString(),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString()\n        ]\n    }));\n}\nfunction extensionAttributes(optional = false) {\n    return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n        optional,\n        value: [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                isHexOnly: true\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any()]\n            })\n        ]\n    }));\n}\nclass GeneralName extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TYPE$4, GeneralName.defaultValues(TYPE$4));\n        this.value = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUE$5, GeneralName.defaultValues(VALUE$5));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE$4:\n                return 9;\n            case VALUE$5:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TYPE$4:\n                return (memberValue === GeneralName.defaultValues(memberName));\n            case VALUE$5:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier(),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any()]\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 3\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: [\n                        builtInStandardAttributes((names.builtInStandardAttributes || {}), false),\n                        builtInDomainDefinedAttributes(true),\n                        extensionAttributes(true)\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 4\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: [RelativeDistinguishedNames.schema(names.directoryName || {})]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 5\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            optional: true,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: [\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                                    value: [\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.TeletexString(),\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString(),\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.UniversalString(),\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Utf8String(),\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.BmpString()\n                                    ]\n                                })\n                            ]\n                        }),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: [\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                                    value: [\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.TeletexString(),\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString(),\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.UniversalString(),\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Utf8String(),\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.BmpString()\n                                    ]\n                                })\n                            ]\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 6\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 7\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 8\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            \"blockName\",\n            \"otherName\",\n            \"rfc822Name\",\n            \"dNSName\",\n            \"x400Address\",\n            \"directoryName\",\n            \"ediPartyName\",\n            \"uniformResourceIdentifier\",\n            \"iPAddress\",\n            \"registeredID\"\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, GeneralName.schema({\n            names: {\n                blockName: \"blockName\",\n                otherName: \"otherName\",\n                rfc822Name: \"rfc822Name\",\n                dNSName: \"dNSName\",\n                x400Address: \"x400Address\",\n                directoryName: {\n                    names: {\n                        blockName: \"directoryName\"\n                    }\n                },\n                ediPartyName: \"ediPartyName\",\n                uniformResourceIdentifier: \"uniformResourceIdentifier\",\n                iPAddress: \"iPAddress\",\n                registeredID: \"registeredID\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.type = asn1.result.blockName.idBlock.tagNumber;\n        switch (this.type) {\n            case 0:\n                this.value = asn1.result.blockName;\n                break;\n            case 1:\n            case 2:\n            case 6:\n                {\n                    const value = asn1.result.blockName;\n                    value.idBlock.tagClass = 1;\n                    value.idBlock.tagNumber = 22;\n                    const valueBER = value.toBER(false);\n                    const asnValue = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(valueBER);\n                    AsnError.assert(asnValue, \"GeneralName value\");\n                    this.value = asnValue.result.valueBlock.value;\n                }\n                break;\n            case 3:\n                this.value = asn1.result.blockName;\n                break;\n            case 4:\n                this.value = new RelativeDistinguishedNames({ schema: asn1.result.directoryName });\n                break;\n            case 5:\n                this.value = asn1.result.ediPartyName;\n                break;\n            case 7:\n                this.value = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: asn1.result.blockName.valueBlock.valueHex });\n                break;\n            case 8:\n                {\n                    const value = asn1.result.blockName;\n                    value.idBlock.tagClass = 1;\n                    value.idBlock.tagNumber = 6;\n                    const valueBER = value.toBER(false);\n                    const asnValue = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(valueBER);\n                    AsnError.assert(asnValue, \"GeneralName registeredID\");\n                    this.value = asnValue.result.valueBlock.toString();\n                }\n                break;\n        }\n    }\n    toSchema() {\n        switch (this.type) {\n            case 0:\n            case 3:\n            case 5:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: this.type\n                    },\n                    value: [\n                        this.value\n                    ]\n                });\n            case 1:\n            case 2:\n            case 6:\n                {\n                    const value = new asn1js__WEBPACK_IMPORTED_MODULE_0__.IA5String({ value: this.value });\n                    value.idBlock.tagClass = 3;\n                    value.idBlock.tagNumber = this.type;\n                    return value;\n                }\n            case 4:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 4\n                    },\n                    value: [this.value.toSchema()]\n                });\n            case 7:\n                {\n                    const value = this.value;\n                    value.idBlock.tagClass = 3;\n                    value.idBlock.tagNumber = this.type;\n                    return value;\n                }\n            case 8:\n                {\n                    const value = new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.value });\n                    value.idBlock.tagClass = 3;\n                    value.idBlock.tagNumber = this.type;\n                    return value;\n                }\n            default:\n                return GeneralName.schema();\n        }\n    }\n    toJSON() {\n        const _object = {\n            type: this.type,\n            value: EMPTY_STRING\n        };\n        if ((typeof this.value) === \"string\")\n            _object.value = this.value;\n        else {\n            try {\n                _object.value = this.value.toJSON();\n            }\n            catch (ex) {\n            }\n        }\n        return _object;\n    }\n}\nGeneralName.CLASS_NAME = \"GeneralName\";\n\nconst ACCESS_METHOD = \"accessMethod\";\nconst ACCESS_LOCATION = \"accessLocation\";\nconst CLEAR_PROPS$1v = [\n    ACCESS_METHOD,\n    ACCESS_LOCATION,\n];\nclass AccessDescription extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.accessMethod = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ACCESS_METHOD, AccessDescription.defaultValues(ACCESS_METHOD));\n        this.accessLocation = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ACCESS_LOCATION, AccessDescription.defaultValues(ACCESS_LOCATION));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ACCESS_METHOD:\n                return EMPTY_STRING;\n            case ACCESS_LOCATION:\n                return new GeneralName();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.accessMethod || EMPTY_STRING) }),\n                GeneralName.schema(names.accessLocation || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1v);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AccessDescription.schema({\n            names: {\n                accessMethod: ACCESS_METHOD,\n                accessLocation: {\n                    names: {\n                        blockName: ACCESS_LOCATION\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.accessMethod = asn1.result.accessMethod.valueBlock.toString();\n        this.accessLocation = new GeneralName({ schema: asn1.result.accessLocation });\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.accessMethod }),\n                this.accessLocation.toSchema()\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            accessMethod: this.accessMethod,\n            accessLocation: this.accessLocation.toJSON()\n        };\n    }\n}\nAccessDescription.CLASS_NAME = \"AccessDescription\";\n\nconst SECONDS = \"seconds\";\nconst MILLIS = \"millis\";\nconst MICROS = \"micros\";\nclass Accuracy extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (SECONDS in parameters) {\n            this.seconds = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SECONDS, Accuracy.defaultValues(SECONDS));\n        }\n        if (MILLIS in parameters) {\n            this.millis = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MILLIS, Accuracy.defaultValues(MILLIS));\n        }\n        if (MICROS in parameters) {\n            this.micros = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MICROS, Accuracy.defaultValues(MICROS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SECONDS:\n            case MILLIS:\n            case MICROS:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SECONDS:\n            case MILLIS:\n            case MICROS:\n                return (memberValue === Accuracy.defaultValues(memberName));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            optional: true,\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n                    optional: true,\n                    name: (names.seconds || EMPTY_STRING)\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.millis || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.micros || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            SECONDS,\n            MILLIS,\n            MICROS,\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, Accuracy.schema({\n            names: {\n                seconds: SECONDS,\n                millis: MILLIS,\n                micros: MICROS,\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (\"seconds\" in asn1.result) {\n            this.seconds = asn1.result.seconds.valueBlock.valueDec;\n        }\n        if (\"millis\" in asn1.result) {\n            const intMillis = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: asn1.result.millis.valueBlock.valueHex });\n            this.millis = intMillis.valueBlock.valueDec;\n        }\n        if (\"micros\" in asn1.result) {\n            const intMicros = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: asn1.result.micros.valueBlock.valueHex });\n            this.micros = intMicros.valueBlock.valueDec;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.seconds !== undefined)\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.seconds }));\n        if (this.millis !== undefined) {\n            const intMillis = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.millis });\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                valueHex: intMillis.valueBlock.valueHexView\n            }));\n        }\n        if (this.micros !== undefined) {\n            const intMicros = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.micros });\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: intMicros.valueBlock.valueHexView\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const _object = {};\n        if (this.seconds !== undefined)\n            _object.seconds = this.seconds;\n        if (this.millis !== undefined)\n            _object.millis = this.millis;\n        if (this.micros !== undefined)\n            _object.micros = this.micros;\n        return _object;\n    }\n}\nAccuracy.CLASS_NAME = \"Accuracy\";\n\nconst ALGORITHM_ID = \"algorithmId\";\nconst ALGORITHM_PARAMS = \"algorithmParams\";\nconst ALGORITHM$2 = \"algorithm\";\nconst PARAMS = \"params\";\nconst CLEAR_PROPS$1u = [\n    ALGORITHM$2,\n    PARAMS\n];\nclass AlgorithmIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.algorithmId = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ALGORITHM_ID, AlgorithmIdentifier.defaultValues(ALGORITHM_ID));\n        if (ALGORITHM_PARAMS in parameters) {\n            this.algorithmParams = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ALGORITHM_PARAMS, AlgorithmIdentifier.defaultValues(ALGORITHM_PARAMS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ALGORITHM_ID:\n                return EMPTY_STRING;\n            case ALGORITHM_PARAMS:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ALGORITHM_ID:\n                return (memberValue === EMPTY_STRING);\n            case ALGORITHM_PARAMS:\n                return (memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            optional: (names.optional || false),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.algorithmIdentifier || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.algorithmParams || EMPTY_STRING), optional: true })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1u);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AlgorithmIdentifier.schema({\n            names: {\n                algorithmIdentifier: ALGORITHM$2,\n                algorithmParams: PARAMS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.algorithmId = asn1.result.algorithm.valueBlock.toString();\n        if (PARAMS in asn1.result) {\n            this.algorithmParams = asn1.result.params;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.algorithmId }));\n        if (this.algorithmParams && !(this.algorithmParams instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any)) {\n            outputArray.push(this.algorithmParams);\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {\n            algorithmId: this.algorithmId\n        };\n        if (this.algorithmParams && !(this.algorithmParams instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any)) {\n            object.algorithmParams = this.algorithmParams.toJSON();\n        }\n        return object;\n    }\n    isEqual(algorithmIdentifier) {\n        if (!(algorithmIdentifier instanceof AlgorithmIdentifier)) {\n            return false;\n        }\n        if (this.algorithmId !== algorithmIdentifier.algorithmId) {\n            return false;\n        }\n        if (this.algorithmParams) {\n            if (algorithmIdentifier.algorithmParams) {\n                return JSON.stringify(this.algorithmParams) === JSON.stringify(algorithmIdentifier.algorithmParams);\n            }\n            return false;\n        }\n        if (algorithmIdentifier.algorithmParams) {\n            return false;\n        }\n        return true;\n    }\n}\nAlgorithmIdentifier.CLASS_NAME = \"AlgorithmIdentifier\";\n\nconst ALT_NAMES = \"altNames\";\nconst CLEAR_PROPS$1t = [\n    ALT_NAMES\n];\nclass AltName extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.altNames = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ALT_NAMES, AltName.defaultValues(ALT_NAMES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ALT_NAMES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.altNames || EMPTY_STRING),\n                    value: GeneralName.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1t);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AltName.schema({\n            names: {\n                altNames: ALT_NAMES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (ALT_NAMES in asn1.result) {\n            this.altNames = Array.from(asn1.result.altNames, element => new GeneralName({ schema: element }));\n        }\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.altNames, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            altNames: Array.from(this.altNames, o => o.toJSON())\n        };\n    }\n}\nAltName.CLASS_NAME = \"AltName\";\n\nconst TYPE$3 = \"type\";\nconst VALUES$1 = \"values\";\nconst CLEAR_PROPS$1s = [\n    TYPE$3,\n    VALUES$1\n];\nclass Attribute extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TYPE$3, Attribute.defaultValues(TYPE$3));\n        this.values = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUES$1, Attribute.defaultValues(VALUES$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE$3:\n                return EMPTY_STRING;\n            case VALUES$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TYPE$3:\n                return (memberValue === EMPTY_STRING);\n            case VALUES$1:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.type || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    name: (names.setName || EMPTY_STRING),\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.values || EMPTY_STRING),\n                            value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1s);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, Attribute.schema({\n            names: {\n                type: TYPE$3,\n                values: VALUES$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.type = asn1.result.type.valueBlock.toString();\n        this.values = asn1.result.values;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.type }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    value: this.values\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            type: this.type,\n            values: Array.from(this.values, o => o.toJSON())\n        };\n    }\n}\nAttribute.CLASS_NAME = \"Attribute\";\n\nconst NOT_BEFORE_TIME = \"notBeforeTime\";\nconst NOT_AFTER_TIME = \"notAfterTime\";\nconst CLEAR_PROPS$1r = [\n    NOT_BEFORE_TIME,\n    NOT_AFTER_TIME,\n];\nclass AttCertValidityPeriod extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.notBeforeTime = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NOT_BEFORE_TIME, AttCertValidityPeriod.defaultValues(NOT_BEFORE_TIME));\n        this.notAfterTime = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NOT_AFTER_TIME, AttCertValidityPeriod.defaultValues(NOT_AFTER_TIME));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case NOT_BEFORE_TIME:\n            case NOT_AFTER_TIME:\n                return new Date(0, 0, 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ name: (names.notBeforeTime || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ name: (names.notAfterTime || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1r);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AttCertValidityPeriod.schema({\n            names: {\n                notBeforeTime: NOT_BEFORE_TIME,\n                notAfterTime: NOT_AFTER_TIME\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.notBeforeTime = asn1.result.notBeforeTime.toDate();\n        this.notAfterTime = asn1.result.notAfterTime.toDate();\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueDate: this.notBeforeTime }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueDate: this.notAfterTime }),\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            notBeforeTime: this.notBeforeTime,\n            notAfterTime: this.notAfterTime\n        };\n    }\n}\nAttCertValidityPeriod.CLASS_NAME = \"AttCertValidityPeriod\";\n\nconst NAMES = \"names\";\nconst GENERAL_NAMES = \"generalNames\";\nclass GeneralNames extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NAMES, GeneralNames.defaultValues(NAMES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case \"names\":\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}, optional = false) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NAMES, {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            optional,\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.generalNames || EMPTY_STRING),\n                    value: GeneralName.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            NAMES,\n            GENERAL_NAMES\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, GeneralNames.schema({\n            names: {\n                blockName: NAMES,\n                generalNames: GENERAL_NAMES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.names = Array.from(asn1.result.generalNames, element => new GeneralName({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.names, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            names: Array.from(this.names, o => o.toJSON())\n        };\n    }\n}\nGeneralNames.CLASS_NAME = \"GeneralNames\";\n\nconst id_SubjectDirectoryAttributes = \"2.5.29.9\";\nconst id_SubjectKeyIdentifier = \"2.5.29.14\";\nconst id_KeyUsage = \"2.5.29.15\";\nconst id_PrivateKeyUsagePeriod = \"2.5.29.16\";\nconst id_SubjectAltName = \"2.5.29.17\";\nconst id_IssuerAltName = \"2.5.29.18\";\nconst id_BasicConstraints = \"2.5.29.19\";\nconst id_CRLNumber = \"2.5.29.20\";\nconst id_BaseCRLNumber = \"2.5.29.27\";\nconst id_CRLReason = \"2.5.29.21\";\nconst id_InvalidityDate = \"2.5.29.24\";\nconst id_IssuingDistributionPoint = \"2.5.29.28\";\nconst id_CertificateIssuer = \"2.5.29.29\";\nconst id_NameConstraints = \"2.5.29.30\";\nconst id_CRLDistributionPoints = \"2.5.29.31\";\nconst id_FreshestCRL = \"2.5.29.46\";\nconst id_CertificatePolicies = \"2.5.29.32\";\nconst id_AnyPolicy = \"2.5.29.32.0\";\nconst id_MicrosoftAppPolicies = \"1.3.6.1.4.1.311.21.10\";\nconst id_PolicyMappings = \"2.5.29.33\";\nconst id_AuthorityKeyIdentifier = \"2.5.29.35\";\nconst id_PolicyConstraints = \"2.5.29.36\";\nconst id_ExtKeyUsage = \"2.5.29.37\";\nconst id_InhibitAnyPolicy = \"2.5.29.54\";\nconst id_AuthorityInfoAccess = \"1.3.6.1.5.5.7.1.1\";\nconst id_SubjectInfoAccess = \"1.3.6.1.5.5.7.1.11\";\nconst id_SignedCertificateTimestampList = \"1.3.6.1.4.1.11129.2.4.2\";\nconst id_MicrosoftCertTemplateV1 = \"1.3.6.1.4.1.311.20.2\";\nconst id_MicrosoftPrevCaCertHash = \"1.3.6.1.4.1.311.21.2\";\nconst id_MicrosoftCertTemplateV2 = \"1.3.6.1.4.1.311.21.7\";\nconst id_MicrosoftCaVersion = \"1.3.6.1.4.1.311.21.1\";\nconst id_QCStatements = \"1.3.6.1.5.5.7.1.3\";\nconst id_ContentType_Data = \"1.2.840.113549.1.7.1\";\nconst id_ContentType_SignedData = \"1.2.840.113549.1.7.2\";\nconst id_ContentType_EnvelopedData = \"1.2.840.113549.1.7.3\";\nconst id_ContentType_EncryptedData = \"1.2.840.113549.1.7.6\";\nconst id_eContentType_TSTInfo = \"1.2.840.113549.1.9.16.1.4\";\nconst id_CertBag_X509Certificate = \"1.2.840.113549.1.9.22.1\";\nconst id_CertBag_SDSICertificate = \"1.2.840.113549.1.9.22.2\";\nconst id_CertBag_AttributeCertificate = \"1.2.840.113549.1.9.22.3\";\nconst id_CRLBag_X509CRL = \"1.2.840.113549.1.9.23.1\";\nconst id_pkix = \"1.3.6.1.5.5.7\";\nconst id_ad = `${id_pkix}.48`;\nconst id_PKIX_OCSP_Basic = `${id_ad}.1.1`;\nconst id_ad_caIssuers = `${id_ad}.2`;\nconst id_ad_ocsp = `${id_ad}.1`;\nconst id_sha1 = \"1.3.14.3.2.26\";\nconst id_sha256 = \"2.16.840.1.101.3.4.2.1\";\nconst id_sha384 = \"2.16.840.1.101.3.4.2.2\";\nconst id_sha512 = \"2.16.840.1.101.3.4.2.3\";\n\nconst KEY_IDENTIFIER$1 = \"keyIdentifier\";\nconst AUTHORITY_CERT_ISSUER = \"authorityCertIssuer\";\nconst AUTHORITY_CERT_SERIAL_NUMBER = \"authorityCertSerialNumber\";\nconst CLEAR_PROPS$1q = [\n    KEY_IDENTIFIER$1,\n    AUTHORITY_CERT_ISSUER,\n    AUTHORITY_CERT_SERIAL_NUMBER,\n];\nclass AuthorityKeyIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (KEY_IDENTIFIER$1 in parameters) {\n            this.keyIdentifier = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_IDENTIFIER$1, AuthorityKeyIdentifier.defaultValues(KEY_IDENTIFIER$1));\n        }\n        if (AUTHORITY_CERT_ISSUER in parameters) {\n            this.authorityCertIssuer = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, AUTHORITY_CERT_ISSUER, AuthorityKeyIdentifier.defaultValues(AUTHORITY_CERT_ISSUER));\n        }\n        if (AUTHORITY_CERT_SERIAL_NUMBER in parameters) {\n            this.authorityCertSerialNumber = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, AUTHORITY_CERT_SERIAL_NUMBER, AuthorityKeyIdentifier.defaultValues(AUTHORITY_CERT_SERIAL_NUMBER));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_IDENTIFIER$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case AUTHORITY_CERT_ISSUER:\n                return [];\n            case AUTHORITY_CERT_SERIAL_NUMBER:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.keyIdentifier || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.authorityCertIssuer || EMPTY_STRING),\n                            value: GeneralName.schema()\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.authorityCertSerialNumber || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1q);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AuthorityKeyIdentifier.schema({\n            names: {\n                keyIdentifier: KEY_IDENTIFIER$1,\n                authorityCertIssuer: AUTHORITY_CERT_ISSUER,\n                authorityCertSerialNumber: AUTHORITY_CERT_SERIAL_NUMBER\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (KEY_IDENTIFIER$1 in asn1.result)\n            this.keyIdentifier = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: asn1.result.keyIdentifier.valueBlock.valueHex });\n        if (AUTHORITY_CERT_ISSUER in asn1.result)\n            this.authorityCertIssuer = Array.from(asn1.result.authorityCertIssuer, o => new GeneralName({ schema: o }));\n        if (AUTHORITY_CERT_SERIAL_NUMBER in asn1.result)\n            this.authorityCertSerialNumber = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: asn1.result.authorityCertSerialNumber.valueBlock.valueHex });\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.keyIdentifier) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                valueHex: this.keyIdentifier.valueBlock.valueHexView\n            }));\n        }\n        if (this.authorityCertIssuer) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.authorityCertIssuer, o => o.toSchema())\n            }));\n        }\n        if (this.authorityCertSerialNumber) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                valueHex: this.authorityCertSerialNumber.valueBlock.valueHexView\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {};\n        if (this.keyIdentifier) {\n            object.keyIdentifier = this.keyIdentifier.toJSON();\n        }\n        if (this.authorityCertIssuer) {\n            object.authorityCertIssuer = Array.from(this.authorityCertIssuer, o => o.toJSON());\n        }\n        if (this.authorityCertSerialNumber) {\n            object.authorityCertSerialNumber = this.authorityCertSerialNumber.toJSON();\n        }\n        return object;\n    }\n}\nAuthorityKeyIdentifier.CLASS_NAME = \"AuthorityKeyIdentifier\";\n\nconst PATH_LENGTH_CONSTRAINT = \"pathLenConstraint\";\nconst CA = \"cA\";\nclass BasicConstraints extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.cA = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CA, false);\n        if (PATH_LENGTH_CONSTRAINT in parameters) {\n            this.pathLenConstraint = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PATH_LENGTH_CONSTRAINT, 0);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CA:\n                return false;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Boolean({\n                    optional: true,\n                    name: (names.cA || EMPTY_STRING)\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n                    optional: true,\n                    name: (names.pathLenConstraint || EMPTY_STRING)\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            CA,\n            PATH_LENGTH_CONSTRAINT\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, BasicConstraints.schema({\n            names: {\n                cA: CA,\n                pathLenConstraint: PATH_LENGTH_CONSTRAINT\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (CA in asn1.result) {\n            this.cA = asn1.result.cA.valueBlock.value;\n        }\n        if (PATH_LENGTH_CONSTRAINT in asn1.result) {\n            if (asn1.result.pathLenConstraint.valueBlock.isHexOnly) {\n                this.pathLenConstraint = asn1.result.pathLenConstraint;\n            }\n            else {\n                this.pathLenConstraint = asn1.result.pathLenConstraint.valueBlock.valueDec;\n            }\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.cA !== BasicConstraints.defaultValues(CA))\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Boolean({ value: this.cA }));\n        if (PATH_LENGTH_CONSTRAINT in this) {\n            if (this.pathLenConstraint instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer) {\n                outputArray.push(this.pathLenConstraint);\n            }\n            else {\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.pathLenConstraint }));\n            }\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {};\n        if (this.cA !== BasicConstraints.defaultValues(CA)) {\n            object.cA = this.cA;\n        }\n        if (PATH_LENGTH_CONSTRAINT in this) {\n            if (this.pathLenConstraint instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer) {\n                object.pathLenConstraint = this.pathLenConstraint.toJSON();\n            }\n            else {\n                object.pathLenConstraint = this.pathLenConstraint;\n            }\n        }\n        return object;\n    }\n}\nBasicConstraints.CLASS_NAME = \"BasicConstraints\";\n\nconst CERTIFICATE_INDEX = \"certificateIndex\";\nconst KEY_INDEX = \"keyIndex\";\nclass CAVersion extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certificateIndex = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERTIFICATE_INDEX, CAVersion.defaultValues(CERTIFICATE_INDEX));\n        this.keyIndex = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_INDEX, CAVersion.defaultValues(KEY_INDEX));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERTIFICATE_INDEX:\n            case KEY_INDEX:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer());\n    }\n    fromSchema(schema) {\n        if (schema.constructor.blockName() !== asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer.blockName()) {\n            throw new Error(\"Object's schema was not verified against input data for CAVersion\");\n        }\n        let value = schema.valueBlock.valueHex.slice(0);\n        const valueView = new Uint8Array(value);\n        switch (true) {\n            case (value.byteLength < 4):\n                {\n                    const tempValue = new ArrayBuffer(4);\n                    const tempValueView = new Uint8Array(tempValue);\n                    tempValueView.set(valueView, 4 - value.byteLength);\n                    value = tempValue.slice(0);\n                }\n                break;\n            case (value.byteLength > 4):\n                {\n                    const tempValue = new ArrayBuffer(4);\n                    const tempValueView = new Uint8Array(tempValue);\n                    tempValueView.set(valueView.slice(0, 4));\n                    value = tempValue.slice(0);\n                }\n                break;\n        }\n        const keyIndexBuffer = value.slice(0, 2);\n        const keyIndexView8 = new Uint8Array(keyIndexBuffer);\n        let temp = keyIndexView8[0];\n        keyIndexView8[0] = keyIndexView8[1];\n        keyIndexView8[1] = temp;\n        const keyIndexView16 = new Uint16Array(keyIndexBuffer);\n        this.keyIndex = keyIndexView16[0];\n        const certificateIndexBuffer = value.slice(2);\n        const certificateIndexView8 = new Uint8Array(certificateIndexBuffer);\n        temp = certificateIndexView8[0];\n        certificateIndexView8[0] = certificateIndexView8[1];\n        certificateIndexView8[1] = temp;\n        const certificateIndexView16 = new Uint16Array(certificateIndexBuffer);\n        this.certificateIndex = certificateIndexView16[0];\n    }\n    toSchema() {\n        const certificateIndexBuffer = new ArrayBuffer(2);\n        const certificateIndexView = new Uint16Array(certificateIndexBuffer);\n        certificateIndexView[0] = this.certificateIndex;\n        const certificateIndexView8 = new Uint8Array(certificateIndexBuffer);\n        let temp = certificateIndexView8[0];\n        certificateIndexView8[0] = certificateIndexView8[1];\n        certificateIndexView8[1] = temp;\n        const keyIndexBuffer = new ArrayBuffer(2);\n        const keyIndexView = new Uint16Array(keyIndexBuffer);\n        keyIndexView[0] = this.keyIndex;\n        const keyIndexView8 = new Uint8Array(keyIndexBuffer);\n        temp = keyIndexView8[0];\n        keyIndexView8[0] = keyIndexView8[1];\n        keyIndexView8[1] = temp;\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n            valueHex: pvutils__WEBPACK_IMPORTED_MODULE_2__.utilConcatBuf(keyIndexBuffer, certificateIndexBuffer)\n        }));\n    }\n    toJSON() {\n        return {\n            certificateIndex: this.certificateIndex,\n            keyIndex: this.keyIndex\n        };\n    }\n}\nCAVersion.CLASS_NAME = \"CAVersion\";\n\nconst POLICY_QUALIFIER_ID = \"policyQualifierId\";\nconst QUALIFIER = \"qualifier\";\nconst CLEAR_PROPS$1p = [\n    POLICY_QUALIFIER_ID,\n    QUALIFIER\n];\nclass PolicyQualifierInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.policyQualifierId = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, POLICY_QUALIFIER_ID, PolicyQualifierInfo.defaultValues(POLICY_QUALIFIER_ID));\n        this.qualifier = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, QUALIFIER, PolicyQualifierInfo.defaultValues(QUALIFIER));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case POLICY_QUALIFIER_ID:\n                return EMPTY_STRING;\n            case QUALIFIER:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.policyQualifierId || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.qualifier || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1p);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PolicyQualifierInfo.schema({\n            names: {\n                policyQualifierId: POLICY_QUALIFIER_ID,\n                qualifier: QUALIFIER\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.policyQualifierId = asn1.result.policyQualifierId.valueBlock.toString();\n        this.qualifier = asn1.result.qualifier;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.policyQualifierId }),\n                this.qualifier\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            policyQualifierId: this.policyQualifierId,\n            qualifier: this.qualifier.toJSON()\n        };\n    }\n}\nPolicyQualifierInfo.CLASS_NAME = \"PolicyQualifierInfo\";\n\nconst POLICY_IDENTIFIER = \"policyIdentifier\";\nconst POLICY_QUALIFIERS = \"policyQualifiers\";\nconst CLEAR_PROPS$1o = [\n    POLICY_IDENTIFIER,\n    POLICY_QUALIFIERS\n];\nclass PolicyInformation extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.policyIdentifier = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, POLICY_IDENTIFIER, PolicyInformation.defaultValues(POLICY_IDENTIFIER));\n        if (POLICY_QUALIFIERS in parameters) {\n            this.policyQualifiers = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, POLICY_QUALIFIERS, PolicyInformation.defaultValues(POLICY_QUALIFIERS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case POLICY_IDENTIFIER:\n                return EMPTY_STRING;\n            case POLICY_QUALIFIERS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.policyIdentifier || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    optional: true,\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.policyQualifiers || EMPTY_STRING),\n                            value: PolicyQualifierInfo.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1o);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PolicyInformation.schema({\n            names: {\n                policyIdentifier: POLICY_IDENTIFIER,\n                policyQualifiers: POLICY_QUALIFIERS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.policyIdentifier = asn1.result.policyIdentifier.valueBlock.toString();\n        if (POLICY_QUALIFIERS in asn1.result) {\n            this.policyQualifiers = Array.from(asn1.result.policyQualifiers, element => new PolicyQualifierInfo({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.policyIdentifier }));\n        if (this.policyQualifiers) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: Array.from(this.policyQualifiers, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            policyIdentifier: this.policyIdentifier\n        };\n        if (this.policyQualifiers)\n            res.policyQualifiers = Array.from(this.policyQualifiers, o => o.toJSON());\n        return res;\n    }\n}\nPolicyInformation.CLASS_NAME = \"PolicyInformation\";\n\nconst CERTIFICATE_POLICIES = \"certificatePolicies\";\nconst CLEAR_PROPS$1n = [\n    CERTIFICATE_POLICIES,\n];\nclass CertificatePolicies extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certificatePolicies = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERTIFICATE_POLICIES, CertificatePolicies.defaultValues(CERTIFICATE_POLICIES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERTIFICATE_POLICIES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.certificatePolicies || EMPTY_STRING),\n                    value: PolicyInformation.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1n);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, CertificatePolicies.schema({\n            names: {\n                certificatePolicies: CERTIFICATE_POLICIES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.certificatePolicies = Array.from(asn1.result.certificatePolicies, element => new PolicyInformation({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.certificatePolicies, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            certificatePolicies: Array.from(this.certificatePolicies, o => o.toJSON())\n        };\n    }\n}\nCertificatePolicies.CLASS_NAME = \"CertificatePolicies\";\n\nconst TEMPLATE_ID = \"templateID\";\nconst TEMPLATE_MAJOR_VERSION = \"templateMajorVersion\";\nconst TEMPLATE_MINOR_VERSION = \"templateMinorVersion\";\nconst CLEAR_PROPS$1m = [\n    TEMPLATE_ID,\n    TEMPLATE_MAJOR_VERSION,\n    TEMPLATE_MINOR_VERSION\n];\nclass CertificateTemplate extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.templateID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TEMPLATE_ID, CertificateTemplate.defaultValues(TEMPLATE_ID));\n        if (TEMPLATE_MAJOR_VERSION in parameters) {\n            this.templateMajorVersion = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TEMPLATE_MAJOR_VERSION, CertificateTemplate.defaultValues(TEMPLATE_MAJOR_VERSION));\n        }\n        if (TEMPLATE_MINOR_VERSION in parameters) {\n            this.templateMinorVersion = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TEMPLATE_MINOR_VERSION, CertificateTemplate.defaultValues(TEMPLATE_MINOR_VERSION));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TEMPLATE_ID:\n                return EMPTY_STRING;\n            case TEMPLATE_MAJOR_VERSION:\n            case TEMPLATE_MINOR_VERSION:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.templateID || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n                    name: (names.templateMajorVersion || EMPTY_STRING),\n                    optional: true\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n                    name: (names.templateMinorVersion || EMPTY_STRING),\n                    optional: true\n                }),\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1m);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, CertificateTemplate.schema({\n            names: {\n                templateID: TEMPLATE_ID,\n                templateMajorVersion: TEMPLATE_MAJOR_VERSION,\n                templateMinorVersion: TEMPLATE_MINOR_VERSION\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.templateID = asn1.result.templateID.valueBlock.toString();\n        if (TEMPLATE_MAJOR_VERSION in asn1.result) {\n            this.templateMajorVersion = asn1.result.templateMajorVersion.valueBlock.valueDec;\n        }\n        if (TEMPLATE_MINOR_VERSION in asn1.result) {\n            this.templateMinorVersion = asn1.result.templateMinorVersion.valueBlock.valueDec;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.templateID }));\n        if (TEMPLATE_MAJOR_VERSION in this) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.templateMajorVersion }));\n        }\n        if (TEMPLATE_MINOR_VERSION in this) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.templateMinorVersion }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            templateID: this.templateID\n        };\n        if (TEMPLATE_MAJOR_VERSION in this)\n            res.templateMajorVersion = this.templateMajorVersion;\n        if (TEMPLATE_MINOR_VERSION in this)\n            res.templateMinorVersion = this.templateMinorVersion;\n        return res;\n    }\n}\n\nconst DISTRIBUTION_POINT$1 = \"distributionPoint\";\nconst DISTRIBUTION_POINT_NAMES$1 = \"distributionPointNames\";\nconst REASONS = \"reasons\";\nconst CRL_ISSUER = \"cRLIssuer\";\nconst CRL_ISSUER_NAMES = \"cRLIssuerNames\";\nconst CLEAR_PROPS$1l = [\n    DISTRIBUTION_POINT$1,\n    DISTRIBUTION_POINT_NAMES$1,\n    REASONS,\n    CRL_ISSUER,\n    CRL_ISSUER_NAMES,\n];\nclass DistributionPoint extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (DISTRIBUTION_POINT$1 in parameters) {\n            this.distributionPoint = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DISTRIBUTION_POINT$1, DistributionPoint.defaultValues(DISTRIBUTION_POINT$1));\n        }\n        if (REASONS in parameters) {\n            this.reasons = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, REASONS, DistributionPoint.defaultValues(REASONS));\n        }\n        if (CRL_ISSUER in parameters) {\n            this.cRLIssuer = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRL_ISSUER, DistributionPoint.defaultValues(CRL_ISSUER));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DISTRIBUTION_POINT$1:\n                return [];\n            case REASONS:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            case CRL_ISSUER:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                            value: [\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                    name: (names.distributionPoint || EMPTY_STRING),\n                                    optional: true,\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    },\n                                    value: [\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                                            name: (names.distributionPointNames || EMPTY_STRING),\n                                            value: GeneralName.schema()\n                                        })\n                                    ]\n                                }),\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                    name: (names.distributionPoint || EMPTY_STRING),\n                                    optional: true,\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 1\n                                    },\n                                    value: RelativeDistinguishedNames.schema().valueBlock.value\n                                })\n                            ]\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.reasons || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.cRLIssuer || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.cRLIssuerNames || EMPTY_STRING),\n                            value: GeneralName.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1l);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, DistributionPoint.schema({\n            names: {\n                distributionPoint: DISTRIBUTION_POINT$1,\n                distributionPointNames: DISTRIBUTION_POINT_NAMES$1,\n                reasons: REASONS,\n                cRLIssuer: CRL_ISSUER,\n                cRLIssuerNames: CRL_ISSUER_NAMES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (DISTRIBUTION_POINT$1 in asn1.result) {\n            if (asn1.result.distributionPoint.idBlock.tagNumber === 0) {\n                this.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({ schema: element }));\n            }\n            if (asn1.result.distributionPoint.idBlock.tagNumber === 1) {\n                this.distributionPoint = new RelativeDistinguishedNames({\n                    schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                        value: asn1.result.distributionPoint.valueBlock.value\n                    })\n                });\n            }\n        }\n        if (REASONS in asn1.result) {\n            this.reasons = new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ valueHex: asn1.result.reasons.valueBlock.valueHex });\n        }\n        if (CRL_ISSUER in asn1.result) {\n            this.cRLIssuer = Array.from(asn1.result.cRLIssuerNames, element => new GeneralName({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.distributionPoint) {\n            let internalValue;\n            if (this.distributionPoint instanceof Array) {\n                internalValue = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: Array.from(this.distributionPoint, o => o.toSchema())\n                });\n            }\n            else {\n                internalValue = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [this.distributionPoint.toSchema()]\n                });\n            }\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [internalValue]\n            }));\n        }\n        if (this.reasons) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: this.reasons.valueBlock.valueHexView\n            }));\n        }\n        if (this.cRLIssuer) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                value: Array.from(this.cRLIssuer, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {};\n        if (this.distributionPoint) {\n            if (this.distributionPoint instanceof Array) {\n                object.distributionPoint = Array.from(this.distributionPoint, o => o.toJSON());\n            }\n            else {\n                object.distributionPoint = this.distributionPoint.toJSON();\n            }\n        }\n        if (this.reasons) {\n            object.reasons = this.reasons.toJSON();\n        }\n        if (this.cRLIssuer) {\n            object.cRLIssuer = Array.from(this.cRLIssuer, o => o.toJSON());\n        }\n        return object;\n    }\n}\nDistributionPoint.CLASS_NAME = \"DistributionPoint\";\n\nconst DISTRIBUTION_POINTS = \"distributionPoints\";\nconst CLEAR_PROPS$1k = [\n    DISTRIBUTION_POINTS\n];\nclass CRLDistributionPoints extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.distributionPoints = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DISTRIBUTION_POINTS, CRLDistributionPoints.defaultValues(DISTRIBUTION_POINTS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DISTRIBUTION_POINTS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.distributionPoints || EMPTY_STRING),\n                    value: DistributionPoint.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1k);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, CRLDistributionPoints.schema({\n            names: {\n                distributionPoints: DISTRIBUTION_POINTS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.distributionPoints = Array.from(asn1.result.distributionPoints, element => new DistributionPoint({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.distributionPoints, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            distributionPoints: Array.from(this.distributionPoints, o => o.toJSON())\n        };\n    }\n}\nCRLDistributionPoints.CLASS_NAME = \"CRLDistributionPoints\";\n\nconst KEY_PURPOSES = \"keyPurposes\";\nconst CLEAR_PROPS$1j = [\n    KEY_PURPOSES,\n];\nclass ExtKeyUsage extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyPurposes = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_PURPOSES, ExtKeyUsage.defaultValues(KEY_PURPOSES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_PURPOSES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.keyPurposes || EMPTY_STRING),\n                    value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1j);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, ExtKeyUsage.schema({\n            names: {\n                keyPurposes: KEY_PURPOSES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyPurposes = Array.from(asn1.result.keyPurposes, (element) => element.valueBlock.toString());\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.keyPurposes, element => new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: element }))\n        }));\n    }\n    toJSON() {\n        return {\n            keyPurposes: Array.from(this.keyPurposes)\n        };\n    }\n}\nExtKeyUsage.CLASS_NAME = \"ExtKeyUsage\";\n\nconst ACCESS_DESCRIPTIONS = \"accessDescriptions\";\nclass InfoAccess extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.accessDescriptions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ACCESS_DESCRIPTIONS, InfoAccess.defaultValues(ACCESS_DESCRIPTIONS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ACCESS_DESCRIPTIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.accessDescriptions || EMPTY_STRING),\n                    value: AccessDescription.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            ACCESS_DESCRIPTIONS\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, InfoAccess.schema({\n            names: {\n                accessDescriptions: ACCESS_DESCRIPTIONS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.accessDescriptions = Array.from(asn1.result.accessDescriptions, element => new AccessDescription({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.accessDescriptions, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            accessDescriptions: Array.from(this.accessDescriptions, o => o.toJSON())\n        };\n    }\n}\nInfoAccess.CLASS_NAME = \"InfoAccess\";\n\nconst DISTRIBUTION_POINT = \"distributionPoint\";\nconst DISTRIBUTION_POINT_NAMES = \"distributionPointNames\";\nconst ONLY_CONTAINS_USER_CERTS = \"onlyContainsUserCerts\";\nconst ONLY_CONTAINS_CA_CERTS = \"onlyContainsCACerts\";\nconst ONLY_SOME_REASON = \"onlySomeReasons\";\nconst INDIRECT_CRL = \"indirectCRL\";\nconst ONLY_CONTAINS_ATTRIBUTE_CERTS = \"onlyContainsAttributeCerts\";\nconst CLEAR_PROPS$1i = [\n    DISTRIBUTION_POINT,\n    DISTRIBUTION_POINT_NAMES,\n    ONLY_CONTAINS_USER_CERTS,\n    ONLY_CONTAINS_CA_CERTS,\n    ONLY_SOME_REASON,\n    INDIRECT_CRL,\n    ONLY_CONTAINS_ATTRIBUTE_CERTS,\n];\nclass IssuingDistributionPoint extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (DISTRIBUTION_POINT in parameters) {\n            this.distributionPoint = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DISTRIBUTION_POINT, IssuingDistributionPoint.defaultValues(DISTRIBUTION_POINT));\n        }\n        this.onlyContainsUserCerts = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ONLY_CONTAINS_USER_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS));\n        this.onlyContainsCACerts = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ONLY_CONTAINS_CA_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS));\n        if (ONLY_SOME_REASON in parameters) {\n            this.onlySomeReasons = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ONLY_SOME_REASON, IssuingDistributionPoint.defaultValues(ONLY_SOME_REASON));\n        }\n        this.indirectCRL = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, INDIRECT_CRL, IssuingDistributionPoint.defaultValues(INDIRECT_CRL));\n        this.onlyContainsAttributeCerts = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ONLY_CONTAINS_ATTRIBUTE_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DISTRIBUTION_POINT:\n                return [];\n            case ONLY_CONTAINS_USER_CERTS:\n                return false;\n            case ONLY_CONTAINS_CA_CERTS:\n                return false;\n            case ONLY_SOME_REASON:\n                return 0;\n            case INDIRECT_CRL:\n                return false;\n            case ONLY_CONTAINS_ATTRIBUTE_CERTS:\n                return false;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                            value: [\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                    name: (names.distributionPoint || EMPTY_STRING),\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    },\n                                    value: [\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                                            name: (names.distributionPointNames || EMPTY_STRING),\n                                            value: GeneralName.schema()\n                                        })\n                                    ]\n                                }),\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                    name: (names.distributionPoint || EMPTY_STRING),\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 1\n                                    },\n                                    value: RelativeDistinguishedNames.schema().valueBlock.value\n                                })\n                            ]\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.onlyContainsUserCerts || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.onlyContainsCACerts || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.onlySomeReasons || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 3\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.indirectCRL || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 4\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.onlyContainsAttributeCerts || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 5\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1i);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, IssuingDistributionPoint.schema({\n            names: {\n                distributionPoint: DISTRIBUTION_POINT,\n                distributionPointNames: DISTRIBUTION_POINT_NAMES,\n                onlyContainsUserCerts: ONLY_CONTAINS_USER_CERTS,\n                onlyContainsCACerts: ONLY_CONTAINS_CA_CERTS,\n                onlySomeReasons: ONLY_SOME_REASON,\n                indirectCRL: INDIRECT_CRL,\n                onlyContainsAttributeCerts: ONLY_CONTAINS_ATTRIBUTE_CERTS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (DISTRIBUTION_POINT in asn1.result) {\n            switch (true) {\n                case (asn1.result.distributionPoint.idBlock.tagNumber === 0):\n                    this.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({ schema: element }));\n                    break;\n                case (asn1.result.distributionPoint.idBlock.tagNumber === 1):\n                    {\n                        this.distributionPoint = new RelativeDistinguishedNames({\n                            schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                                value: asn1.result.distributionPoint.valueBlock.value\n                            })\n                        });\n                    }\n                    break;\n                default:\n                    throw new Error(\"Unknown tagNumber for distributionPoint: {$asn1.result.distributionPoint.idBlock.tagNumber}\");\n            }\n        }\n        if (ONLY_CONTAINS_USER_CERTS in asn1.result) {\n            const view = new Uint8Array(asn1.result.onlyContainsUserCerts.valueBlock.valueHex);\n            this.onlyContainsUserCerts = (view[0] !== 0x00);\n        }\n        if (ONLY_CONTAINS_CA_CERTS in asn1.result) {\n            const view = new Uint8Array(asn1.result.onlyContainsCACerts.valueBlock.valueHex);\n            this.onlyContainsCACerts = (view[0] !== 0x00);\n        }\n        if (ONLY_SOME_REASON in asn1.result) {\n            const view = new Uint8Array(asn1.result.onlySomeReasons.valueBlock.valueHex);\n            this.onlySomeReasons = view[0];\n        }\n        if (INDIRECT_CRL in asn1.result) {\n            const view = new Uint8Array(asn1.result.indirectCRL.valueBlock.valueHex);\n            this.indirectCRL = (view[0] !== 0x00);\n        }\n        if (ONLY_CONTAINS_ATTRIBUTE_CERTS in asn1.result) {\n            const view = new Uint8Array(asn1.result.onlyContainsAttributeCerts.valueBlock.valueHex);\n            this.onlyContainsAttributeCerts = (view[0] !== 0x00);\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.distributionPoint) {\n            let value;\n            if (this.distributionPoint instanceof Array) {\n                value = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: Array.from(this.distributionPoint, o => o.toSchema())\n                });\n            }\n            else {\n                value = this.distributionPoint.toSchema();\n                value.idBlock.tagClass = 3;\n                value.idBlock.tagNumber = 1;\n            }\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [value]\n            }));\n        }\n        if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS)) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: (new Uint8Array([0xFF])).buffer\n            }));\n        }\n        if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS)) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                valueHex: (new Uint8Array([0xFF])).buffer\n            }));\n        }\n        if (this.onlySomeReasons !== undefined) {\n            const buffer = new ArrayBuffer(1);\n            const view = new Uint8Array(buffer);\n            view[0] = this.onlySomeReasons;\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                valueHex: buffer\n            }));\n        }\n        if (this.indirectCRL !== IssuingDistributionPoint.defaultValues(INDIRECT_CRL)) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 4\n                },\n                valueHex: (new Uint8Array([0xFF])).buffer\n            }));\n        }\n        if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS)) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 5\n                },\n                valueHex: (new Uint8Array([0xFF])).buffer\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const obj = {};\n        if (this.distributionPoint) {\n            if (this.distributionPoint instanceof Array) {\n                obj.distributionPoint = Array.from(this.distributionPoint, o => o.toJSON());\n            }\n            else {\n                obj.distributionPoint = this.distributionPoint.toJSON();\n            }\n        }\n        if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS)) {\n            obj.onlyContainsUserCerts = this.onlyContainsUserCerts;\n        }\n        if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS)) {\n            obj.onlyContainsCACerts = this.onlyContainsCACerts;\n        }\n        if (ONLY_SOME_REASON in this) {\n            obj.onlySomeReasons = this.onlySomeReasons;\n        }\n        if (this.indirectCRL !== IssuingDistributionPoint.defaultValues(INDIRECT_CRL)) {\n            obj.indirectCRL = this.indirectCRL;\n        }\n        if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS)) {\n            obj.onlyContainsAttributeCerts = this.onlyContainsAttributeCerts;\n        }\n        return obj;\n    }\n}\nIssuingDistributionPoint.CLASS_NAME = \"IssuingDistributionPoint\";\n\nconst BASE = \"base\";\nconst MINIMUM = \"minimum\";\nconst MAXIMUM = \"maximum\";\nconst CLEAR_PROPS$1h = [\n    BASE,\n    MINIMUM,\n    MAXIMUM\n];\nclass GeneralSubtree extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.base = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, BASE, GeneralSubtree.defaultValues(BASE));\n        this.minimum = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MINIMUM, GeneralSubtree.defaultValues(MINIMUM));\n        if (MAXIMUM in parameters) {\n            this.maximum = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MAXIMUM, GeneralSubtree.defaultValues(MAXIMUM));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case BASE:\n                return new GeneralName();\n            case MINIMUM:\n                return 0;\n            case MAXIMUM:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                GeneralName.schema(names.base || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.minimum || EMPTY_STRING) })]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.maximum || EMPTY_STRING) })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1h);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, GeneralSubtree.schema({\n            names: {\n                base: {\n                    names: {\n                        blockName: BASE\n                    }\n                },\n                minimum: MINIMUM,\n                maximum: MAXIMUM\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.base = new GeneralName({ schema: asn1.result.base });\n        if (MINIMUM in asn1.result) {\n            if (asn1.result.minimum.valueBlock.isHexOnly)\n                this.minimum = asn1.result.minimum;\n            else\n                this.minimum = asn1.result.minimum.valueBlock.valueDec;\n        }\n        if (MAXIMUM in asn1.result) {\n            if (asn1.result.maximum.valueBlock.isHexOnly)\n                this.maximum = asn1.result.maximum;\n            else\n                this.maximum = asn1.result.maximum.valueBlock.valueDec;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.base.toSchema());\n        if (this.minimum !== 0) {\n            let valueMinimum = 0;\n            if (this.minimum instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer) {\n                valueMinimum = this.minimum;\n            }\n            else {\n                valueMinimum = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.minimum });\n            }\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [valueMinimum]\n            }));\n        }\n        if (MAXIMUM in this) {\n            let valueMaximum = 0;\n            if (this.maximum instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer) {\n                valueMaximum = this.maximum;\n            }\n            else {\n                valueMaximum = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.maximum });\n            }\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [valueMaximum]\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            base: this.base.toJSON()\n        };\n        if (this.minimum !== 0) {\n            if (typeof this.minimum === \"number\") {\n                res.minimum = this.minimum;\n            }\n            else {\n                res.minimum = this.minimum.toJSON();\n            }\n        }\n        if (this.maximum !== undefined) {\n            if (typeof this.maximum === \"number\") {\n                res.maximum = this.maximum;\n            }\n            else {\n                res.maximum = this.maximum.toJSON();\n            }\n        }\n        return res;\n    }\n}\nGeneralSubtree.CLASS_NAME = \"GeneralSubtree\";\n\nconst PERMITTED_SUBTREES = \"permittedSubtrees\";\nconst EXCLUDED_SUBTREES = \"excludedSubtrees\";\nconst CLEAR_PROPS$1g = [\n    PERMITTED_SUBTREES,\n    EXCLUDED_SUBTREES\n];\nclass NameConstraints extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (PERMITTED_SUBTREES in parameters) {\n            this.permittedSubtrees = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PERMITTED_SUBTREES, NameConstraints.defaultValues(PERMITTED_SUBTREES));\n        }\n        if (EXCLUDED_SUBTREES in parameters) {\n            this.excludedSubtrees = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXCLUDED_SUBTREES, NameConstraints.defaultValues(EXCLUDED_SUBTREES));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case PERMITTED_SUBTREES:\n            case EXCLUDED_SUBTREES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.permittedSubtrees || EMPTY_STRING),\n                            value: GeneralSubtree.schema()\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.excludedSubtrees || EMPTY_STRING),\n                            value: GeneralSubtree.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1g);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, NameConstraints.schema({\n            names: {\n                permittedSubtrees: PERMITTED_SUBTREES,\n                excludedSubtrees: EXCLUDED_SUBTREES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (PERMITTED_SUBTREES in asn1.result)\n            this.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, element => new GeneralSubtree({ schema: element }));\n        if (EXCLUDED_SUBTREES in asn1.result)\n            this.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, element => new GeneralSubtree({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.permittedSubtrees) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: Array.from(this.permittedSubtrees, o => o.toSchema())\n            }));\n        }\n        if (this.excludedSubtrees) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.excludedSubtrees, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {};\n        if (this.permittedSubtrees) {\n            object.permittedSubtrees = Array.from(this.permittedSubtrees, o => o.toJSON());\n        }\n        if (this.excludedSubtrees) {\n            object.excludedSubtrees = Array.from(this.excludedSubtrees, o => o.toJSON());\n        }\n        return object;\n    }\n}\nNameConstraints.CLASS_NAME = \"NameConstraints\";\n\nconst REQUIRE_EXPLICIT_POLICY = \"requireExplicitPolicy\";\nconst INHIBIT_POLICY_MAPPING = \"inhibitPolicyMapping\";\nconst CLEAR_PROPS$1f = [\n    REQUIRE_EXPLICIT_POLICY,\n    INHIBIT_POLICY_MAPPING,\n];\nclass PolicyConstraints extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (REQUIRE_EXPLICIT_POLICY in parameters) {\n            this.requireExplicitPolicy = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, REQUIRE_EXPLICIT_POLICY, PolicyConstraints.defaultValues(REQUIRE_EXPLICIT_POLICY));\n        }\n        if (INHIBIT_POLICY_MAPPING in parameters) {\n            this.inhibitPolicyMapping = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, INHIBIT_POLICY_MAPPING, PolicyConstraints.defaultValues(INHIBIT_POLICY_MAPPING));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case REQUIRE_EXPLICIT_POLICY:\n                return 0;\n            case INHIBIT_POLICY_MAPPING:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.requireExplicitPolicy || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.inhibitPolicyMapping || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1f);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PolicyConstraints.schema({\n            names: {\n                requireExplicitPolicy: REQUIRE_EXPLICIT_POLICY,\n                inhibitPolicyMapping: INHIBIT_POLICY_MAPPING\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (REQUIRE_EXPLICIT_POLICY in asn1.result) {\n            const field1 = asn1.result.requireExplicitPolicy;\n            field1.idBlock.tagClass = 1;\n            field1.idBlock.tagNumber = 2;\n            const ber1 = field1.toBER(false);\n            const int1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(ber1);\n            AsnError.assert(int1, \"Integer\");\n            this.requireExplicitPolicy = int1.result.valueBlock.valueDec;\n        }\n        if (INHIBIT_POLICY_MAPPING in asn1.result) {\n            const field2 = asn1.result.inhibitPolicyMapping;\n            field2.idBlock.tagClass = 1;\n            field2.idBlock.tagNumber = 2;\n            const ber2 = field2.toBER(false);\n            const int2 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(ber2);\n            AsnError.assert(int2, \"Integer\");\n            this.inhibitPolicyMapping = int2.result.valueBlock.valueDec;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (REQUIRE_EXPLICIT_POLICY in this) {\n            const int1 = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.requireExplicitPolicy });\n            int1.idBlock.tagClass = 3;\n            int1.idBlock.tagNumber = 0;\n            outputArray.push(int1);\n        }\n        if (INHIBIT_POLICY_MAPPING in this) {\n            const int2 = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.inhibitPolicyMapping });\n            int2.idBlock.tagClass = 3;\n            int2.idBlock.tagNumber = 1;\n            outputArray.push(int2);\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (REQUIRE_EXPLICIT_POLICY in this) {\n            res.requireExplicitPolicy = this.requireExplicitPolicy;\n        }\n        if (INHIBIT_POLICY_MAPPING in this) {\n            res.inhibitPolicyMapping = this.inhibitPolicyMapping;\n        }\n        return res;\n    }\n}\nPolicyConstraints.CLASS_NAME = \"PolicyConstraints\";\n\nconst ISSUER_DOMAIN_POLICY = \"issuerDomainPolicy\";\nconst SUBJECT_DOMAIN_POLICY = \"subjectDomainPolicy\";\nconst CLEAR_PROPS$1e = [\n    ISSUER_DOMAIN_POLICY,\n    SUBJECT_DOMAIN_POLICY\n];\nclass PolicyMapping extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.issuerDomainPolicy = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER_DOMAIN_POLICY, PolicyMapping.defaultValues(ISSUER_DOMAIN_POLICY));\n        this.subjectDomainPolicy = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SUBJECT_DOMAIN_POLICY, PolicyMapping.defaultValues(SUBJECT_DOMAIN_POLICY));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ISSUER_DOMAIN_POLICY:\n                return EMPTY_STRING;\n            case SUBJECT_DOMAIN_POLICY:\n                return EMPTY_STRING;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.issuerDomainPolicy || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.subjectDomainPolicy || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1e);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PolicyMapping.schema({\n            names: {\n                issuerDomainPolicy: ISSUER_DOMAIN_POLICY,\n                subjectDomainPolicy: SUBJECT_DOMAIN_POLICY\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.issuerDomainPolicy = asn1.result.issuerDomainPolicy.valueBlock.toString();\n        this.subjectDomainPolicy = asn1.result.subjectDomainPolicy.valueBlock.toString();\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.issuerDomainPolicy }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.subjectDomainPolicy })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            issuerDomainPolicy: this.issuerDomainPolicy,\n            subjectDomainPolicy: this.subjectDomainPolicy\n        };\n    }\n}\nPolicyMapping.CLASS_NAME = \"PolicyMapping\";\n\nconst MAPPINGS = \"mappings\";\nconst CLEAR_PROPS$1d = [\n    MAPPINGS,\n];\nclass PolicyMappings extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.mappings = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MAPPINGS, PolicyMappings.defaultValues(MAPPINGS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case MAPPINGS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.mappings || EMPTY_STRING),\n                    value: PolicyMapping.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1d);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PolicyMappings.schema({\n            names: {\n                mappings: MAPPINGS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.mappings = Array.from(asn1.result.mappings, element => new PolicyMapping({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.mappings, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            mappings: Array.from(this.mappings, o => o.toJSON())\n        };\n    }\n}\nPolicyMappings.CLASS_NAME = \"PolicyMappings\";\n\nconst NOT_BEFORE$1 = \"notBefore\";\nconst NOT_AFTER$1 = \"notAfter\";\nconst CLEAR_PROPS$1c = [\n    NOT_BEFORE$1,\n    NOT_AFTER$1\n];\nclass PrivateKeyUsagePeriod extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (NOT_BEFORE$1 in parameters) {\n            this.notBefore = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NOT_BEFORE$1, PrivateKeyUsagePeriod.defaultValues(NOT_BEFORE$1));\n        }\n        if (NOT_AFTER$1 in parameters) {\n            this.notAfter = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NOT_AFTER$1, PrivateKeyUsagePeriod.defaultValues(NOT_AFTER$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case NOT_BEFORE$1:\n                return new Date();\n            case NOT_AFTER$1:\n                return new Date();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.notBefore || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.notAfter || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1c);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PrivateKeyUsagePeriod.schema({\n            names: {\n                notBefore: NOT_BEFORE$1,\n                notAfter: NOT_AFTER$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (NOT_BEFORE$1 in asn1.result) {\n            const localNotBefore = new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime();\n            localNotBefore.fromBuffer(asn1.result.notBefore.valueBlock.valueHex);\n            this.notBefore = localNotBefore.toDate();\n        }\n        if (NOT_AFTER$1 in asn1.result) {\n            const localNotAfter = new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueHex: asn1.result.notAfter.valueBlock.valueHex });\n            localNotAfter.fromBuffer(asn1.result.notAfter.valueBlock.valueHex);\n            this.notAfter = localNotAfter.toDate();\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (NOT_BEFORE$1 in this) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                valueHex: (new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueDate: this.notBefore })).valueBlock.valueHexView\n            }));\n        }\n        if (NOT_AFTER$1 in this) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: (new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueDate: this.notAfter })).valueBlock.valueHexView\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (this.notBefore) {\n            res.notBefore = this.notBefore;\n        }\n        if (this.notAfter) {\n            res.notAfter = this.notAfter;\n        }\n        return res;\n    }\n}\nPrivateKeyUsagePeriod.CLASS_NAME = \"PrivateKeyUsagePeriod\";\n\nconst ID = \"id\";\nconst TYPE$2 = \"type\";\nconst VALUES = \"values\";\nconst QC_STATEMENT_CLEAR_PROPS = [\n    ID,\n    TYPE$2\n];\nconst QC_STATEMENTS_CLEAR_PROPS = [\n    VALUES\n];\nclass QCStatement extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.id = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ID, QCStatement.defaultValues(ID));\n        if (TYPE$2 in parameters) {\n            this.type = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TYPE$2, QCStatement.defaultValues(TYPE$2));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ID:\n                return EMPTY_STRING;\n            case TYPE$2:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ID:\n                return (memberValue === EMPTY_STRING);\n            case TYPE$2:\n                return (memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Null);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.id || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({\n                    name: (names.type || EMPTY_STRING),\n                    optional: true\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, QC_STATEMENT_CLEAR_PROPS);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, QCStatement.schema({\n            names: {\n                id: ID,\n                type: TYPE$2\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.id = asn1.result.id.valueBlock.toString();\n        if (TYPE$2 in asn1.result)\n            this.type = asn1.result.type;\n    }\n    toSchema() {\n        const value = [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.id })\n        ];\n        if (TYPE$2 in this)\n            value.push(this.type);\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value,\n        }));\n    }\n    toJSON() {\n        const object = {\n            id: this.id\n        };\n        if (this.type) {\n            object.type = this.type.toJSON();\n        }\n        return object;\n    }\n}\nQCStatement.CLASS_NAME = \"QCStatement\";\nclass QCStatements extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.values = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUES, QCStatements.defaultValues(VALUES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VALUES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VALUES:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.values || EMPTY_STRING),\n                    value: QCStatement.schema(names.value || {})\n                }),\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, QC_STATEMENTS_CLEAR_PROPS);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, QCStatements.schema({\n            names: {\n                values: VALUES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.values = Array.from(asn1.result.values, element => new QCStatement({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.values, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            values: Array.from(this.values, o => o.toJSON())\n        };\n    }\n}\nQCStatements.CLASS_NAME = \"QCStatements\";\n\nvar _a;\nclass ECNamedCurves {\n    static register(name, id, size) {\n        this.namedCurves[name.toLowerCase()] = this.namedCurves[id] = { name, id, size };\n    }\n    static find(nameOrId) {\n        return this.namedCurves[nameOrId.toLowerCase()] || null;\n    }\n}\n_a = ECNamedCurves;\nECNamedCurves.namedCurves = {};\n(() => {\n    _a.register(\"P-256\", \"1.2.840.10045.3.1.7\", 32);\n    _a.register(\"P-384\", \"1.3.132.0.34\", 48);\n    _a.register(\"P-521\", \"1.3.132.0.35\", 66);\n    _a.register(\"brainpoolP256r1\", \"1.3.36.3.3.2.8.1.1.7\", 32);\n    _a.register(\"brainpoolP384r1\", \"1.3.36.3.3.2.8.1.1.11\", 48);\n    _a.register(\"brainpoolP512r1\", \"1.3.36.3.3.2.8.1.1.13\", 64);\n})();\n\nconst X = \"x\";\nconst Y = \"y\";\nconst NAMED_CURVE$1 = \"namedCurve\";\nclass ECPublicKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.x = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, X, ECPublicKey.defaultValues(X));\n        this.y = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, Y, ECPublicKey.defaultValues(Y));\n        this.namedCurve = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NAMED_CURVE$1, ECPublicKey.defaultValues(NAMED_CURVE$1));\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case X:\n            case Y:\n                return EMPTY_BUFFER;\n            case NAMED_CURVE$1:\n                return EMPTY_STRING;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case X:\n            case Y:\n                return memberValue instanceof ArrayBuffer &&\n                    (pvutils__WEBPACK_IMPORTED_MODULE_2__.isEqualBuffer(memberValue, ECPublicKey.defaultValues(memberName)));\n            case NAMED_CURVE$1:\n                return typeof memberValue === \"string\" &&\n                    memberValue === ECPublicKey.defaultValues(memberName);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema() {\n        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.RawData();\n    }\n    fromSchema(schema1) {\n        const view = pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toUint8Array(schema1);\n        if (view[0] !== 0x04) {\n            throw new Error(\"Object's schema was not verified against input data for ECPublicKey\");\n        }\n        const namedCurve = ECNamedCurves.find(this.namedCurve);\n        if (!namedCurve) {\n            throw new Error(`Incorrect curve OID: ${this.namedCurve}`);\n        }\n        const coordinateLength = namedCurve.size;\n        if (view.byteLength !== (coordinateLength * 2 + 1)) {\n            throw new Error(\"Object's schema was not verified against input data for ECPublicKey\");\n        }\n        this.namedCurve = namedCurve.name;\n        this.x = view.slice(1, coordinateLength + 1).buffer;\n        this.y = view.slice(1 + coordinateLength, coordinateLength * 2 + 1).buffer;\n    }\n    toSchema() {\n        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.RawData({\n            data: pvutils__WEBPACK_IMPORTED_MODULE_2__.utilConcatBuf((new Uint8Array([0x04])).buffer, this.x, this.y)\n        });\n    }\n    toJSON() {\n        const namedCurve = ECNamedCurves.find(this.namedCurve);\n        return {\n            crv: namedCurve ? namedCurve.name : this.namedCurve,\n            x: pvutils__WEBPACK_IMPORTED_MODULE_2__.toBase64(pvutils__WEBPACK_IMPORTED_MODULE_2__.arrayBufferToString(this.x), true, true, false),\n            y: pvutils__WEBPACK_IMPORTED_MODULE_2__.toBase64(pvutils__WEBPACK_IMPORTED_MODULE_2__.arrayBufferToString(this.y), true, true, false)\n        };\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"crv\", \"x\", \"y\");\n        let coordinateLength = 0;\n        const namedCurve = ECNamedCurves.find(json.crv);\n        if (namedCurve) {\n            this.namedCurve = namedCurve.id;\n            coordinateLength = namedCurve.size;\n        }\n        const xConvertBuffer = pvutils__WEBPACK_IMPORTED_MODULE_2__.stringToArrayBuffer(pvutils__WEBPACK_IMPORTED_MODULE_2__.fromBase64(json.x, true));\n        if (xConvertBuffer.byteLength < coordinateLength) {\n            this.x = new ArrayBuffer(coordinateLength);\n            const view = new Uint8Array(this.x);\n            const convertBufferView = new Uint8Array(xConvertBuffer);\n            view.set(convertBufferView, 1);\n        }\n        else {\n            this.x = xConvertBuffer.slice(0, coordinateLength);\n        }\n        const yConvertBuffer = pvutils__WEBPACK_IMPORTED_MODULE_2__.stringToArrayBuffer(pvutils__WEBPACK_IMPORTED_MODULE_2__.fromBase64(json.y, true));\n        if (yConvertBuffer.byteLength < coordinateLength) {\n            this.y = new ArrayBuffer(coordinateLength);\n            const view = new Uint8Array(this.y);\n            const convertBufferView = new Uint8Array(yConvertBuffer);\n            view.set(convertBufferView, 1);\n        }\n        else {\n            this.y = yConvertBuffer.slice(0, coordinateLength);\n        }\n    }\n}\nECPublicKey.CLASS_NAME = \"ECPublicKey\";\n\nconst MODULUS$1 = \"modulus\";\nconst PUBLIC_EXPONENT$1 = \"publicExponent\";\nconst CLEAR_PROPS$1b = [MODULUS$1, PUBLIC_EXPONENT$1];\nclass RSAPublicKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.modulus = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MODULUS$1, RSAPublicKey.defaultValues(MODULUS$1));\n        this.publicExponent = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PUBLIC_EXPONENT$1, RSAPublicKey.defaultValues(PUBLIC_EXPONENT$1));\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case MODULUS$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case PUBLIC_EXPONENT$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.modulus || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.publicExponent || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1b);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RSAPublicKey.schema({\n            names: {\n                modulus: MODULUS$1,\n                publicExponent: PUBLIC_EXPONENT$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.modulus = asn1.result.modulus.convertFromDER(256);\n        this.publicExponent = asn1.result.publicExponent;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.modulus.convertToDER(),\n                this.publicExponent\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            n: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.modulus.valueBlock.valueHexView),\n            e: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.publicExponent.valueBlock.valueHexView),\n        };\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"n\", \"e\");\n        const array = pvutils__WEBPACK_IMPORTED_MODULE_2__.stringToArrayBuffer(pvutils__WEBPACK_IMPORTED_MODULE_2__.fromBase64(json.n, true));\n        this.modulus = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: array.slice(0, Math.pow(2, pvutils__WEBPACK_IMPORTED_MODULE_2__.nearestPowerOf2(array.byteLength))) });\n        this.publicExponent = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvutils__WEBPACK_IMPORTED_MODULE_2__.stringToArrayBuffer(pvutils__WEBPACK_IMPORTED_MODULE_2__.fromBase64(json.e, true)).slice(0, 3) });\n    }\n}\nRSAPublicKey.CLASS_NAME = \"RSAPublicKey\";\n\nconst ALGORITHM$1 = \"algorithm\";\nconst SUBJECT_PUBLIC_KEY = \"subjectPublicKey\";\nconst CLEAR_PROPS$1a = [ALGORITHM$1, SUBJECT_PUBLIC_KEY];\nclass PublicKeyInfo extends PkiObject {\n    get parsedKey() {\n        if (this._parsedKey === undefined) {\n            switch (this.algorithm.algorithmId) {\n                case \"1.2.840.10045.2.1\":\n                    if (\"algorithmParams\" in this.algorithm) {\n                        if (this.algorithm.algorithmParams.constructor.blockName() === asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier.blockName()) {\n                            try {\n                                this._parsedKey = new ECPublicKey({\n                                    namedCurve: this.algorithm.algorithmParams.valueBlock.toString(),\n                                    schema: this.subjectPublicKey.valueBlock.valueHexView\n                                });\n                            }\n                            catch (ex) {\n                            }\n                        }\n                    }\n                    break;\n                case \"1.2.840.113549.1.1.1\":\n                    {\n                        const publicKeyASN1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.subjectPublicKey.valueBlock.valueHexView);\n                        if (publicKeyASN1.offset !== -1) {\n                            try {\n                                this._parsedKey = new RSAPublicKey({ schema: publicKeyASN1.result });\n                            }\n                            catch (ex) {\n                            }\n                        }\n                    }\n                    break;\n            }\n            this._parsedKey || (this._parsedKey = null);\n        }\n        return this._parsedKey || undefined;\n    }\n    set parsedKey(value) {\n        this._parsedKey = value;\n    }\n    constructor(parameters = {}) {\n        super();\n        this.algorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ALGORITHM$1, PublicKeyInfo.defaultValues(ALGORITHM$1));\n        this.subjectPublicKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SUBJECT_PUBLIC_KEY, PublicKeyInfo.defaultValues(SUBJECT_PUBLIC_KEY));\n        const parsedKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"parsedKey\", null);\n        if (parsedKey) {\n            this.parsedKey = parsedKey;\n        }\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case SUBJECT_PUBLIC_KEY:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.algorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.subjectPublicKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1a);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PublicKeyInfo.schema({\n            names: {\n                algorithm: {\n                    names: {\n                        blockName: ALGORITHM$1\n                    }\n                },\n                subjectPublicKey: SUBJECT_PUBLIC_KEY\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\n        this.subjectPublicKey = asn1.result.subjectPublicKey;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.algorithm.toSchema(),\n                this.subjectPublicKey\n            ]\n        }));\n    }\n    toJSON() {\n        if (!this.parsedKey) {\n            return {\n                algorithm: this.algorithm.toJSON(),\n                subjectPublicKey: this.subjectPublicKey.toJSON(),\n            };\n        }\n        const jwk = {};\n        switch (this.algorithm.algorithmId) {\n            case \"1.2.840.10045.2.1\":\n                jwk.kty = \"EC\";\n                break;\n            case \"1.2.840.113549.1.1.1\":\n                jwk.kty = \"RSA\";\n                break;\n        }\n        const publicKeyJWK = this.parsedKey.toJSON();\n        Object.assign(jwk, publicKeyJWK);\n        return jwk;\n    }\n    fromJSON(json) {\n        if (\"kty\" in json) {\n            switch (json.kty.toUpperCase()) {\n                case \"EC\":\n                    this.parsedKey = new ECPublicKey({ json });\n                    this.algorithm = new AlgorithmIdentifier({\n                        algorithmId: \"1.2.840.10045.2.1\",\n                        algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.parsedKey.namedCurve })\n                    });\n                    break;\n                case \"RSA\":\n                    this.parsedKey = new RSAPublicKey({ json });\n                    this.algorithm = new AlgorithmIdentifier({\n                        algorithmId: \"1.2.840.113549.1.1.1\",\n                        algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                    });\n                    break;\n                default:\n                    throw new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\n            }\n            this.subjectPublicKey = new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ valueHex: this.parsedKey.toSchema().toBER(false) });\n        }\n    }\n    async importKey(publicKey, crypto = getCrypto(true)) {\n        try {\n            if (!publicKey) {\n                throw new Error(\"Need to provide publicKey input parameter\");\n            }\n            const exportedKey = await crypto.exportKey(\"spki\", publicKey);\n            const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(exportedKey);\n            try {\n                this.fromSchema(asn1.result);\n            }\n            catch (exception) {\n                throw new Error(\"Error during initializing object from schema\");\n            }\n        }\n        catch (e) {\n            const message = e instanceof Error ? e.message : `${e}`;\n            throw new Error(`Error during exporting public key: ${message}`);\n        }\n    }\n}\nPublicKeyInfo.CLASS_NAME = \"PublicKeyInfo\";\n\nconst VERSION$l = \"version\";\nconst PRIVATE_KEY$1 = \"privateKey\";\nconst NAMED_CURVE = \"namedCurve\";\nconst PUBLIC_KEY$1 = \"publicKey\";\nconst CLEAR_PROPS$19 = [\n    VERSION$l,\n    PRIVATE_KEY$1,\n    NAMED_CURVE,\n    PUBLIC_KEY$1\n];\nclass ECPrivateKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$l, ECPrivateKey.defaultValues(VERSION$l));\n        this.privateKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PRIVATE_KEY$1, ECPrivateKey.defaultValues(PRIVATE_KEY$1));\n        if (NAMED_CURVE in parameters) {\n            this.namedCurve = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NAMED_CURVE, ECPrivateKey.defaultValues(NAMED_CURVE));\n        }\n        if (PUBLIC_KEY$1 in parameters) {\n            this.publicKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PUBLIC_KEY$1, ECPrivateKey.defaultValues(PUBLIC_KEY$1));\n        }\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$l:\n                return 1;\n            case PRIVATE_KEY$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case NAMED_CURVE:\n                return EMPTY_STRING;\n            case PUBLIC_KEY$1:\n                return new ECPublicKey();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$l:\n                return (memberValue === ECPrivateKey.defaultValues(memberName));\n            case PRIVATE_KEY$1:\n                return (memberValue.isEqual(ECPrivateKey.defaultValues(memberName)));\n            case NAMED_CURVE:\n                return (memberValue === EMPTY_STRING);\n            case PUBLIC_KEY$1:\n                return ((ECPublicKey.compareWithDefault(NAMED_CURVE, memberValue.namedCurve)) &&\n                    (ECPublicKey.compareWithDefault(\"x\", memberValue.x)) &&\n                    (ECPublicKey.compareWithDefault(\"y\", memberValue.y)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.privateKey || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.namedCurve || EMPTY_STRING) })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.publicKey || EMPTY_STRING) })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$19);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, ECPrivateKey.schema({\n            names: {\n                version: VERSION$l,\n                privateKey: PRIVATE_KEY$1,\n                namedCurve: NAMED_CURVE,\n                publicKey: PUBLIC_KEY$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.privateKey = asn1.result.privateKey;\n        if (NAMED_CURVE in asn1.result) {\n            this.namedCurve = asn1.result.namedCurve.valueBlock.toString();\n        }\n        if (PUBLIC_KEY$1 in asn1.result) {\n            const publicKeyData = { schema: asn1.result.publicKey.valueBlock.valueHex };\n            if (NAMED_CURVE in this) {\n                publicKeyData.namedCurve = this.namedCurve;\n            }\n            this.publicKey = new ECPublicKey(publicKeyData);\n        }\n    }\n    toSchema() {\n        const outputArray = [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }),\n            this.privateKey\n        ];\n        if (this.namedCurve) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.namedCurve })\n                ]\n            }));\n        }\n        if (this.publicKey) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ valueHex: this.publicKey.toSchema().toBER(false) })\n                ]\n            }));\n        }\n        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        });\n    }\n    toJSON() {\n        if (!this.namedCurve || ECPrivateKey.compareWithDefault(NAMED_CURVE, this.namedCurve)) {\n            throw new Error(\"Not enough information for making JSON: absent \\\"namedCurve\\\" value\");\n        }\n        const curve = ECNamedCurves.find(this.namedCurve);\n        const privateKeyJSON = {\n            crv: curve ? curve.name : this.namedCurve,\n            d: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.privateKey.valueBlock.valueHexView),\n        };\n        if (this.publicKey) {\n            const publicKeyJSON = this.publicKey.toJSON();\n            privateKeyJSON.x = publicKeyJSON.x;\n            privateKeyJSON.y = publicKeyJSON.y;\n        }\n        return privateKeyJSON;\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"crv\", \"d\");\n        let coordinateLength = 0;\n        const curve = ECNamedCurves.find(json.crv);\n        if (curve) {\n            this.namedCurve = curve.id;\n            coordinateLength = curve.size;\n        }\n        const convertBuffer = pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.d);\n        if (convertBuffer.byteLength < coordinateLength) {\n            const buffer = new ArrayBuffer(coordinateLength);\n            const view = new Uint8Array(buffer);\n            const convertBufferView = new Uint8Array(convertBuffer);\n            view.set(convertBufferView, 1);\n            this.privateKey = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: buffer });\n        }\n        else {\n            this.privateKey = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: convertBuffer.slice(0, coordinateLength) });\n        }\n        if (json.x && json.y) {\n            this.publicKey = new ECPublicKey({ json });\n        }\n    }\n}\nECPrivateKey.CLASS_NAME = \"ECPrivateKey\";\n\nconst PRIME = \"prime\";\nconst EXPONENT = \"exponent\";\nconst COEFFICIENT$1 = \"coefficient\";\nconst CLEAR_PROPS$18 = [\n    PRIME,\n    EXPONENT,\n    COEFFICIENT$1,\n];\nclass OtherPrimeInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.prime = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PRIME, OtherPrimeInfo.defaultValues(PRIME));\n        this.exponent = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXPONENT, OtherPrimeInfo.defaultValues(EXPONENT));\n        this.coefficient = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, COEFFICIENT$1, OtherPrimeInfo.defaultValues(COEFFICIENT$1));\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case PRIME:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case EXPONENT:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case COEFFICIENT$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.prime || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.exponent || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.coefficient || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$18);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OtherPrimeInfo.schema({\n            names: {\n                prime: PRIME,\n                exponent: EXPONENT,\n                coefficient: COEFFICIENT$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.prime = asn1.result.prime.convertFromDER();\n        this.exponent = asn1.result.exponent.convertFromDER();\n        this.coefficient = asn1.result.coefficient.convertFromDER();\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.prime.convertToDER(),\n                this.exponent.convertToDER(),\n                this.coefficient.convertToDER()\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            r: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.prime.valueBlock.valueHexView),\n            d: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.exponent.valueBlock.valueHexView),\n            t: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.coefficient.valueBlock.valueHexView),\n        };\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"r\", \"d\", \"r\");\n        this.prime = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.r) });\n        this.exponent = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.d) });\n        this.coefficient = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.t) });\n    }\n}\nOtherPrimeInfo.CLASS_NAME = \"OtherPrimeInfo\";\n\nconst VERSION$k = \"version\";\nconst MODULUS = \"modulus\";\nconst PUBLIC_EXPONENT = \"publicExponent\";\nconst PRIVATE_EXPONENT = \"privateExponent\";\nconst PRIME1 = \"prime1\";\nconst PRIME2 = \"prime2\";\nconst EXPONENT1 = \"exponent1\";\nconst EXPONENT2 = \"exponent2\";\nconst COEFFICIENT = \"coefficient\";\nconst OTHER_PRIME_INFOS = \"otherPrimeInfos\";\nconst CLEAR_PROPS$17 = [\n    VERSION$k,\n    MODULUS,\n    PUBLIC_EXPONENT,\n    PRIVATE_EXPONENT,\n    PRIME1,\n    PRIME2,\n    EXPONENT1,\n    EXPONENT2,\n    COEFFICIENT,\n    OTHER_PRIME_INFOS\n];\nclass RSAPrivateKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$k, RSAPrivateKey.defaultValues(VERSION$k));\n        this.modulus = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MODULUS, RSAPrivateKey.defaultValues(MODULUS));\n        this.publicExponent = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PUBLIC_EXPONENT, RSAPrivateKey.defaultValues(PUBLIC_EXPONENT));\n        this.privateExponent = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PRIVATE_EXPONENT, RSAPrivateKey.defaultValues(PRIVATE_EXPONENT));\n        this.prime1 = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PRIME1, RSAPrivateKey.defaultValues(PRIME1));\n        this.prime2 = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PRIME2, RSAPrivateKey.defaultValues(PRIME2));\n        this.exponent1 = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXPONENT1, RSAPrivateKey.defaultValues(EXPONENT1));\n        this.exponent2 = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXPONENT2, RSAPrivateKey.defaultValues(EXPONENT2));\n        this.coefficient = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, COEFFICIENT, RSAPrivateKey.defaultValues(COEFFICIENT));\n        if (OTHER_PRIME_INFOS in parameters) {\n            this.otherPrimeInfos = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OTHER_PRIME_INFOS, RSAPrivateKey.defaultValues(OTHER_PRIME_INFOS));\n        }\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$k:\n                return 0;\n            case MODULUS:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case PUBLIC_EXPONENT:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case PRIVATE_EXPONENT:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case PRIME1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case PRIME2:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case EXPONENT1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case EXPONENT2:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case COEFFICIENT:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case OTHER_PRIME_INFOS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.modulus || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.publicExponent || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.privateExponent || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.prime1 || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.prime2 || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.exponent1 || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.exponent2 || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.coefficient || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    optional: true,\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.otherPrimeInfosName || EMPTY_STRING),\n                            value: OtherPrimeInfo.schema(names.otherPrimeInfo || {})\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$17);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RSAPrivateKey.schema({\n            names: {\n                version: VERSION$k,\n                modulus: MODULUS,\n                publicExponent: PUBLIC_EXPONENT,\n                privateExponent: PRIVATE_EXPONENT,\n                prime1: PRIME1,\n                prime2: PRIME2,\n                exponent1: EXPONENT1,\n                exponent2: EXPONENT2,\n                coefficient: COEFFICIENT,\n                otherPrimeInfo: {\n                    names: {\n                        blockName: OTHER_PRIME_INFOS\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.modulus = asn1.result.modulus.convertFromDER(256);\n        this.publicExponent = asn1.result.publicExponent;\n        this.privateExponent = asn1.result.privateExponent.convertFromDER(256);\n        this.prime1 = asn1.result.prime1.convertFromDER(128);\n        this.prime2 = asn1.result.prime2.convertFromDER(128);\n        this.exponent1 = asn1.result.exponent1.convertFromDER(128);\n        this.exponent2 = asn1.result.exponent2.convertFromDER(128);\n        this.coefficient = asn1.result.coefficient.convertFromDER(128);\n        if (OTHER_PRIME_INFOS in asn1.result)\n            this.otherPrimeInfos = Array.from(asn1.result.otherPrimeInfos, element => new OtherPrimeInfo({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        outputArray.push(this.modulus.convertToDER());\n        outputArray.push(this.publicExponent);\n        outputArray.push(this.privateExponent.convertToDER());\n        outputArray.push(this.prime1.convertToDER());\n        outputArray.push(this.prime2.convertToDER());\n        outputArray.push(this.exponent1.convertToDER());\n        outputArray.push(this.exponent2.convertToDER());\n        outputArray.push(this.coefficient.convertToDER());\n        if (this.otherPrimeInfos) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: Array.from(this.otherPrimeInfos, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const jwk = {\n            n: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.modulus.valueBlock.valueHexView),\n            e: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.publicExponent.valueBlock.valueHexView),\n            d: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.privateExponent.valueBlock.valueHexView),\n            p: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.prime1.valueBlock.valueHexView),\n            q: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.prime2.valueBlock.valueHexView),\n            dp: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.exponent1.valueBlock.valueHexView),\n            dq: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.exponent2.valueBlock.valueHexView),\n            qi: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.coefficient.valueBlock.valueHexView),\n        };\n        if (this.otherPrimeInfos) {\n            jwk.oth = Array.from(this.otherPrimeInfos, o => o.toJSON());\n        }\n        return jwk;\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"n\", \"e\", \"d\", \"p\", \"q\", \"dp\", \"dq\", \"qi\");\n        this.modulus = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.n) });\n        this.publicExponent = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.e) });\n        this.privateExponent = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.d) });\n        this.prime1 = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.p) });\n        this.prime2 = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.q) });\n        this.exponent1 = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.dp) });\n        this.exponent2 = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.dq) });\n        this.coefficient = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.qi) });\n        if (json.oth) {\n            this.otherPrimeInfos = Array.from(json.oth, (element) => new OtherPrimeInfo({ json: element }));\n        }\n    }\n}\nRSAPrivateKey.CLASS_NAME = \"RSAPrivateKey\";\n\nconst VERSION$j = \"version\";\nconst PRIVATE_KEY_ALGORITHM = \"privateKeyAlgorithm\";\nconst PRIVATE_KEY = \"privateKey\";\nconst ATTRIBUTES$5 = \"attributes\";\nconst PARSED_KEY = \"parsedKey\";\nconst CLEAR_PROPS$16 = [\n    VERSION$j,\n    PRIVATE_KEY_ALGORITHM,\n    PRIVATE_KEY,\n    ATTRIBUTES$5\n];\nclass PrivateKeyInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$j, PrivateKeyInfo.defaultValues(VERSION$j));\n        this.privateKeyAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PRIVATE_KEY_ALGORITHM, PrivateKeyInfo.defaultValues(PRIVATE_KEY_ALGORITHM));\n        this.privateKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PRIVATE_KEY, PrivateKeyInfo.defaultValues(PRIVATE_KEY));\n        if (ATTRIBUTES$5 in parameters) {\n            this.attributes = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ATTRIBUTES$5, PrivateKeyInfo.defaultValues(ATTRIBUTES$5));\n        }\n        if (PARSED_KEY in parameters) {\n            this.parsedKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PARSED_KEY, PrivateKeyInfo.defaultValues(PARSED_KEY));\n        }\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$j:\n                return 0;\n            case PRIVATE_KEY_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case PRIVATE_KEY:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case ATTRIBUTES$5:\n                return [];\n            case PARSED_KEY:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                AlgorithmIdentifier.schema(names.privateKeyAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.privateKey || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.attributes || EMPTY_STRING),\n                            value: Attribute.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$16);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PrivateKeyInfo.schema({\n            names: {\n                version: VERSION$j,\n                privateKeyAlgorithm: {\n                    names: {\n                        blockName: PRIVATE_KEY_ALGORITHM\n                    }\n                },\n                privateKey: PRIVATE_KEY,\n                attributes: ATTRIBUTES$5\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.privateKeyAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.privateKeyAlgorithm });\n        this.privateKey = asn1.result.privateKey;\n        if (ATTRIBUTES$5 in asn1.result)\n            this.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\n        switch (this.privateKeyAlgorithm.algorithmId) {\n            case \"1.2.840.113549.1.1.1\":\n                {\n                    const privateKeyASN1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.privateKey.valueBlock.valueHexView);\n                    if (privateKeyASN1.offset !== -1)\n                        this.parsedKey = new RSAPrivateKey({ schema: privateKeyASN1.result });\n                }\n                break;\n            case \"1.2.840.10045.2.1\":\n                if (\"algorithmParams\" in this.privateKeyAlgorithm) {\n                    if (this.privateKeyAlgorithm.algorithmParams instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier) {\n                        const privateKeyASN1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.privateKey.valueBlock.valueHexView);\n                        if (privateKeyASN1.offset !== -1) {\n                            this.parsedKey = new ECPrivateKey({\n                                namedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),\n                                schema: privateKeyASN1.result\n                            });\n                        }\n                    }\n                }\n                break;\n        }\n    }\n    toSchema() {\n        const outputArray = [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }),\n            this.privateKeyAlgorithm.toSchema(),\n            this.privateKey\n        ];\n        if (this.attributes) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: Array.from(this.attributes, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        if (!this.parsedKey) {\n            const object = {\n                version: this.version,\n                privateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),\n                privateKey: this.privateKey.toJSON(),\n            };\n            if (this.attributes) {\n                object.attributes = Array.from(this.attributes, o => o.toJSON());\n            }\n            return object;\n        }\n        const jwk = {};\n        switch (this.privateKeyAlgorithm.algorithmId) {\n            case \"1.2.840.10045.2.1\":\n                jwk.kty = \"EC\";\n                break;\n            case \"1.2.840.113549.1.1.1\":\n                jwk.kty = \"RSA\";\n                break;\n        }\n        const publicKeyJWK = this.parsedKey.toJSON();\n        Object.assign(jwk, publicKeyJWK);\n        return jwk;\n    }\n    fromJSON(json) {\n        if (\"kty\" in json) {\n            switch (json.kty.toUpperCase()) {\n                case \"EC\":\n                    this.parsedKey = new ECPrivateKey({ json });\n                    this.privateKeyAlgorithm = new AlgorithmIdentifier({\n                        algorithmId: \"1.2.840.10045.2.1\",\n                        algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.parsedKey.namedCurve })\n                    });\n                    break;\n                case \"RSA\":\n                    this.parsedKey = new RSAPrivateKey({ json });\n                    this.privateKeyAlgorithm = new AlgorithmIdentifier({\n                        algorithmId: \"1.2.840.113549.1.1.1\",\n                        algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                    });\n                    break;\n                default:\n                    throw new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\n            }\n            this.privateKey = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: this.parsedKey.toSchema().toBER(false) });\n        }\n    }\n}\nPrivateKeyInfo.CLASS_NAME = \"PrivateKeyInfo\";\n\nconst CONTENT_TYPE$1 = \"contentType\";\nconst CONTENT_ENCRYPTION_ALGORITHM = \"contentEncryptionAlgorithm\";\nconst ENCRYPTED_CONTENT = \"encryptedContent\";\nconst CLEAR_PROPS$15 = [\n    CONTENT_TYPE$1,\n    CONTENT_ENCRYPTION_ALGORITHM,\n    ENCRYPTED_CONTENT,\n];\nconst PIECE_SIZE = 1024;\nclass EncryptedContentInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.contentType = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CONTENT_TYPE$1, EncryptedContentInfo.defaultValues(CONTENT_TYPE$1));\n        this.contentEncryptionAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CONTENT_ENCRYPTION_ALGORITHM, EncryptedContentInfo.defaultValues(CONTENT_ENCRYPTION_ALGORITHM));\n        if (ENCRYPTED_CONTENT in parameters && parameters.encryptedContent) {\n            this.encryptedContent = parameters.encryptedContent;\n            if ((this.encryptedContent.idBlock.tagClass === 1) &&\n                (this.encryptedContent.idBlock.tagNumber === 4)) {\n                if (this.encryptedContent.idBlock.isConstructed === false && !parameters.disableSplit) {\n                    const constrString = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({\n                        idBlock: { isConstructed: true },\n                        isConstructed: true\n                    });\n                    let offset = 0;\n                    const valueHex = this.encryptedContent.valueBlock.valueHexView.slice().buffer;\n                    let length = valueHex.byteLength;\n                    while (length > 0) {\n                        const pieceView = new Uint8Array(valueHex, offset, ((offset + PIECE_SIZE) > valueHex.byteLength) ? (valueHex.byteLength - offset) : PIECE_SIZE);\n                        const _array = new ArrayBuffer(pieceView.length);\n                        const _view = new Uint8Array(_array);\n                        for (let i = 0; i < _view.length; i++)\n                            _view[i] = pieceView[i];\n                        constrString.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: _array }));\n                        length -= pieceView.length;\n                        offset += pieceView.length;\n                    }\n                    this.encryptedContent = constrString;\n                }\n            }\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CONTENT_TYPE$1:\n                return EMPTY_STRING;\n            case CONTENT_ENCRYPTION_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case ENCRYPTED_CONTENT:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CONTENT_TYPE$1:\n                return (memberValue === EMPTY_STRING);\n            case CONTENT_ENCRYPTION_ALGORITHM:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case ENCRYPTED_CONTENT:\n                return (memberValue.isEqual(EncryptedContentInfo.defaultValues(ENCRYPTED_CONTENT)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.contentType || EMPTY_STRING) }),\n                AlgorithmIdentifier.schema(names.contentEncryptionAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            name: (names.encryptedContent || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: [\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                                    value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString()\n                                })\n                            ]\n                        }),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                            name: (names.encryptedContent || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            }\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$15);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, EncryptedContentInfo.schema({\n            names: {\n                contentType: CONTENT_TYPE$1,\n                contentEncryptionAlgorithm: {\n                    names: {\n                        blockName: CONTENT_ENCRYPTION_ALGORITHM\n                    }\n                },\n                encryptedContent: ENCRYPTED_CONTENT\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.contentType = asn1.result.contentType.valueBlock.toString();\n        this.contentEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.contentEncryptionAlgorithm });\n        if (ENCRYPTED_CONTENT in asn1.result) {\n            this.encryptedContent = asn1.result.encryptedContent;\n            this.encryptedContent.idBlock.tagClass = 1;\n            this.encryptedContent.idBlock.tagNumber = 4;\n        }\n    }\n    toSchema() {\n        const sequenceLengthBlock = {\n            isIndefiniteForm: false\n        };\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.contentType }));\n        outputArray.push(this.contentEncryptionAlgorithm.toSchema());\n        if (this.encryptedContent) {\n            sequenceLengthBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\n            const encryptedValue = this.encryptedContent;\n            encryptedValue.idBlock.tagClass = 3;\n            encryptedValue.idBlock.tagNumber = 0;\n            encryptedValue.lenBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\n            outputArray.push(encryptedValue);\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            lenBlock: sequenceLengthBlock,\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            contentType: this.contentType,\n            contentEncryptionAlgorithm: this.contentEncryptionAlgorithm.toJSON()\n        };\n        if (this.encryptedContent) {\n            res.encryptedContent = this.encryptedContent.toJSON();\n        }\n        return res;\n    }\n    getEncryptedContent() {\n        if (!this.encryptedContent) {\n            throw new Error(\"Parameter 'encryptedContent' is undefined\");\n        }\n        return asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString.prototype.getValue.call(this.encryptedContent);\n    }\n}\nEncryptedContentInfo.CLASS_NAME = \"EncryptedContentInfo\";\n\nconst HASH_ALGORITHM$4 = \"hashAlgorithm\";\nconst MASK_GEN_ALGORITHM$1 = \"maskGenAlgorithm\";\nconst SALT_LENGTH = \"saltLength\";\nconst TRAILER_FIELD = \"trailerField\";\nconst CLEAR_PROPS$14 = [\n    HASH_ALGORITHM$4,\n    MASK_GEN_ALGORITHM$1,\n    SALT_LENGTH,\n    TRAILER_FIELD\n];\nclass RSASSAPSSParams extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.hashAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, HASH_ALGORITHM$4, RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4));\n        this.maskGenAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MASK_GEN_ALGORITHM$1, RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1));\n        this.saltLength = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SALT_LENGTH, RSASSAPSSParams.defaultValues(SALT_LENGTH));\n        this.trailerField = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TRAILER_FIELD, RSASSAPSSParams.defaultValues(TRAILER_FIELD));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case HASH_ALGORITHM$4:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.3.14.3.2.26\",\n                    algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                });\n            case MASK_GEN_ALGORITHM$1:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.2.840.113549.1.1.8\",\n                    algorithmParams: (new AlgorithmIdentifier({\n                        algorithmId: \"1.3.14.3.2.26\",\n                        algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                    })).toSchema()\n                });\n            case SALT_LENGTH:\n                return 20;\n            case TRAILER_FIELD:\n                return 1;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.hashAlgorithm || {})]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    optional: true,\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.saltLength || EMPTY_STRING) })]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 3\n                    },\n                    optional: true,\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.trailerField || EMPTY_STRING) })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$14);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RSASSAPSSParams.schema({\n            names: {\n                hashAlgorithm: {\n                    names: {\n                        blockName: HASH_ALGORITHM$4\n                    }\n                },\n                maskGenAlgorithm: {\n                    names: {\n                        blockName: MASK_GEN_ALGORITHM$1\n                    }\n                },\n                saltLength: SALT_LENGTH,\n                trailerField: TRAILER_FIELD\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (HASH_ALGORITHM$4 in asn1.result)\n            this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\n        if (MASK_GEN_ALGORITHM$1 in asn1.result)\n            this.maskGenAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.maskGenAlgorithm });\n        if (SALT_LENGTH in asn1.result)\n            this.saltLength = asn1.result.saltLength.valueBlock.valueDec;\n        if (TRAILER_FIELD in asn1.result)\n            this.trailerField = asn1.result.trailerField.valueBlock.valueDec;\n    }\n    toSchema() {\n        const outputArray = [];\n        if (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4))) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.hashAlgorithm.toSchema()]\n            }));\n        }\n        if (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1))) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [this.maskGenAlgorithm.toSchema()]\n            }));\n        }\n        if (this.saltLength !== RSASSAPSSParams.defaultValues(SALT_LENGTH)) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.saltLength })]\n            }));\n        }\n        if (this.trailerField !== RSASSAPSSParams.defaultValues(TRAILER_FIELD)) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.trailerField })]\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4))) {\n            res.hashAlgorithm = this.hashAlgorithm.toJSON();\n        }\n        if (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1))) {\n            res.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();\n        }\n        if (this.saltLength !== RSASSAPSSParams.defaultValues(SALT_LENGTH)) {\n            res.saltLength = this.saltLength;\n        }\n        if (this.trailerField !== RSASSAPSSParams.defaultValues(TRAILER_FIELD)) {\n            res.trailerField = this.trailerField;\n        }\n        return res;\n    }\n}\nRSASSAPSSParams.CLASS_NAME = \"RSASSAPSSParams\";\n\nconst SALT = \"salt\";\nconst ITERATION_COUNT = \"iterationCount\";\nconst KEY_LENGTH = \"keyLength\";\nconst PRF = \"prf\";\nconst CLEAR_PROPS$13 = [\n    SALT,\n    ITERATION_COUNT,\n    KEY_LENGTH,\n    PRF\n];\nclass PBKDF2Params extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.salt = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SALT, PBKDF2Params.defaultValues(SALT));\n        this.iterationCount = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ITERATION_COUNT, PBKDF2Params.defaultValues(ITERATION_COUNT));\n        if (KEY_LENGTH in parameters) {\n            this.keyLength = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_LENGTH, PBKDF2Params.defaultValues(KEY_LENGTH));\n        }\n        if (PRF in parameters) {\n            this.prf = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PRF, PBKDF2Params.defaultValues(PRF));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SALT:\n                return {};\n            case ITERATION_COUNT:\n                return (-1);\n            case KEY_LENGTH:\n                return 0;\n            case PRF:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.3.14.3.2.26\",\n                    algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                });\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.saltPrimitive || EMPTY_STRING) }),\n                        AlgorithmIdentifier.schema(names.saltConstructed || {})\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.iterationCount || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n                    name: (names.keyLength || EMPTY_STRING),\n                    optional: true\n                }),\n                AlgorithmIdentifier.schema(names.prf || {\n                    names: {\n                        optional: true\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$13);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PBKDF2Params.schema({\n            names: {\n                saltPrimitive: SALT,\n                saltConstructed: {\n                    names: {\n                        blockName: SALT\n                    }\n                },\n                iterationCount: ITERATION_COUNT,\n                keyLength: KEY_LENGTH,\n                prf: {\n                    names: {\n                        blockName: PRF,\n                        optional: true\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.salt = asn1.result.salt;\n        this.iterationCount = asn1.result.iterationCount.valueBlock.valueDec;\n        if (KEY_LENGTH in asn1.result)\n            this.keyLength = asn1.result.keyLength.valueBlock.valueDec;\n        if (PRF in asn1.result)\n            this.prf = new AlgorithmIdentifier({ schema: asn1.result.prf });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.salt);\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.iterationCount }));\n        if (KEY_LENGTH in this) {\n            if (PBKDF2Params.defaultValues(KEY_LENGTH) !== this.keyLength)\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.keyLength }));\n        }\n        if (this.prf) {\n            if (PBKDF2Params.defaultValues(PRF).isEqual(this.prf) === false)\n                outputArray.push(this.prf.toSchema());\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            salt: this.salt.toJSON(),\n            iterationCount: this.iterationCount\n        };\n        if (KEY_LENGTH in this) {\n            if (PBKDF2Params.defaultValues(KEY_LENGTH) !== this.keyLength)\n                res.keyLength = this.keyLength;\n        }\n        if (this.prf) {\n            if (PBKDF2Params.defaultValues(PRF).isEqual(this.prf) === false)\n                res.prf = this.prf.toJSON();\n        }\n        return res;\n    }\n}\nPBKDF2Params.CLASS_NAME = \"PBKDF2Params\";\n\nconst KEY_DERIVATION_FUNC = \"keyDerivationFunc\";\nconst ENCRYPTION_SCHEME = \"encryptionScheme\";\nconst CLEAR_PROPS$12 = [\n    KEY_DERIVATION_FUNC,\n    ENCRYPTION_SCHEME\n];\nclass PBES2Params extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyDerivationFunc = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_DERIVATION_FUNC, PBES2Params.defaultValues(KEY_DERIVATION_FUNC));\n        this.encryptionScheme = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTION_SCHEME, PBES2Params.defaultValues(ENCRYPTION_SCHEME));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_DERIVATION_FUNC:\n                return new AlgorithmIdentifier();\n            case ENCRYPTION_SCHEME:\n                return new AlgorithmIdentifier();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.keyDerivationFunc || {}),\n                AlgorithmIdentifier.schema(names.encryptionScheme || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$12);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PBES2Params.schema({\n            names: {\n                keyDerivationFunc: {\n                    names: {\n                        blockName: KEY_DERIVATION_FUNC\n                    }\n                },\n                encryptionScheme: {\n                    names: {\n                        blockName: ENCRYPTION_SCHEME\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyDerivationFunc = new AlgorithmIdentifier({ schema: asn1.result.keyDerivationFunc });\n        this.encryptionScheme = new AlgorithmIdentifier({ schema: asn1.result.encryptionScheme });\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.keyDerivationFunc.toSchema(),\n                this.encryptionScheme.toSchema()\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            keyDerivationFunc: this.keyDerivationFunc.toJSON(),\n            encryptionScheme: this.encryptionScheme.toJSON()\n        };\n    }\n}\nPBES2Params.CLASS_NAME = \"PBES2Params\";\n\nclass AbstractCryptoEngine {\n    constructor(parameters) {\n        this.crypto = parameters.crypto;\n        this.subtle = \"webkitSubtle\" in parameters.crypto\n            ? parameters.crypto.webkitSubtle\n            : parameters.crypto.subtle;\n        this.name = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"name\", EMPTY_STRING);\n    }\n    async encrypt(...args) {\n        return this.subtle.encrypt(...args);\n    }\n    async decrypt(...args) {\n        return this.subtle.decrypt(...args);\n    }\n    sign(...args) {\n        return this.subtle.sign(...args);\n    }\n    async verify(...args) {\n        return this.subtle.verify(...args);\n    }\n    async digest(...args) {\n        return this.subtle.digest(...args);\n    }\n    async generateKey(...args) {\n        return this.subtle.generateKey(...args);\n    }\n    async deriveKey(...args) {\n        return this.subtle.deriveKey(...args);\n    }\n    async deriveBits(...args) {\n        return this.subtle.deriveBits(...args);\n    }\n    async wrapKey(...args) {\n        return this.subtle.wrapKey(...args);\n    }\n    async unwrapKey(...args) {\n        return this.subtle.unwrapKey(...args);\n    }\n    exportKey(...args) {\n        return this.subtle.exportKey(...args);\n    }\n    importKey(...args) {\n        return this.subtle.importKey(...args);\n    }\n    getRandomValues(array) {\n        return this.crypto.getRandomValues(array);\n    }\n}\n\nasync function makePKCS12B2Key(hashAlgorithm, keyLength, password, salt, iterationCount) {\n    let u;\n    let v;\n    let md;\n    switch (hashAlgorithm.toUpperCase()) {\n        case \"SHA-1\":\n            u = 20;\n            v = 64;\n            md = _noble_hashes_sha1__WEBPACK_IMPORTED_MODULE_4__.sha1;\n            break;\n        case \"SHA-256\":\n            u = 32;\n            v = 64;\n            md = _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_5__.sha256;\n            break;\n        case \"SHA-384\":\n            u = 48;\n            v = 128;\n            md = _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_6__.sha384;\n            break;\n        case \"SHA-512\":\n            u = 64;\n            v = 128;\n            md = _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_6__.sha512;\n            break;\n        default:\n            throw new Error(\"Unsupported hashing algorithm\");\n    }\n    const originalPassword = new Uint8Array(password);\n    let decodedPassword = new TextDecoder().decode(password);\n    const encodedPassword = new TextEncoder().encode(decodedPassword);\n    if (encodedPassword.some((byte, i) => byte !== originalPassword[i])) {\n        decodedPassword = String.fromCharCode(...originalPassword);\n    }\n    const passwordTransformed = new Uint8Array(decodedPassword.length * 2 + 2);\n    const passwordView = new DataView(passwordTransformed.buffer);\n    for (let i = 0; i < decodedPassword.length; i++) {\n        passwordView.setUint16(i * 2, decodedPassword.charCodeAt(i), false);\n    }\n    passwordView.setUint16(decodedPassword.length * 2, 0, false);\n    const D = new Uint8Array(v).fill(3);\n    const saltView = new Uint8Array(salt);\n    const S = new Uint8Array(v * Math.ceil(saltView.length / v)).map((_, i) => saltView[i % saltView.length]);\n    const P = new Uint8Array(v * Math.ceil(passwordTransformed.length / v)).map((_, i) => passwordTransformed[i % passwordTransformed.length]);\n    let I = new Uint8Array(S.length + P.length);\n    I.set(S);\n    I.set(P, S.length);\n    const c = Math.ceil((keyLength >> 3) / u);\n    const result = [];\n    for (let i = 0; i < c; i++) {\n        let A = new Uint8Array(D.length + I.length);\n        A.set(D);\n        A.set(I, D.length);\n        for (let j = 0; j < iterationCount; j++) {\n            A = md(A);\n        }\n        const B = new Uint8Array(v).map((_, i) => A[i % A.length]);\n        const k = Math.ceil(saltView.length / v) + Math.ceil(passwordTransformed.length / v);\n        const iRound = [];\n        for (let j = 0; j < k; j++) {\n            const chunk = Array.from(I.slice(j * v, (j + 1) * v));\n            let x = 0x1ff;\n            for (let l = B.length - 1; l >= 0; l--) {\n                x >>= 8;\n                x += B[l] + (chunk[l] || 0);\n                chunk[l] = x & 0xff;\n            }\n            iRound.push(...chunk);\n        }\n        I = new Uint8Array(iRound);\n        result.push(...A);\n    }\n    return new Uint8Array(result.slice(0, keyLength >> 3)).buffer;\n}\nfunction prepareAlgorithm(data) {\n    const res = typeof data === \"string\"\n        ? { name: data }\n        : data;\n    if (\"hash\" in res) {\n        return {\n            ...res,\n            hash: prepareAlgorithm(res.hash)\n        };\n    }\n    return res;\n}\nclass CryptoEngine extends AbstractCryptoEngine {\n    async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        var _a, _b, _c, _d, _e, _f;\n        let jwk = {};\n        const alg = prepareAlgorithm(algorithm);\n        switch (format.toLowerCase()) {\n            case \"raw\":\n                return this.subtle.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\n            case \"spki\":\n                {\n                    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(keyData));\n                    AsnError.assert(asn1, \"keyData\");\n                    const publicKeyInfo = new PublicKeyInfo();\n                    try {\n                        publicKeyInfo.fromSchema(asn1.result);\n                    }\n                    catch {\n                        throw new ArgumentError(\"Incorrect keyData\");\n                    }\n                    switch (alg.name.toUpperCase()) {\n                        case \"RSA-PSS\":\n                            {\n                                if (!alg.hash) {\n                                    throw new ParameterError(\"hash\", \"algorithm.hash\", \"Incorrect hash algorithm: Hash algorithm is missed\");\n                                }\n                                switch (alg.hash.name.toUpperCase()) {\n                                    case \"SHA-1\":\n                                        jwk.alg = \"PS1\";\n                                        break;\n                                    case \"SHA-256\":\n                                        jwk.alg = \"PS256\";\n                                        break;\n                                    case \"SHA-384\":\n                                        jwk.alg = \"PS384\";\n                                        break;\n                                    case \"SHA-512\":\n                                        jwk.alg = \"PS512\";\n                                        break;\n                                    default:\n                                        throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);\n                                }\n                            }\n                        case \"RSASSA-PKCS1-V1_5\":\n                            {\n                                keyUsages = [\"verify\"];\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                if (publicKeyInfo.algorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\n                                    throw new Error(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\n                                if (!jwk.alg) {\n                                    if (!alg.hash) {\n                                        throw new ParameterError(\"hash\", \"algorithm.hash\", \"Incorrect hash algorithm: Hash algorithm is missed\");\n                                    }\n                                    switch (alg.hash.name.toUpperCase()) {\n                                        case \"SHA-1\":\n                                            jwk.alg = \"RS1\";\n                                            break;\n                                        case \"SHA-256\":\n                                            jwk.alg = \"RS256\";\n                                            break;\n                                        case \"SHA-384\":\n                                            jwk.alg = \"RS384\";\n                                            break;\n                                        case \"SHA-512\":\n                                            jwk.alg = \"RS512\";\n                                            break;\n                                        default:\n                                            throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);\n                                    }\n                                }\n                                const publicKeyJSON = publicKeyInfo.toJSON();\n                                Object.assign(jwk, publicKeyJSON);\n                            }\n                            break;\n                        case \"ECDSA\":\n                            keyUsages = [\"verify\"];\n                        case \"ECDH\":\n                            {\n                                jwk = {\n                                    kty: \"EC\",\n                                    ext: extractable,\n                                    key_ops: keyUsages\n                                };\n                                if (publicKeyInfo.algorithm.algorithmId !== \"1.2.840.10045.2.1\") {\n                                    throw new Error(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\n                                }\n                                const publicKeyJSON = publicKeyInfo.toJSON();\n                                Object.assign(jwk, publicKeyJSON);\n                            }\n                            break;\n                        case \"RSA-OAEP\":\n                            {\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                if (this.name.toLowerCase() === \"safari\")\n                                    jwk.alg = \"RSA-OAEP\";\n                                else {\n                                    if (!alg.hash) {\n                                        throw new ParameterError(\"hash\", \"algorithm.hash\", \"Incorrect hash algorithm: Hash algorithm is missed\");\n                                    }\n                                    switch (alg.hash.name.toUpperCase()) {\n                                        case \"SHA-1\":\n                                            jwk.alg = \"RSA-OAEP\";\n                                            break;\n                                        case \"SHA-256\":\n                                            jwk.alg = \"RSA-OAEP-256\";\n                                            break;\n                                        case \"SHA-384\":\n                                            jwk.alg = \"RSA-OAEP-384\";\n                                            break;\n                                        case \"SHA-512\":\n                                            jwk.alg = \"RSA-OAEP-512\";\n                                            break;\n                                        default:\n                                            throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);\n                                    }\n                                }\n                                const publicKeyJSON = publicKeyInfo.toJSON();\n                                Object.assign(jwk, publicKeyJSON);\n                            }\n                            break;\n                        case \"RSAES-PKCS1-V1_5\":\n                            {\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                jwk.alg = \"PS1\";\n                                const publicKeyJSON = publicKeyInfo.toJSON();\n                                Object.assign(jwk, publicKeyJSON);\n                            }\n                            break;\n                        default:\n                            throw new Error(`Incorrect algorithm name: ${alg.name.toUpperCase()}`);\n                    }\n                }\n                break;\n            case \"pkcs8\":\n                {\n                    const privateKeyInfo = new PrivateKeyInfo();\n                    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(keyData));\n                    AsnError.assert(asn1, \"keyData\");\n                    try {\n                        privateKeyInfo.fromSchema(asn1.result);\n                    }\n                    catch (ex) {\n                        throw new Error(\"Incorrect keyData\");\n                    }\n                    if (!privateKeyInfo.parsedKey)\n                        throw new Error(\"Incorrect keyData\");\n                    switch (alg.name.toUpperCase()) {\n                        case \"RSA-PSS\":\n                            {\n                                switch ((_a = alg.hash) === null || _a === void 0 ? void 0 : _a.name.toUpperCase()) {\n                                    case \"SHA-1\":\n                                        jwk.alg = \"PS1\";\n                                        break;\n                                    case \"SHA-256\":\n                                        jwk.alg = \"PS256\";\n                                        break;\n                                    case \"SHA-384\":\n                                        jwk.alg = \"PS384\";\n                                        break;\n                                    case \"SHA-512\":\n                                        jwk.alg = \"PS512\";\n                                        break;\n                                    default:\n                                        throw new Error(`Incorrect hash algorithm: ${(_b = alg.hash) === null || _b === void 0 ? void 0 : _b.name.toUpperCase()}`);\n                                }\n                            }\n                        case \"RSASSA-PKCS1-V1_5\":\n                            {\n                                keyUsages = [\"sign\"];\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\n                                    throw new Error(`Incorrect private key algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\n                                if ((\"alg\" in jwk) === false) {\n                                    switch ((_c = alg.hash) === null || _c === void 0 ? void 0 : _c.name.toUpperCase()) {\n                                        case \"SHA-1\":\n                                            jwk.alg = \"RS1\";\n                                            break;\n                                        case \"SHA-256\":\n                                            jwk.alg = \"RS256\";\n                                            break;\n                                        case \"SHA-384\":\n                                            jwk.alg = \"RS384\";\n                                            break;\n                                        case \"SHA-512\":\n                                            jwk.alg = \"RS512\";\n                                            break;\n                                        default:\n                                            throw new Error(`Incorrect hash algorithm: ${(_d = alg.hash) === null || _d === void 0 ? void 0 : _d.name.toUpperCase()}`);\n                                    }\n                                }\n                                const privateKeyJSON = privateKeyInfo.toJSON();\n                                Object.assign(jwk, privateKeyJSON);\n                            }\n                            break;\n                        case \"ECDSA\":\n                            keyUsages = [\"sign\"];\n                        case \"ECDH\":\n                            {\n                                jwk = {\n                                    kty: \"EC\",\n                                    ext: extractable,\n                                    key_ops: keyUsages\n                                };\n                                if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.10045.2.1\")\n                                    throw new Error(`Incorrect algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\n                                const privateKeyJSON = privateKeyInfo.toJSON();\n                                Object.assign(jwk, privateKeyJSON);\n                            }\n                            break;\n                        case \"RSA-OAEP\":\n                            {\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                if (this.name.toLowerCase() === \"safari\")\n                                    jwk.alg = \"RSA-OAEP\";\n                                else {\n                                    switch ((_e = alg.hash) === null || _e === void 0 ? void 0 : _e.name.toUpperCase()) {\n                                        case \"SHA-1\":\n                                            jwk.alg = \"RSA-OAEP\";\n                                            break;\n                                        case \"SHA-256\":\n                                            jwk.alg = \"RSA-OAEP-256\";\n                                            break;\n                                        case \"SHA-384\":\n                                            jwk.alg = \"RSA-OAEP-384\";\n                                            break;\n                                        case \"SHA-512\":\n                                            jwk.alg = \"RSA-OAEP-512\";\n                                            break;\n                                        default:\n                                            throw new Error(`Incorrect hash algorithm: ${(_f = alg.hash) === null || _f === void 0 ? void 0 : _f.name.toUpperCase()}`);\n                                    }\n                                }\n                                const privateKeyJSON = privateKeyInfo.toJSON();\n                                Object.assign(jwk, privateKeyJSON);\n                            }\n                            break;\n                        case \"RSAES-PKCS1-V1_5\":\n                            {\n                                keyUsages = [\"decrypt\"];\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                jwk.alg = \"PS1\";\n                                const privateKeyJSON = privateKeyInfo.toJSON();\n                                Object.assign(jwk, privateKeyJSON);\n                            }\n                            break;\n                        default:\n                            throw new Error(`Incorrect algorithm name: ${alg.name.toUpperCase()}`);\n                    }\n                }\n                break;\n            case \"jwk\":\n                jwk = keyData;\n                break;\n            default:\n                throw new Error(`Incorrect format: ${format}`);\n        }\n        if (this.name.toLowerCase() === \"safari\") {\n            try {\n                return this.subtle.importKey(\"jwk\", pvutils__WEBPACK_IMPORTED_MODULE_2__.stringToArrayBuffer(JSON.stringify(jwk)), algorithm, extractable, keyUsages);\n            }\n            catch {\n                return this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\n            }\n        }\n        return this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\n    }\n    async exportKey(format, key) {\n        let jwk = await this.subtle.exportKey(\"jwk\", key);\n        if (this.name.toLowerCase() === \"safari\") {\n            if (jwk instanceof ArrayBuffer) {\n                jwk = JSON.parse(pvutils__WEBPACK_IMPORTED_MODULE_2__.arrayBufferToString(jwk));\n            }\n        }\n        switch (format.toLowerCase()) {\n            case \"raw\":\n                return this.subtle.exportKey(\"raw\", key);\n            case \"spki\": {\n                const publicKeyInfo = new PublicKeyInfo();\n                try {\n                    publicKeyInfo.fromJSON(jwk);\n                }\n                catch (ex) {\n                    throw new Error(\"Incorrect key data\");\n                }\n                return publicKeyInfo.toSchema().toBER(false);\n            }\n            case \"pkcs8\": {\n                const privateKeyInfo = new PrivateKeyInfo();\n                try {\n                    privateKeyInfo.fromJSON(jwk);\n                }\n                catch (ex) {\n                    throw new Error(\"Incorrect key data\");\n                }\n                return privateKeyInfo.toSchema().toBER(false);\n            }\n            case \"jwk\":\n                return jwk;\n            default:\n                throw new Error(`Incorrect format: ${format}`);\n        }\n    }\n    async convert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages) {\n        if (inputFormat.toLowerCase() === outputFormat.toLowerCase()) {\n            return keyData;\n        }\n        const key = await this.importKey(inputFormat, keyData, algorithm, extractable, keyUsages);\n        return this.exportKey(outputFormat, key);\n    }\n    getAlgorithmByOID(oid, safety = false, target) {\n        switch (oid) {\n            case \"1.2.840.113549.1.1.1\":\n                return {\n                    name: \"RSAES-PKCS1-v1_5\"\n                };\n            case \"1.2.840.113549.1.1.5\":\n                return {\n                    name: \"RSASSA-PKCS1-v1_5\",\n                    hash: {\n                        name: \"SHA-1\"\n                    }\n                };\n            case \"1.2.840.113549.1.1.11\":\n                return {\n                    name: \"RSASSA-PKCS1-v1_5\",\n                    hash: {\n                        name: \"SHA-256\"\n                    }\n                };\n            case \"1.2.840.113549.1.1.12\":\n                return {\n                    name: \"RSASSA-PKCS1-v1_5\",\n                    hash: {\n                        name: \"SHA-384\"\n                    }\n                };\n            case \"1.2.840.113549.1.1.13\":\n                return {\n                    name: \"RSASSA-PKCS1-v1_5\",\n                    hash: {\n                        name: \"SHA-512\"\n                    }\n                };\n            case \"1.2.840.113549.1.1.10\":\n                return {\n                    name: \"RSA-PSS\"\n                };\n            case \"1.2.840.113549.1.1.7\":\n                return {\n                    name: \"RSA-OAEP\"\n                };\n            case \"1.2.840.10045.2.1\":\n            case \"1.2.840.10045.4.1\":\n                return {\n                    name: \"ECDSA\",\n                    hash: {\n                        name: \"SHA-1\"\n                    }\n                };\n            case \"1.2.840.10045.4.3.2\":\n                return {\n                    name: \"ECDSA\",\n                    hash: {\n                        name: \"SHA-256\"\n                    }\n                };\n            case \"1.2.840.10045.4.3.3\":\n                return {\n                    name: \"ECDSA\",\n                    hash: {\n                        name: \"SHA-384\"\n                    }\n                };\n            case \"1.2.840.10045.4.3.4\":\n                return {\n                    name: \"ECDSA\",\n                    hash: {\n                        name: \"SHA-512\"\n                    }\n                };\n            case \"1.3.133.16.840.63.0.2\":\n                return {\n                    name: \"ECDH\",\n                    kdf: \"SHA-1\"\n                };\n            case \"1.3.132.1.11.1\":\n                return {\n                    name: \"ECDH\",\n                    kdf: \"SHA-256\"\n                };\n            case \"1.3.132.1.11.2\":\n                return {\n                    name: \"ECDH\",\n                    kdf: \"SHA-384\"\n                };\n            case \"1.3.132.1.11.3\":\n                return {\n                    name: \"ECDH\",\n                    kdf: \"SHA-512\"\n                };\n            case \"2.16.840.1.101.3.4.1.2\":\n                return {\n                    name: \"AES-CBC\",\n                    length: 128\n                };\n            case \"2.16.840.1.101.3.4.1.22\":\n                return {\n                    name: \"AES-CBC\",\n                    length: 192\n                };\n            case \"2.16.840.1.101.3.4.1.42\":\n                return {\n                    name: \"AES-CBC\",\n                    length: 256\n                };\n            case \"2.16.840.1.101.3.4.1.6\":\n                return {\n                    name: \"AES-GCM\",\n                    length: 128\n                };\n            case \"2.16.840.1.101.3.4.1.26\":\n                return {\n                    name: \"AES-GCM\",\n                    length: 192\n                };\n            case \"2.16.840.1.101.3.4.1.46\":\n                return {\n                    name: \"AES-GCM\",\n                    length: 256\n                };\n            case \"2.16.840.1.101.3.4.1.4\":\n                return {\n                    name: \"AES-CFB\",\n                    length: 128\n                };\n            case \"2.16.840.1.101.3.4.1.24\":\n                return {\n                    name: \"AES-CFB\",\n                    length: 192\n                };\n            case \"2.16.840.1.101.3.4.1.44\":\n                return {\n                    name: \"AES-CFB\",\n                    length: 256\n                };\n            case \"2.16.840.1.101.3.4.1.5\":\n                return {\n                    name: \"AES-KW\",\n                    length: 128\n                };\n            case \"2.16.840.1.101.3.4.1.25\":\n                return {\n                    name: \"AES-KW\",\n                    length: 192\n                };\n            case \"2.16.840.1.101.3.4.1.45\":\n                return {\n                    name: \"AES-KW\",\n                    length: 256\n                };\n            case \"1.2.840.113549.2.7\":\n                return {\n                    name: \"HMAC\",\n                    hash: {\n                        name: \"SHA-1\"\n                    }\n                };\n            case \"1.2.840.113549.2.9\":\n                return {\n                    name: \"HMAC\",\n                    hash: {\n                        name: \"SHA-256\"\n                    }\n                };\n            case \"1.2.840.113549.2.10\":\n                return {\n                    name: \"HMAC\",\n                    hash: {\n                        name: \"SHA-384\"\n                    }\n                };\n            case \"1.2.840.113549.2.11\":\n                return {\n                    name: \"HMAC\",\n                    hash: {\n                        name: \"SHA-512\"\n                    }\n                };\n            case \"1.2.840.113549.1.9.16.3.5\":\n                return {\n                    name: \"DH\"\n                };\n            case \"1.3.14.3.2.26\":\n                return {\n                    name: \"SHA-1\"\n                };\n            case \"2.16.840.1.101.3.4.2.1\":\n                return {\n                    name: \"SHA-256\"\n                };\n            case \"2.16.840.1.101.3.4.2.2\":\n                return {\n                    name: \"SHA-384\"\n                };\n            case \"2.16.840.1.101.3.4.2.3\":\n                return {\n                    name: \"SHA-512\"\n                };\n            case \"1.2.840.113549.1.5.12\":\n                return {\n                    name: \"PBKDF2\"\n                };\n            case \"1.2.840.10045.3.1.7\":\n                return {\n                    name: \"P-256\"\n                };\n            case \"1.3.132.0.34\":\n                return {\n                    name: \"P-384\"\n                };\n            case \"1.3.132.0.35\":\n                return {\n                    name: \"P-521\"\n                };\n        }\n        if (safety) {\n            throw new Error(`Unsupported algorithm identifier ${target ? `for ${target} ` : EMPTY_STRING}: ${oid}`);\n        }\n        return {};\n    }\n    getOIDByAlgorithm(algorithm, safety = false, target) {\n        let result = EMPTY_STRING;\n        switch (algorithm.name.toUpperCase()) {\n            case \"RSAES-PKCS1-V1_5\":\n                result = \"1.2.840.113549.1.1.1\";\n                break;\n            case \"RSASSA-PKCS1-V1_5\":\n                switch (algorithm.hash.name.toUpperCase()) {\n                    case \"SHA-1\":\n                        result = \"1.2.840.113549.1.1.5\";\n                        break;\n                    case \"SHA-256\":\n                        result = \"1.2.840.113549.1.1.11\";\n                        break;\n                    case \"SHA-384\":\n                        result = \"1.2.840.113549.1.1.12\";\n                        break;\n                    case \"SHA-512\":\n                        result = \"1.2.840.113549.1.1.13\";\n                        break;\n                }\n                break;\n            case \"RSA-PSS\":\n                result = \"1.2.840.113549.1.1.10\";\n                break;\n            case \"RSA-OAEP\":\n                result = \"1.2.840.113549.1.1.7\";\n                break;\n            case \"ECDSA\":\n                switch (algorithm.hash.name.toUpperCase()) {\n                    case \"SHA-1\":\n                        result = \"1.2.840.10045.4.1\";\n                        break;\n                    case \"SHA-256\":\n                        result = \"1.2.840.10045.4.3.2\";\n                        break;\n                    case \"SHA-384\":\n                        result = \"1.2.840.10045.4.3.3\";\n                        break;\n                    case \"SHA-512\":\n                        result = \"1.2.840.10045.4.3.4\";\n                        break;\n                }\n                break;\n            case \"ECDH\":\n                switch (algorithm.kdf.toUpperCase()) {\n                    case \"SHA-1\":\n                        result = \"1.3.133.16.840.63.0.2\";\n                        break;\n                    case \"SHA-256\":\n                        result = \"1.3.132.1.11.1\";\n                        break;\n                    case \"SHA-384\":\n                        result = \"1.3.132.1.11.2\";\n                        break;\n                    case \"SHA-512\":\n                        result = \"1.3.132.1.11.3\";\n                        break;\n                }\n                break;\n            case \"AES-CTR\":\n                break;\n            case \"AES-CBC\":\n                switch (algorithm.length) {\n                    case 128:\n                        result = \"2.16.840.1.101.3.4.1.2\";\n                        break;\n                    case 192:\n                        result = \"2.16.840.1.101.3.4.1.22\";\n                        break;\n                    case 256:\n                        result = \"2.16.840.1.101.3.4.1.42\";\n                        break;\n                }\n                break;\n            case \"AES-CMAC\":\n                break;\n            case \"AES-GCM\":\n                switch (algorithm.length) {\n                    case 128:\n                        result = \"2.16.840.1.101.3.4.1.6\";\n                        break;\n                    case 192:\n                        result = \"2.16.840.1.101.3.4.1.26\";\n                        break;\n                    case 256:\n                        result = \"2.16.840.1.101.3.4.1.46\";\n                        break;\n                }\n                break;\n            case \"AES-CFB\":\n                switch (algorithm.length) {\n                    case 128:\n                        result = \"2.16.840.1.101.3.4.1.4\";\n                        break;\n                    case 192:\n                        result = \"2.16.840.1.101.3.4.1.24\";\n                        break;\n                    case 256:\n                        result = \"2.16.840.1.101.3.4.1.44\";\n                        break;\n                }\n                break;\n            case \"AES-KW\":\n                switch (algorithm.length) {\n                    case 128:\n                        result = \"2.16.840.1.101.3.4.1.5\";\n                        break;\n                    case 192:\n                        result = \"2.16.840.1.101.3.4.1.25\";\n                        break;\n                    case 256:\n                        result = \"2.16.840.1.101.3.4.1.45\";\n                        break;\n                }\n                break;\n            case \"HMAC\":\n                switch (algorithm.hash.name.toUpperCase()) {\n                    case \"SHA-1\":\n                        result = \"1.2.840.113549.2.7\";\n                        break;\n                    case \"SHA-256\":\n                        result = \"1.2.840.113549.2.9\";\n                        break;\n                    case \"SHA-384\":\n                        result = \"1.2.840.113549.2.10\";\n                        break;\n                    case \"SHA-512\":\n                        result = \"1.2.840.113549.2.11\";\n                        break;\n                }\n                break;\n            case \"DH\":\n                result = \"1.2.840.113549.1.9.16.3.5\";\n                break;\n            case \"SHA-1\":\n                result = \"1.3.14.3.2.26\";\n                break;\n            case \"SHA-256\":\n                result = \"2.16.840.1.101.3.4.2.1\";\n                break;\n            case \"SHA-384\":\n                result = \"2.16.840.1.101.3.4.2.2\";\n                break;\n            case \"SHA-512\":\n                result = \"2.16.840.1.101.3.4.2.3\";\n                break;\n            case \"CONCAT\":\n                break;\n            case \"HKDF\":\n                break;\n            case \"PBKDF2\":\n                result = \"1.2.840.113549.1.5.12\";\n                break;\n            case \"P-256\":\n                result = \"1.2.840.10045.3.1.7\";\n                break;\n            case \"P-384\":\n                result = \"1.3.132.0.34\";\n                break;\n            case \"P-521\":\n                result = \"1.3.132.0.35\";\n                break;\n        }\n        if (!result && safety) {\n            throw new Error(`Unsupported algorithm ${target ? `for ${target} ` : EMPTY_STRING}: ${algorithm.name}`);\n        }\n        return result;\n    }\n    getAlgorithmParameters(algorithmName, operation) {\n        let result = {\n            algorithm: {},\n            usages: []\n        };\n        switch (algorithmName.toUpperCase()) {\n            case \"RSAES-PKCS1-V1_5\":\n            case \"RSASSA-PKCS1-V1_5\":\n                switch (operation.toLowerCase()) {\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSASSA-PKCS1-v1_5\",\n                                modulusLength: 2048,\n                                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"verify\":\n                    case \"sign\":\n                    case \"importkey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSASSA-PKCS1-v1_5\",\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"verify\"]\n                        };\n                        break;\n                    case \"exportkey\":\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"RSASSA-PKCS1-v1_5\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"RSA-PSS\":\n                switch (operation.toLowerCase()) {\n                    case \"sign\":\n                    case \"verify\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-PSS\",\n                                hash: {\n                                    name: \"SHA-1\"\n                                },\n                                saltLength: 20\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-PSS\",\n                                modulusLength: 2048,\n                                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                                hash: {\n                                    name: \"SHA-1\"\n                                }\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"importkey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-PSS\",\n                                hash: {\n                                    name: \"SHA-1\"\n                                }\n                            },\n                            usages: [\"verify\"]\n                        };\n                        break;\n                    case \"exportkey\":\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"RSA-PSS\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"RSA-OAEP\":\n                switch (operation.toLowerCase()) {\n                    case \"encrypt\":\n                    case \"decrypt\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-OAEP\"\n                            },\n                            usages: [\"encrypt\", \"decrypt\"]\n                        };\n                        break;\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-OAEP\",\n                                modulusLength: 2048,\n                                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    case \"importkey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-OAEP\",\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"encrypt\"]\n                        };\n                        break;\n                    case \"exportkey\":\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"RSA-OAEP\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"ECDSA\":\n                switch (operation.toLowerCase()) {\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDSA\",\n                                namedCurve: \"P-256\"\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"importkey\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDSA\",\n                                namedCurve: \"P-256\"\n                            },\n                            usages: [\"verify\"]\n                        };\n                        break;\n                    case \"verify\":\n                    case \"sign\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDSA\",\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"sign\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"ECDSA\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"ECDH\":\n                switch (operation.toLowerCase()) {\n                    case \"exportkey\":\n                    case \"importkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDH\",\n                                namedCurve: \"P-256\"\n                            },\n                            usages: [\"deriveKey\", \"deriveBits\"]\n                        };\n                        break;\n                    case \"derivekey\":\n                    case \"derivebits\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDH\",\n                                namedCurve: \"P-256\",\n                                public: []\n                            },\n                            usages: [\"encrypt\", \"decrypt\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"ECDH\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"AES-CTR\":\n                switch (operation.toLowerCase()) {\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-CTR\",\n                                length: 256\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    case \"decrypt\":\n                    case \"encrypt\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-CTR\",\n                                counter: new Uint8Array(16),\n                                length: 10\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"AES-CTR\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"AES-CBC\":\n                switch (operation.toLowerCase()) {\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-CBC\",\n                                length: 256\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    case \"decrypt\":\n                    case \"encrypt\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-CBC\",\n                                iv: this.getRandomValues(new Uint8Array(16))\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"AES-CBC\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"AES-GCM\":\n                switch (operation.toLowerCase()) {\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-GCM\",\n                                length: 256\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    case \"decrypt\":\n                    case \"encrypt\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-GCM\",\n                                iv: this.getRandomValues(new Uint8Array(16))\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"AES-GCM\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"AES-KW\":\n                switch (operation.toLowerCase()) {\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                    case \"wrapkey\":\n                    case \"unwrapkey\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-KW\",\n                                length: 256\n                            },\n                            usages: [\"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"AES-KW\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"HMAC\":\n                switch (operation.toLowerCase()) {\n                    case \"sign\":\n                    case \"verify\":\n                        result = {\n                            algorithm: {\n                                name: \"HMAC\"\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"HMAC\",\n                                length: 32,\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"HMAC\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"HKDF\":\n                switch (operation.toLowerCase()) {\n                    case \"derivekey\":\n                        result = {\n                            algorithm: {\n                                name: \"HKDF\",\n                                hash: \"SHA-256\",\n                                salt: new Uint8Array([]),\n                                info: new Uint8Array([])\n                            },\n                            usages: [\"encrypt\", \"decrypt\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"HKDF\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"PBKDF2\":\n                switch (operation.toLowerCase()) {\n                    case \"derivekey\":\n                        result = {\n                            algorithm: {\n                                name: \"PBKDF2\",\n                                hash: { name: \"SHA-256\" },\n                                salt: new Uint8Array([]),\n                                iterations: 10000\n                            },\n                            usages: [\"encrypt\", \"decrypt\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"PBKDF2\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n        }\n        return result;\n    }\n    getHashAlgorithm(signatureAlgorithm) {\n        let result = EMPTY_STRING;\n        switch (signatureAlgorithm.algorithmId) {\n            case \"1.2.840.10045.4.1\":\n            case \"1.2.840.113549.1.1.5\":\n                result = \"SHA-1\";\n                break;\n            case \"1.2.840.10045.4.3.2\":\n            case \"1.2.840.113549.1.1.11\":\n                result = \"SHA-256\";\n                break;\n            case \"1.2.840.10045.4.3.3\":\n            case \"1.2.840.113549.1.1.12\":\n                result = \"SHA-384\";\n                break;\n            case \"1.2.840.10045.4.3.4\":\n            case \"1.2.840.113549.1.1.13\":\n                result = \"SHA-512\";\n                break;\n            case \"1.2.840.113549.1.1.10\":\n                {\n                    try {\n                        const params = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\n                        if (params.hashAlgorithm) {\n                            const algorithm = this.getAlgorithmByOID(params.hashAlgorithm.algorithmId);\n                            if (\"name\" in algorithm) {\n                                result = algorithm.name;\n                            }\n                            else {\n                                return EMPTY_STRING;\n                            }\n                        }\n                        else\n                            result = \"SHA-1\";\n                    }\n                    catch {\n                    }\n                }\n                break;\n        }\n        return result;\n    }\n    async encryptEncryptedContentInfo(parameters) {\n        ParameterError.assert(parameters, \"password\", \"contentEncryptionAlgorithm\", \"hmacHashAlgorithm\", \"iterationCount\", \"contentToEncrypt\", \"contentToEncrypt\", \"contentType\");\n        const contentEncryptionOID = this.getOIDByAlgorithm(parameters.contentEncryptionAlgorithm, true, \"contentEncryptionAlgorithm\");\n        const pbkdf2OID = this.getOIDByAlgorithm({\n            name: \"PBKDF2\"\n        }, true, \"PBKDF2\");\n        const hmacOID = this.getOIDByAlgorithm({\n            name: \"HMAC\",\n            hash: {\n                name: parameters.hmacHashAlgorithm\n            }\n        }, true, \"hmacHashAlgorithm\");\n        const ivBuffer = new ArrayBuffer(16);\n        const ivView = new Uint8Array(ivBuffer);\n        this.getRandomValues(ivView);\n        const saltBuffer = new ArrayBuffer(64);\n        const saltView = new Uint8Array(saltBuffer);\n        this.getRandomValues(saltView);\n        const contentView = new Uint8Array(parameters.contentToEncrypt);\n        const pbkdf2Params = new PBKDF2Params({\n            salt: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: saltBuffer }),\n            iterationCount: parameters.iterationCount,\n            prf: new AlgorithmIdentifier({\n                algorithmId: hmacOID,\n                algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n            })\n        });\n        const passwordView = new Uint8Array(parameters.password);\n        const pbkdfKey = await this.importKey(\"raw\", passwordView, \"PBKDF2\", false, [\"deriveKey\"]);\n        const derivedKey = await this.deriveKey({\n            name: \"PBKDF2\",\n            hash: {\n                name: parameters.hmacHashAlgorithm\n            },\n            salt: saltView,\n            iterations: parameters.iterationCount\n        }, pbkdfKey, parameters.contentEncryptionAlgorithm, false, [\"encrypt\"]);\n        const encryptedData = await this.encrypt({\n            name: parameters.contentEncryptionAlgorithm.name,\n            iv: ivView\n        }, derivedKey, contentView);\n        const pbes2Parameters = new PBES2Params({\n            keyDerivationFunc: new AlgorithmIdentifier({\n                algorithmId: pbkdf2OID,\n                algorithmParams: pbkdf2Params.toSchema()\n            }),\n            encryptionScheme: new AlgorithmIdentifier({\n                algorithmId: contentEncryptionOID,\n                algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: ivBuffer })\n            })\n        });\n        return new EncryptedContentInfo({\n            contentType: parameters.contentType,\n            contentEncryptionAlgorithm: new AlgorithmIdentifier({\n                algorithmId: \"1.2.840.113549.1.5.13\",\n                algorithmParams: pbes2Parameters.toSchema()\n            }),\n            encryptedContent: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: encryptedData })\n        });\n    }\n    async decryptEncryptedContentInfo(parameters) {\n        ParameterError.assert(parameters, \"password\", \"encryptedContentInfo\");\n        if (parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== \"1.2.840.113549.1.5.13\")\n            throw new Error(`Unknown \"contentEncryptionAlgorithm\": ${parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\n        let pbes2Parameters;\n        try {\n            pbes2Parameters = new PBES2Params({ schema: parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams });\n        }\n        catch (ex) {\n            throw new Error(\"Incorrectly encoded \\\"pbes2Parameters\\\"\");\n        }\n        let pbkdf2Params;\n        try {\n            pbkdf2Params = new PBKDF2Params({ schema: pbes2Parameters.keyDerivationFunc.algorithmParams });\n        }\n        catch (ex) {\n            throw new Error(\"Incorrectly encoded \\\"pbkdf2Params\\\"\");\n        }\n        const contentEncryptionAlgorithm = this.getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId, true);\n        const ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;\n        const ivView = new Uint8Array(ivBuffer);\n        const saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;\n        const saltView = new Uint8Array(saltBuffer);\n        const iterationCount = pbkdf2Params.iterationCount;\n        let hmacHashAlgorithm = \"SHA-1\";\n        if (pbkdf2Params.prf) {\n            const algorithm = this.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true);\n            hmacHashAlgorithm = algorithm.hash.name;\n        }\n        const pbkdfKey = await this.importKey(\"raw\", parameters.password, \"PBKDF2\", false, [\"deriveKey\"]);\n        const result = await this.deriveKey({\n            name: \"PBKDF2\",\n            hash: {\n                name: hmacHashAlgorithm\n            },\n            salt: saltView,\n            iterations: iterationCount\n        }, pbkdfKey, contentEncryptionAlgorithm, false, [\"decrypt\"]);\n        const dataBuffer = parameters.encryptedContentInfo.getEncryptedContent();\n        return this.decrypt({\n            name: contentEncryptionAlgorithm.name,\n            iv: ivView\n        }, result, dataBuffer);\n    }\n    async stampDataWithPassword(parameters) {\n        if ((parameters instanceof Object) === false)\n            throw new Error(\"Parameters must have type \\\"Object\\\"\");\n        ParameterError.assert(parameters, \"password\", \"hashAlgorithm\", \"iterationCount\", \"salt\", \"contentToStamp\");\n        let length;\n        switch (parameters.hashAlgorithm.toLowerCase()) {\n            case \"sha-1\":\n                length = 160;\n                break;\n            case \"sha-256\":\n                length = 256;\n                break;\n            case \"sha-384\":\n                length = 384;\n                break;\n            case \"sha-512\":\n                length = 512;\n                break;\n            default:\n                throw new Error(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\n        }\n        const hmacAlgorithm = {\n            name: \"HMAC\",\n            length,\n            hash: {\n                name: parameters.hashAlgorithm\n            }\n        };\n        const pkcsKey = await makePKCS12B2Key(parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount);\n        const hmacKey = await this.importKey(\"raw\", new Uint8Array(pkcsKey), hmacAlgorithm, false, [\"sign\"]);\n        return this.sign(hmacAlgorithm, hmacKey, new Uint8Array(parameters.contentToStamp));\n    }\n    async verifyDataStampedWithPassword(parameters) {\n        ParameterError.assert(parameters, \"password\", \"hashAlgorithm\", \"salt\", \"iterationCount\", \"contentToVerify\", \"signatureToVerify\");\n        let length = 0;\n        switch (parameters.hashAlgorithm.toLowerCase()) {\n            case \"sha-1\":\n                length = 160;\n                break;\n            case \"sha-256\":\n                length = 256;\n                break;\n            case \"sha-384\":\n                length = 384;\n                break;\n            case \"sha-512\":\n                length = 512;\n                break;\n            default:\n                throw new Error(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\n        }\n        const hmacAlgorithm = {\n            name: \"HMAC\",\n            length,\n            hash: {\n                name: parameters.hashAlgorithm\n            }\n        };\n        const pkcsKey = await makePKCS12B2Key(parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount);\n        const hmacKey = await this.importKey(\"raw\", new Uint8Array(pkcsKey), hmacAlgorithm, false, [\"verify\"]);\n        return this.verify(hmacAlgorithm, hmacKey, new Uint8Array(parameters.signatureToVerify), new Uint8Array(parameters.contentToVerify));\n    }\n    async getSignatureParameters(privateKey, hashAlgorithm = \"SHA-1\") {\n        this.getOIDByAlgorithm({ name: hashAlgorithm }, true, \"hashAlgorithm\");\n        const signatureAlgorithm = new AlgorithmIdentifier();\n        const parameters = this.getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\n        if (!Object.keys(parameters.algorithm).length) {\n            throw new Error(\"Parameter 'algorithm' is empty\");\n        }\n        const algorithm = parameters.algorithm;\n        if (\"hash\" in privateKey.algorithm && privateKey.algorithm.hash && privateKey.algorithm.hash.name) {\n            algorithm.hash.name = privateKey.algorithm.hash.name;\n        }\n        else {\n            algorithm.hash.name = hashAlgorithm;\n        }\n        switch (privateKey.algorithm.name.toUpperCase()) {\n            case \"RSASSA-PKCS1-V1_5\":\n            case \"ECDSA\":\n                signatureAlgorithm.algorithmId = this.getOIDByAlgorithm(algorithm, true);\n                break;\n            case \"RSA-PSS\":\n                {\n                    switch (algorithm.hash.name.toUpperCase()) {\n                        case \"SHA-256\":\n                            algorithm.saltLength = 32;\n                            break;\n                        case \"SHA-384\":\n                            algorithm.saltLength = 48;\n                            break;\n                        case \"SHA-512\":\n                            algorithm.saltLength = 64;\n                            break;\n                    }\n                    const paramsObject = {};\n                    if (algorithm.hash.name.toUpperCase() !== \"SHA-1\") {\n                        const hashAlgorithmOID = this.getOIDByAlgorithm({ name: algorithm.hash.name }, true, \"hashAlgorithm\");\n                        paramsObject.hashAlgorithm = new AlgorithmIdentifier({\n                            algorithmId: hashAlgorithmOID,\n                            algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                        });\n                        paramsObject.maskGenAlgorithm = new AlgorithmIdentifier({\n                            algorithmId: \"1.2.840.113549.1.1.8\",\n                            algorithmParams: paramsObject.hashAlgorithm.toSchema()\n                        });\n                    }\n                    if (algorithm.saltLength !== 20)\n                        paramsObject.saltLength = algorithm.saltLength;\n                    const pssParameters = new RSASSAPSSParams(paramsObject);\n                    signatureAlgorithm.algorithmId = \"1.2.840.113549.1.1.10\";\n                    signatureAlgorithm.algorithmParams = pssParameters.toSchema();\n                }\n                break;\n            default:\n                throw new Error(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\n        }\n        return {\n            signatureAlgorithm,\n            parameters\n        };\n    }\n    async signWithPrivateKey(data, privateKey, parameters) {\n        const signature = await this.sign(parameters.algorithm, privateKey, data);\n        if (parameters.algorithm.name === \"ECDSA\") {\n            return createCMSECDSASignature(signature);\n        }\n        return signature;\n    }\n    fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm) {\n        const parameters = {};\n        const shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\n        if (shaAlgorithm === EMPTY_STRING)\n            throw new Error(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\n        let algorithmId;\n        if (signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\n            algorithmId = signatureAlgorithm.algorithmId;\n        else\n            algorithmId = publicKeyInfo.algorithm.algorithmId;\n        const algorithmObject = this.getAlgorithmByOID(algorithmId, true);\n        parameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importKey\");\n        if (\"hash\" in parameters.algorithm.algorithm)\n            parameters.algorithm.algorithm.hash.name = shaAlgorithm;\n        if (algorithmObject.name === \"ECDSA\") {\n            const publicKeyAlgorithm = publicKeyInfo.algorithm;\n            if (!publicKeyAlgorithm.algorithmParams) {\n                throw new Error(\"Algorithm parameters for ECDSA public key are missed\");\n            }\n            const publicKeyAlgorithmParams = publicKeyAlgorithm.algorithmParams;\n            if (\"idBlock\" in publicKeyAlgorithm.algorithmParams) {\n                if (!((publicKeyAlgorithmParams.idBlock.tagClass === 1) && (publicKeyAlgorithmParams.idBlock.tagNumber === 6))) {\n                    throw new Error(\"Incorrect type for ECDSA public key parameters\");\n                }\n            }\n            const curveObject = this.getAlgorithmByOID(publicKeyAlgorithmParams.valueBlock.toString(), true);\n            parameters.algorithm.algorithm.namedCurve = curveObject.name;\n        }\n        return parameters;\n    }\n    async getPublicKey(publicKeyInfo, signatureAlgorithm, parameters) {\n        if (!parameters) {\n            parameters = this.fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm);\n        }\n        const publicKeyInfoBuffer = publicKeyInfo.toSchema().toBER(false);\n        return this.importKey(\"spki\", publicKeyInfoBuffer, parameters.algorithm.algorithm, true, parameters.algorithm.usages);\n    }\n    async verifyWithPublicKey(data, signature, publicKeyInfo, signatureAlgorithm, shaAlgorithm) {\n        let publicKey;\n        if (!shaAlgorithm) {\n            shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\n            if (!shaAlgorithm)\n                throw new Error(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\n            publicKey = await this.getPublicKey(publicKeyInfo, signatureAlgorithm);\n        }\n        else {\n            const parameters = {};\n            let algorithmId;\n            if (signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\n                algorithmId = signatureAlgorithm.algorithmId;\n            else\n                algorithmId = publicKeyInfo.algorithm.algorithmId;\n            const algorithmObject = this.getAlgorithmByOID(algorithmId, true);\n            parameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importKey\");\n            if (\"hash\" in parameters.algorithm.algorithm)\n                parameters.algorithm.algorithm.hash.name = shaAlgorithm;\n            if (algorithmObject.name === \"ECDSA\") {\n                let algorithmParamsChecked = false;\n                if ((\"algorithmParams\" in publicKeyInfo.algorithm) === true) {\n                    if (\"idBlock\" in publicKeyInfo.algorithm.algorithmParams) {\n                        if ((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\n                            algorithmParamsChecked = true;\n                    }\n                }\n                if (algorithmParamsChecked === false) {\n                    throw new Error(\"Incorrect type for ECDSA public key parameters\");\n                }\n                const curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString(), true);\n                parameters.algorithm.algorithm.namedCurve = curveObject.name;\n            }\n            publicKey = await this.getPublicKey(publicKeyInfo, null, parameters);\n        }\n        const algorithm = this.getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\n        if (\"hash\" in algorithm.algorithm)\n            algorithm.algorithm.hash.name = shaAlgorithm;\n        let signatureValue = signature.valueBlock.valueHexView;\n        if (publicKey.algorithm.name === \"ECDSA\") {\n            const namedCurve = ECNamedCurves.find(publicKey.algorithm.namedCurve);\n            if (!namedCurve) {\n                throw new Error(\"Unsupported named curve in use\");\n            }\n            const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(signatureValue);\n            AsnError.assert(asn1, \"Signature value\");\n            signatureValue = createECDSASignatureFromCMS(asn1.result, namedCurve.size);\n        }\n        if (publicKey.algorithm.name === \"RSA-PSS\") {\n            const pssParameters = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\n            if (\"saltLength\" in pssParameters)\n                algorithm.algorithm.saltLength = pssParameters.saltLength;\n            else\n                algorithm.algorithm.saltLength = 20;\n            let hashAlgo = \"SHA-1\";\n            if (\"hashAlgorithm\" in pssParameters) {\n                const hashAlgorithm = this.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId, true);\n                hashAlgo = hashAlgorithm.name;\n            }\n            algorithm.algorithm.hash.name = hashAlgo;\n        }\n        return this.verify(algorithm.algorithm, publicKey, signatureValue, data);\n    }\n}\n\nlet engine = {\n    name: \"none\",\n    crypto: null,\n};\nfunction isCryptoEngine(engine) {\n    return engine\n        && typeof engine === \"object\"\n        && \"crypto\" in engine\n        ? true\n        : false;\n}\nfunction setEngine(name, ...args) {\n    let crypto = null;\n    if (args.length < 2) {\n        if (args.length) {\n            crypto = args[0];\n        }\n        else {\n            crypto = typeof self !== \"undefined\" && self.crypto ? new CryptoEngine({ name: \"browser\", crypto: self.crypto }) : null;\n        }\n    }\n    else {\n        const cryptoArg = args[0];\n        const subtleArg = args[1];\n        if (isCryptoEngine(subtleArg)) {\n            crypto = subtleArg;\n        }\n        else if (isCryptoEngine(cryptoArg)) {\n            crypto = cryptoArg;\n        }\n        else if (\"subtle\" in cryptoArg && \"getRandomValues\" in cryptoArg) {\n            crypto = new CryptoEngine({\n                crypto: cryptoArg,\n            });\n        }\n    }\n    if ((typeof process !== \"undefined\") && (\"pid\" in process) && (typeof global !== \"undefined\") && (typeof window === \"undefined\")) {\n        if (typeof global[process.pid] === \"undefined\") {\n            global[process.pid] = {};\n        }\n        else {\n            if (typeof global[process.pid] !== \"object\") {\n                throw new Error(`Name global.${process.pid} already exists and it is not an object`);\n            }\n        }\n        if (typeof global[process.pid].pkijs === \"undefined\") {\n            global[process.pid].pkijs = {};\n        }\n        else {\n            if (typeof global[process.pid].pkijs !== \"object\") {\n                throw new Error(`Name global.${process.pid}.pkijs already exists and it is not an object`);\n            }\n        }\n        global[process.pid].pkijs.engine = {\n            name: name,\n            crypto,\n        };\n    }\n    else {\n        engine = {\n            name: name,\n            crypto,\n        };\n    }\n}\nfunction getEngine() {\n    if ((typeof process !== \"undefined\") && (\"pid\" in process) && (typeof global !== \"undefined\") && (typeof window === \"undefined\")) {\n        let _engine;\n        try {\n            _engine = global[process.pid].pkijs.engine;\n        }\n        catch (ex) {\n            throw new Error(\"Please call 'setEngine' before call to 'getEngine'\");\n        }\n        return _engine;\n    }\n    return engine;\n}\nfunction getCrypto(safety = false) {\n    const _engine = getEngine();\n    if (!_engine.crypto && safety) {\n        throw new Error(\"Unable to create WebCrypto object\");\n    }\n    return _engine.crypto;\n}\nfunction getRandomValues(view) {\n    return getCrypto(true).getRandomValues(view);\n}\nfunction getOIDByAlgorithm(algorithm, safety, target) {\n    return getCrypto(true).getOIDByAlgorithm(algorithm, safety, target);\n}\nfunction getAlgorithmParameters(algorithmName, operation) {\n    return getCrypto(true).getAlgorithmParameters(algorithmName, operation);\n}\nfunction createCMSECDSASignature(signatureBuffer) {\n    if ((signatureBuffer.byteLength % 2) !== 0)\n        return EMPTY_BUFFER;\n    const length = signatureBuffer.byteLength / 2;\n    const rBuffer = new ArrayBuffer(length);\n    const rView = new Uint8Array(rBuffer);\n    rView.set(new Uint8Array(signatureBuffer, 0, length));\n    const rInteger = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: rBuffer });\n    const sBuffer = new ArrayBuffer(length);\n    const sView = new Uint8Array(sBuffer);\n    sView.set(new Uint8Array(signatureBuffer, length, length));\n    const sInteger = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: sBuffer });\n    return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n        value: [\n            rInteger.convertToDER(),\n            sInteger.convertToDER()\n        ]\n    })).toBER(false);\n}\nfunction createECDSASignatureFromCMS(cmsSignature, pointSize) {\n    if (!(cmsSignature instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence\n        && cmsSignature.valueBlock.value.length === 2\n        && cmsSignature.valueBlock.value[0] instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer\n        && cmsSignature.valueBlock.value[1] instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer))\n        return EMPTY_BUFFER;\n    const rValueView = cmsSignature.valueBlock.value[0].convertFromDER().valueBlock.valueHexView;\n    const sValueView = cmsSignature.valueBlock.value[1].convertFromDER().valueBlock.valueHexView;\n    const res = new Uint8Array(pointSize * 2);\n    res.set(rValueView, pointSize - rValueView.byteLength);\n    res.set(sValueView, (2 * pointSize) - sValueView.byteLength);\n    return res.buffer;\n}\nfunction getAlgorithmByOID(oid, safety = false, target) {\n    return getCrypto(true).getAlgorithmByOID(oid, safety, target);\n}\nfunction getHashAlgorithm(signatureAlgorithm) {\n    return getCrypto(true).getHashAlgorithm(signatureAlgorithm);\n}\nasync function kdfWithCounter(hashFunction, zBuffer, Counter, SharedInfo, crypto) {\n    switch (hashFunction.toUpperCase()) {\n        case \"SHA-1\":\n        case \"SHA-256\":\n        case \"SHA-384\":\n        case \"SHA-512\":\n            break;\n        default:\n            throw new ArgumentError(`Unknown hash function: ${hashFunction}`);\n    }\n    ArgumentError.assert(zBuffer, \"zBuffer\", \"ArrayBuffer\");\n    if (zBuffer.byteLength === 0)\n        throw new ArgumentError(\"'zBuffer' has zero length, error\");\n    ArgumentError.assert(SharedInfo, \"SharedInfo\", \"ArrayBuffer\");\n    if (Counter > 255)\n        throw new ArgumentError(\"Please set 'Counter' argument to value less or equal to 255\");\n    const counterBuffer = new ArrayBuffer(4);\n    const counterView = new Uint8Array(counterBuffer);\n    counterView[0] = 0x00;\n    counterView[1] = 0x00;\n    counterView[2] = 0x00;\n    counterView[3] = Counter;\n    let combinedBuffer = EMPTY_BUFFER;\n    combinedBuffer = pvutils__WEBPACK_IMPORTED_MODULE_2__.utilConcatBuf(combinedBuffer, zBuffer);\n    combinedBuffer = pvutils__WEBPACK_IMPORTED_MODULE_2__.utilConcatBuf(combinedBuffer, counterBuffer);\n    combinedBuffer = pvutils__WEBPACK_IMPORTED_MODULE_2__.utilConcatBuf(combinedBuffer, SharedInfo);\n    const result = await crypto.digest({ name: hashFunction }, combinedBuffer);\n    return {\n        counter: Counter,\n        result\n    };\n}\nasync function kdf(hashFunction, Zbuffer, keydatalen, SharedInfo, crypto = getCrypto(true)) {\n    let hashLength = 0;\n    let maxCounter = 1;\n    switch (hashFunction.toUpperCase()) {\n        case \"SHA-1\":\n            hashLength = 160;\n            break;\n        case \"SHA-256\":\n            hashLength = 256;\n            break;\n        case \"SHA-384\":\n            hashLength = 384;\n            break;\n        case \"SHA-512\":\n            hashLength = 512;\n            break;\n        default:\n            throw new ArgumentError(`Unknown hash function: ${hashFunction}`);\n    }\n    ArgumentError.assert(Zbuffer, \"Zbuffer\", \"ArrayBuffer\");\n    if (Zbuffer.byteLength === 0)\n        throw new ArgumentError(\"'Zbuffer' has zero length, error\");\n    ArgumentError.assert(SharedInfo, \"SharedInfo\", \"ArrayBuffer\");\n    const quotient = keydatalen / hashLength;\n    if (Math.floor(quotient) > 0) {\n        maxCounter = Math.floor(quotient);\n        if ((quotient - maxCounter) > 0)\n            maxCounter++;\n    }\n    const incomingResult = [];\n    for (let i = 1; i <= maxCounter; i++)\n        incomingResult.push(await kdfWithCounter(hashFunction, Zbuffer, i, SharedInfo, crypto));\n    let combinedBuffer = EMPTY_BUFFER;\n    let currentCounter = 1;\n    let found = true;\n    while (found) {\n        found = false;\n        for (const result of incomingResult) {\n            if (result.counter === currentCounter) {\n                combinedBuffer = pvutils__WEBPACK_IMPORTED_MODULE_2__.utilConcatBuf(combinedBuffer, result.result);\n                found = true;\n                break;\n            }\n        }\n        currentCounter++;\n    }\n    keydatalen >>= 3;\n    if (combinedBuffer.byteLength > keydatalen) {\n        const newBuffer = new ArrayBuffer(keydatalen);\n        const newView = new Uint8Array(newBuffer);\n        const combinedView = new Uint8Array(combinedBuffer);\n        for (let i = 0; i < keydatalen; i++)\n            newView[i] = combinedView[i];\n        return newBuffer;\n    }\n    return combinedBuffer;\n}\n\nconst VERSION$i = \"version\";\nconst LOG_ID = \"logID\";\nconst EXTENSIONS$6 = \"extensions\";\nconst TIMESTAMP = \"timestamp\";\nconst HASH_ALGORITHM$3 = \"hashAlgorithm\";\nconst SIGNATURE_ALGORITHM$8 = \"signatureAlgorithm\";\nconst SIGNATURE$7 = \"signature\";\nconst NONE = \"none\";\nconst MD5 = \"md5\";\nconst SHA1 = \"sha1\";\nconst SHA224 = \"sha224\";\nconst SHA256 = \"sha256\";\nconst SHA384 = \"sha384\";\nconst SHA512 = \"sha512\";\nconst ANONYMOUS = \"anonymous\";\nconst RSA = \"rsa\";\nconst DSA = \"dsa\";\nconst ECDSA = \"ecdsa\";\nclass SignedCertificateTimestamp extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$i, SignedCertificateTimestamp.defaultValues(VERSION$i));\n        this.logID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, LOG_ID, SignedCertificateTimestamp.defaultValues(LOG_ID));\n        this.timestamp = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TIMESTAMP, SignedCertificateTimestamp.defaultValues(TIMESTAMP));\n        this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXTENSIONS$6, SignedCertificateTimestamp.defaultValues(EXTENSIONS$6));\n        this.hashAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, HASH_ALGORITHM$3, SignedCertificateTimestamp.defaultValues(HASH_ALGORITHM$3));\n        this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_ALGORITHM$8, SignedCertificateTimestamp.defaultValues(SIGNATURE_ALGORITHM$8));\n        this.signature = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE$7, SignedCertificateTimestamp.defaultValues(SIGNATURE$7));\n        if (\"stream\" in parameters && parameters.stream) {\n            this.fromStream(parameters.stream);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$i:\n                return 0;\n            case LOG_ID:\n            case EXTENSIONS$6:\n                return EMPTY_BUFFER;\n            case TIMESTAMP:\n                return new Date(0);\n            case HASH_ALGORITHM$3:\n            case SIGNATURE_ALGORITHM$8:\n                return EMPTY_STRING;\n            case SIGNATURE$7:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    fromSchema(schema) {\n        if ((schema instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.RawData) === false)\n            throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestamp\");\n        const seqStream = new bytestreamjs__WEBPACK_IMPORTED_MODULE_3__.SeqStream({\n            stream: new bytestreamjs__WEBPACK_IMPORTED_MODULE_3__.ByteStream({\n                buffer: schema.data\n            })\n        });\n        this.fromStream(seqStream);\n    }\n    fromStream(stream) {\n        const blockLength = stream.getUint16();\n        this.version = (stream.getBlock(1))[0];\n        if (this.version === 0) {\n            this.logID = (new Uint8Array(stream.getBlock(32))).buffer.slice(0);\n            this.timestamp = new Date(pvutils__WEBPACK_IMPORTED_MODULE_2__.utilFromBase(new Uint8Array(stream.getBlock(8)), 8));\n            const extensionsLength = stream.getUint16();\n            this.extensions = (new Uint8Array(stream.getBlock(extensionsLength))).buffer.slice(0);\n            switch ((stream.getBlock(1))[0]) {\n                case 0:\n                    this.hashAlgorithm = NONE;\n                    break;\n                case 1:\n                    this.hashAlgorithm = MD5;\n                    break;\n                case 2:\n                    this.hashAlgorithm = SHA1;\n                    break;\n                case 3:\n                    this.hashAlgorithm = SHA224;\n                    break;\n                case 4:\n                    this.hashAlgorithm = SHA256;\n                    break;\n                case 5:\n                    this.hashAlgorithm = SHA384;\n                    break;\n                case 6:\n                    this.hashAlgorithm = SHA512;\n                    break;\n                default:\n                    throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n            }\n            switch ((stream.getBlock(1))[0]) {\n                case 0:\n                    this.signatureAlgorithm = ANONYMOUS;\n                    break;\n                case 1:\n                    this.signatureAlgorithm = RSA;\n                    break;\n                case 2:\n                    this.signatureAlgorithm = DSA;\n                    break;\n                case 3:\n                    this.signatureAlgorithm = ECDSA;\n                    break;\n                default:\n                    throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n            }\n            const signatureLength = stream.getUint16();\n            const signatureData = new Uint8Array(stream.getBlock(signatureLength)).buffer.slice(0);\n            const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(signatureData);\n            AsnError.assert(asn1, \"SignedCertificateTimestamp\");\n            this.signature = asn1.result;\n            if (blockLength !== (47 + extensionsLength + signatureLength)) {\n                throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n            }\n        }\n    }\n    toSchema() {\n        const stream = this.toStream();\n        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.RawData({ data: stream.stream.buffer });\n    }\n    toStream() {\n        const stream = new bytestreamjs__WEBPACK_IMPORTED_MODULE_3__.SeqStream();\n        stream.appendUint16(47 + this.extensions.byteLength + this.signature.valueBeforeDecodeView.byteLength);\n        stream.appendChar(this.version);\n        stream.appendView(new Uint8Array(this.logID));\n        const timeBuffer = new ArrayBuffer(8);\n        const timeView = new Uint8Array(timeBuffer);\n        const baseArray = pvutils__WEBPACK_IMPORTED_MODULE_2__.utilToBase(this.timestamp.valueOf(), 8);\n        timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n        stream.appendView(timeView);\n        stream.appendUint16(this.extensions.byteLength);\n        if (this.extensions.byteLength)\n            stream.appendView(new Uint8Array(this.extensions));\n        let _hashAlgorithm;\n        switch (this.hashAlgorithm.toLowerCase()) {\n            case NONE:\n                _hashAlgorithm = 0;\n                break;\n            case MD5:\n                _hashAlgorithm = 1;\n                break;\n            case SHA1:\n                _hashAlgorithm = 2;\n                break;\n            case SHA224:\n                _hashAlgorithm = 3;\n                break;\n            case SHA256:\n                _hashAlgorithm = 4;\n                break;\n            case SHA384:\n                _hashAlgorithm = 5;\n                break;\n            case SHA512:\n                _hashAlgorithm = 6;\n                break;\n            default:\n                throw new Error(`Incorrect data for hashAlgorithm: ${this.hashAlgorithm}`);\n        }\n        stream.appendChar(_hashAlgorithm);\n        let _signatureAlgorithm;\n        switch (this.signatureAlgorithm.toLowerCase()) {\n            case ANONYMOUS:\n                _signatureAlgorithm = 0;\n                break;\n            case RSA:\n                _signatureAlgorithm = 1;\n                break;\n            case DSA:\n                _signatureAlgorithm = 2;\n                break;\n            case ECDSA:\n                _signatureAlgorithm = 3;\n                break;\n            default:\n                throw new Error(`Incorrect data for signatureAlgorithm: ${this.signatureAlgorithm}`);\n        }\n        stream.appendChar(_signatureAlgorithm);\n        const _signature = this.signature.toBER(false);\n        stream.appendUint16(_signature.byteLength);\n        stream.appendView(new Uint8Array(_signature));\n        return stream;\n    }\n    toJSON() {\n        return {\n            version: this.version,\n            logID: pvutils__WEBPACK_IMPORTED_MODULE_2__.bufferToHexCodes(this.logID),\n            timestamp: this.timestamp,\n            extensions: pvutils__WEBPACK_IMPORTED_MODULE_2__.bufferToHexCodes(this.extensions),\n            hashAlgorithm: this.hashAlgorithm,\n            signatureAlgorithm: this.signatureAlgorithm,\n            signature: this.signature.toJSON()\n        };\n    }\n    async verify(logs, data, dataType = 0, crypto = getCrypto(true)) {\n        const logId = pvutils__WEBPACK_IMPORTED_MODULE_2__.toBase64(pvutils__WEBPACK_IMPORTED_MODULE_2__.arrayBufferToString(this.logID));\n        let publicKeyBase64 = null;\n        const stream = new bytestreamjs__WEBPACK_IMPORTED_MODULE_3__.SeqStream();\n        for (const log of logs) {\n            if (log.log_id === logId) {\n                publicKeyBase64 = log.key;\n                break;\n            }\n        }\n        if (!publicKeyBase64) {\n            throw new Error(`Public key not found for CT with logId: ${logId}`);\n        }\n        const pki = pvutils__WEBPACK_IMPORTED_MODULE_2__.stringToArrayBuffer(pvutils__WEBPACK_IMPORTED_MODULE_2__.fromBase64(publicKeyBase64));\n        const publicKeyInfo = PublicKeyInfo.fromBER(pki);\n        stream.appendChar(0x00);\n        stream.appendChar(0x00);\n        const timeBuffer = new ArrayBuffer(8);\n        const timeView = new Uint8Array(timeBuffer);\n        const baseArray = pvutils__WEBPACK_IMPORTED_MODULE_2__.utilToBase(this.timestamp.valueOf(), 8);\n        timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n        stream.appendView(timeView);\n        stream.appendUint16(dataType);\n        if (dataType === 0)\n            stream.appendUint24(data.byteLength);\n        stream.appendView(new Uint8Array(data));\n        stream.appendUint16(this.extensions.byteLength);\n        if (this.extensions.byteLength !== 0)\n            stream.appendView(new Uint8Array(this.extensions));\n        return crypto.verifyWithPublicKey(stream.buffer.slice(0, stream.length), new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: this.signature.toBER(false) }), publicKeyInfo, { algorithmId: EMPTY_STRING }, \"SHA-256\");\n    }\n}\nSignedCertificateTimestamp.CLASS_NAME = \"SignedCertificateTimestamp\";\nasync function verifySCTsForCertificate(certificate, issuerCertificate, logs, index = (-1), crypto = getCrypto(true)) {\n    let parsedValue = null;\n    const stream = new bytestreamjs__WEBPACK_IMPORTED_MODULE_3__.SeqStream();\n    if (certificate.extensions) {\n        for (let i = certificate.extensions.length - 1; i >= 0; i--) {\n            switch (certificate.extensions[i].extnID) {\n                case id_SignedCertificateTimestampList:\n                    {\n                        parsedValue = certificate.extensions[i].parsedValue;\n                        if (!parsedValue || parsedValue.timestamps.length === 0)\n                            throw new Error(\"Nothing to verify in the certificate\");\n                        certificate.extensions.splice(i, 1);\n                    }\n                    break;\n            }\n        }\n    }\n    if (parsedValue === null)\n        throw new Error(\"No SignedCertificateTimestampList extension in the specified certificate\");\n    const tbs = certificate.encodeTBS().toBER();\n    const issuerId = await crypto.digest({ name: \"SHA-256\" }, new Uint8Array(issuerCertificate.subjectPublicKeyInfo.toSchema().toBER(false)));\n    stream.appendView(new Uint8Array(issuerId));\n    stream.appendUint24(tbs.byteLength);\n    stream.appendView(new Uint8Array(tbs));\n    const preCert = stream.stream.slice(0, stream.length);\n    if (index === (-1)) {\n        const verifyArray = [];\n        for (const timestamp of parsedValue.timestamps) {\n            const verifyResult = await timestamp.verify(logs, preCert.buffer, 1, crypto);\n            verifyArray.push(verifyResult);\n        }\n        return verifyArray;\n    }\n    if (index >= parsedValue.timestamps.length)\n        index = (parsedValue.timestamps.length - 1);\n    return [await parsedValue.timestamps[index].verify(logs, preCert.buffer, 1, crypto)];\n}\n\nconst TIMESTAMPS = \"timestamps\";\nclass SignedCertificateTimestampList extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.timestamps = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TIMESTAMPS, SignedCertificateTimestampList.defaultValues(TIMESTAMPS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TIMESTAMPS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TIMESTAMPS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        var _a;\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        (_a = names.optional) !== null && _a !== void 0 ? _a : (names.optional = false);\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({\n            name: (names.blockName || \"SignedCertificateTimestampList\"),\n            optional: names.optional\n        }));\n    }\n    fromSchema(schema) {\n        if ((schema instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString) === false) {\n            throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n        }\n        const seqStream = new bytestreamjs__WEBPACK_IMPORTED_MODULE_3__.SeqStream({\n            stream: new bytestreamjs__WEBPACK_IMPORTED_MODULE_3__.ByteStream({\n                buffer: schema.valueBlock.valueHex\n            })\n        });\n        const dataLength = seqStream.getUint16();\n        if (dataLength !== seqStream.length) {\n            throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n        }\n        while (seqStream.length) {\n            this.timestamps.push(new SignedCertificateTimestamp({ stream: seqStream }));\n        }\n    }\n    toSchema() {\n        const stream = new bytestreamjs__WEBPACK_IMPORTED_MODULE_3__.SeqStream();\n        let overallLength = 0;\n        const timestampsData = [];\n        for (const timestamp of this.timestamps) {\n            const timestampStream = timestamp.toStream();\n            timestampsData.push(timestampStream);\n            overallLength += timestampStream.stream.buffer.byteLength;\n        }\n        stream.appendUint16(overallLength);\n        for (const timestamp of timestampsData) {\n            stream.appendView(timestamp.stream.view);\n        }\n        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: stream.stream.buffer.slice(0) });\n    }\n    toJSON() {\n        return {\n            timestamps: Array.from(this.timestamps, o => o.toJSON())\n        };\n    }\n}\nSignedCertificateTimestampList.CLASS_NAME = \"SignedCertificateTimestampList\";\n\nconst ATTRIBUTES$4 = \"attributes\";\nconst CLEAR_PROPS$11 = [\n    ATTRIBUTES$4\n];\nclass SubjectDirectoryAttributes extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.attributes = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ATTRIBUTES$4, SubjectDirectoryAttributes.defaultValues(ATTRIBUTES$4));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ATTRIBUTES$4:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.attributes || EMPTY_STRING),\n                    value: Attribute.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$11);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, SubjectDirectoryAttributes.schema({\n            names: {\n                attributes: ATTRIBUTES$4\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.attributes, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            attributes: Array.from(this.attributes, o => o.toJSON())\n        };\n    }\n}\nSubjectDirectoryAttributes.CLASS_NAME = \"SubjectDirectoryAttributes\";\n\nclass ExtensionValueFactory {\n    static getItems() {\n        if (!this.types) {\n            this.types = {};\n            ExtensionValueFactory.register(id_SubjectAltName, \"SubjectAltName\", AltName);\n            ExtensionValueFactory.register(id_IssuerAltName, \"IssuerAltName\", AltName);\n            ExtensionValueFactory.register(id_AuthorityKeyIdentifier, \"AuthorityKeyIdentifier\", AuthorityKeyIdentifier);\n            ExtensionValueFactory.register(id_BasicConstraints, \"BasicConstraints\", BasicConstraints);\n            ExtensionValueFactory.register(id_MicrosoftCaVersion, \"MicrosoftCaVersion\", CAVersion);\n            ExtensionValueFactory.register(id_CertificatePolicies, \"CertificatePolicies\", CertificatePolicies);\n            ExtensionValueFactory.register(id_MicrosoftAppPolicies, \"CertificatePoliciesMicrosoft\", CertificatePolicies);\n            ExtensionValueFactory.register(id_MicrosoftCertTemplateV2, \"MicrosoftCertTemplateV2\", CertificateTemplate);\n            ExtensionValueFactory.register(id_CRLDistributionPoints, \"CRLDistributionPoints\", CRLDistributionPoints);\n            ExtensionValueFactory.register(id_FreshestCRL, \"FreshestCRL\", CRLDistributionPoints);\n            ExtensionValueFactory.register(id_ExtKeyUsage, \"ExtKeyUsage\", ExtKeyUsage);\n            ExtensionValueFactory.register(id_CertificateIssuer, \"CertificateIssuer\", GeneralNames);\n            ExtensionValueFactory.register(id_AuthorityInfoAccess, \"AuthorityInfoAccess\", InfoAccess);\n            ExtensionValueFactory.register(id_SubjectInfoAccess, \"SubjectInfoAccess\", InfoAccess);\n            ExtensionValueFactory.register(id_IssuingDistributionPoint, \"IssuingDistributionPoint\", IssuingDistributionPoint);\n            ExtensionValueFactory.register(id_NameConstraints, \"NameConstraints\", NameConstraints);\n            ExtensionValueFactory.register(id_PolicyConstraints, \"PolicyConstraints\", PolicyConstraints);\n            ExtensionValueFactory.register(id_PolicyMappings, \"PolicyMappings\", PolicyMappings);\n            ExtensionValueFactory.register(id_PrivateKeyUsagePeriod, \"PrivateKeyUsagePeriod\", PrivateKeyUsagePeriod);\n            ExtensionValueFactory.register(id_QCStatements, \"QCStatements\", QCStatements);\n            ExtensionValueFactory.register(id_SignedCertificateTimestampList, \"SignedCertificateTimestampList\", SignedCertificateTimestampList);\n            ExtensionValueFactory.register(id_SubjectDirectoryAttributes, \"SubjectDirectoryAttributes\", SubjectDirectoryAttributes);\n        }\n        return this.types;\n    }\n    static fromBER(id, raw) {\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(raw);\n        if (asn1.offset === -1) {\n            return null;\n        }\n        const item = this.find(id);\n        if (item) {\n            try {\n                return new item.type({ schema: asn1.result });\n            }\n            catch (ex) {\n                const res = new item.type();\n                res.parsingError = `Incorrectly formatted value of extension ${item.name} (${id})`;\n                return res;\n            }\n        }\n        return asn1.result;\n    }\n    static find(id) {\n        const types = this.getItems();\n        return types[id] || null;\n    }\n    static register(id, name, type) {\n        this.getItems()[id] = { name, type };\n    }\n}\n\nconst EXTN_ID = \"extnID\";\nconst CRITICAL = \"critical\";\nconst EXTN_VALUE = \"extnValue\";\nconst PARSED_VALUE$5 = \"parsedValue\";\nconst CLEAR_PROPS$10 = [\n    EXTN_ID,\n    CRITICAL,\n    EXTN_VALUE\n];\nclass Extension extends PkiObject {\n    get parsedValue() {\n        if (this._parsedValue === undefined) {\n            const parsedValue = ExtensionValueFactory.fromBER(this.extnID, this.extnValue.valueBlock.valueHexView);\n            this._parsedValue = parsedValue;\n        }\n        return this._parsedValue || undefined;\n    }\n    set parsedValue(value) {\n        this._parsedValue = value;\n    }\n    constructor(parameters = {}) {\n        super();\n        this.extnID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXTN_ID, Extension.defaultValues(EXTN_ID));\n        this.critical = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRITICAL, Extension.defaultValues(CRITICAL));\n        if (EXTN_VALUE in parameters) {\n            this.extnValue = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: parameters.extnValue });\n        }\n        else {\n            this.extnValue = Extension.defaultValues(EXTN_VALUE);\n        }\n        if (PARSED_VALUE$5 in parameters) {\n            this.parsedValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PARSED_VALUE$5, Extension.defaultValues(PARSED_VALUE$5));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case EXTN_ID:\n                return EMPTY_STRING;\n            case CRITICAL:\n                return false;\n            case EXTN_VALUE:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case PARSED_VALUE$5:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.extnID || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Boolean({\n                    name: (names.critical || EMPTY_STRING),\n                    optional: true\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.extnValue || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$10);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, Extension.schema({\n            names: {\n                extnID: EXTN_ID,\n                critical: CRITICAL,\n                extnValue: EXTN_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.extnID = asn1.result.extnID.valueBlock.toString();\n        if (CRITICAL in asn1.result) {\n            this.critical = asn1.result.critical.valueBlock.value;\n        }\n        this.extnValue = asn1.result.extnValue;\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.extnID }));\n        if (this.critical !== Extension.defaultValues(CRITICAL)) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Boolean({ value: this.critical }));\n        }\n        outputArray.push(this.extnValue);\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {\n            extnID: this.extnID,\n            extnValue: this.extnValue.toJSON(),\n        };\n        if (this.critical !== Extension.defaultValues(CRITICAL)) {\n            object.critical = this.critical;\n        }\n        if (this.parsedValue && this.parsedValue.toJSON) {\n            object.parsedValue = this.parsedValue.toJSON();\n        }\n        return object;\n    }\n}\nExtension.CLASS_NAME = \"Extension\";\n\nconst EXTENSIONS$5 = \"extensions\";\nconst CLEAR_PROPS$$ = [\n    EXTENSIONS$5,\n];\nclass Extensions extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXTENSIONS$5, Extensions.defaultValues(EXTENSIONS$5));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case EXTENSIONS$5:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}, optional = false) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            optional,\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.extensions || EMPTY_STRING),\n                    value: Extension.schema(names.extension || {})\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$$);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, Extensions.schema({\n            names: {\n                extensions: EXTENSIONS$5\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.extensions = Array.from(asn1.result.extensions, element => new Extension({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.extensions, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            extensions: this.extensions.map(o => o.toJSON())\n        };\n    }\n}\nExtensions.CLASS_NAME = \"Extensions\";\n\nconst ISSUER$5 = \"issuer\";\nconst SERIAL_NUMBER$6 = \"serialNumber\";\nconst ISSUER_UID = \"issuerUID\";\nconst CLEAR_PROPS$_ = [\n    ISSUER$5,\n    SERIAL_NUMBER$6,\n    ISSUER_UID,\n];\nclass IssuerSerial extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.issuer = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER$5, IssuerSerial.defaultValues(ISSUER$5));\n        this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SERIAL_NUMBER$6, IssuerSerial.defaultValues(SERIAL_NUMBER$6));\n        if (ISSUER_UID in parameters) {\n            this.issuerUID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER_UID, IssuerSerial.defaultValues(ISSUER_UID));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ISSUER$5:\n                return new GeneralNames();\n            case SERIAL_NUMBER$6:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case ISSUER_UID:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                GeneralNames.schema(names.issuer || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.serialNumber || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({\n                    optional: true,\n                    name: (names.issuerUID || EMPTY_STRING)\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$_);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, IssuerSerial.schema({\n            names: {\n                issuer: {\n                    names: {\n                        blockName: ISSUER$5\n                    }\n                },\n                serialNumber: SERIAL_NUMBER$6,\n                issuerUID: ISSUER_UID\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.issuer = new GeneralNames({ schema: asn1.result.issuer });\n        this.serialNumber = asn1.result.serialNumber;\n        if (ISSUER_UID in asn1.result)\n            this.issuerUID = asn1.result.issuerUID;\n    }\n    toSchema() {\n        const result = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.issuer.toSchema(),\n                this.serialNumber\n            ]\n        });\n        if (this.issuerUID) {\n            result.valueBlock.value.push(this.issuerUID);\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {\n            issuer: this.issuer.toJSON(),\n            serialNumber: this.serialNumber.toJSON()\n        };\n        if (this.issuerUID) {\n            result.issuerUID = this.issuerUID.toJSON();\n        }\n        return result;\n    }\n}\nIssuerSerial.CLASS_NAME = \"IssuerSerial\";\n\nconst VERSION$h = \"version\";\nconst BASE_CERTIFICATE_ID$2 = \"baseCertificateID\";\nconst SUBJECT_NAME = \"subjectName\";\nconst ISSUER$4 = \"issuer\";\nconst SIGNATURE$6 = \"signature\";\nconst SERIAL_NUMBER$5 = \"serialNumber\";\nconst ATTR_CERT_VALIDITY_PERIOD$1 = \"attrCertValidityPeriod\";\nconst ATTRIBUTES$3 = \"attributes\";\nconst ISSUER_UNIQUE_ID$2 = \"issuerUniqueID\";\nconst EXTENSIONS$4 = \"extensions\";\nconst CLEAR_PROPS$Z = [\n    VERSION$h,\n    BASE_CERTIFICATE_ID$2,\n    SUBJECT_NAME,\n    ISSUER$4,\n    SIGNATURE$6,\n    SERIAL_NUMBER$5,\n    ATTR_CERT_VALIDITY_PERIOD$1,\n    ATTRIBUTES$3,\n    ISSUER_UNIQUE_ID$2,\n    EXTENSIONS$4,\n];\nclass AttributeCertificateInfoV1 extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$h, AttributeCertificateInfoV1.defaultValues(VERSION$h));\n        if (BASE_CERTIFICATE_ID$2 in parameters) {\n            this.baseCertificateID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, BASE_CERTIFICATE_ID$2, AttributeCertificateInfoV1.defaultValues(BASE_CERTIFICATE_ID$2));\n        }\n        if (SUBJECT_NAME in parameters) {\n            this.subjectName = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SUBJECT_NAME, AttributeCertificateInfoV1.defaultValues(SUBJECT_NAME));\n        }\n        this.issuer = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER$4, AttributeCertificateInfoV1.defaultValues(ISSUER$4));\n        this.signature = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE$6, AttributeCertificateInfoV1.defaultValues(SIGNATURE$6));\n        this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SERIAL_NUMBER$5, AttributeCertificateInfoV1.defaultValues(SERIAL_NUMBER$5));\n        this.attrCertValidityPeriod = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ATTR_CERT_VALIDITY_PERIOD$1, AttributeCertificateInfoV1.defaultValues(ATTR_CERT_VALIDITY_PERIOD$1));\n        this.attributes = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ATTRIBUTES$3, AttributeCertificateInfoV1.defaultValues(ATTRIBUTES$3));\n        if (ISSUER_UNIQUE_ID$2 in parameters)\n            this.issuerUniqueID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER_UNIQUE_ID$2, AttributeCertificateInfoV1.defaultValues(ISSUER_UNIQUE_ID$2));\n        if (EXTENSIONS$4 in parameters) {\n            this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXTENSIONS$4, AttributeCertificateInfoV1.defaultValues(EXTENSIONS$4));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$h:\n                return 0;\n            case BASE_CERTIFICATE_ID$2:\n                return new IssuerSerial();\n            case SUBJECT_NAME:\n                return new GeneralNames();\n            case ISSUER$4:\n                return new GeneralNames();\n            case SIGNATURE$6:\n                return new AlgorithmIdentifier();\n            case SERIAL_NUMBER$5:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case ATTR_CERT_VALIDITY_PERIOD$1:\n                return new AttCertValidityPeriod();\n            case ATTRIBUTES$3:\n                return [];\n            case ISSUER_UNIQUE_ID$2:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            case EXTENSIONS$4:\n                return new Extensions();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            name: (names.baseCertificateID || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: IssuerSerial.schema().valueBlock.value\n                        }),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            name: (names.subjectName || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: GeneralNames.schema().valueBlock.value\n                        }),\n                    ]\n                }),\n                GeneralNames.schema({\n                    names: {\n                        blockName: (names.issuer || EMPTY_STRING)\n                    }\n                }),\n                AlgorithmIdentifier.schema(names.signature || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.serialNumber || EMPTY_STRING) }),\n                AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    name: (names.attributes || EMPTY_STRING),\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            value: Attribute.schema()\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({\n                    optional: true,\n                    name: (names.issuerUniqueID || EMPTY_STRING)\n                }),\n                Extensions.schema(names.extensions || {}, true)\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$Z);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AttributeCertificateInfoV1.schema({\n            names: {\n                version: VERSION$h,\n                baseCertificateID: BASE_CERTIFICATE_ID$2,\n                subjectName: SUBJECT_NAME,\n                issuer: ISSUER$4,\n                signature: {\n                    names: {\n                        blockName: SIGNATURE$6\n                    }\n                },\n                serialNumber: SERIAL_NUMBER$5,\n                attrCertValidityPeriod: {\n                    names: {\n                        blockName: ATTR_CERT_VALIDITY_PERIOD$1\n                    }\n                },\n                attributes: ATTRIBUTES$3,\n                issuerUniqueID: ISSUER_UNIQUE_ID$2,\n                extensions: {\n                    names: {\n                        blockName: EXTENSIONS$4\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        if (BASE_CERTIFICATE_ID$2 in asn1.result) {\n            this.baseCertificateID = new IssuerSerial({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.baseCertificateID.valueBlock.value\n                })\n            });\n        }\n        if (SUBJECT_NAME in asn1.result) {\n            this.subjectName = new GeneralNames({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.subjectName.valueBlock.value\n                })\n            });\n        }\n        this.issuer = asn1.result.issuer;\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\n        this.serialNumber = asn1.result.serialNumber;\n        this.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\n        this.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\n        if (ISSUER_UNIQUE_ID$2 in asn1.result) {\n            this.issuerUniqueID = asn1.result.issuerUniqueID;\n        }\n        if (EXTENSIONS$4 in asn1.result) {\n            this.extensions = new Extensions({ schema: asn1.result.extensions });\n        }\n    }\n    toSchema() {\n        const result = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version })]\n        });\n        if (this.baseCertificateID) {\n            result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.baseCertificateID.toSchema().valueBlock.value\n            }));\n        }\n        if (this.subjectName) {\n            result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: this.subjectName.toSchema().valueBlock.value\n            }));\n        }\n        result.valueBlock.value.push(this.issuer.toSchema());\n        result.valueBlock.value.push(this.signature.toSchema());\n        result.valueBlock.value.push(this.serialNumber);\n        result.valueBlock.value.push(this.attrCertValidityPeriod.toSchema());\n        result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.attributes, o => o.toSchema())\n        }));\n        if (this.issuerUniqueID) {\n            result.valueBlock.value.push(this.issuerUniqueID);\n        }\n        if (this.extensions) {\n            result.valueBlock.value.push(this.extensions.toSchema());\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {\n            version: this.version\n        };\n        if (this.baseCertificateID) {\n            result.baseCertificateID = this.baseCertificateID.toJSON();\n        }\n        if (this.subjectName) {\n            result.subjectName = this.subjectName.toJSON();\n        }\n        result.issuer = this.issuer.toJSON();\n        result.signature = this.signature.toJSON();\n        result.serialNumber = this.serialNumber.toJSON();\n        result.attrCertValidityPeriod = this.attrCertValidityPeriod.toJSON();\n        result.attributes = Array.from(this.attributes, o => o.toJSON());\n        if (this.issuerUniqueID) {\n            result.issuerUniqueID = this.issuerUniqueID.toJSON();\n        }\n        if (this.extensions) {\n            result.extensions = this.extensions.toJSON();\n        }\n        return result;\n    }\n}\nAttributeCertificateInfoV1.CLASS_NAME = \"AttributeCertificateInfoV1\";\n\nconst ACINFO$1 = \"acinfo\";\nconst SIGNATURE_ALGORITHM$7 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE$4 = \"signatureValue\";\nconst CLEAR_PROPS$Y = [\n    ACINFO$1,\n    SIGNATURE_VALUE$4,\n    SIGNATURE_ALGORITHM$7\n];\nclass AttributeCertificateV1 extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.acinfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ACINFO$1, AttributeCertificateV1.defaultValues(ACINFO$1));\n        this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_ALGORITHM$7, AttributeCertificateV1.defaultValues(SIGNATURE_ALGORITHM$7));\n        this.signatureValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_VALUE$4, AttributeCertificateV1.defaultValues(SIGNATURE_VALUE$4));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ACINFO$1:\n                return new AttributeCertificateInfoV1();\n            case SIGNATURE_ALGORITHM$7:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE$4:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AttributeCertificateInfoV1.schema(names.acinfo || {}),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.signatureValue || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$Y);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AttributeCertificateV1.schema({\n            names: {\n                acinfo: {\n                    names: {\n                        blockName: ACINFO$1\n                    }\n                },\n                signatureAlgorithm: {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$7\n                    }\n                },\n                signatureValue: SIGNATURE_VALUE$4\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.acinfo = new AttributeCertificateInfoV1({ schema: asn1.result.acinfo });\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.acinfo.toSchema(),\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            acinfo: this.acinfo.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON(),\n        };\n    }\n}\nAttributeCertificateV1.CLASS_NAME = \"AttributeCertificateV1\";\n\nconst DIGESTED_OBJECT_TYPE = \"digestedObjectType\";\nconst OTHER_OBJECT_TYPE_ID = \"otherObjectTypeID\";\nconst DIGEST_ALGORITHM$2 = \"digestAlgorithm\";\nconst OBJECT_DIGEST = \"objectDigest\";\nconst CLEAR_PROPS$X = [\n    DIGESTED_OBJECT_TYPE,\n    OTHER_OBJECT_TYPE_ID,\n    DIGEST_ALGORITHM$2,\n    OBJECT_DIGEST,\n];\nclass ObjectDigestInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.digestedObjectType = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DIGESTED_OBJECT_TYPE, ObjectDigestInfo.defaultValues(DIGESTED_OBJECT_TYPE));\n        if (OTHER_OBJECT_TYPE_ID in parameters) {\n            this.otherObjectTypeID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OTHER_OBJECT_TYPE_ID, ObjectDigestInfo.defaultValues(OTHER_OBJECT_TYPE_ID));\n        }\n        this.digestAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DIGEST_ALGORITHM$2, ObjectDigestInfo.defaultValues(DIGEST_ALGORITHM$2));\n        this.objectDigest = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OBJECT_DIGEST, ObjectDigestInfo.defaultValues(OBJECT_DIGEST));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DIGESTED_OBJECT_TYPE:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Enumerated();\n            case OTHER_OBJECT_TYPE_ID:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier();\n            case DIGEST_ALGORITHM$2:\n                return new AlgorithmIdentifier();\n            case OBJECT_DIGEST:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Enumerated({ name: (names.digestedObjectType || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({\n                    optional: true,\n                    name: (names.otherObjectTypeID || EMPTY_STRING)\n                }),\n                AlgorithmIdentifier.schema(names.digestAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.objectDigest || EMPTY_STRING) }),\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$X);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, ObjectDigestInfo.schema({\n            names: {\n                digestedObjectType: DIGESTED_OBJECT_TYPE,\n                otherObjectTypeID: OTHER_OBJECT_TYPE_ID,\n                digestAlgorithm: {\n                    names: {\n                        blockName: DIGEST_ALGORITHM$2\n                    }\n                },\n                objectDigest: OBJECT_DIGEST\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.digestedObjectType = asn1.result.digestedObjectType;\n        if (OTHER_OBJECT_TYPE_ID in asn1.result) {\n            this.otherObjectTypeID = asn1.result.otherObjectTypeID;\n        }\n        this.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\n        this.objectDigest = asn1.result.objectDigest;\n    }\n    toSchema() {\n        const result = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [this.digestedObjectType]\n        });\n        if (this.otherObjectTypeID) {\n            result.valueBlock.value.push(this.otherObjectTypeID);\n        }\n        result.valueBlock.value.push(this.digestAlgorithm.toSchema());\n        result.valueBlock.value.push(this.objectDigest);\n        return result;\n    }\n    toJSON() {\n        const result = {\n            digestedObjectType: this.digestedObjectType.toJSON(),\n            digestAlgorithm: this.digestAlgorithm.toJSON(),\n            objectDigest: this.objectDigest.toJSON(),\n        };\n        if (this.otherObjectTypeID) {\n            result.otherObjectTypeID = this.otherObjectTypeID.toJSON();\n        }\n        return result;\n    }\n}\nObjectDigestInfo.CLASS_NAME = \"ObjectDigestInfo\";\n\nconst ISSUER_NAME = \"issuerName\";\nconst BASE_CERTIFICATE_ID$1 = \"baseCertificateID\";\nconst OBJECT_DIGEST_INFO$1 = \"objectDigestInfo\";\nconst CLEAR_PROPS$W = [\n    ISSUER_NAME,\n    BASE_CERTIFICATE_ID$1,\n    OBJECT_DIGEST_INFO$1\n];\nclass V2Form extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (ISSUER_NAME in parameters) {\n            this.issuerName = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER_NAME, V2Form.defaultValues(ISSUER_NAME));\n        }\n        if (BASE_CERTIFICATE_ID$1 in parameters) {\n            this.baseCertificateID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, BASE_CERTIFICATE_ID$1, V2Form.defaultValues(BASE_CERTIFICATE_ID$1));\n        }\n        if (OBJECT_DIGEST_INFO$1 in parameters) {\n            this.objectDigestInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OBJECT_DIGEST_INFO$1, V2Form.defaultValues(OBJECT_DIGEST_INFO$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ISSUER_NAME:\n                return new GeneralNames();\n            case BASE_CERTIFICATE_ID$1:\n                return new IssuerSerial();\n            case OBJECT_DIGEST_INFO$1:\n                return new ObjectDigestInfo();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                GeneralNames.schema({\n                    names: {\n                        blockName: names.issuerName\n                    }\n                }, true),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    name: (names.baseCertificateID || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: IssuerSerial.schema().valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    name: (names.objectDigestInfo || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: ObjectDigestInfo.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$W);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, V2Form.schema({\n            names: {\n                issuerName: ISSUER_NAME,\n                baseCertificateID: BASE_CERTIFICATE_ID$1,\n                objectDigestInfo: OBJECT_DIGEST_INFO$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (ISSUER_NAME in asn1.result)\n            this.issuerName = new GeneralNames({ schema: asn1.result.issuerName });\n        if (BASE_CERTIFICATE_ID$1 in asn1.result) {\n            this.baseCertificateID = new IssuerSerial({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.baseCertificateID.valueBlock.value\n                })\n            });\n        }\n        if (OBJECT_DIGEST_INFO$1 in asn1.result) {\n            this.objectDigestInfo = new ObjectDigestInfo({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.objectDigestInfo.valueBlock.value\n                })\n            });\n        }\n    }\n    toSchema() {\n        const result = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence();\n        if (this.issuerName)\n            result.valueBlock.value.push(this.issuerName.toSchema());\n        if (this.baseCertificateID) {\n            result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.baseCertificateID.toSchema().valueBlock.value\n            }));\n        }\n        if (this.objectDigestInfo) {\n            result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: this.objectDigestInfo.toSchema().valueBlock.value\n            }));\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {};\n        if (this.issuerName) {\n            result.issuerName = this.issuerName.toJSON();\n        }\n        if (this.baseCertificateID) {\n            result.baseCertificateID = this.baseCertificateID.toJSON();\n        }\n        if (this.objectDigestInfo) {\n            result.objectDigestInfo = this.objectDigestInfo.toJSON();\n        }\n        return result;\n    }\n}\nV2Form.CLASS_NAME = \"V2Form\";\n\nconst BASE_CERTIFICATE_ID = \"baseCertificateID\";\nconst ENTITY_NAME = \"entityName\";\nconst OBJECT_DIGEST_INFO = \"objectDigestInfo\";\nconst CLEAR_PROPS$V = [\n    BASE_CERTIFICATE_ID,\n    ENTITY_NAME,\n    OBJECT_DIGEST_INFO\n];\nclass Holder extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (BASE_CERTIFICATE_ID in parameters) {\n            this.baseCertificateID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, BASE_CERTIFICATE_ID, Holder.defaultValues(BASE_CERTIFICATE_ID));\n        }\n        if (ENTITY_NAME in parameters) {\n            this.entityName = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENTITY_NAME, Holder.defaultValues(ENTITY_NAME));\n        }\n        if (OBJECT_DIGEST_INFO in parameters) {\n            this.objectDigestInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OBJECT_DIGEST_INFO, Holder.defaultValues(OBJECT_DIGEST_INFO));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case BASE_CERTIFICATE_ID:\n                return new IssuerSerial();\n            case ENTITY_NAME:\n                return new GeneralNames();\n            case OBJECT_DIGEST_INFO:\n                return new ObjectDigestInfo();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    name: (names.baseCertificateID || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: IssuerSerial.schema().valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    name: (names.entityName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: GeneralNames.schema().valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    name: (names.objectDigestInfo || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: ObjectDigestInfo.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$V);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, Holder.schema({\n            names: {\n                baseCertificateID: BASE_CERTIFICATE_ID,\n                entityName: ENTITY_NAME,\n                objectDigestInfo: OBJECT_DIGEST_INFO\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (BASE_CERTIFICATE_ID in asn1.result) {\n            this.baseCertificateID = new IssuerSerial({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.baseCertificateID.valueBlock.value\n                })\n            });\n        }\n        if (ENTITY_NAME in asn1.result) {\n            this.entityName = new GeneralNames({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.entityName.valueBlock.value\n                })\n            });\n        }\n        if (OBJECT_DIGEST_INFO in asn1.result) {\n            this.objectDigestInfo = new ObjectDigestInfo({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.objectDigestInfo.valueBlock.value\n                })\n            });\n        }\n    }\n    toSchema() {\n        const result = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence();\n        if (this.baseCertificateID) {\n            result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.baseCertificateID.toSchema().valueBlock.value\n            }));\n        }\n        if (this.entityName) {\n            result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: this.entityName.toSchema().valueBlock.value\n            }));\n        }\n        if (this.objectDigestInfo) {\n            result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                value: this.objectDigestInfo.toSchema().valueBlock.value\n            }));\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {};\n        if (this.baseCertificateID) {\n            result.baseCertificateID = this.baseCertificateID.toJSON();\n        }\n        if (this.entityName) {\n            result.entityName = this.entityName.toJSON();\n        }\n        if (this.objectDigestInfo) {\n            result.objectDigestInfo = this.objectDigestInfo.toJSON();\n        }\n        return result;\n    }\n}\nHolder.CLASS_NAME = \"Holder\";\n\nconst VERSION$g = \"version\";\nconst HOLDER = \"holder\";\nconst ISSUER$3 = \"issuer\";\nconst SIGNATURE$5 = \"signature\";\nconst SERIAL_NUMBER$4 = \"serialNumber\";\nconst ATTR_CERT_VALIDITY_PERIOD = \"attrCertValidityPeriod\";\nconst ATTRIBUTES$2 = \"attributes\";\nconst ISSUER_UNIQUE_ID$1 = \"issuerUniqueID\";\nconst EXTENSIONS$3 = \"extensions\";\nconst CLEAR_PROPS$U = [\n    VERSION$g,\n    HOLDER,\n    ISSUER$3,\n    SIGNATURE$5,\n    SERIAL_NUMBER$4,\n    ATTR_CERT_VALIDITY_PERIOD,\n    ATTRIBUTES$2,\n    ISSUER_UNIQUE_ID$1,\n    EXTENSIONS$3\n];\nclass AttributeCertificateInfoV2 extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$g, AttributeCertificateInfoV2.defaultValues(VERSION$g));\n        this.holder = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, HOLDER, AttributeCertificateInfoV2.defaultValues(HOLDER));\n        this.issuer = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER$3, AttributeCertificateInfoV2.defaultValues(ISSUER$3));\n        this.signature = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE$5, AttributeCertificateInfoV2.defaultValues(SIGNATURE$5));\n        this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SERIAL_NUMBER$4, AttributeCertificateInfoV2.defaultValues(SERIAL_NUMBER$4));\n        this.attrCertValidityPeriod = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ATTR_CERT_VALIDITY_PERIOD, AttributeCertificateInfoV2.defaultValues(ATTR_CERT_VALIDITY_PERIOD));\n        this.attributes = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ATTRIBUTES$2, AttributeCertificateInfoV2.defaultValues(ATTRIBUTES$2));\n        if (ISSUER_UNIQUE_ID$1 in parameters) {\n            this.issuerUniqueID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER_UNIQUE_ID$1, AttributeCertificateInfoV2.defaultValues(ISSUER_UNIQUE_ID$1));\n        }\n        if (EXTENSIONS$3 in parameters) {\n            this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXTENSIONS$3, AttributeCertificateInfoV2.defaultValues(EXTENSIONS$3));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$g:\n                return 1;\n            case HOLDER:\n                return new Holder();\n            case ISSUER$3:\n                return {};\n            case SIGNATURE$5:\n                return new AlgorithmIdentifier();\n            case SERIAL_NUMBER$4:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case ATTR_CERT_VALIDITY_PERIOD:\n                return new AttCertValidityPeriod();\n            case ATTRIBUTES$2:\n                return [];\n            case ISSUER_UNIQUE_ID$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            case EXTENSIONS$3:\n                return new Extensions();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                Holder.schema(names.holder || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                    value: [\n                        GeneralNames.schema({\n                            names: {\n                                blockName: (names.issuer || EMPTY_STRING)\n                            }\n                        }),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            name: (names.issuer || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: V2Form.schema().valueBlock.value\n                        })\n                    ]\n                }),\n                AlgorithmIdentifier.schema(names.signature || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.serialNumber || EMPTY_STRING) }),\n                AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    name: (names.attributes || EMPTY_STRING),\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            value: Attribute.schema()\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({\n                    optional: true,\n                    name: (names.issuerUniqueID || EMPTY_STRING)\n                }),\n                Extensions.schema(names.extensions || {}, true)\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$U);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AttributeCertificateInfoV2.schema({\n            names: {\n                version: VERSION$g,\n                holder: {\n                    names: {\n                        blockName: HOLDER\n                    }\n                },\n                issuer: ISSUER$3,\n                signature: {\n                    names: {\n                        blockName: SIGNATURE$5\n                    }\n                },\n                serialNumber: SERIAL_NUMBER$4,\n                attrCertValidityPeriod: {\n                    names: {\n                        blockName: ATTR_CERT_VALIDITY_PERIOD\n                    }\n                },\n                attributes: ATTRIBUTES$2,\n                issuerUniqueID: ISSUER_UNIQUE_ID$1,\n                extensions: {\n                    names: {\n                        blockName: EXTENSIONS$3\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.holder = new Holder({ schema: asn1.result.holder });\n        switch (asn1.result.issuer.idBlock.tagClass) {\n            case 3:\n                this.issuer = new V2Form({\n                    schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                        value: asn1.result.issuer.valueBlock.value\n                    })\n                });\n                break;\n            case 1:\n            default:\n                throw new Error(\"Incorrect value for 'issuer' in AttributeCertificateInfoV2\");\n        }\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\n        this.serialNumber = asn1.result.serialNumber;\n        this.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\n        this.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\n        if (ISSUER_UNIQUE_ID$1 in asn1.result) {\n            this.issuerUniqueID = asn1.result.issuerUniqueID;\n        }\n        if (EXTENSIONS$3 in asn1.result) {\n            this.extensions = new Extensions({ schema: asn1.result.extensions });\n        }\n    }\n    toSchema() {\n        const result = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }),\n                this.holder.toSchema(),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: this.issuer.toSchema().valueBlock.value\n                }),\n                this.signature.toSchema(),\n                this.serialNumber,\n                this.attrCertValidityPeriod.toSchema(),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: Array.from(this.attributes, o => o.toSchema())\n                })\n            ]\n        });\n        if (this.issuerUniqueID) {\n            result.valueBlock.value.push(this.issuerUniqueID);\n        }\n        if (this.extensions) {\n            result.valueBlock.value.push(this.extensions.toSchema());\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {\n            version: this.version,\n            holder: this.holder.toJSON(),\n            issuer: this.issuer.toJSON(),\n            signature: this.signature.toJSON(),\n            serialNumber: this.serialNumber.toJSON(),\n            attrCertValidityPeriod: this.attrCertValidityPeriod.toJSON(),\n            attributes: Array.from(this.attributes, o => o.toJSON())\n        };\n        if (this.issuerUniqueID) {\n            result.issuerUniqueID = this.issuerUniqueID.toJSON();\n        }\n        if (this.extensions) {\n            result.extensions = this.extensions.toJSON();\n        }\n        return result;\n    }\n}\nAttributeCertificateInfoV2.CLASS_NAME = \"AttributeCertificateInfoV2\";\n\nconst ACINFO = \"acinfo\";\nconst SIGNATURE_ALGORITHM$6 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE$3 = \"signatureValue\";\nconst CLEAR_PROPS$T = [\n    ACINFO,\n    SIGNATURE_ALGORITHM$6,\n    SIGNATURE_VALUE$3,\n];\nclass AttributeCertificateV2 extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.acinfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ACINFO, AttributeCertificateV2.defaultValues(ACINFO));\n        this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_ALGORITHM$6, AttributeCertificateV2.defaultValues(SIGNATURE_ALGORITHM$6));\n        this.signatureValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_VALUE$3, AttributeCertificateV2.defaultValues(SIGNATURE_VALUE$3));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ACINFO:\n                return new AttributeCertificateInfoV2();\n            case SIGNATURE_ALGORITHM$6:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE$3:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AttributeCertificateInfoV2.schema(names.acinfo || {}),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.signatureValue || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$T);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AttributeCertificateV2.schema({\n            names: {\n                acinfo: {\n                    names: {\n                        blockName: ACINFO\n                    }\n                },\n                signatureAlgorithm: {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$6\n                    }\n                },\n                signatureValue: SIGNATURE_VALUE$3\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.acinfo = new AttributeCertificateInfoV2({ schema: asn1.result.acinfo });\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.acinfo.toSchema(),\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            acinfo: this.acinfo.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON(),\n        };\n    }\n}\nAttributeCertificateV2.CLASS_NAME = \"AttributeCertificateV2\";\n\nconst CONTENT_TYPE = \"contentType\";\nconst CONTENT = \"content\";\nconst CLEAR_PROPS$S = [CONTENT_TYPE, CONTENT];\nclass ContentInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.contentType = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CONTENT_TYPE, ContentInfo.defaultValues(CONTENT_TYPE));\n        this.content = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CONTENT, ContentInfo.defaultValues(CONTENT));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CONTENT_TYPE:\n                return EMPTY_STRING;\n            case CONTENT:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CONTENT_TYPE:\n                return (typeof memberValue === \"string\" &&\n                    memberValue === this.defaultValues(CONTENT_TYPE));\n            case CONTENT:\n                return (memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        if ((\"optional\" in names) === false) {\n            names.optional = false;\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || \"ContentInfo\"),\n            optional: names.optional,\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.contentType || CONTENT_TYPE) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.content || CONTENT) })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$S);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, ContentInfo.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.contentType = asn1.result.contentType.valueBlock.toString();\n        this.content = asn1.result.content;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.contentType }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [this.content]\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        const object = {\n            contentType: this.contentType\n        };\n        if (!(this.content instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any)) {\n            object.content = this.content.toJSON();\n        }\n        return object;\n    }\n}\nContentInfo.CLASS_NAME = \"ContentInfo\";\nContentInfo.DATA = id_ContentType_Data;\nContentInfo.SIGNED_DATA = id_ContentType_SignedData;\nContentInfo.ENVELOPED_DATA = id_ContentType_EnvelopedData;\nContentInfo.ENCRYPTED_DATA = id_ContentType_EncryptedData;\n\nconst TYPE$1 = \"type\";\nconst VALUE$4 = \"value\";\nconst UTC_TIME_NAME = \"utcTimeName\";\nconst GENERAL_TIME_NAME = \"generalTimeName\";\nconst CLEAR_PROPS$R = [UTC_TIME_NAME, GENERAL_TIME_NAME];\nvar TimeType;\n(function (TimeType) {\n    TimeType[TimeType[\"UTCTime\"] = 0] = \"UTCTime\";\n    TimeType[TimeType[\"GeneralizedTime\"] = 1] = \"GeneralizedTime\";\n    TimeType[TimeType[\"empty\"] = 2] = \"empty\";\n})(TimeType || (TimeType = {}));\nclass Time extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TYPE$1, Time.defaultValues(TYPE$1));\n        this.value = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUE$4, Time.defaultValues(VALUE$4));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE$1:\n                return 0;\n            case VALUE$4:\n                return new Date(0, 0, 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}, optional = false) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n            optional,\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.UTCTime({ name: (names.utcTimeName || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ name: (names.generalTimeName || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$R);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, Time.schema({\n            names: {\n                utcTimeName: UTC_TIME_NAME,\n                generalTimeName: GENERAL_TIME_NAME\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (UTC_TIME_NAME in asn1.result) {\n            this.type = 0;\n            this.value = asn1.result.utcTimeName.toDate();\n        }\n        if (GENERAL_TIME_NAME in asn1.result) {\n            this.type = 1;\n            this.value = asn1.result.generalTimeName.toDate();\n        }\n    }\n    toSchema() {\n        if (this.type === 0) {\n            return new asn1js__WEBPACK_IMPORTED_MODULE_0__.UTCTime({ valueDate: this.value });\n        }\n        else if (this.type === 1) {\n            return new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueDate: this.value });\n        }\n        return {};\n    }\n    toJSON() {\n        return {\n            type: this.type,\n            value: this.value\n        };\n    }\n}\nTime.CLASS_NAME = \"Time\";\n\nconst TBS$4 = \"tbs\";\nconst VERSION$f = \"version\";\nconst SERIAL_NUMBER$3 = \"serialNumber\";\nconst SIGNATURE$4 = \"signature\";\nconst ISSUER$2 = \"issuer\";\nconst NOT_BEFORE = \"notBefore\";\nconst NOT_AFTER = \"notAfter\";\nconst SUBJECT$1 = \"subject\";\nconst SUBJECT_PUBLIC_KEY_INFO = \"subjectPublicKeyInfo\";\nconst ISSUER_UNIQUE_ID = \"issuerUniqueID\";\nconst SUBJECT_UNIQUE_ID = \"subjectUniqueID\";\nconst EXTENSIONS$2 = \"extensions\";\nconst SIGNATURE_ALGORITHM$5 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE$2 = \"signatureValue\";\nconst TBS_CERTIFICATE = \"tbsCertificate\";\nconst TBS_CERTIFICATE_VERSION = `${TBS_CERTIFICATE}.${VERSION$f}`;\nconst TBS_CERTIFICATE_SERIAL_NUMBER = `${TBS_CERTIFICATE}.${SERIAL_NUMBER$3}`;\nconst TBS_CERTIFICATE_SIGNATURE = `${TBS_CERTIFICATE}.${SIGNATURE$4}`;\nconst TBS_CERTIFICATE_ISSUER = `${TBS_CERTIFICATE}.${ISSUER$2}`;\nconst TBS_CERTIFICATE_NOT_BEFORE = `${TBS_CERTIFICATE}.${NOT_BEFORE}`;\nconst TBS_CERTIFICATE_NOT_AFTER = `${TBS_CERTIFICATE}.${NOT_AFTER}`;\nconst TBS_CERTIFICATE_SUBJECT = `${TBS_CERTIFICATE}.${SUBJECT$1}`;\nconst TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY = `${TBS_CERTIFICATE}.${SUBJECT_PUBLIC_KEY_INFO}`;\nconst TBS_CERTIFICATE_ISSUER_UNIQUE_ID = `${TBS_CERTIFICATE}.${ISSUER_UNIQUE_ID}`;\nconst TBS_CERTIFICATE_SUBJECT_UNIQUE_ID = `${TBS_CERTIFICATE}.${SUBJECT_UNIQUE_ID}`;\nconst TBS_CERTIFICATE_EXTENSIONS = `${TBS_CERTIFICATE}.${EXTENSIONS$2}`;\nconst CLEAR_PROPS$Q = [\n    TBS_CERTIFICATE,\n    TBS_CERTIFICATE_VERSION,\n    TBS_CERTIFICATE_SERIAL_NUMBER,\n    TBS_CERTIFICATE_SIGNATURE,\n    TBS_CERTIFICATE_ISSUER,\n    TBS_CERTIFICATE_NOT_BEFORE,\n    TBS_CERTIFICATE_NOT_AFTER,\n    TBS_CERTIFICATE_SUBJECT,\n    TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY,\n    TBS_CERTIFICATE_ISSUER_UNIQUE_ID,\n    TBS_CERTIFICATE_SUBJECT_UNIQUE_ID,\n    TBS_CERTIFICATE_EXTENSIONS,\n    SIGNATURE_ALGORITHM$5,\n    SIGNATURE_VALUE$2\n];\nfunction tbsCertificate(parameters = {}) {\n    const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n    return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n        name: (names.blockName || TBS_CERTIFICATE),\n        value: [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.tbsCertificateVersion || TBS_CERTIFICATE_VERSION) })\n                ]\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.tbsCertificateSerialNumber || TBS_CERTIFICATE_SERIAL_NUMBER) }),\n            AlgorithmIdentifier.schema(names.signature || {\n                names: {\n                    blockName: TBS_CERTIFICATE_SIGNATURE\n                }\n            }),\n            RelativeDistinguishedNames.schema(names.issuer || {\n                names: {\n                    blockName: TBS_CERTIFICATE_ISSUER\n                }\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                name: (names.tbsCertificateValidity || \"tbsCertificate.validity\"),\n                value: [\n                    Time.schema(names.notBefore || {\n                        names: {\n                            utcTimeName: TBS_CERTIFICATE_NOT_BEFORE,\n                            generalTimeName: TBS_CERTIFICATE_NOT_BEFORE\n                        }\n                    }),\n                    Time.schema(names.notAfter || {\n                        names: {\n                            utcTimeName: TBS_CERTIFICATE_NOT_AFTER,\n                            generalTimeName: TBS_CERTIFICATE_NOT_AFTER\n                        }\n                    })\n                ]\n            }),\n            RelativeDistinguishedNames.schema(names.subject || {\n                names: {\n                    blockName: TBS_CERTIFICATE_SUBJECT\n                }\n            }),\n            PublicKeyInfo.schema(names.subjectPublicKeyInfo || {\n                names: {\n                    blockName: TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY\n                }\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                name: (names.tbsCertificateIssuerUniqueID || TBS_CERTIFICATE_ISSUER_UNIQUE_ID),\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                }\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                name: (names.tbsCertificateSubjectUniqueID || TBS_CERTIFICATE_SUBJECT_UNIQUE_ID),\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                }\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                value: [Extensions.schema(names.extensions || {\n                        names: {\n                            blockName: TBS_CERTIFICATE_EXTENSIONS\n                        }\n                    })]\n            })\n        ]\n    }));\n}\nclass Certificate extends PkiObject {\n    get tbs() {\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TBS$4, Certificate.defaultValues(TBS$4)));\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$f, Certificate.defaultValues(VERSION$f));\n        this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SERIAL_NUMBER$3, Certificate.defaultValues(SERIAL_NUMBER$3));\n        this.signature = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE$4, Certificate.defaultValues(SIGNATURE$4));\n        this.issuer = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER$2, Certificate.defaultValues(ISSUER$2));\n        this.notBefore = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NOT_BEFORE, Certificate.defaultValues(NOT_BEFORE));\n        this.notAfter = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NOT_AFTER, Certificate.defaultValues(NOT_AFTER));\n        this.subject = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SUBJECT$1, Certificate.defaultValues(SUBJECT$1));\n        this.subjectPublicKeyInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SUBJECT_PUBLIC_KEY_INFO, Certificate.defaultValues(SUBJECT_PUBLIC_KEY_INFO));\n        if (ISSUER_UNIQUE_ID in parameters) {\n            this.issuerUniqueID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER_UNIQUE_ID, Certificate.defaultValues(ISSUER_UNIQUE_ID));\n        }\n        if (SUBJECT_UNIQUE_ID in parameters) {\n            this.subjectUniqueID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SUBJECT_UNIQUE_ID, Certificate.defaultValues(SUBJECT_UNIQUE_ID));\n        }\n        if (EXTENSIONS$2 in parameters) {\n            this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXTENSIONS$2, Certificate.defaultValues(EXTENSIONS$2));\n        }\n        this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_ALGORITHM$5, Certificate.defaultValues(SIGNATURE_ALGORITHM$5));\n        this.signatureValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_VALUE$2, Certificate.defaultValues(SIGNATURE_VALUE$2));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS$4:\n                return EMPTY_BUFFER;\n            case VERSION$f:\n                return 0;\n            case SERIAL_NUMBER$3:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case SIGNATURE$4:\n                return new AlgorithmIdentifier();\n            case ISSUER$2:\n                return new RelativeDistinguishedNames();\n            case NOT_BEFORE:\n                return new Time();\n            case NOT_AFTER:\n                return new Time();\n            case SUBJECT$1:\n                return new RelativeDistinguishedNames();\n            case SUBJECT_PUBLIC_KEY_INFO:\n                return new PublicKeyInfo();\n            case ISSUER_UNIQUE_ID:\n                return EMPTY_BUFFER;\n            case SUBJECT_UNIQUE_ID:\n                return EMPTY_BUFFER;\n            case EXTENSIONS$2:\n                return [];\n            case SIGNATURE_ALGORITHM$5:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE$2:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                tbsCertificate(names.tbsCertificate),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$5\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.signatureValue || SIGNATURE_VALUE$2) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$Q);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, Certificate.schema({\n            names: {\n                tbsCertificate: {\n                    names: {\n                        extensions: {\n                            names: {\n                                extensions: TBS_CERTIFICATE_EXTENSIONS\n                            }\n                        }\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.tbsCertificate.valueBeforeDecodeView;\n        if (TBS_CERTIFICATE_VERSION in asn1.result)\n            this.version = asn1.result[TBS_CERTIFICATE_VERSION].valueBlock.valueDec;\n        this.serialNumber = asn1.result[TBS_CERTIFICATE_SERIAL_NUMBER];\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result[TBS_CERTIFICATE_SIGNATURE] });\n        this.issuer = new RelativeDistinguishedNames({ schema: asn1.result[TBS_CERTIFICATE_ISSUER] });\n        this.notBefore = new Time({ schema: asn1.result[TBS_CERTIFICATE_NOT_BEFORE] });\n        this.notAfter = new Time({ schema: asn1.result[TBS_CERTIFICATE_NOT_AFTER] });\n        this.subject = new RelativeDistinguishedNames({ schema: asn1.result[TBS_CERTIFICATE_SUBJECT] });\n        this.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY] });\n        if (TBS_CERTIFICATE_ISSUER_UNIQUE_ID in asn1.result)\n            this.issuerUniqueID = asn1.result[TBS_CERTIFICATE_ISSUER_UNIQUE_ID].valueBlock.valueHex;\n        if (TBS_CERTIFICATE_SUBJECT_UNIQUE_ID in asn1.result)\n            this.subjectUniqueID = asn1.result[TBS_CERTIFICATE_SUBJECT_UNIQUE_ID].valueBlock.valueHex;\n        if (TBS_CERTIFICATE_EXTENSIONS in asn1.result)\n            this.extensions = Array.from(asn1.result[TBS_CERTIFICATE_EXTENSIONS], element => new Extension({ schema: element }));\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    encodeTBS() {\n        const outputArray = [];\n        if ((VERSION$f in this) && (this.version !== Certificate.defaultValues(VERSION$f))) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version })\n                ]\n            }));\n        }\n        outputArray.push(this.serialNumber);\n        outputArray.push(this.signature.toSchema());\n        outputArray.push(this.issuer.toSchema());\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.notBefore.toSchema(),\n                this.notAfter.toSchema()\n            ]\n        }));\n        outputArray.push(this.subject.toSchema());\n        outputArray.push(this.subjectPublicKeyInfo.toSchema());\n        if (this.issuerUniqueID) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: this.issuerUniqueID\n            }));\n        }\n        if (this.subjectUniqueID) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                valueHex: this.subjectUniqueID\n            }));\n        }\n        if (this.extensions) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                        value: Array.from(this.extensions, o => o.toSchema())\n                    })]\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (encodeFlag === false) {\n            if (!this.tbsView.byteLength) {\n                return Certificate.schema().value[0];\n            }\n            const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"TBS Certificate\");\n            tbsSchema = asn1.result;\n        }\n        else {\n            tbsSchema = this.encodeTBS();\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                tbsSchema,\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            tbs: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToHex(this.tbsView),\n            version: this.version,\n            serialNumber: this.serialNumber.toJSON(),\n            signature: this.signature.toJSON(),\n            issuer: this.issuer.toJSON(),\n            notBefore: this.notBefore.toJSON(),\n            notAfter: this.notAfter.toJSON(),\n            subject: this.subject.toJSON(),\n            subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON(),\n        };\n        if ((VERSION$f in this) && (this.version !== Certificate.defaultValues(VERSION$f))) {\n            res.version = this.version;\n        }\n        if (this.issuerUniqueID) {\n            res.issuerUniqueID = pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToHex(this.issuerUniqueID);\n        }\n        if (this.subjectUniqueID) {\n            res.subjectUniqueID = pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToHex(this.subjectUniqueID);\n        }\n        if (this.extensions) {\n            res.extensions = Array.from(this.extensions, o => o.toJSON());\n        }\n        return res;\n    }\n    async getPublicKey(parameters, crypto = getCrypto(true)) {\n        return crypto.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\n    }\n    async getKeyHash(hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        return crypto.digest({ name: hashAlgorithm }, this.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        if (!privateKey) {\n            throw new Error(\"Need to provide a private key for signing\");\n        }\n        const signatureParameters = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const parameters = signatureParameters.parameters;\n        this.signature = signatureParameters.signatureAlgorithm;\n        this.signatureAlgorithm = signatureParameters.signatureAlgorithm;\n        this.tbsView = new Uint8Array(this.encodeTBS().toBER());\n        const signature = await crypto.signWithPrivateKey(this.tbsView, privateKey, parameters);\n        this.signatureValue = new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ valueHex: signature });\n    }\n    async verify(issuerCertificate, crypto = getCrypto(true)) {\n        let subjectPublicKeyInfo;\n        if (issuerCertificate) {\n            subjectPublicKeyInfo = issuerCertificate.subjectPublicKeyInfo;\n        }\n        else if (this.issuer.isEqual(this.subject)) {\n            subjectPublicKeyInfo = this.subjectPublicKeyInfo;\n        }\n        if (!(subjectPublicKeyInfo instanceof PublicKeyInfo)) {\n            throw new Error(\"Please provide issuer certificate as a parameter\");\n        }\n        return crypto.verifyWithPublicKey(this.tbsView, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);\n    }\n}\nCertificate.CLASS_NAME = \"Certificate\";\nfunction checkCA(cert, signerCert = null) {\n    if (signerCert && cert.issuer.isEqual(signerCert.issuer) && cert.serialNumber.isEqual(signerCert.serialNumber)) {\n        return null;\n    }\n    let isCA = false;\n    if (cert.extensions) {\n        for (const extension of cert.extensions) {\n            if (extension.extnID === id_BasicConstraints && extension.parsedValue instanceof BasicConstraints) {\n                if (extension.parsedValue.cA) {\n                    isCA = true;\n                    break;\n                }\n            }\n        }\n    }\n    if (isCA) {\n        return cert;\n    }\n    return null;\n}\n\nconst CERT_ID$1 = \"certId\";\nconst CERT_VALUE = \"certValue\";\nconst PARSED_VALUE$4 = \"parsedValue\";\nconst CLEAR_PROPS$P = [\n    CERT_ID$1,\n    CERT_VALUE\n];\nclass CertBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certId = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERT_ID$1, CertBag.defaultValues(CERT_ID$1));\n        this.certValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERT_VALUE, CertBag.defaultValues(CERT_VALUE));\n        if (PARSED_VALUE$4 in parameters) {\n            this.parsedValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PARSED_VALUE$4, CertBag.defaultValues(PARSED_VALUE$4));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERT_ID$1:\n                return EMPTY_STRING;\n            case CERT_VALUE:\n                return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any());\n            case PARSED_VALUE$4:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CERT_ID$1:\n                return (memberValue === EMPTY_STRING);\n            case CERT_VALUE:\n                return (memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any);\n            case PARSED_VALUE$4:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.id || \"id\") }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.value || \"value\") })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$P);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, CertBag.schema({\n            names: {\n                id: CERT_ID$1,\n                value: CERT_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.certId = asn1.result.certId.valueBlock.toString();\n        this.certValue = asn1.result.certValue;\n        const certValueHex = this.certValue.valueBlock.valueHexView;\n        switch (this.certId) {\n            case id_CertBag_X509Certificate:\n                {\n                    try {\n                        this.parsedValue = Certificate.fromBER(certValueHex);\n                    }\n                    catch (ex) {\n                        AttributeCertificateV2.fromBER(certValueHex);\n                    }\n                }\n                break;\n            case id_CertBag_AttributeCertificate:\n                {\n                    this.parsedValue = AttributeCertificateV2.fromBER(certValueHex);\n                }\n                break;\n            case id_CertBag_SDSICertificate:\n            default:\n                throw new Error(`Incorrect CERT_ID value in CertBag: ${this.certId}`);\n        }\n    }\n    toSchema() {\n        if (PARSED_VALUE$4 in this) {\n            if (\"acinfo\" in this.parsedValue) {\n                this.certId = id_CertBag_AttributeCertificate;\n            }\n            else {\n                this.certId = id_CertBag_X509Certificate;\n            }\n            this.certValue = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.certId }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [((\"toSchema\" in this.certValue) ? this.certValue.toSchema() : this.certValue)]\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            certId: this.certId,\n            certValue: this.certValue.toJSON()\n        };\n    }\n}\nCertBag.CLASS_NAME = \"CertBag\";\n\nconst USER_CERTIFICATE = \"userCertificate\";\nconst REVOCATION_DATE = \"revocationDate\";\nconst CRL_ENTRY_EXTENSIONS = \"crlEntryExtensions\";\nconst CLEAR_PROPS$O = [\n    USER_CERTIFICATE,\n    REVOCATION_DATE,\n    CRL_ENTRY_EXTENSIONS\n];\nclass RevokedCertificate extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.userCertificate = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, USER_CERTIFICATE, RevokedCertificate.defaultValues(USER_CERTIFICATE));\n        this.revocationDate = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, REVOCATION_DATE, RevokedCertificate.defaultValues(REVOCATION_DATE));\n        if (CRL_ENTRY_EXTENSIONS in parameters) {\n            this.crlEntryExtensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRL_ENTRY_EXTENSIONS, RevokedCertificate.defaultValues(CRL_ENTRY_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case USER_CERTIFICATE:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case REVOCATION_DATE:\n                return new Time();\n            case CRL_ENTRY_EXTENSIONS:\n                return new Extensions();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.userCertificate || USER_CERTIFICATE) }),\n                Time.schema({\n                    names: {\n                        utcTimeName: (names.revocationDate || REVOCATION_DATE),\n                        generalTimeName: (names.revocationDate || REVOCATION_DATE)\n                    }\n                }),\n                Extensions.schema({\n                    names: {\n                        blockName: (names.crlEntryExtensions || CRL_ENTRY_EXTENSIONS)\n                    }\n                }, true)\n            ]\n        });\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$O);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RevokedCertificate.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.userCertificate = asn1.result.userCertificate;\n        this.revocationDate = new Time({ schema: asn1.result.revocationDate });\n        if (CRL_ENTRY_EXTENSIONS in asn1.result) {\n            this.crlEntryExtensions = new Extensions({ schema: asn1.result.crlEntryExtensions });\n        }\n    }\n    toSchema() {\n        const outputArray = [\n            this.userCertificate,\n            this.revocationDate.toSchema()\n        ];\n        if (this.crlEntryExtensions) {\n            outputArray.push(this.crlEntryExtensions.toSchema());\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            userCertificate: this.userCertificate.toJSON(),\n            revocationDate: this.revocationDate.toJSON(),\n        };\n        if (this.crlEntryExtensions) {\n            res.crlEntryExtensions = this.crlEntryExtensions.toJSON();\n        }\n        return res;\n    }\n}\nRevokedCertificate.CLASS_NAME = \"RevokedCertificate\";\n\nconst TBS$3 = \"tbs\";\nconst VERSION$e = \"version\";\nconst SIGNATURE$3 = \"signature\";\nconst ISSUER$1 = \"issuer\";\nconst THIS_UPDATE$1 = \"thisUpdate\";\nconst NEXT_UPDATE$1 = \"nextUpdate\";\nconst REVOKED_CERTIFICATES = \"revokedCertificates\";\nconst CRL_EXTENSIONS = \"crlExtensions\";\nconst SIGNATURE_ALGORITHM$4 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE$1 = \"signatureValue\";\nconst TBS_CERT_LIST = \"tbsCertList\";\nconst TBS_CERT_LIST_VERSION = `${TBS_CERT_LIST}.version`;\nconst TBS_CERT_LIST_SIGNATURE = `${TBS_CERT_LIST}.signature`;\nconst TBS_CERT_LIST_ISSUER = `${TBS_CERT_LIST}.issuer`;\nconst TBS_CERT_LIST_THIS_UPDATE = `${TBS_CERT_LIST}.thisUpdate`;\nconst TBS_CERT_LIST_NEXT_UPDATE = `${TBS_CERT_LIST}.nextUpdate`;\nconst TBS_CERT_LIST_REVOKED_CERTIFICATES = `${TBS_CERT_LIST}.revokedCertificates`;\nconst TBS_CERT_LIST_EXTENSIONS = `${TBS_CERT_LIST}.extensions`;\nconst CLEAR_PROPS$N = [\n    TBS_CERT_LIST,\n    TBS_CERT_LIST_VERSION,\n    TBS_CERT_LIST_SIGNATURE,\n    TBS_CERT_LIST_ISSUER,\n    TBS_CERT_LIST_THIS_UPDATE,\n    TBS_CERT_LIST_NEXT_UPDATE,\n    TBS_CERT_LIST_REVOKED_CERTIFICATES,\n    TBS_CERT_LIST_EXTENSIONS,\n    SIGNATURE_ALGORITHM$4,\n    SIGNATURE_VALUE$1\n];\nfunction tbsCertList(parameters = {}) {\n    const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n    return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n        name: (names.blockName || TBS_CERT_LIST),\n        value: [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n                optional: true,\n                name: (names.tbsCertListVersion || TBS_CERT_LIST_VERSION),\n                value: 2\n            }),\n            AlgorithmIdentifier.schema(names.signature || {\n                names: {\n                    blockName: TBS_CERT_LIST_SIGNATURE\n                }\n            }),\n            RelativeDistinguishedNames.schema(names.issuer || {\n                names: {\n                    blockName: TBS_CERT_LIST_ISSUER\n                }\n            }),\n            Time.schema(names.tbsCertListThisUpdate || {\n                names: {\n                    utcTimeName: TBS_CERT_LIST_THIS_UPDATE,\n                    generalTimeName: TBS_CERT_LIST_THIS_UPDATE\n                }\n            }),\n            Time.schema(names.tbsCertListNextUpdate || {\n                names: {\n                    utcTimeName: TBS_CERT_LIST_NEXT_UPDATE,\n                    generalTimeName: TBS_CERT_LIST_NEXT_UPDATE\n                }\n            }, true),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                optional: true,\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                        name: (names.tbsCertListRevokedCertificates || TBS_CERT_LIST_REVOKED_CERTIFICATES),\n                        value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                            value: [\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer(),\n                                Time.schema(),\n                                Extensions.schema({}, true)\n                            ]\n                        })\n                    })\n                ]\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [Extensions.schema(names.crlExtensions || {\n                        names: {\n                            blockName: TBS_CERT_LIST_EXTENSIONS\n                        }\n                    })]\n            })\n        ]\n    }));\n}\nconst WELL_KNOWN_EXTENSIONS = [\n    id_AuthorityKeyIdentifier,\n    id_IssuerAltName,\n    id_CRLNumber,\n    id_BaseCRLNumber,\n    id_IssuingDistributionPoint,\n    id_FreshestCRL,\n    id_AuthorityInfoAccess,\n    id_CRLReason,\n    id_InvalidityDate,\n    id_CertificateIssuer,\n];\nclass CertificateRevocationList extends PkiObject {\n    get tbs() {\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TBS$3, CertificateRevocationList.defaultValues(TBS$3)));\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$e, CertificateRevocationList.defaultValues(VERSION$e));\n        this.signature = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE$3, CertificateRevocationList.defaultValues(SIGNATURE$3));\n        this.issuer = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER$1, CertificateRevocationList.defaultValues(ISSUER$1));\n        this.thisUpdate = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, THIS_UPDATE$1, CertificateRevocationList.defaultValues(THIS_UPDATE$1));\n        if (NEXT_UPDATE$1 in parameters) {\n            this.nextUpdate = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NEXT_UPDATE$1, CertificateRevocationList.defaultValues(NEXT_UPDATE$1));\n        }\n        if (REVOKED_CERTIFICATES in parameters) {\n            this.revokedCertificates = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, REVOKED_CERTIFICATES, CertificateRevocationList.defaultValues(REVOKED_CERTIFICATES));\n        }\n        if (CRL_EXTENSIONS in parameters) {\n            this.crlExtensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRL_EXTENSIONS, CertificateRevocationList.defaultValues(CRL_EXTENSIONS));\n        }\n        this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_ALGORITHM$4, CertificateRevocationList.defaultValues(SIGNATURE_ALGORITHM$4));\n        this.signatureValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_VALUE$1, CertificateRevocationList.defaultValues(SIGNATURE_VALUE$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS$3:\n                return EMPTY_BUFFER;\n            case VERSION$e:\n                return 0;\n            case SIGNATURE$3:\n                return new AlgorithmIdentifier();\n            case ISSUER$1:\n                return new RelativeDistinguishedNames();\n            case THIS_UPDATE$1:\n                return new Time();\n            case NEXT_UPDATE$1:\n                return new Time();\n            case REVOKED_CERTIFICATES:\n                return [];\n            case CRL_EXTENSIONS:\n                return new Extensions();\n            case SIGNATURE_ALGORITHM$4:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || \"CertificateList\"),\n            value: [\n                tbsCertList(parameters),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$4\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.signatureValue || SIGNATURE_VALUE$1) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$N);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, CertificateRevocationList.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.tbsCertList.valueBeforeDecodeView;\n        if (TBS_CERT_LIST_VERSION in asn1.result) {\n            this.version = asn1.result[TBS_CERT_LIST_VERSION].valueBlock.valueDec;\n        }\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result[TBS_CERT_LIST_SIGNATURE] });\n        this.issuer = new RelativeDistinguishedNames({ schema: asn1.result[TBS_CERT_LIST_ISSUER] });\n        this.thisUpdate = new Time({ schema: asn1.result[TBS_CERT_LIST_THIS_UPDATE] });\n        if (TBS_CERT_LIST_NEXT_UPDATE in asn1.result) {\n            this.nextUpdate = new Time({ schema: asn1.result[TBS_CERT_LIST_NEXT_UPDATE] });\n        }\n        if (TBS_CERT_LIST_REVOKED_CERTIFICATES in asn1.result) {\n            this.revokedCertificates = Array.from(asn1.result[TBS_CERT_LIST_REVOKED_CERTIFICATES], element => new RevokedCertificate({ schema: element }));\n        }\n        if (TBS_CERT_LIST_EXTENSIONS in asn1.result) {\n            this.crlExtensions = new Extensions({ schema: asn1.result[TBS_CERT_LIST_EXTENSIONS] });\n        }\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    encodeTBS() {\n        const outputArray = [];\n        if (this.version !== CertificateRevocationList.defaultValues(VERSION$e)) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        }\n        outputArray.push(this.signature.toSchema());\n        outputArray.push(this.issuer.toSchema());\n        outputArray.push(this.thisUpdate.toSchema());\n        if (this.nextUpdate) {\n            outputArray.push(this.nextUpdate.toSchema());\n        }\n        if (this.revokedCertificates) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: Array.from(this.revokedCertificates, o => o.toSchema())\n            }));\n        }\n        if (this.crlExtensions) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    this.crlExtensions.toSchema()\n                ]\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (!encodeFlag) {\n            if (!this.tbsView.byteLength) {\n                return CertificateRevocationList.schema();\n            }\n            const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"TBS Certificate Revocation List\");\n            tbsSchema = asn1.result;\n        }\n        else {\n            tbsSchema = this.encodeTBS();\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                tbsSchema,\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            tbs: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToHex(this.tbsView),\n            version: this.version,\n            signature: this.signature.toJSON(),\n            issuer: this.issuer.toJSON(),\n            thisUpdate: this.thisUpdate.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON()\n        };\n        if (this.version !== CertificateRevocationList.defaultValues(VERSION$e))\n            res.version = this.version;\n        if (this.nextUpdate) {\n            res.nextUpdate = this.nextUpdate.toJSON();\n        }\n        if (this.revokedCertificates) {\n            res.revokedCertificates = Array.from(this.revokedCertificates, o => o.toJSON());\n        }\n        if (this.crlExtensions) {\n            res.crlExtensions = this.crlExtensions.toJSON();\n        }\n        return res;\n    }\n    isCertificateRevoked(certificate) {\n        if (!this.issuer.isEqual(certificate.issuer)) {\n            return false;\n        }\n        if (!this.revokedCertificates) {\n            return false;\n        }\n        for (const revokedCertificate of this.revokedCertificates) {\n            if (revokedCertificate.userCertificate.isEqual(certificate.serialNumber)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        if (!privateKey) {\n            throw new Error(\"Need to provide a private key for signing\");\n        }\n        const signatureParameters = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const { parameters } = signatureParameters;\n        this.signature = signatureParameters.signatureAlgorithm;\n        this.signatureAlgorithm = signatureParameters.signatureAlgorithm;\n        this.tbsView = new Uint8Array(this.encodeTBS().toBER());\n        const signature = await crypto.signWithPrivateKey(this.tbsView, privateKey, parameters);\n        this.signatureValue = new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ valueHex: signature });\n    }\n    async verify(parameters = {}, crypto = getCrypto(true)) {\n        let subjectPublicKeyInfo;\n        if (parameters.issuerCertificate) {\n            subjectPublicKeyInfo = parameters.issuerCertificate.subjectPublicKeyInfo;\n            if (!this.issuer.isEqual(parameters.issuerCertificate.subject)) {\n                return false;\n            }\n        }\n        if (parameters.publicKeyInfo) {\n            subjectPublicKeyInfo = parameters.publicKeyInfo;\n        }\n        if (!subjectPublicKeyInfo) {\n            throw new Error(\"Issuer's certificate must be provided as an input parameter\");\n        }\n        if (this.crlExtensions) {\n            for (const extension of this.crlExtensions.extensions) {\n                if (extension.critical) {\n                    if (!WELL_KNOWN_EXTENSIONS.includes(extension.extnID))\n                        return false;\n                }\n            }\n        }\n        return crypto.verifyWithPublicKey(this.tbsView, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);\n    }\n}\nCertificateRevocationList.CLASS_NAME = \"CertificateRevocationList\";\n\nconst CRL_ID = \"crlId\";\nconst CRL_VALUE = \"crlValue\";\nconst PARSED_VALUE$3 = \"parsedValue\";\nconst CLEAR_PROPS$M = [\n    CRL_ID,\n    CRL_VALUE,\n];\nclass CRLBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.crlId = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRL_ID, CRLBag.defaultValues(CRL_ID));\n        this.crlValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRL_VALUE, CRLBag.defaultValues(CRL_VALUE));\n        if (PARSED_VALUE$3 in parameters) {\n            this.parsedValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PARSED_VALUE$3, CRLBag.defaultValues(PARSED_VALUE$3));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CRL_ID:\n                return EMPTY_STRING;\n            case CRL_VALUE:\n                return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any());\n            case PARSED_VALUE$3:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CRL_ID:\n                return (memberValue === EMPTY_STRING);\n            case CRL_VALUE:\n                return (memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any);\n            case PARSED_VALUE$3:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.id || \"id\") }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.value || \"value\") })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$M);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, CRLBag.schema({\n            names: {\n                id: CRL_ID,\n                value: CRL_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.crlId = asn1.result.crlId.valueBlock.toString();\n        this.crlValue = asn1.result.crlValue;\n        switch (this.crlId) {\n            case id_CRLBag_X509CRL:\n                {\n                    this.parsedValue = CertificateRevocationList.fromBER(this.certValue.valueBlock.valueHex);\n                }\n                break;\n            default:\n                throw new Error(`Incorrect CRL_ID value in CRLBag: ${this.crlId}`);\n        }\n    }\n    toSchema() {\n        if (this.parsedValue) {\n            this.crlId = id_CRLBag_X509CRL;\n            this.crlValue = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.crlId }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [this.crlValue.toSchema()]\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            crlId: this.crlId,\n            crlValue: this.crlValue.toJSON()\n        };\n    }\n}\nCRLBag.CLASS_NAME = \"CRLBag\";\n\nconst VERSION$d = \"version\";\nconst ENCRYPTED_CONTENT_INFO$1 = \"encryptedContentInfo\";\nconst UNPROTECTED_ATTRS$1 = \"unprotectedAttrs\";\nconst CLEAR_PROPS$L = [\n    VERSION$d,\n    ENCRYPTED_CONTENT_INFO$1,\n    UNPROTECTED_ATTRS$1,\n];\nclass EncryptedData extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$d, EncryptedData.defaultValues(VERSION$d));\n        this.encryptedContentInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTED_CONTENT_INFO$1, EncryptedData.defaultValues(ENCRYPTED_CONTENT_INFO$1));\n        if (UNPROTECTED_ATTRS$1 in parameters) {\n            this.unprotectedAttrs = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, UNPROTECTED_ATTRS$1, EncryptedData.defaultValues(UNPROTECTED_ATTRS$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$d:\n                return 0;\n            case ENCRYPTED_CONTENT_INFO$1:\n                return new EncryptedContentInfo();\n            case UNPROTECTED_ATTRS$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$d:\n                return (memberValue === 0);\n            case ENCRYPTED_CONTENT_INFO$1:\n                return ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\n                    (EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm)) &&\n                    (EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent)));\n            case UNPROTECTED_ATTRS$1:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                EncryptedContentInfo.schema(names.encryptedContentInfo || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.unprotectedAttrs || EMPTY_STRING),\n                            value: Attribute.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$L);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, EncryptedData.schema({\n            names: {\n                version: VERSION$d,\n                encryptedContentInfo: {\n                    names: {\n                        blockName: ENCRYPTED_CONTENT_INFO$1\n                    }\n                },\n                unprotectedAttrs: UNPROTECTED_ATTRS$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\n        if (UNPROTECTED_ATTRS$1 in asn1.result)\n            this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        outputArray.push(this.encryptedContentInfo.toSchema());\n        if (this.unprotectedAttrs) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.unprotectedAttrs, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            encryptedContentInfo: this.encryptedContentInfo.toJSON()\n        };\n        if (this.unprotectedAttrs)\n            res.unprotectedAttrs = Array.from(this.unprotectedAttrs, o => o.toJSON());\n        return res;\n    }\n    async encrypt(parameters, crypto = getCrypto(true)) {\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        const encryptParams = {\n            ...parameters,\n            contentType: \"1.2.840.113549.1.7.1\",\n        };\n        this.encryptedContentInfo = await crypto.encryptEncryptedContentInfo(encryptParams);\n    }\n    async decrypt(parameters, crypto = getCrypto(true)) {\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        const decryptParams = {\n            ...parameters,\n            encryptedContentInfo: this.encryptedContentInfo,\n        };\n        return crypto.decryptEncryptedContentInfo(decryptParams);\n    }\n}\nEncryptedData.CLASS_NAME = \"EncryptedData\";\n\nconst ENCRYPTION_ALGORITHM = \"encryptionAlgorithm\";\nconst ENCRYPTED_DATA = \"encryptedData\";\nconst PARSED_VALUE$2 = \"parsedValue\";\nconst CLEAR_PROPS$K = [\n    ENCRYPTION_ALGORITHM,\n    ENCRYPTED_DATA,\n];\nclass PKCS8ShroudedKeyBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.encryptionAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTION_ALGORITHM, PKCS8ShroudedKeyBag.defaultValues(ENCRYPTION_ALGORITHM));\n        this.encryptedData = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTED_DATA, PKCS8ShroudedKeyBag.defaultValues(ENCRYPTED_DATA));\n        if (PARSED_VALUE$2 in parameters) {\n            this.parsedValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PARSED_VALUE$2, PKCS8ShroudedKeyBag.defaultValues(PARSED_VALUE$2));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ENCRYPTION_ALGORITHM:\n                return (new AlgorithmIdentifier());\n            case ENCRYPTED_DATA:\n                return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString());\n            case PARSED_VALUE$2:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ENCRYPTION_ALGORITHM:\n                return ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\n                    ((\"algorithmParams\" in memberValue) === false));\n            case ENCRYPTED_DATA:\n                return (memberValue.isEqual(PKCS8ShroudedKeyBag.defaultValues(memberName)));\n            case PARSED_VALUE$2:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.encryptionAlgorithm || {\n                    names: {\n                        blockName: ENCRYPTION_ALGORITHM\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.encryptedData || ENCRYPTED_DATA) }),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({\n                            idBlock: {\n                                isConstructed: true\n                            },\n                            name: (names.encryptedData || ENCRYPTED_DATA)\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$K);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PKCS8ShroudedKeyBag.schema({\n            names: {\n                encryptionAlgorithm: {\n                    names: {\n                        blockName: ENCRYPTION_ALGORITHM\n                    }\n                },\n                encryptedData: ENCRYPTED_DATA\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.encryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.encryptionAlgorithm });\n        this.encryptedData = asn1.result.encryptedData;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.encryptionAlgorithm.toSchema(),\n                this.encryptedData\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            encryptionAlgorithm: this.encryptionAlgorithm.toJSON(),\n            encryptedData: this.encryptedData.toJSON(),\n        };\n    }\n    async parseInternalValues(parameters, crypto = getCrypto(true)) {\n        const cmsEncrypted = new EncryptedData({\n            encryptedContentInfo: new EncryptedContentInfo({\n                contentEncryptionAlgorithm: this.encryptionAlgorithm,\n                encryptedContent: this.encryptedData\n            })\n        });\n        const decryptedData = await cmsEncrypted.decrypt(parameters, crypto);\n        this.parsedValue = PrivateKeyInfo.fromBER(decryptedData);\n    }\n    async makeInternalValues(parameters, crypto = getCrypto(true)) {\n        if (!this.parsedValue) {\n            throw new Error(\"Please initialize \\\"parsedValue\\\" first\");\n        }\n        const cmsEncrypted = new EncryptedData();\n        const encryptParams = {\n            ...parameters,\n            contentToEncrypt: this.parsedValue.toSchema().toBER(false),\n        };\n        await cmsEncrypted.encrypt(encryptParams, crypto);\n        if (!cmsEncrypted.encryptedContentInfo.encryptedContent) {\n            throw new Error(\"The filed `encryptedContent` in EncryptedContentInfo is empty\");\n        }\n        this.encryptionAlgorithm = cmsEncrypted.encryptedContentInfo.contentEncryptionAlgorithm;\n        this.encryptedData = cmsEncrypted.encryptedContentInfo.encryptedContent;\n    }\n}\nPKCS8ShroudedKeyBag.CLASS_NAME = \"PKCS8ShroudedKeyBag\";\n\nconst SECRET_TYPE_ID = \"secretTypeId\";\nconst SECRET_VALUE = \"secretValue\";\nconst CLEAR_PROPS$J = [\n    SECRET_TYPE_ID,\n    SECRET_VALUE,\n];\nclass SecretBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.secretTypeId = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SECRET_TYPE_ID, SecretBag.defaultValues(SECRET_TYPE_ID));\n        this.secretValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SECRET_VALUE, SecretBag.defaultValues(SECRET_VALUE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SECRET_TYPE_ID:\n                return EMPTY_STRING;\n            case SECRET_VALUE:\n                return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any());\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SECRET_TYPE_ID:\n                return (memberValue === EMPTY_STRING);\n            case SECRET_VALUE:\n                return (memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.id || \"id\") }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.value || \"value\") })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$J);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, SecretBag.schema({\n            names: {\n                id: SECRET_TYPE_ID,\n                value: SECRET_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.secretTypeId = asn1.result.secretTypeId.valueBlock.toString();\n        this.secretValue = asn1.result.secretValue;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.secretTypeId }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [this.secretValue.toSchema()]\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            secretTypeId: this.secretTypeId,\n            secretValue: this.secretValue.toJSON()\n        };\n    }\n}\nSecretBag.CLASS_NAME = \"SecretBag\";\n\nclass SafeBagValueFactory {\n    static getItems() {\n        if (!this.items) {\n            this.items = {};\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.1\", PrivateKeyInfo);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.2\", PKCS8ShroudedKeyBag);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.3\", CertBag);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.4\", CRLBag);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.5\", SecretBag);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.6\", SafeContents);\n        }\n        return this.items;\n    }\n    static register(id, type) {\n        this.getItems()[id] = type;\n    }\n    static find(id) {\n        return this.getItems()[id] || null;\n    }\n}\n\nconst BAG_ID = \"bagId\";\nconst BAG_VALUE = \"bagValue\";\nconst BAG_ATTRIBUTES = \"bagAttributes\";\nconst CLEAR_PROPS$I = [\n    BAG_ID,\n    BAG_VALUE,\n    BAG_ATTRIBUTES\n];\nclass SafeBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.bagId = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, BAG_ID, SafeBag.defaultValues(BAG_ID));\n        this.bagValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, BAG_VALUE, SafeBag.defaultValues(BAG_VALUE));\n        if (BAG_ATTRIBUTES in parameters) {\n            this.bagAttributes = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, BAG_ATTRIBUTES, SafeBag.defaultValues(BAG_ATTRIBUTES));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case BAG_ID:\n                return EMPTY_STRING;\n            case BAG_VALUE:\n                return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any());\n            case BAG_ATTRIBUTES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case BAG_ID:\n                return (memberValue === EMPTY_STRING);\n            case BAG_VALUE:\n                return (memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any);\n            case BAG_ATTRIBUTES:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.bagId || BAG_ID) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.bagValue || BAG_VALUE) })]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    optional: true,\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.bagAttributes || BAG_ATTRIBUTES),\n                            value: Attribute.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$I);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, SafeBag.schema({\n            names: {\n                bagId: BAG_ID,\n                bagValue: BAG_VALUE,\n                bagAttributes: BAG_ATTRIBUTES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.bagId = asn1.result.bagId.valueBlock.toString();\n        const bagType = SafeBagValueFactory.find(this.bagId);\n        if (!bagType) {\n            throw new Error(`Invalid BAG_ID for SafeBag: ${this.bagId}`);\n        }\n        this.bagValue = new bagType({ schema: asn1.result.bagValue });\n        if (BAG_ATTRIBUTES in asn1.result) {\n            this.bagAttributes = Array.from(asn1.result.bagAttributes, element => new Attribute({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.bagId }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.bagValue.toSchema()]\n            })\n        ];\n        if (this.bagAttributes) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                value: Array.from(this.bagAttributes, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const output = {\n            bagId: this.bagId,\n            bagValue: this.bagValue.toJSON()\n        };\n        if (this.bagAttributes) {\n            output.bagAttributes = Array.from(this.bagAttributes, o => o.toJSON());\n        }\n        return output;\n    }\n}\nSafeBag.CLASS_NAME = \"SafeBag\";\n\nconst SAFE_BUGS = \"safeBags\";\nclass SafeContents extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.safeBags = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SAFE_BUGS, SafeContents.defaultValues(SAFE_BUGS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SAFE_BUGS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SAFE_BUGS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.safeBags || EMPTY_STRING),\n                    value: SafeBag.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            SAFE_BUGS\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, SafeContents.schema({\n            names: {\n                safeBags: SAFE_BUGS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.safeBags = Array.from(asn1.result.safeBags, element => new SafeBag({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.safeBags, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            safeBags: Array.from(this.safeBags, o => o.toJSON())\n        };\n    }\n}\nSafeContents.CLASS_NAME = \"SafeContents\";\n\nconst OTHER_CERT_FORMAT = \"otherCertFormat\";\nconst OTHER_CERT = \"otherCert\";\nconst CLEAR_PROPS$H = [\n    OTHER_CERT_FORMAT,\n    OTHER_CERT\n];\nclass OtherCertificateFormat extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.otherCertFormat = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OTHER_CERT_FORMAT, OtherCertificateFormat.defaultValues(OTHER_CERT_FORMAT));\n        this.otherCert = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OTHER_CERT, OtherCertificateFormat.defaultValues(OTHER_CERT));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case OTHER_CERT_FORMAT:\n                return EMPTY_STRING;\n            case OTHER_CERT:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.otherCertFormat || OTHER_CERT_FORMAT) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.otherCert || OTHER_CERT) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$H);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OtherCertificateFormat.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.otherCertFormat = asn1.result.otherCertFormat.valueBlock.toString();\n        this.otherCert = asn1.result.otherCert;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.otherCertFormat }),\n                this.otherCert\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            otherCertFormat: this.otherCertFormat\n        };\n        if (!(this.otherCert instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any)) {\n            res.otherCert = this.otherCert.toJSON();\n        }\n        return res;\n    }\n}\n\nconst CERTIFICATES$1 = \"certificates\";\nconst CLEAR_PROPS$G = [\n    CERTIFICATES$1,\n];\nclass CertificateSet extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certificates = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERTIFICATES$1, CertificateSet.defaultValues(CERTIFICATES$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERTIFICATES$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.certificates || CERTIFICATES$1),\n                    value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                        value: [\n                            Certificate.schema(),\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 0\n                                },\n                                value: [\n                                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any()\n                                ]\n                            }),\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 1\n                                },\n                                value: [\n                                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence\n                                ]\n                            }),\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 2\n                                },\n                                value: AttributeCertificateV2.schema().valueBlock.value\n                            }),\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 3\n                                },\n                                value: OtherCertificateFormat.schema().valueBlock.value\n                            })\n                        ]\n                    })\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$G);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, CertificateSet.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.certificates = Array.from(asn1.result.certificates || [], (element) => {\n            const initialTagNumber = element.idBlock.tagNumber;\n            if (element.idBlock.tagClass === 1)\n                return new Certificate({ schema: element });\n            const elementSequence = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: element.valueBlock.value\n            });\n            switch (initialTagNumber) {\n                case 1:\n                    if (elementSequence.valueBlock.value[0].valueBlock.value[0].valueBlock.valueDec === 1) {\n                        return new AttributeCertificateV2({ schema: elementSequence });\n                    }\n                    else {\n                        return new AttributeCertificateV1({ schema: elementSequence });\n                    }\n                case 2:\n                    return new AttributeCertificateV2({ schema: elementSequence });\n                case 3:\n                    return new OtherCertificateFormat({ schema: elementSequence });\n            }\n            return element;\n        });\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n            value: Array.from(this.certificates, element => {\n                switch (true) {\n                    case (element instanceof Certificate):\n                        return element.toSchema();\n                    case (element instanceof AttributeCertificateV1):\n                        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: element.toSchema().valueBlock.value\n                        });\n                    case (element instanceof AttributeCertificateV2):\n                        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 2\n                            },\n                            value: element.toSchema().valueBlock.value\n                        });\n                    case (element instanceof OtherCertificateFormat):\n                        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 3\n                            },\n                            value: element.toSchema().valueBlock.value\n                        });\n                }\n                return element.toSchema();\n            })\n        }));\n    }\n    toJSON() {\n        return {\n            certificates: Array.from(this.certificates, o => o.toJSON())\n        };\n    }\n}\nCertificateSet.CLASS_NAME = \"CertificateSet\";\n\nconst OTHER_REV_INFO_FORMAT = \"otherRevInfoFormat\";\nconst OTHER_REV_INFO = \"otherRevInfo\";\nconst CLEAR_PROPS$F = [\n    OTHER_REV_INFO_FORMAT,\n    OTHER_REV_INFO\n];\nclass OtherRevocationInfoFormat extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.otherRevInfoFormat = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OTHER_REV_INFO_FORMAT, OtherRevocationInfoFormat.defaultValues(OTHER_REV_INFO_FORMAT));\n        this.otherRevInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OTHER_REV_INFO, OtherRevocationInfoFormat.defaultValues(OTHER_REV_INFO));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case OTHER_REV_INFO_FORMAT:\n                return EMPTY_STRING;\n            case OTHER_REV_INFO:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.otherRevInfoFormat || OTHER_REV_INFO_FORMAT) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.otherRevInfo || OTHER_REV_INFO) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$F);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OtherRevocationInfoFormat.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.otherRevInfoFormat = asn1.result.otherRevInfoFormat.valueBlock.toString();\n        this.otherRevInfo = asn1.result.otherRevInfo;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.otherRevInfoFormat }),\n                this.otherRevInfo\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            otherRevInfoFormat: this.otherRevInfoFormat\n        };\n        if (!(this.otherRevInfo instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any)) {\n            res.otherRevInfo = this.otherRevInfo.toJSON();\n        }\n        return res;\n    }\n}\nOtherRevocationInfoFormat.CLASS_NAME = \"OtherRevocationInfoFormat\";\n\nconst CRLS$3 = \"crls\";\nconst OTHER_REVOCATION_INFOS = \"otherRevocationInfos\";\nconst CLEAR_PROPS$E = [\n    CRLS$3\n];\nclass RevocationInfoChoices extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.crls = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRLS$3, RevocationInfoChoices.defaultValues(CRLS$3));\n        this.otherRevocationInfos = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OTHER_REVOCATION_INFOS, RevocationInfoChoices.defaultValues(OTHER_REVOCATION_INFOS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CRLS$3:\n                return [];\n            case OTHER_REVOCATION_INFOS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.crls || EMPTY_STRING),\n                    value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                        value: [\n                            CertificateRevocationList.schema(),\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 1\n                                },\n                                value: [\n                                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier(),\n                                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any()\n                                ]\n                            })\n                        ]\n                    })\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$E);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RevocationInfoChoices.schema({\n            names: {\n                crls: CRLS$3\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.crls) {\n            for (const element of asn1.result.crls) {\n                if (element.idBlock.tagClass === 1)\n                    this.crls.push(new CertificateRevocationList({ schema: element }));\n                else\n                    this.otherRevocationInfos.push(new OtherRevocationInfoFormat({ schema: element }));\n            }\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(...Array.from(this.crls, o => o.toSchema()));\n        outputArray.push(...Array.from(this.otherRevocationInfos, element => {\n            const schema = element.toSchema();\n            schema.idBlock.tagClass = 3;\n            schema.idBlock.tagNumber = 1;\n            return schema;\n        }));\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        return {\n            crls: Array.from(this.crls, o => o.toJSON()),\n            otherRevocationInfos: Array.from(this.otherRevocationInfos, o => o.toJSON())\n        };\n    }\n}\nRevocationInfoChoices.CLASS_NAME = \"RevocationInfoChoices\";\n\nconst CERTS$3 = \"certs\";\nconst CRLS$2 = \"crls\";\nconst CLEAR_PROPS$D = [\n    CERTS$3,\n    CRLS$2,\n];\nclass OriginatorInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.crls = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRLS$2, OriginatorInfo.defaultValues(CRLS$2));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERTS$3:\n                return new CertificateSet();\n            case CRLS$2:\n                return new RevocationInfoChoices();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CERTS$3:\n                return (memberValue.certificates.length === 0);\n            case CRLS$2:\n                return ((memberValue.crls.length === 0) && (memberValue.otherRevocationInfos.length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.certs || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: CertificateSet.schema().valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.crls || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: RevocationInfoChoices.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$D);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OriginatorInfo.schema({\n            names: {\n                certs: CERTS$3,\n                crls: CRLS$2\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (CERTS$3 in asn1.result) {\n            this.certs = new CertificateSet({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    value: asn1.result.certs.valueBlock.value\n                })\n            });\n        }\n        if (CRLS$2 in asn1.result) {\n            this.crls = new RevocationInfoChoices({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    value: asn1.result.crls.valueBlock.value\n                })\n            });\n        }\n    }\n    toSchema() {\n        const sequenceValue = [];\n        if (this.certs) {\n            sequenceValue.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.certs.toSchema().valueBlock.value\n            }));\n        }\n        if (this.crls) {\n            sequenceValue.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: this.crls.toSchema().valueBlock.value\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: sequenceValue\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (this.certs) {\n            res.certs = this.certs.toJSON();\n        }\n        if (this.crls) {\n            res.crls = this.crls.toJSON();\n        }\n        return res;\n    }\n}\nOriginatorInfo.CLASS_NAME = \"OriginatorInfo\";\n\nconst ISSUER = \"issuer\";\nconst SERIAL_NUMBER$2 = \"serialNumber\";\nconst CLEAR_PROPS$C = [\n    ISSUER,\n    SERIAL_NUMBER$2,\n];\nclass IssuerAndSerialNumber extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.issuer = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER, IssuerAndSerialNumber.defaultValues(ISSUER));\n        this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SERIAL_NUMBER$2, IssuerAndSerialNumber.defaultValues(SERIAL_NUMBER$2));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ISSUER:\n                return new RelativeDistinguishedNames();\n            case SERIAL_NUMBER$2:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                RelativeDistinguishedNames.schema(names.issuer || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.serialNumber || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$C);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, IssuerAndSerialNumber.schema({\n            names: {\n                issuer: {\n                    names: {\n                        blockName: ISSUER\n                    }\n                },\n                serialNumber: SERIAL_NUMBER$2\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.issuer = new RelativeDistinguishedNames({ schema: asn1.result.issuer });\n        this.serialNumber = asn1.result.serialNumber;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.issuer.toSchema(),\n                this.serialNumber\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            issuer: this.issuer.toJSON(),\n            serialNumber: this.serialNumber.toJSON(),\n        };\n    }\n}\nIssuerAndSerialNumber.CLASS_NAME = \"IssuerAndSerialNumber\";\n\nconst VARIANT$3 = \"variant\";\nconst VALUE$3 = \"value\";\nconst CLEAR_PROPS$B = [\n    \"blockName\"\n];\nclass RecipientIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.variant = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VARIANT$3, RecipientIdentifier.defaultValues(VARIANT$3));\n        if (VALUE$3 in parameters) {\n            this.value = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUE$3, RecipientIdentifier.defaultValues(VALUE$3));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VARIANT$3:\n                return (-1);\n            case VALUE$3:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VARIANT$3:\n                return (memberValue === (-1));\n            case VALUE$3:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n            value: [\n                IssuerAndSerialNumber.schema({\n                    names: {\n                        blockName: (names.blockName || EMPTY_STRING)\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$B);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RecipientIdentifier.schema({\n            names: {\n                blockName: \"blockName\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\n            this.variant = 1;\n            this.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\n        }\n        else {\n            this.variant = 2;\n            this.value = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: asn1.result.blockName.valueBlock.valueHex });\n        }\n    }\n    toSchema() {\n        switch (this.variant) {\n            case 1:\n                if (!(this.value instanceof IssuerAndSerialNumber)) {\n                    throw new Error(\"Incorrect type of RecipientIdentifier.value. It should be IssuerAndSerialNumber.\");\n                }\n                return this.value.toSchema();\n            case 2:\n                if (!(this.value instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString)) {\n                    throw new Error(\"Incorrect type of RecipientIdentifier.value. It should be ASN.1 OctetString.\");\n                }\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    valueHex: this.value.valueBlock.valueHexView\n                });\n            default:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n        }\n    }\n    toJSON() {\n        const res = {\n            variant: this.variant\n        };\n        if ((this.variant === 1 || this.variant === 2) && this.value) {\n            res.value = this.value.toJSON();\n        }\n        return res;\n    }\n}\nRecipientIdentifier.CLASS_NAME = \"RecipientIdentifier\";\n\nconst VERSION$c = \"version\";\nconst RID$1 = \"rid\";\nconst KEY_ENCRYPTION_ALGORITHM$3 = \"keyEncryptionAlgorithm\";\nconst ENCRYPTED_KEY$3 = \"encryptedKey\";\nconst RECIPIENT_CERTIFICATE$1 = \"recipientCertificate\";\nconst CLEAR_PROPS$A = [\n    VERSION$c,\n    RID$1,\n    KEY_ENCRYPTION_ALGORITHM$3,\n    ENCRYPTED_KEY$3,\n];\nclass KeyTransRecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$c, KeyTransRecipientInfo.defaultValues(VERSION$c));\n        this.rid = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RID$1, KeyTransRecipientInfo.defaultValues(RID$1));\n        this.keyEncryptionAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$3, KeyTransRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$3));\n        this.encryptedKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTED_KEY$3, KeyTransRecipientInfo.defaultValues(ENCRYPTED_KEY$3));\n        this.recipientCertificate = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RECIPIENT_CERTIFICATE$1, KeyTransRecipientInfo.defaultValues(RECIPIENT_CERTIFICATE$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$c:\n                return (-1);\n            case RID$1:\n                return {};\n            case KEY_ENCRYPTION_ALGORITHM$3:\n                return new AlgorithmIdentifier();\n            case ENCRYPTED_KEY$3:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case RECIPIENT_CERTIFICATE$1:\n                return new Certificate();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$c:\n                return (memberValue === KeyTransRecipientInfo.defaultValues(VERSION$c));\n            case RID$1:\n                return (Object.keys(memberValue).length === 0);\n            case KEY_ENCRYPTION_ALGORITHM$3:\n            case ENCRYPTED_KEY$3:\n                return memberValue.isEqual(KeyTransRecipientInfo.defaultValues(memberName));\n            case RECIPIENT_CERTIFICATE$1:\n                return false;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                RecipientIdentifier.schema(names.rid || {}),\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$A);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, KeyTransRecipientInfo.schema({\n            names: {\n                version: VERSION$c,\n                rid: {\n                    names: {\n                        blockName: RID$1\n                    }\n                },\n                keyEncryptionAlgorithm: {\n                    names: {\n                        blockName: KEY_ENCRYPTION_ALGORITHM$3\n                    }\n                },\n                encryptedKey: ENCRYPTED_KEY$3\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        if (asn1.result.rid.idBlock.tagClass === 3) {\n            this.rid = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: asn1.result.rid.valueBlock.valueHex });\n        }\n        else {\n            this.rid = new IssuerAndSerialNumber({ schema: asn1.result.rid });\n        }\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\n        this.encryptedKey = asn1.result.encryptedKey;\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.rid instanceof IssuerAndSerialNumber) {\n            this.version = 0;\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n            outputArray.push(this.rid.toSchema());\n        }\n        else {\n            this.version = 2;\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                valueHex: this.rid.valueBlock.valueHexView\n            }));\n        }\n        outputArray.push(this.keyEncryptionAlgorithm.toSchema());\n        outputArray.push(this.encryptedKey);\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        return {\n            version: this.version,\n            rid: this.rid.toJSON(),\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n            encryptedKey: this.encryptedKey.toJSON(),\n        };\n    }\n}\nKeyTransRecipientInfo.CLASS_NAME = \"KeyTransRecipientInfo\";\n\nconst ALGORITHM = \"algorithm\";\nconst PUBLIC_KEY = \"publicKey\";\nconst CLEAR_PROPS$z = [\n    ALGORITHM,\n    PUBLIC_KEY\n];\nclass OriginatorPublicKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.algorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ALGORITHM, OriginatorPublicKey.defaultValues(ALGORITHM));\n        this.publicKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PUBLIC_KEY, OriginatorPublicKey.defaultValues(PUBLIC_KEY));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ALGORITHM:\n                return new AlgorithmIdentifier();\n            case PUBLIC_KEY:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ALGORITHM:\n            case PUBLIC_KEY:\n                return (memberValue.isEqual(OriginatorPublicKey.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.algorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.publicKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$z);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OriginatorPublicKey.schema({\n            names: {\n                algorithm: {\n                    names: {\n                        blockName: ALGORITHM\n                    }\n                },\n                publicKey: PUBLIC_KEY\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\n        this.publicKey = asn1.result.publicKey;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.algorithm.toSchema(),\n                this.publicKey\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            algorithm: this.algorithm.toJSON(),\n            publicKey: this.publicKey.toJSON(),\n        };\n    }\n}\nOriginatorPublicKey.CLASS_NAME = \"OriginatorPublicKey\";\n\nconst VARIANT$2 = \"variant\";\nconst VALUE$2 = \"value\";\nconst CLEAR_PROPS$y = [\n    \"blockName\",\n];\nclass OriginatorIdentifierOrKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.variant = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VARIANT$2, OriginatorIdentifierOrKey.defaultValues(VARIANT$2));\n        if (VALUE$2 in parameters) {\n            this.value = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUE$2, OriginatorIdentifierOrKey.defaultValues(VALUE$2));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VARIANT$2:\n                return (-1);\n            case VALUE$2:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VARIANT$2:\n                return (memberValue === (-1));\n            case VALUE$2:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n            value: [\n                IssuerAndSerialNumber.schema({\n                    names: {\n                        blockName: (names.blockName || EMPTY_STRING)\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    name: (names.blockName || EMPTY_STRING)\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: OriginatorPublicKey.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$y);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OriginatorIdentifierOrKey.schema({\n            names: {\n                blockName: \"blockName\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\n            this.variant = 1;\n            this.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\n        }\n        else {\n            if (asn1.result.blockName.idBlock.tagNumber === 0) {\n                asn1.result.blockName.idBlock.tagClass = 1;\n                asn1.result.blockName.idBlock.tagNumber = 4;\n                this.variant = 2;\n                this.value = asn1.result.blockName;\n            }\n            else {\n                this.variant = 3;\n                this.value = new OriginatorPublicKey({\n                    schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                        value: asn1.result.blockName.valueBlock.value\n                    })\n                });\n            }\n        }\n    }\n    toSchema() {\n        switch (this.variant) {\n            case 1:\n                return this.value.toSchema();\n            case 2:\n                this.value.idBlock.tagClass = 3;\n                this.value.idBlock.tagNumber = 0;\n                return this.value;\n            case 3:\n                {\n                    const _schema = this.value.toSchema();\n                    _schema.idBlock.tagClass = 3;\n                    _schema.idBlock.tagNumber = 1;\n                    return _schema;\n                }\n            default:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n        }\n    }\n    toJSON() {\n        const res = {\n            variant: this.variant\n        };\n        if ((this.variant === 1) || (this.variant === 2) || (this.variant === 3)) {\n            res.value = this.value.toJSON();\n        }\n        return res;\n    }\n}\nOriginatorIdentifierOrKey.CLASS_NAME = \"OriginatorIdentifierOrKey\";\n\nconst KEY_ATTR_ID = \"keyAttrId\";\nconst KEY_ATTR = \"keyAttr\";\nconst CLEAR_PROPS$x = [\n    KEY_ATTR_ID,\n    KEY_ATTR,\n];\nclass OtherKeyAttribute extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyAttrId = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_ATTR_ID, OtherKeyAttribute.defaultValues(KEY_ATTR_ID));\n        if (KEY_ATTR in parameters) {\n            this.keyAttr = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_ATTR, OtherKeyAttribute.defaultValues(KEY_ATTR));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_ATTR_ID:\n                return EMPTY_STRING;\n            case KEY_ATTR:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case KEY_ATTR_ID:\n                return (typeof memberValue === \"string\" && memberValue === EMPTY_STRING);\n            case KEY_ATTR:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            optional: (names.optional || true),\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.keyAttrId || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({\n                    optional: true,\n                    name: (names.keyAttr || EMPTY_STRING)\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$x);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OtherKeyAttribute.schema({\n            names: {\n                keyAttrId: KEY_ATTR_ID,\n                keyAttr: KEY_ATTR\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyAttrId = asn1.result.keyAttrId.valueBlock.toString();\n        if (KEY_ATTR in asn1.result) {\n            this.keyAttr = asn1.result.keyAttr;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.keyAttrId }));\n        if (KEY_ATTR in this) {\n            outputArray.push(this.keyAttr);\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray,\n        }));\n    }\n    toJSON() {\n        const res = {\n            keyAttrId: this.keyAttrId\n        };\n        if (KEY_ATTR in this) {\n            res.keyAttr = this.keyAttr.toJSON();\n        }\n        return res;\n    }\n}\nOtherKeyAttribute.CLASS_NAME = \"OtherKeyAttribute\";\n\nconst SUBJECT_KEY_IDENTIFIER = \"subjectKeyIdentifier\";\nconst DATE$1 = \"date\";\nconst OTHER$1 = \"other\";\nconst CLEAR_PROPS$w = [\n    SUBJECT_KEY_IDENTIFIER,\n    DATE$1,\n    OTHER$1,\n];\nclass RecipientKeyIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.subjectKeyIdentifier = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SUBJECT_KEY_IDENTIFIER, RecipientKeyIdentifier.defaultValues(SUBJECT_KEY_IDENTIFIER));\n        if (DATE$1 in parameters) {\n            this.date = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DATE$1, RecipientKeyIdentifier.defaultValues(DATE$1));\n        }\n        if (OTHER$1 in parameters) {\n            this.other = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OTHER$1, RecipientKeyIdentifier.defaultValues(OTHER$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SUBJECT_KEY_IDENTIFIER:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case DATE$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime();\n            case OTHER$1:\n                return new OtherKeyAttribute();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SUBJECT_KEY_IDENTIFIER:\n                return (memberValue.isEqual(RecipientKeyIdentifier.defaultValues(SUBJECT_KEY_IDENTIFIER)));\n            case DATE$1:\n                return ((memberValue.year === 0) &&\n                    (memberValue.month === 0) &&\n                    (memberValue.day === 0) &&\n                    (memberValue.hour === 0) &&\n                    (memberValue.minute === 0) &&\n                    (memberValue.second === 0) &&\n                    (memberValue.millisecond === 0));\n            case OTHER$1:\n                return ((memberValue.keyAttrId === EMPTY_STRING) && ((\"keyAttr\" in memberValue) === false));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.subjectKeyIdentifier || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({\n                    optional: true,\n                    name: (names.date || EMPTY_STRING)\n                }),\n                OtherKeyAttribute.schema(names.other || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$w);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RecipientKeyIdentifier.schema({\n            names: {\n                subjectKeyIdentifier: SUBJECT_KEY_IDENTIFIER,\n                date: DATE$1,\n                other: {\n                    names: {\n                        blockName: OTHER$1\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.subjectKeyIdentifier = asn1.result.subjectKeyIdentifier;\n        if (DATE$1 in asn1.result)\n            this.date = asn1.result.date;\n        if (OTHER$1 in asn1.result)\n            this.other = new OtherKeyAttribute({ schema: asn1.result.other });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.subjectKeyIdentifier);\n        if (this.date) {\n            outputArray.push(this.date);\n        }\n        if (this.other) {\n            outputArray.push(this.other.toSchema());\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            subjectKeyIdentifier: this.subjectKeyIdentifier.toJSON()\n        };\n        if (this.date) {\n            res.date = this.date.toJSON();\n        }\n        if (this.other) {\n            res.other = this.other.toJSON();\n        }\n        return res;\n    }\n}\nRecipientKeyIdentifier.CLASS_NAME = \"RecipientKeyIdentifier\";\n\nconst VARIANT$1 = \"variant\";\nconst VALUE$1 = \"value\";\nconst CLEAR_PROPS$v = [\n    \"blockName\",\n];\nclass KeyAgreeRecipientIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.variant = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VARIANT$1, KeyAgreeRecipientIdentifier.defaultValues(VARIANT$1));\n        this.value = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUE$1, KeyAgreeRecipientIdentifier.defaultValues(VALUE$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VARIANT$1:\n                return (-1);\n            case VALUE$1:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VARIANT$1:\n                return (memberValue === (-1));\n            case VALUE$1:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n            value: [\n                IssuerAndSerialNumber.schema(names.issuerAndSerialNumber || {\n                    names: {\n                        blockName: (names.blockName || EMPTY_STRING)\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: RecipientKeyIdentifier.schema(names.rKeyId || {\n                        names: {\n                            blockName: (names.blockName || EMPTY_STRING)\n                        }\n                    }).valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$v);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, KeyAgreeRecipientIdentifier.schema({\n            names: {\n                blockName: \"blockName\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\n            this.variant = 1;\n            this.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\n        }\n        else {\n            this.variant = 2;\n            this.value = new RecipientKeyIdentifier({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.blockName.valueBlock.value\n                })\n            });\n        }\n    }\n    toSchema() {\n        switch (this.variant) {\n            case 1:\n                return this.value.toSchema();\n            case 2:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: this.value.toSchema().valueBlock.value\n                });\n            default:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n        }\n    }\n    toJSON() {\n        const res = {\n            variant: this.variant,\n        };\n        if ((this.variant === 1) || (this.variant === 2)) {\n            res.value = this.value.toJSON();\n        }\n        return res;\n    }\n}\nKeyAgreeRecipientIdentifier.CLASS_NAME = \"KeyAgreeRecipientIdentifier\";\n\nconst RID = \"rid\";\nconst ENCRYPTED_KEY$2 = \"encryptedKey\";\nconst CLEAR_PROPS$u = [\n    RID,\n    ENCRYPTED_KEY$2,\n];\nclass RecipientEncryptedKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.rid = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RID, RecipientEncryptedKey.defaultValues(RID));\n        this.encryptedKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTED_KEY$2, RecipientEncryptedKey.defaultValues(ENCRYPTED_KEY$2));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case RID:\n                return new KeyAgreeRecipientIdentifier();\n            case ENCRYPTED_KEY$2:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case RID:\n                return ((memberValue.variant === (-1)) && ((\"value\" in memberValue) === false));\n            case ENCRYPTED_KEY$2:\n                return (memberValue.isEqual(RecipientEncryptedKey.defaultValues(ENCRYPTED_KEY$2)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                KeyAgreeRecipientIdentifier.schema(names.rid || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$u);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RecipientEncryptedKey.schema({\n            names: {\n                rid: {\n                    names: {\n                        blockName: RID\n                    }\n                },\n                encryptedKey: ENCRYPTED_KEY$2\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.rid = new KeyAgreeRecipientIdentifier({ schema: asn1.result.rid });\n        this.encryptedKey = asn1.result.encryptedKey;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.rid.toSchema(),\n                this.encryptedKey\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            rid: this.rid.toJSON(),\n            encryptedKey: this.encryptedKey.toJSON(),\n        };\n    }\n}\nRecipientEncryptedKey.CLASS_NAME = \"RecipientEncryptedKey\";\n\nconst ENCRYPTED_KEYS = \"encryptedKeys\";\nconst RECIPIENT_ENCRYPTED_KEYS = \"RecipientEncryptedKeys\";\nconst CLEAR_PROPS$t = [\n    RECIPIENT_ENCRYPTED_KEYS,\n];\nclass RecipientEncryptedKeys extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.encryptedKeys = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTED_KEYS, RecipientEncryptedKeys.defaultValues(ENCRYPTED_KEYS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ENCRYPTED_KEYS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ENCRYPTED_KEYS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.RecipientEncryptedKeys || EMPTY_STRING),\n                    value: RecipientEncryptedKey.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$t);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RecipientEncryptedKeys.schema({\n            names: {\n                RecipientEncryptedKeys: RECIPIENT_ENCRYPTED_KEYS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.encryptedKeys = Array.from(asn1.result.RecipientEncryptedKeys, element => new RecipientEncryptedKey({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.encryptedKeys, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            encryptedKeys: Array.from(this.encryptedKeys, o => o.toJSON())\n        };\n    }\n}\nRecipientEncryptedKeys.CLASS_NAME = \"RecipientEncryptedKeys\";\n\nconst VERSION$b = \"version\";\nconst ORIGINATOR = \"originator\";\nconst UKM = \"ukm\";\nconst KEY_ENCRYPTION_ALGORITHM$2 = \"keyEncryptionAlgorithm\";\nconst RECIPIENT_ENCRYPTED_KEY = \"recipientEncryptedKeys\";\nconst RECIPIENT_CERTIFICATE = \"recipientCertificate\";\nconst RECIPIENT_PUBLIC_KEY = \"recipientPublicKey\";\nconst CLEAR_PROPS$s = [\n    VERSION$b,\n    ORIGINATOR,\n    UKM,\n    KEY_ENCRYPTION_ALGORITHM$2,\n    RECIPIENT_ENCRYPTED_KEY,\n];\nclass KeyAgreeRecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$b, KeyAgreeRecipientInfo.defaultValues(VERSION$b));\n        this.originator = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ORIGINATOR, KeyAgreeRecipientInfo.defaultValues(ORIGINATOR));\n        if (UKM in parameters) {\n            this.ukm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, UKM, KeyAgreeRecipientInfo.defaultValues(UKM));\n        }\n        this.keyEncryptionAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$2, KeyAgreeRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$2));\n        this.recipientEncryptedKeys = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RECIPIENT_ENCRYPTED_KEY, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_ENCRYPTED_KEY));\n        this.recipientCertificate = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RECIPIENT_CERTIFICATE, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_CERTIFICATE));\n        this.recipientPublicKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RECIPIENT_PUBLIC_KEY, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_PUBLIC_KEY));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$b:\n                return 0;\n            case ORIGINATOR:\n                return new OriginatorIdentifierOrKey();\n            case UKM:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case KEY_ENCRYPTION_ALGORITHM$2:\n                return new AlgorithmIdentifier();\n            case RECIPIENT_ENCRYPTED_KEY:\n                return new RecipientEncryptedKeys();\n            case RECIPIENT_CERTIFICATE:\n                return new Certificate();\n            case RECIPIENT_PUBLIC_KEY:\n                return null;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$b:\n                return (memberValue === 0);\n            case ORIGINATOR:\n                return ((memberValue.variant === (-1)) && ((\"value\" in memberValue) === false));\n            case UKM:\n                return (memberValue.isEqual(KeyAgreeRecipientInfo.defaultValues(UKM)));\n            case KEY_ENCRYPTION_ALGORITHM$2:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case RECIPIENT_ENCRYPTED_KEY:\n                return (memberValue.encryptedKeys.length === 0);\n            case RECIPIENT_CERTIFICATE:\n                return false;\n            case RECIPIENT_PUBLIC_KEY:\n                return false;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: names.blockName || EMPTY_STRING,\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: names.version || EMPTY_STRING }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        OriginatorIdentifierOrKey.schema(names.originator || {})\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: names.ukm || EMPTY_STRING })]\n                }),\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\n                RecipientEncryptedKeys.schema(names.recipientEncryptedKeys || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$s);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, KeyAgreeRecipientInfo.schema({\n            names: {\n                version: VERSION$b,\n                originator: {\n                    names: {\n                        blockName: ORIGINATOR\n                    }\n                },\n                ukm: UKM,\n                keyEncryptionAlgorithm: {\n                    names: {\n                        blockName: KEY_ENCRYPTION_ALGORITHM$2\n                    }\n                },\n                recipientEncryptedKeys: {\n                    names: {\n                        blockName: RECIPIENT_ENCRYPTED_KEY\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.originator = new OriginatorIdentifierOrKey({ schema: asn1.result.originator });\n        if (UKM in asn1.result)\n            this.ukm = asn1.result.ukm;\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\n        this.recipientEncryptedKeys = new RecipientEncryptedKeys({ schema: asn1.result.recipientEncryptedKeys });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n            idBlock: {\n                tagClass: 3,\n                tagNumber: 0\n            },\n            value: [this.originator.toSchema()]\n        }));\n        if (this.ukm) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [this.ukm]\n            }));\n        }\n        outputArray.push(this.keyEncryptionAlgorithm.toSchema());\n        outputArray.push(this.recipientEncryptedKeys.toSchema());\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            originator: this.originator.toJSON(),\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n            recipientEncryptedKeys: this.recipientEncryptedKeys.toJSON(),\n        };\n        if (this.ukm) {\n            res.ukm = this.ukm.toJSON();\n        }\n        return res;\n    }\n}\nKeyAgreeRecipientInfo.CLASS_NAME = \"KeyAgreeRecipientInfo\";\n\nconst KEY_IDENTIFIER = \"keyIdentifier\";\nconst DATE = \"date\";\nconst OTHER = \"other\";\nconst CLEAR_PROPS$r = [\n    KEY_IDENTIFIER,\n    DATE,\n    OTHER,\n];\nclass KEKIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyIdentifier = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_IDENTIFIER, KEKIdentifier.defaultValues(KEY_IDENTIFIER));\n        if (DATE in parameters) {\n            this.date = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DATE, KEKIdentifier.defaultValues(DATE));\n        }\n        if (OTHER in parameters) {\n            this.other = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OTHER, KEKIdentifier.defaultValues(OTHER));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_IDENTIFIER:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case DATE:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime();\n            case OTHER:\n                return new OtherKeyAttribute();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case KEY_IDENTIFIER:\n                return (memberValue.isEqual(KEKIdentifier.defaultValues(KEY_IDENTIFIER)));\n            case DATE:\n                return ((memberValue.year === 0) &&\n                    (memberValue.month === 0) &&\n                    (memberValue.day === 0) &&\n                    (memberValue.hour === 0) &&\n                    (memberValue.minute === 0) &&\n                    (memberValue.second === 0) &&\n                    (memberValue.millisecond === 0));\n            case OTHER:\n                return ((memberValue.compareWithDefault(\"keyAttrId\", memberValue.keyAttrId)) &&\n                    ((\"keyAttr\" in memberValue) === false));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.keyIdentifier || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({\n                    optional: true,\n                    name: (names.date || EMPTY_STRING)\n                }),\n                OtherKeyAttribute.schema(names.other || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$r);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, KEKIdentifier.schema({\n            names: {\n                keyIdentifier: KEY_IDENTIFIER,\n                date: DATE,\n                other: {\n                    names: {\n                        blockName: OTHER\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyIdentifier = asn1.result.keyIdentifier;\n        if (DATE in asn1.result)\n            this.date = asn1.result.date;\n        if (OTHER in asn1.result)\n            this.other = new OtherKeyAttribute({ schema: asn1.result.other });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.keyIdentifier);\n        if (this.date) {\n            outputArray.push(this.date);\n        }\n        if (this.other) {\n            outputArray.push(this.other.toSchema());\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            keyIdentifier: this.keyIdentifier.toJSON()\n        };\n        if (this.date) {\n            res.date = this.date;\n        }\n        if (this.other) {\n            res.other = this.other.toJSON();\n        }\n        return res;\n    }\n}\nKEKIdentifier.CLASS_NAME = \"KEKIdentifier\";\n\nconst VERSION$a = \"version\";\nconst KEK_ID = \"kekid\";\nconst KEY_ENCRYPTION_ALGORITHM$1 = \"keyEncryptionAlgorithm\";\nconst ENCRYPTED_KEY$1 = \"encryptedKey\";\nconst PER_DEFINED_KEK = \"preDefinedKEK\";\nconst CLEAR_PROPS$q = [\n    VERSION$a,\n    KEK_ID,\n    KEY_ENCRYPTION_ALGORITHM$1,\n    ENCRYPTED_KEY$1,\n];\nclass KEKRecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$a, KEKRecipientInfo.defaultValues(VERSION$a));\n        this.kekid = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEK_ID, KEKRecipientInfo.defaultValues(KEK_ID));\n        this.keyEncryptionAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$1, KEKRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$1));\n        this.encryptedKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTED_KEY$1, KEKRecipientInfo.defaultValues(ENCRYPTED_KEY$1));\n        this.preDefinedKEK = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PER_DEFINED_KEK, KEKRecipientInfo.defaultValues(PER_DEFINED_KEK));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$a:\n                return 0;\n            case KEK_ID:\n                return new KEKIdentifier();\n            case KEY_ENCRYPTION_ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case ENCRYPTED_KEY$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case PER_DEFINED_KEK:\n                return EMPTY_BUFFER;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case \"KEKRecipientInfo\":\n                return (memberValue === KEKRecipientInfo.defaultValues(VERSION$a));\n            case KEK_ID:\n                return ((memberValue.compareWithDefault(\"keyIdentifier\", memberValue.keyIdentifier)) &&\n                    ((\"date\" in memberValue) === false) &&\n                    ((\"other\" in memberValue) === false));\n            case KEY_ENCRYPTION_ALGORITHM$1:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case ENCRYPTED_KEY$1:\n                return (memberValue.isEqual(KEKRecipientInfo.defaultValues(ENCRYPTED_KEY$1)));\n            case PER_DEFINED_KEK:\n                return (memberValue.byteLength === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                KEKIdentifier.schema(names.kekid || {}),\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$q);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, KEKRecipientInfo.schema({\n            names: {\n                version: VERSION$a,\n                kekid: {\n                    names: {\n                        blockName: KEK_ID\n                    }\n                },\n                keyEncryptionAlgorithm: {\n                    names: {\n                        blockName: KEY_ENCRYPTION_ALGORITHM$1\n                    }\n                },\n                encryptedKey: ENCRYPTED_KEY$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.kekid = new KEKIdentifier({ schema: asn1.result.kekid });\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\n        this.encryptedKey = asn1.result.encryptedKey;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }),\n                this.kekid.toSchema(),\n                this.keyEncryptionAlgorithm.toSchema(),\n                this.encryptedKey\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            version: this.version,\n            kekid: this.kekid.toJSON(),\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n            encryptedKey: this.encryptedKey.toJSON(),\n        };\n    }\n}\nKEKRecipientInfo.CLASS_NAME = \"KEKRecipientInfo\";\n\nconst VERSION$9 = \"version\";\nconst KEY_DERIVATION_ALGORITHM = \"keyDerivationAlgorithm\";\nconst KEY_ENCRYPTION_ALGORITHM = \"keyEncryptionAlgorithm\";\nconst ENCRYPTED_KEY = \"encryptedKey\";\nconst PASSWORD = \"password\";\nconst CLEAR_PROPS$p = [\n    VERSION$9,\n    KEY_DERIVATION_ALGORITHM,\n    KEY_ENCRYPTION_ALGORITHM,\n    ENCRYPTED_KEY\n];\nclass PasswordRecipientinfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$9, PasswordRecipientinfo.defaultValues(VERSION$9));\n        if (KEY_DERIVATION_ALGORITHM in parameters) {\n            this.keyDerivationAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_DERIVATION_ALGORITHM, PasswordRecipientinfo.defaultValues(KEY_DERIVATION_ALGORITHM));\n        }\n        this.keyEncryptionAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM, PasswordRecipientinfo.defaultValues(KEY_ENCRYPTION_ALGORITHM));\n        this.encryptedKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTED_KEY, PasswordRecipientinfo.defaultValues(ENCRYPTED_KEY));\n        this.password = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PASSWORD, PasswordRecipientinfo.defaultValues(PASSWORD));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$9:\n                return (-1);\n            case KEY_DERIVATION_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case KEY_ENCRYPTION_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case ENCRYPTED_KEY:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case PASSWORD:\n                return EMPTY_BUFFER;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$9:\n                return (memberValue === (-1));\n            case KEY_DERIVATION_ALGORITHM:\n            case KEY_ENCRYPTION_ALGORITHM:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case ENCRYPTED_KEY:\n                return (memberValue.isEqual(PasswordRecipientinfo.defaultValues(ENCRYPTED_KEY)));\n            case PASSWORD:\n                return (memberValue.byteLength === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.keyDerivationAlgorithm || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: AlgorithmIdentifier.schema().valueBlock.value\n                }),\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$p);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PasswordRecipientinfo.schema({\n            names: {\n                version: VERSION$9,\n                keyDerivationAlgorithm: KEY_DERIVATION_ALGORITHM,\n                keyEncryptionAlgorithm: {\n                    names: {\n                        blockName: KEY_ENCRYPTION_ALGORITHM\n                    }\n                },\n                encryptedKey: ENCRYPTED_KEY\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        if (KEY_DERIVATION_ALGORITHM in asn1.result) {\n            this.keyDerivationAlgorithm = new AlgorithmIdentifier({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.keyDerivationAlgorithm.valueBlock.value\n                })\n            });\n        }\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\n        this.encryptedKey = asn1.result.encryptedKey;\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        if (this.keyDerivationAlgorithm) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.keyDerivationAlgorithm.toSchema().valueBlock.value\n            }));\n        }\n        outputArray.push(this.keyEncryptionAlgorithm.toSchema());\n        outputArray.push(this.encryptedKey);\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n            encryptedKey: this.encryptedKey.toJSON(),\n        };\n        if (this.keyDerivationAlgorithm) {\n            res.keyDerivationAlgorithm = this.keyDerivationAlgorithm.toJSON();\n        }\n        return res;\n    }\n}\nPasswordRecipientinfo.CLASS_NAME = \"PasswordRecipientInfo\";\n\nconst ORI_TYPE = \"oriType\";\nconst ORI_VALUE = \"oriValue\";\nconst CLEAR_PROPS$o = [\n    ORI_TYPE,\n    ORI_VALUE\n];\nclass OtherRecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.oriType = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ORI_TYPE, OtherRecipientInfo.defaultValues(ORI_TYPE));\n        this.oriValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ORI_VALUE, OtherRecipientInfo.defaultValues(ORI_VALUE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ORI_TYPE:\n                return EMPTY_STRING;\n            case ORI_VALUE:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ORI_TYPE:\n                return (memberValue === EMPTY_STRING);\n            case ORI_VALUE:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.oriType || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.oriValue || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$o);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OtherRecipientInfo.schema({\n            names: {\n                oriType: ORI_TYPE,\n                oriValue: ORI_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.oriType = asn1.result.oriType.valueBlock.toString();\n        this.oriValue = asn1.result.oriValue;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.oriType }),\n                this.oriValue\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            oriType: this.oriType\n        };\n        if (!OtherRecipientInfo.compareWithDefault(ORI_VALUE, this.oriValue)) {\n            res.oriValue = this.oriValue.toJSON();\n        }\n        return res;\n    }\n}\nOtherRecipientInfo.CLASS_NAME = \"OtherRecipientInfo\";\n\nconst VARIANT = \"variant\";\nconst VALUE = \"value\";\nconst CLEAR_PROPS$n = [\n    \"blockName\"\n];\nclass RecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.variant = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VARIANT, RecipientInfo.defaultValues(VARIANT));\n        if (VALUE in parameters) {\n            this.value = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUE, RecipientInfo.defaultValues(VALUE));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VARIANT:\n                return (-1);\n            case VALUE:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VARIANT:\n                return (memberValue === RecipientInfo.defaultValues(memberName));\n            case VALUE:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n            value: [\n                KeyTransRecipientInfo.schema({\n                    names: {\n                        blockName: (names.blockName || EMPTY_STRING)\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: KeyAgreeRecipientInfo.schema().valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: KEKRecipientInfo.schema().valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 3\n                    },\n                    value: PasswordRecipientinfo.schema().valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 4\n                    },\n                    value: OtherRecipientInfo.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$n);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RecipientInfo.schema({\n            names: {\n                blockName: \"blockName\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\n            this.variant = 1;\n            this.value = new KeyTransRecipientInfo({ schema: asn1.result.blockName });\n        }\n        else {\n            const blockSequence = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: asn1.result.blockName.valueBlock.value\n            });\n            switch (asn1.result.blockName.idBlock.tagNumber) {\n                case 1:\n                    this.variant = 2;\n                    this.value = new KeyAgreeRecipientInfo({ schema: blockSequence });\n                    break;\n                case 2:\n                    this.variant = 3;\n                    this.value = new KEKRecipientInfo({ schema: blockSequence });\n                    break;\n                case 3:\n                    this.variant = 4;\n                    this.value = new PasswordRecipientinfo({ schema: blockSequence });\n                    break;\n                case 4:\n                    this.variant = 5;\n                    this.value = new OtherRecipientInfo({ schema: blockSequence });\n                    break;\n                default:\n                    throw new Error(\"Incorrect structure of RecipientInfo block\");\n            }\n        }\n    }\n    toSchema() {\n        ParameterError.assertEmpty(this.value, \"value\", \"RecipientInfo\");\n        const _schema = this.value.toSchema();\n        switch (this.variant) {\n            case 1:\n                return _schema;\n            case 2:\n            case 3:\n            case 4:\n                _schema.idBlock.tagClass = 3;\n                _schema.idBlock.tagNumber = (this.variant - 1);\n                return _schema;\n            default:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n        }\n    }\n    toJSON() {\n        const res = {\n            variant: this.variant\n        };\n        if (this.value && (this.variant >= 1) && (this.variant <= 4)) {\n            res.value = this.value.toJSON();\n        }\n        return res;\n    }\n}\nRecipientInfo.CLASS_NAME = \"RecipientInfo\";\n\nconst HASH_ALGORITHM$2 = \"hashAlgorithm\";\nconst MASK_GEN_ALGORITHM = \"maskGenAlgorithm\";\nconst P_SOURCE_ALGORITHM = \"pSourceAlgorithm\";\nconst CLEAR_PROPS$m = [\n    HASH_ALGORITHM$2,\n    MASK_GEN_ALGORITHM,\n    P_SOURCE_ALGORITHM\n];\nclass RSAESOAEPParams extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.hashAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, HASH_ALGORITHM$2, RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2));\n        this.maskGenAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MASK_GEN_ALGORITHM, RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM));\n        this.pSourceAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, P_SOURCE_ALGORITHM, RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case HASH_ALGORITHM$2:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.3.14.3.2.26\",\n                    algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                });\n            case MASK_GEN_ALGORITHM:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.2.840.113549.1.1.8\",\n                    algorithmParams: (new AlgorithmIdentifier({\n                        algorithmId: \"1.3.14.3.2.26\",\n                        algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                    })).toSchema()\n                });\n            case P_SOURCE_ALGORITHM:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.2.840.113549.1.1.9\",\n                    algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: (new Uint8Array([0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55, 0xbf, 0xef, 0x95, 0x60, 0x18, 0x90, 0xaf, 0xd8, 0x07, 0x09])).buffer })\n                });\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.hashAlgorithm || {})]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.pSourceAlgorithm || {})]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$m);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RSAESOAEPParams.schema({\n            names: {\n                hashAlgorithm: {\n                    names: {\n                        blockName: HASH_ALGORITHM$2\n                    }\n                },\n                maskGenAlgorithm: {\n                    names: {\n                        blockName: MASK_GEN_ALGORITHM\n                    }\n                },\n                pSourceAlgorithm: {\n                    names: {\n                        blockName: P_SOURCE_ALGORITHM\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (HASH_ALGORITHM$2 in asn1.result)\n            this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\n        if (MASK_GEN_ALGORITHM in asn1.result)\n            this.maskGenAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.maskGenAlgorithm });\n        if (P_SOURCE_ALGORITHM in asn1.result)\n            this.pSourceAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.pSourceAlgorithm });\n    }\n    toSchema() {\n        const outputArray = [];\n        if (!this.hashAlgorithm.isEqual(RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2))) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.hashAlgorithm.toSchema()]\n            }));\n        }\n        if (!this.maskGenAlgorithm.isEqual(RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM))) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [this.maskGenAlgorithm.toSchema()]\n            }));\n        }\n        if (!this.pSourceAlgorithm.isEqual(RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM))) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                value: [this.pSourceAlgorithm.toSchema()]\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (!this.hashAlgorithm.isEqual(RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2))) {\n            res.hashAlgorithm = this.hashAlgorithm.toJSON();\n        }\n        if (!this.maskGenAlgorithm.isEqual(RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM))) {\n            res.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();\n        }\n        if (!this.pSourceAlgorithm.isEqual(RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM))) {\n            res.pSourceAlgorithm = this.pSourceAlgorithm.toJSON();\n        }\n        return res;\n    }\n}\nRSAESOAEPParams.CLASS_NAME = \"RSAESOAEPParams\";\n\nconst KEY_INFO = \"keyInfo\";\nconst ENTITY_U_INFO = \"entityUInfo\";\nconst SUPP_PUB_INFO = \"suppPubInfo\";\nconst CLEAR_PROPS$l = [\n    KEY_INFO,\n    ENTITY_U_INFO,\n    SUPP_PUB_INFO\n];\nclass ECCCMSSharedInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_INFO, ECCCMSSharedInfo.defaultValues(KEY_INFO));\n        if (ENTITY_U_INFO in parameters) {\n            this.entityUInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENTITY_U_INFO, ECCCMSSharedInfo.defaultValues(ENTITY_U_INFO));\n        }\n        this.suppPubInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SUPP_PUB_INFO, ECCCMSSharedInfo.defaultValues(SUPP_PUB_INFO));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_INFO:\n                return new AlgorithmIdentifier();\n            case ENTITY_U_INFO:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case SUPP_PUB_INFO:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case KEY_INFO:\n            case ENTITY_U_INFO:\n            case SUPP_PUB_INFO:\n                return (memberValue.isEqual(ECCCMSSharedInfo.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.keyInfo || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.entityUInfo || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    optional: true,\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString()]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.suppPubInfo || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString()]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$l);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, ECCCMSSharedInfo.schema({\n            names: {\n                keyInfo: {\n                    names: {\n                        blockName: KEY_INFO\n                    }\n                },\n                entityUInfo: ENTITY_U_INFO,\n                suppPubInfo: SUPP_PUB_INFO\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyInfo = new AlgorithmIdentifier({ schema: asn1.result.keyInfo });\n        if (ENTITY_U_INFO in asn1.result)\n            this.entityUInfo = asn1.result.entityUInfo.valueBlock.value[0];\n        this.suppPubInfo = asn1.result.suppPubInfo.valueBlock.value[0];\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.keyInfo.toSchema());\n        if (this.entityUInfo) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.entityUInfo]\n            }));\n        }\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n            idBlock: {\n                tagClass: 3,\n                tagNumber: 2\n            },\n            value: [this.suppPubInfo]\n        }));\n        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        });\n    }\n    toJSON() {\n        const res = {\n            keyInfo: this.keyInfo.toJSON(),\n            suppPubInfo: this.suppPubInfo.toJSON(),\n        };\n        if (this.entityUInfo) {\n            res.entityUInfo = this.entityUInfo.toJSON();\n        }\n        return res;\n    }\n}\nECCCMSSharedInfo.CLASS_NAME = \"ECCCMSSharedInfo\";\n\nconst VERSION$8 = \"version\";\nconst ORIGINATOR_INFO = \"originatorInfo\";\nconst RECIPIENT_INFOS = \"recipientInfos\";\nconst ENCRYPTED_CONTENT_INFO = \"encryptedContentInfo\";\nconst UNPROTECTED_ATTRS = \"unprotectedAttrs\";\nconst CLEAR_PROPS$k = [\n    VERSION$8,\n    ORIGINATOR_INFO,\n    RECIPIENT_INFOS,\n    ENCRYPTED_CONTENT_INFO,\n    UNPROTECTED_ATTRS\n];\nconst defaultEncryptionParams = {\n    kdfAlgorithm: \"SHA-512\",\n    kekEncryptionLength: 256\n};\nconst curveLengthByName = {\n    \"P-256\": 256,\n    \"P-384\": 384,\n    \"P-521\": 528\n};\nclass EnvelopedData extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$8, EnvelopedData.defaultValues(VERSION$8));\n        if (ORIGINATOR_INFO in parameters) {\n            this.originatorInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ORIGINATOR_INFO, EnvelopedData.defaultValues(ORIGINATOR_INFO));\n        }\n        this.recipientInfos = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RECIPIENT_INFOS, EnvelopedData.defaultValues(RECIPIENT_INFOS));\n        this.encryptedContentInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTED_CONTENT_INFO, EnvelopedData.defaultValues(ENCRYPTED_CONTENT_INFO));\n        if (UNPROTECTED_ATTRS in parameters) {\n            this.unprotectedAttrs = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, UNPROTECTED_ATTRS, EnvelopedData.defaultValues(UNPROTECTED_ATTRS));\n        }\n        this.policy = {\n            disableSplit: !!parameters.disableSplit,\n        };\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$8:\n                return 0;\n            case ORIGINATOR_INFO:\n                return new OriginatorInfo();\n            case RECIPIENT_INFOS:\n                return [];\n            case ENCRYPTED_CONTENT_INFO:\n                return new EncryptedContentInfo();\n            case UNPROTECTED_ATTRS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$8:\n                return (memberValue === EnvelopedData.defaultValues(memberName));\n            case ORIGINATOR_INFO:\n                return ((memberValue.certs.certificates.length === 0) && (memberValue.crls.crls.length === 0));\n            case RECIPIENT_INFOS:\n            case UNPROTECTED_ATTRS:\n                return (memberValue.length === 0);\n            case ENCRYPTED_CONTENT_INFO:\n                return ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\n                    (EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm) &&\n                        (EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent))));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.originatorInfo || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: OriginatorInfo.schema().valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.recipientInfos || EMPTY_STRING),\n                            value: RecipientInfo.schema()\n                        })\n                    ]\n                }),\n                EncryptedContentInfo.schema(names.encryptedContentInfo || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.unprotectedAttrs || EMPTY_STRING),\n                            value: Attribute.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$k);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, EnvelopedData.schema({\n            names: {\n                version: VERSION$8,\n                originatorInfo: ORIGINATOR_INFO,\n                recipientInfos: RECIPIENT_INFOS,\n                encryptedContentInfo: {\n                    names: {\n                        blockName: ENCRYPTED_CONTENT_INFO\n                    }\n                },\n                unprotectedAttrs: UNPROTECTED_ATTRS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        if (ORIGINATOR_INFO in asn1.result) {\n            this.originatorInfo = new OriginatorInfo({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.originatorInfo.valueBlock.value\n                })\n            });\n        }\n        this.recipientInfos = Array.from(asn1.result.recipientInfos, o => new RecipientInfo({ schema: o }));\n        this.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\n        if (UNPROTECTED_ATTRS in asn1.result)\n            this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, o => new Attribute({ schema: o }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        if (this.originatorInfo) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.originatorInfo.toSchema().valueBlock.value\n            }));\n        }\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n            value: Array.from(this.recipientInfos, o => o.toSchema())\n        }));\n        outputArray.push(this.encryptedContentInfo.toSchema());\n        if (this.unprotectedAttrs) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.unprotectedAttrs, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            recipientInfos: Array.from(this.recipientInfos, o => o.toJSON()),\n            encryptedContentInfo: this.encryptedContentInfo.toJSON(),\n        };\n        if (this.originatorInfo)\n            res.originatorInfo = this.originatorInfo.toJSON();\n        if (this.unprotectedAttrs)\n            res.unprotectedAttrs = Array.from(this.unprotectedAttrs, o => o.toJSON());\n        return res;\n    }\n    addRecipientByCertificate(certificate, parameters, variant, crypto = getCrypto(true)) {\n        const encryptionParameters = Object.assign({ useOAEP: true, oaepHashAlgorithm: \"SHA-512\" }, defaultEncryptionParams, parameters || {});\n        if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.113549\") !== (-1))\n            variant = 1;\n        else {\n            if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.10045\") !== (-1))\n                variant = 2;\n            else\n                throw new Error(`Unknown type of certificate's public key: ${certificate.subjectPublicKeyInfo.algorithm.algorithmId}`);\n        }\n        switch (variant) {\n            case 1:\n                {\n                    let algorithmId;\n                    let algorithmParams;\n                    if (encryptionParameters.useOAEP === true) {\n                        algorithmId = crypto.getOIDByAlgorithm({\n                            name: \"RSA-OAEP\"\n                        }, true, \"keyEncryptionAlgorithm\");\n                        const hashOID = crypto.getOIDByAlgorithm({\n                            name: encryptionParameters.oaepHashAlgorithm\n                        }, true, \"RSAES-OAEP-params\");\n                        const hashAlgorithm = new AlgorithmIdentifier({\n                            algorithmId: hashOID,\n                            algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                        });\n                        const rsaOAEPParams = new RSAESOAEPParams({\n                            hashAlgorithm,\n                            maskGenAlgorithm: new AlgorithmIdentifier({\n                                algorithmId: \"1.2.840.113549.1.1.8\",\n                                algorithmParams: hashAlgorithm.toSchema()\n                            })\n                        });\n                        algorithmParams = rsaOAEPParams.toSchema();\n                    }\n                    else {\n                        algorithmId = crypto.getOIDByAlgorithm({\n                            name: \"RSAES-PKCS1-v1_5\"\n                        });\n                        if (algorithmId === EMPTY_STRING)\n                            throw new Error(\"Can not find OID for RSAES-PKCS1-v1_5\");\n                        algorithmParams = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null();\n                    }\n                    const keyInfo = new KeyTransRecipientInfo({\n                        version: 0,\n                        rid: new IssuerAndSerialNumber({\n                            issuer: certificate.issuer,\n                            serialNumber: certificate.serialNumber\n                        }),\n                        keyEncryptionAlgorithm: new AlgorithmIdentifier({\n                            algorithmId,\n                            algorithmParams\n                        }),\n                        recipientCertificate: certificate,\n                    });\n                    this.recipientInfos.push(new RecipientInfo({\n                        variant: 1,\n                        value: keyInfo\n                    }));\n                }\n                break;\n            case 2:\n                {\n                    const recipientIdentifier = new KeyAgreeRecipientIdentifier({\n                        variant: 1,\n                        value: new IssuerAndSerialNumber({\n                            issuer: certificate.issuer,\n                            serialNumber: certificate.serialNumber\n                        })\n                    });\n                    this._addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, { recipientCertificate: certificate }, crypto);\n                }\n                break;\n            default:\n                throw new Error(`Unknown \"variant\" value: ${variant}`);\n        }\n        return true;\n    }\n    addRecipientByPreDefinedData(preDefinedData, parameters = {}, variant, crypto = getCrypto(true)) {\n        ArgumentError.assert(preDefinedData, \"preDefinedData\", \"ArrayBuffer\");\n        if (!preDefinedData.byteLength) {\n            throw new Error(\"Pre-defined data could have zero length\");\n        }\n        if (!parameters.keyIdentifier) {\n            const keyIdentifierBuffer = new ArrayBuffer(16);\n            const keyIdentifierView = new Uint8Array(keyIdentifierBuffer);\n            crypto.getRandomValues(keyIdentifierView);\n            parameters.keyIdentifier = keyIdentifierBuffer;\n        }\n        if (!parameters.hmacHashAlgorithm)\n            parameters.hmacHashAlgorithm = \"SHA-512\";\n        if (parameters.iterationCount === undefined) {\n            parameters.iterationCount = 2048;\n        }\n        if (!parameters.keyEncryptionAlgorithm) {\n            parameters.keyEncryptionAlgorithm = {\n                name: \"AES-KW\",\n                length: 256\n            };\n        }\n        if (!parameters.keyEncryptionAlgorithmParams)\n            parameters.keyEncryptionAlgorithmParams = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null();\n        switch (variant) {\n            case 1:\n                {\n                    const kekOID = crypto.getOIDByAlgorithm(parameters.keyEncryptionAlgorithm, true, \"keyEncryptionAlgorithm\");\n                    const keyInfo = new KEKRecipientInfo({\n                        version: 4,\n                        kekid: new KEKIdentifier({\n                            keyIdentifier: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: parameters.keyIdentifier })\n                        }),\n                        keyEncryptionAlgorithm: new AlgorithmIdentifier({\n                            algorithmId: kekOID,\n                            algorithmParams: parameters.keyEncryptionAlgorithmParams\n                        }),\n                        preDefinedKEK: preDefinedData\n                    });\n                    this.recipientInfos.push(new RecipientInfo({\n                        variant: 3,\n                        value: keyInfo\n                    }));\n                }\n                break;\n            case 2:\n                {\n                    const pbkdf2OID = crypto.getOIDByAlgorithm({ name: \"PBKDF2\" }, true, \"keyDerivationAlgorithm\");\n                    const saltBuffer = new ArrayBuffer(64);\n                    const saltView = new Uint8Array(saltBuffer);\n                    crypto.getRandomValues(saltView);\n                    const hmacOID = crypto.getOIDByAlgorithm({\n                        name: \"HMAC\",\n                        hash: {\n                            name: parameters.hmacHashAlgorithm\n                        }\n                    }, true, \"hmacHashAlgorithm\");\n                    const pbkdf2Params = new PBKDF2Params({\n                        salt: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: saltBuffer }),\n                        iterationCount: parameters.iterationCount,\n                        prf: new AlgorithmIdentifier({\n                            algorithmId: hmacOID,\n                            algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                        })\n                    });\n                    const kekOID = crypto.getOIDByAlgorithm(parameters.keyEncryptionAlgorithm, true, \"keyEncryptionAlgorithm\");\n                    const keyInfo = new PasswordRecipientinfo({\n                        version: 0,\n                        keyDerivationAlgorithm: new AlgorithmIdentifier({\n                            algorithmId: pbkdf2OID,\n                            algorithmParams: pbkdf2Params.toSchema()\n                        }),\n                        keyEncryptionAlgorithm: new AlgorithmIdentifier({\n                            algorithmId: kekOID,\n                            algorithmParams: parameters.keyEncryptionAlgorithmParams\n                        }),\n                        password: preDefinedData\n                    });\n                    this.recipientInfos.push(new RecipientInfo({\n                        variant: 4,\n                        value: keyInfo\n                    }));\n                }\n                break;\n            default:\n                throw new Error(`Unknown value for \"variant\": ${variant}`);\n        }\n    }\n    addRecipientByKeyIdentifier(key, keyId, parameters, crypto = getCrypto(true)) {\n        const encryptionParameters = Object.assign({}, defaultEncryptionParams, parameters || {});\n        const recipientIdentifier = new KeyAgreeRecipientIdentifier({\n            variant: 2,\n            value: new RecipientKeyIdentifier({\n                subjectKeyIdentifier: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: keyId }),\n            })\n        });\n        this._addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, { recipientPublicKey: key }, crypto);\n    }\n    _addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, extraRecipientInfoParams, crypto = getCrypto(true)) {\n        const encryptedKey = new RecipientEncryptedKey({\n            rid: recipientIdentifier\n        });\n        const aesKWoid = crypto.getOIDByAlgorithm({\n            name: \"AES-KW\",\n            length: encryptionParameters.kekEncryptionLength\n        }, true, \"keyEncryptionAlgorithm\");\n        const aesKW = new AlgorithmIdentifier({\n            algorithmId: aesKWoid,\n        });\n        const ecdhOID = crypto.getOIDByAlgorithm({\n            name: \"ECDH\",\n            kdf: encryptionParameters.kdfAlgorithm\n        }, true, \"KeyAgreeRecipientInfo\");\n        const ukmBuffer = new ArrayBuffer(64);\n        const ukmView = new Uint8Array(ukmBuffer);\n        crypto.getRandomValues(ukmView);\n        const recipientInfoParams = {\n            version: 3,\n            ukm: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: ukmBuffer }),\n            keyEncryptionAlgorithm: new AlgorithmIdentifier({\n                algorithmId: ecdhOID,\n                algorithmParams: aesKW.toSchema()\n            }),\n            recipientEncryptedKeys: new RecipientEncryptedKeys({\n                encryptedKeys: [encryptedKey]\n            })\n        };\n        const keyInfo = new KeyAgreeRecipientInfo(Object.assign(recipientInfoParams, extraRecipientInfoParams));\n        this.recipientInfos.push(new RecipientInfo({\n            variant: 2,\n            value: keyInfo\n        }));\n    }\n    async encrypt(contentEncryptionAlgorithm, contentToEncrypt, crypto = getCrypto(true)) {\n        const ivBuffer = new ArrayBuffer(16);\n        const ivView = new Uint8Array(ivBuffer);\n        crypto.getRandomValues(ivView);\n        const contentView = new Uint8Array(contentToEncrypt);\n        const contentEncryptionOID = crypto.getOIDByAlgorithm(contentEncryptionAlgorithm, true, \"contentEncryptionAlgorithm\");\n        const sessionKey = await crypto.generateKey(contentEncryptionAlgorithm, true, [\"encrypt\"]);\n        const encryptedContent = await crypto.encrypt({\n            name: contentEncryptionAlgorithm.name,\n            iv: ivView\n        }, sessionKey, contentView);\n        const exportedSessionKey = await crypto.exportKey(\"raw\", sessionKey);\n        this.version = 2;\n        this.encryptedContentInfo = new EncryptedContentInfo({\n            disableSplit: this.policy.disableSplit,\n            contentType: \"1.2.840.113549.1.7.1\",\n            contentEncryptionAlgorithm: new AlgorithmIdentifier({\n                algorithmId: contentEncryptionOID,\n                algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: ivBuffer })\n            }),\n            encryptedContent: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: encryptedContent })\n        });\n        const SubKeyAgreeRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            let recipientCurve;\n            let recipientPublicKey;\n            if (recipientInfo.recipientPublicKey) {\n                recipientCurve = recipientInfo.recipientPublicKey.algorithm.namedCurve;\n                recipientPublicKey = recipientInfo.recipientPublicKey;\n            }\n            else if (recipientInfo.recipientCertificate) {\n                const curveObject = recipientInfo.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\n                if (curveObject.constructor.blockName() !== asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier.blockName())\n                    throw new Error(`Incorrect \"recipientCertificate\" for index ${index}`);\n                const curveOID = curveObject.valueBlock.toString();\n                switch (curveOID) {\n                    case \"1.2.840.10045.3.1.7\":\n                        recipientCurve = \"P-256\";\n                        break;\n                    case \"1.3.132.0.34\":\n                        recipientCurve = \"P-384\";\n                        break;\n                    case \"1.3.132.0.35\":\n                        recipientCurve = \"P-521\";\n                        break;\n                    default:\n                        throw new Error(`Incorrect curve OID for index ${index}`);\n                }\n                recipientPublicKey = await recipientInfo.recipientCertificate.getPublicKey({\n                    algorithm: {\n                        algorithm: {\n                            name: \"ECDH\",\n                            namedCurve: recipientCurve\n                        },\n                        usages: []\n                    }\n                }, crypto);\n            }\n            else {\n                throw new Error(\"Unsupported RecipientInfo\");\n            }\n            const recipientCurveLength = curveLengthByName[recipientCurve];\n            const ecdhKeys = await crypto.generateKey({ name: \"ECDH\", namedCurve: recipientCurve }, true, [\"deriveBits\"]);\n            const exportedECDHPublicKey = await crypto.exportKey(\"spki\", ecdhKeys.publicKey);\n            const derivedBits = await crypto.deriveBits({\n                name: \"ECDH\",\n                public: recipientPublicKey\n            }, ecdhKeys.privateKey, recipientCurveLength);\n            const aesKWAlgorithm = new AlgorithmIdentifier({ schema: recipientInfo.keyEncryptionAlgorithm.algorithmParams });\n            const kwAlgorithm = crypto.getAlgorithmByOID(aesKWAlgorithm.algorithmId, true, \"aesKWAlgorithm\");\n            let kwLength = kwAlgorithm.length;\n            const kwLengthBuffer = new ArrayBuffer(4);\n            const kwLengthView = new Uint8Array(kwLengthBuffer);\n            for (let j = 3; j >= 0; j--) {\n                kwLengthView[j] = kwLength;\n                kwLength >>= 8;\n            }\n            const eccInfo = new ECCCMSSharedInfo({\n                keyInfo: new AlgorithmIdentifier({\n                    algorithmId: aesKWAlgorithm.algorithmId\n                }),\n                entityUInfo: recipientInfo.ukm,\n                suppPubInfo: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: kwLengthBuffer })\n            });\n            const encodedInfo = eccInfo.toSchema().toBER(false);\n            const ecdhAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"ecdhAlgorithm\");\n            const derivedKeyRaw = await kdf(ecdhAlgorithm.kdf, derivedBits, kwAlgorithm.length, encodedInfo, crypto);\n            const awsKW = await crypto.importKey(\"raw\", derivedKeyRaw, { name: \"AES-KW\" }, true, [\"wrapKey\"]);\n            const wrappedKey = await crypto.wrapKey(\"raw\", sessionKey, awsKW, { name: \"AES-KW\" });\n            const originator = new OriginatorIdentifierOrKey();\n            originator.variant = 3;\n            originator.value = OriginatorPublicKey.fromBER(exportedECDHPublicKey);\n            recipientInfo.originator = originator;\n            recipientInfo.recipientEncryptedKeys.encryptedKeys[0].encryptedKey = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: wrappedKey });\n            return { ecdhPrivateKey: ecdhKeys.privateKey };\n        };\n        const SubKeyTransRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            const algorithmParameters = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"keyEncryptionAlgorithm\");\n            if (algorithmParameters.name === \"RSA-OAEP\") {\n                const schema = recipientInfo.keyEncryptionAlgorithm.algorithmParams;\n                const rsaOAEPParams = new RSAESOAEPParams({ schema });\n                algorithmParameters.hash = crypto.getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\n                if ((\"name\" in algorithmParameters.hash) === false)\n                    throw new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\n            }\n            try {\n                const publicKey = await recipientInfo.recipientCertificate.getPublicKey({\n                    algorithm: {\n                        algorithm: algorithmParameters,\n                        usages: [\"encrypt\", \"wrapKey\"]\n                    }\n                }, crypto);\n                const encryptedKey = await crypto.encrypt(publicKey.algorithm, publicKey, exportedSessionKey);\n                recipientInfo.encryptedKey = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: encryptedKey });\n            }\n            catch {\n            }\n        };\n        const SubKEKRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"kekAlgorithm\");\n            const kekKey = await crypto.importKey(\"raw\", new Uint8Array(recipientInfo.preDefinedKEK), kekAlgorithm, true, [\"wrapKey\"]);\n            const wrappedKey = await crypto.wrapKey(\"raw\", sessionKey, kekKey, kekAlgorithm);\n            recipientInfo.encryptedKey = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: wrappedKey });\n        };\n        const SubPasswordRecipientinfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            let pbkdf2Params;\n            if (!recipientInfo.keyDerivationAlgorithm)\n                throw new Error(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\n            if (!recipientInfo.keyDerivationAlgorithm.algorithmParams)\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n            try {\n                pbkdf2Params = new PBKDF2Params({ schema: recipientInfo.keyDerivationAlgorithm.algorithmParams });\n            }\n            catch (ex) {\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n            }\n            const passwordView = new Uint8Array(recipientInfo.password);\n            const derivationKey = await crypto.importKey(\"raw\", passwordView, \"PBKDF2\", false, [\"deriveKey\"]);\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"kekAlgorithm\");\n            let hmacHashAlgorithm = \"SHA-1\";\n            if (pbkdf2Params.prf) {\n                const prfAlgorithm = crypto.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true, \"prfAlgorithm\");\n                hmacHashAlgorithm = prfAlgorithm.hash.name;\n            }\n            const saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\n            const iterations = pbkdf2Params.iterationCount;\n            const derivedKey = await crypto.deriveKey({\n                name: \"PBKDF2\",\n                hash: {\n                    name: hmacHashAlgorithm\n                },\n                salt: saltView,\n                iterations\n            }, derivationKey, kekAlgorithm, true, [\"wrapKey\"]);\n            const wrappedKey = await crypto.wrapKey(\"raw\", sessionKey, derivedKey, kekAlgorithm);\n            recipientInfo.encryptedKey = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: wrappedKey });\n        };\n        const res = [];\n        for (let i = 0; i < this.recipientInfos.length; i++) {\n            switch (this.recipientInfos[i].variant) {\n                case 1:\n                    res.push(await SubKeyTransRecipientInfo(i));\n                    break;\n                case 2:\n                    res.push(await SubKeyAgreeRecipientInfo(i));\n                    break;\n                case 3:\n                    res.push(await SubKEKRecipientInfo(i));\n                    break;\n                case 4:\n                    res.push(await SubPasswordRecipientinfo(i));\n                    break;\n                default:\n                    throw new Error(`Unknown recipient type in array with index ${i}`);\n            }\n        }\n        return res;\n    }\n    async decrypt(recipientIndex, parameters, crypto = getCrypto(true)) {\n        const decryptionParameters = parameters || {};\n        if ((recipientIndex + 1) > this.recipientInfos.length) {\n            throw new Error(`Maximum value for \"index\" is: ${this.recipientInfos.length - 1}`);\n        }\n        const SubKeyAgreeRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            let curveOID;\n            let recipientCurve;\n            let recipientCurveLength;\n            const originator = recipientInfo.originator;\n            if (decryptionParameters.recipientCertificate) {\n                const curveObject = decryptionParameters.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\n                if (curveObject.constructor.blockName() !== asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier.blockName()) {\n                    throw new Error(`Incorrect \"recipientCertificate\" for index ${index}`);\n                }\n                curveOID = curveObject.valueBlock.toString();\n            }\n            else if (originator.value.algorithm.algorithmParams) {\n                const curveObject = originator.value.algorithm.algorithmParams;\n                if (curveObject.constructor.blockName() !== asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier.blockName()) {\n                    throw new Error(`Incorrect originator for index ${index}`);\n                }\n                curveOID = curveObject.valueBlock.toString();\n            }\n            else {\n                throw new Error(\"Parameter \\\"recipientCertificate\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\" if algorithm params are missing from originator\");\n            }\n            if (!decryptionParameters.recipientPrivateKey)\n                throw new Error(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\n            switch (curveOID) {\n                case \"1.2.840.10045.3.1.7\":\n                    recipientCurve = \"P-256\";\n                    recipientCurveLength = 256;\n                    break;\n                case \"1.3.132.0.34\":\n                    recipientCurve = \"P-384\";\n                    recipientCurveLength = 384;\n                    break;\n                case \"1.3.132.0.35\":\n                    recipientCurve = \"P-521\";\n                    recipientCurveLength = 528;\n                    break;\n                default:\n                    throw new Error(`Incorrect curve OID for index ${index}`);\n            }\n            let ecdhPrivateKey;\n            let keyCrypto = crypto;\n            if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isBufferSource(decryptionParameters.recipientPrivateKey)) {\n                ecdhPrivateKey = await crypto.importKey(\"pkcs8\", decryptionParameters.recipientPrivateKey, {\n                    name: \"ECDH\",\n                    namedCurve: recipientCurve\n                }, true, [\"deriveBits\"]);\n            }\n            else {\n                ecdhPrivateKey = decryptionParameters.recipientPrivateKey;\n                if (\"crypto\" in decryptionParameters && decryptionParameters.crypto) {\n                    keyCrypto = decryptionParameters.crypto.subtle;\n                }\n            }\n            if ((\"algorithmParams\" in originator.value.algorithm) === false)\n                originator.value.algorithm.algorithmParams = new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: curveOID });\n            const buffer = originator.value.toSchema().toBER(false);\n            const ecdhPublicKey = await crypto.importKey(\"spki\", buffer, {\n                name: \"ECDH\",\n                namedCurve: recipientCurve\n            }, true, []);\n            const sharedSecret = await keyCrypto.deriveBits({\n                name: \"ECDH\",\n                public: ecdhPublicKey\n            }, ecdhPrivateKey, recipientCurveLength);\n            async function applyKDF(includeAlgorithmParams) {\n                includeAlgorithmParams = includeAlgorithmParams || false;\n                const aesKWAlgorithm = new AlgorithmIdentifier({ schema: recipientInfo.keyEncryptionAlgorithm.algorithmParams });\n                const kwAlgorithm = crypto.getAlgorithmByOID(aesKWAlgorithm.algorithmId, true, \"kwAlgorithm\");\n                let kwLength = kwAlgorithm.length;\n                const kwLengthBuffer = new ArrayBuffer(4);\n                const kwLengthView = new Uint8Array(kwLengthBuffer);\n                for (let j = 3; j >= 0; j--) {\n                    kwLengthView[j] = kwLength;\n                    kwLength >>= 8;\n                }\n                const keyInfoAlgorithm = {\n                    algorithmId: aesKWAlgorithm.algorithmId\n                };\n                if (includeAlgorithmParams) {\n                    keyInfoAlgorithm.algorithmParams = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null();\n                }\n                const eccInfo = new ECCCMSSharedInfo({\n                    keyInfo: new AlgorithmIdentifier(keyInfoAlgorithm),\n                    entityUInfo: recipientInfo.ukm,\n                    suppPubInfo: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: kwLengthBuffer })\n                });\n                const encodedInfo = eccInfo.toSchema().toBER(false);\n                const ecdhAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"ecdhAlgorithm\");\n                if (!ecdhAlgorithm.name) {\n                    throw new Error(`Incorrect OID for key encryption algorithm: ${recipientInfo.keyEncryptionAlgorithm.algorithmId}`);\n                }\n                return kdf(ecdhAlgorithm.kdf, sharedSecret, kwAlgorithm.length, encodedInfo, crypto);\n            }\n            const kdfResult = await applyKDF();\n            const importAesKwKey = async (kdfResult) => {\n                return crypto.importKey(\"raw\", kdfResult, { name: \"AES-KW\" }, true, [\"unwrapKey\"]);\n            };\n            const aesKwKey = await importAesKwKey(kdfResult);\n            const unwrapSessionKey = async (aesKwKey) => {\n                const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n                const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n                return crypto.unwrapKey(\"raw\", recipientInfo.recipientEncryptedKeys.encryptedKeys[0].encryptedKey.valueBlock.valueHexView, aesKwKey, { name: \"AES-KW\" }, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n            };\n            try {\n                return await unwrapSessionKey(aesKwKey);\n            }\n            catch {\n                const kdfResult = await applyKDF(true);\n                const aesKwKey = await importAesKwKey(kdfResult);\n                return unwrapSessionKey(aesKwKey);\n            }\n        };\n        const SubKeyTransRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            if (!decryptionParameters.recipientPrivateKey) {\n                throw new Error(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyTransRecipientInfo\\\"\");\n            }\n            const algorithmParameters = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"keyEncryptionAlgorithm\");\n            if (algorithmParameters.name === \"RSA-OAEP\") {\n                const schema = recipientInfo.keyEncryptionAlgorithm.algorithmParams;\n                const rsaOAEPParams = new RSAESOAEPParams({ schema });\n                algorithmParameters.hash = crypto.getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\n                if ((\"name\" in algorithmParameters.hash) === false)\n                    throw new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\n            }\n            let privateKey;\n            let keyCrypto = crypto;\n            if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isBufferSource(decryptionParameters.recipientPrivateKey)) {\n                privateKey = await crypto.importKey(\"pkcs8\", decryptionParameters.recipientPrivateKey, algorithmParameters, true, [\"decrypt\"]);\n            }\n            else {\n                privateKey = decryptionParameters.recipientPrivateKey;\n                if (\"crypto\" in decryptionParameters && decryptionParameters.crypto) {\n                    keyCrypto = decryptionParameters.crypto.subtle;\n                }\n            }\n            const sessionKey = await keyCrypto.decrypt(privateKey.algorithm, privateKey, recipientInfo.encryptedKey.valueBlock.valueHexView);\n            const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n            const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n            if ((\"name\" in contentEncryptionAlgorithm) === false)\n                throw new Error(`Incorrect \"contentEncryptionAlgorithm\": ${algorithmId}`);\n            return crypto.importKey(\"raw\", sessionKey, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n        };\n        const SubKEKRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            if (!decryptionParameters.preDefinedData)\n                throw new Error(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"kekAlgorithm\");\n            const importedKey = await crypto.importKey(\"raw\", decryptionParameters.preDefinedData, kekAlgorithm, true, [\"unwrapKey\"]);\n            const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n            const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n            if (!contentEncryptionAlgorithm.name) {\n                throw new Error(`Incorrect \"contentEncryptionAlgorithm\": ${algorithmId}`);\n            }\n            return crypto.unwrapKey(\"raw\", recipientInfo.encryptedKey.valueBlock.valueHexView, importedKey, kekAlgorithm, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n        };\n        const SubPasswordRecipientinfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            let pbkdf2Params;\n            if (!decryptionParameters.preDefinedData) {\n                throw new Error(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\n            }\n            if (!recipientInfo.keyDerivationAlgorithm) {\n                throw new Error(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\n            }\n            if (!recipientInfo.keyDerivationAlgorithm.algorithmParams) {\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n            }\n            try {\n                pbkdf2Params = new PBKDF2Params({ schema: recipientInfo.keyDerivationAlgorithm.algorithmParams });\n            }\n            catch (ex) {\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n            }\n            const pbkdf2Key = await crypto.importKey(\"raw\", decryptionParameters.preDefinedData, \"PBKDF2\", false, [\"deriveKey\"]);\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"keyEncryptionAlgorithm\");\n            const hmacHashAlgorithm = pbkdf2Params.prf\n                ? crypto.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true, \"prfAlgorithm\").hash.name\n                : \"SHA-1\";\n            const saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\n            const iterations = pbkdf2Params.iterationCount;\n            const kekKey = await crypto.deriveKey({\n                name: \"PBKDF2\",\n                hash: {\n                    name: hmacHashAlgorithm\n                },\n                salt: saltView,\n                iterations\n            }, pbkdf2Key, kekAlgorithm, true, [\"unwrapKey\"]);\n            const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n            const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n            return crypto.unwrapKey(\"raw\", recipientInfo.encryptedKey.valueBlock.valueHexView, kekKey, kekAlgorithm, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n        };\n        let unwrappedKey;\n        switch (this.recipientInfos[recipientIndex].variant) {\n            case 1:\n                unwrappedKey = await SubKeyTransRecipientInfo(recipientIndex);\n                break;\n            case 2:\n                unwrappedKey = await SubKeyAgreeRecipientInfo(recipientIndex);\n                break;\n            case 3:\n                unwrappedKey = await SubKEKRecipientInfo(recipientIndex);\n                break;\n            case 4:\n                unwrappedKey = await SubPasswordRecipientinfo(recipientIndex);\n                break;\n            default:\n                throw new Error(`Unknown recipient type in array with index ${recipientIndex}`);\n        }\n        const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n        const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n        const ivBuffer = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams.valueBlock.valueHex;\n        const ivView = new Uint8Array(ivBuffer);\n        if (!this.encryptedContentInfo.encryptedContent) {\n            throw new Error(\"Required property `encryptedContent` is empty\");\n        }\n        const dataBuffer = this.encryptedContentInfo.getEncryptedContent();\n        return crypto.decrypt({\n            name: contentEncryptionAlgorithm.name,\n            iv: ivView\n        }, unwrappedKey, dataBuffer);\n    }\n}\nEnvelopedData.CLASS_NAME = \"EnvelopedData\";\n\nconst SAFE_CONTENTS = \"safeContents\";\nconst PARSED_VALUE$1 = \"parsedValue\";\nconst CONTENT_INFOS = \"contentInfos\";\nclass AuthenticatedSafe extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.safeContents = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SAFE_CONTENTS, AuthenticatedSafe.defaultValues(SAFE_CONTENTS));\n        if (PARSED_VALUE$1 in parameters) {\n            this.parsedValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PARSED_VALUE$1, AuthenticatedSafe.defaultValues(PARSED_VALUE$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SAFE_CONTENTS:\n                return [];\n            case PARSED_VALUE$1:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SAFE_CONTENTS:\n                return (memberValue.length === 0);\n            case PARSED_VALUE$1:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.contentInfos || EMPTY_STRING),\n                    value: ContentInfo.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            CONTENT_INFOS\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AuthenticatedSafe.schema({\n            names: {\n                contentInfos: CONTENT_INFOS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.safeContents = Array.from(asn1.result.contentInfos, element => new ContentInfo({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.safeContents, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            safeContents: Array.from(this.safeContents, o => o.toJSON())\n        };\n    }\n    async parseInternalValues(parameters, crypto = getCrypto(true)) {\n        ParameterError.assert(parameters, SAFE_CONTENTS);\n        ArgumentError.assert(parameters.safeContents, SAFE_CONTENTS, \"Array\");\n        if (parameters.safeContents.length !== this.safeContents.length) {\n            throw new ArgumentError(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.safeContents.length\\\"\");\n        }\n        this.parsedValue = {\n            safeContents: [],\n        };\n        for (const [index, content] of this.safeContents.entries()) {\n            const safeContent = parameters.safeContents[index];\n            const errorTarget = `parameters.safeContents[${index}]`;\n            switch (content.contentType) {\n                case id_ContentType_Data:\n                    {\n                        ArgumentError.assert(content.content, \"this.safeContents[j].content\", asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString);\n                        const authSafeContent = content.content.getValue();\n                        this.parsedValue.safeContents.push({\n                            privacyMode: 0,\n                            value: SafeContents.fromBER(authSafeContent)\n                        });\n                    }\n                    break;\n                case id_ContentType_EnvelopedData:\n                    {\n                        const cmsEnveloped = new EnvelopedData({ schema: content.content });\n                        ParameterError.assert(errorTarget, safeContent, \"recipientCertificate\", \"recipientKey\");\n                        const envelopedData = safeContent;\n                        const recipientCertificate = envelopedData.recipientCertificate;\n                        const recipientKey = envelopedData.recipientKey;\n                        const decrypted = await cmsEnveloped.decrypt(0, {\n                            recipientCertificate,\n                            recipientPrivateKey: recipientKey\n                        }, crypto);\n                        this.parsedValue.safeContents.push({\n                            privacyMode: 2,\n                            value: SafeContents.fromBER(decrypted),\n                        });\n                    }\n                    break;\n                case id_ContentType_EncryptedData:\n                    {\n                        const cmsEncrypted = new EncryptedData({ schema: content.content });\n                        ParameterError.assert(errorTarget, safeContent, \"password\");\n                        const password = safeContent.password;\n                        const decrypted = await cmsEncrypted.decrypt({\n                            password\n                        }, crypto);\n                        this.parsedValue.safeContents.push({\n                            privacyMode: 1,\n                            value: SafeContents.fromBER(decrypted),\n                        });\n                    }\n                    break;\n                default:\n                    throw new Error(`Unknown \"contentType\" for AuthenticatedSafe: \" ${content.contentType}`);\n            }\n        }\n    }\n    async makeInternalValues(parameters, crypto = getCrypto(true)) {\n        if (!(this.parsedValue)) {\n            throw new Error(\"Please run \\\"parseValues\\\" first or add \\\"parsedValue\\\" manually\");\n        }\n        ArgumentError.assert(this.parsedValue, \"this.parsedValue\", \"object\");\n        ArgumentError.assert(this.parsedValue.safeContents, \"this.parsedValue.safeContents\", \"Array\");\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        ParameterError.assert(parameters, \"safeContents\");\n        ArgumentError.assert(parameters.safeContents, \"parameters.safeContents\", \"Array\");\n        if (parameters.safeContents.length !== this.parsedValue.safeContents.length) {\n            throw new ArgumentError(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.parsedValue.safeContents\\\"\");\n        }\n        this.safeContents = [];\n        for (const [index, content] of this.parsedValue.safeContents.entries()) {\n            ParameterError.assert(\"content\", content, \"privacyMode\", \"value\");\n            ArgumentError.assert(content.value, \"content.value\", SafeContents);\n            switch (content.privacyMode) {\n                case 0:\n                    {\n                        const contentBuffer = content.value.toSchema().toBER(false);\n                        this.safeContents.push(new ContentInfo({\n                            contentType: \"1.2.840.113549.1.7.1\",\n                            content: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: contentBuffer })\n                        }));\n                    }\n                    break;\n                case 1:\n                    {\n                        const cmsEncrypted = new EncryptedData();\n                        const currentParameters = parameters.safeContents[index];\n                        currentParameters.contentToEncrypt = content.value.toSchema().toBER(false);\n                        await cmsEncrypted.encrypt(currentParameters, crypto);\n                        this.safeContents.push(new ContentInfo({\n                            contentType: \"1.2.840.113549.1.7.6\",\n                            content: cmsEncrypted.toSchema()\n                        }));\n                    }\n                    break;\n                case 2:\n                    {\n                        const cmsEnveloped = new EnvelopedData();\n                        const contentToEncrypt = content.value.toSchema().toBER(false);\n                        const safeContent = parameters.safeContents[index];\n                        ParameterError.assert(`parameters.safeContents[${index}]`, safeContent, \"encryptingCertificate\", \"encryptionAlgorithm\");\n                        switch (true) {\n                            case (safeContent.encryptionAlgorithm.name.toLowerCase() === \"aes-cbc\"):\n                            case (safeContent.encryptionAlgorithm.name.toLowerCase() === \"aes-gcm\"):\n                                break;\n                            default:\n                                throw new Error(`Incorrect parameter \"encryptionAlgorithm\" in \"parameters.safeContents[i]\": ${safeContent.encryptionAlgorithm}`);\n                        }\n                        switch (true) {\n                            case (safeContent.encryptionAlgorithm.length === 128):\n                            case (safeContent.encryptionAlgorithm.length === 192):\n                            case (safeContent.encryptionAlgorithm.length === 256):\n                                break;\n                            default:\n                                throw new Error(`Incorrect parameter \"encryptionAlgorithm.length\" in \"parameters.safeContents[i]\": ${safeContent.encryptionAlgorithm.length}`);\n                        }\n                        const encryptionAlgorithm = safeContent.encryptionAlgorithm;\n                        cmsEnveloped.addRecipientByCertificate(safeContent.encryptingCertificate, {}, undefined, crypto);\n                        await cmsEnveloped.encrypt(encryptionAlgorithm, contentToEncrypt, crypto);\n                        this.safeContents.push(new ContentInfo({\n                            contentType: \"1.2.840.113549.1.7.3\",\n                            content: cmsEnveloped.toSchema()\n                        }));\n                    }\n                    break;\n                default:\n                    throw new Error(`Incorrect value for \"content.privacyMode\": ${content.privacyMode}`);\n            }\n        }\n        return this;\n    }\n}\nAuthenticatedSafe.CLASS_NAME = \"AuthenticatedSafe\";\n\nconst HASH_ALGORITHM$1 = \"hashAlgorithm\";\nconst ISSUER_NAME_HASH = \"issuerNameHash\";\nconst ISSUER_KEY_HASH = \"issuerKeyHash\";\nconst SERIAL_NUMBER$1 = \"serialNumber\";\nconst CLEAR_PROPS$j = [\n    HASH_ALGORITHM$1,\n    ISSUER_NAME_HASH,\n    ISSUER_KEY_HASH,\n    SERIAL_NUMBER$1,\n];\nclass CertID extends PkiObject {\n    static async create(certificate, parameters, crypto = getCrypto(true)) {\n        const certID = new CertID();\n        await certID.createForCertificate(certificate, parameters, crypto);\n        return certID;\n    }\n    constructor(parameters = {}) {\n        super();\n        this.hashAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, HASH_ALGORITHM$1, CertID.defaultValues(HASH_ALGORITHM$1));\n        this.issuerNameHash = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER_NAME_HASH, CertID.defaultValues(ISSUER_NAME_HASH));\n        this.issuerKeyHash = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER_KEY_HASH, CertID.defaultValues(ISSUER_KEY_HASH));\n        this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SERIAL_NUMBER$1, CertID.defaultValues(SERIAL_NUMBER$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case HASH_ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case ISSUER_NAME_HASH:\n            case ISSUER_KEY_HASH:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case SERIAL_NUMBER$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case HASH_ALGORITHM$1:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case ISSUER_NAME_HASH:\n            case ISSUER_KEY_HASH:\n            case SERIAL_NUMBER$1:\n                return (memberValue.isEqual(CertID.defaultValues(SERIAL_NUMBER$1)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.hashAlgorithmObject || {\n                    names: {\n                        blockName: (names.hashAlgorithm || EMPTY_STRING)\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.issuerNameHash || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.issuerKeyHash || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.serialNumber || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$j);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, CertID.schema({\n            names: {\n                hashAlgorithm: HASH_ALGORITHM$1,\n                issuerNameHash: ISSUER_NAME_HASH,\n                issuerKeyHash: ISSUER_KEY_HASH,\n                serialNumber: SERIAL_NUMBER$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\n        this.issuerNameHash = asn1.result.issuerNameHash;\n        this.issuerKeyHash = asn1.result.issuerKeyHash;\n        this.serialNumber = asn1.result.serialNumber;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.hashAlgorithm.toSchema(),\n                this.issuerNameHash,\n                this.issuerKeyHash,\n                this.serialNumber\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            hashAlgorithm: this.hashAlgorithm.toJSON(),\n            issuerNameHash: this.issuerNameHash.toJSON(),\n            issuerKeyHash: this.issuerKeyHash.toJSON(),\n            serialNumber: this.serialNumber.toJSON(),\n        };\n    }\n    isEqual(certificateID) {\n        if (this.hashAlgorithm.algorithmId !== certificateID.hashAlgorithm.algorithmId) {\n            return false;\n        }\n        if (!pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(this.issuerNameHash.valueBlock.valueHexView, certificateID.issuerNameHash.valueBlock.valueHexView)) {\n            return false;\n        }\n        if (!pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(this.issuerKeyHash.valueBlock.valueHexView, certificateID.issuerKeyHash.valueBlock.valueHexView)) {\n            return false;\n        }\n        if (!this.serialNumber.isEqual(certificateID.serialNumber)) {\n            return false;\n        }\n        return true;\n    }\n    async createForCertificate(certificate, parameters, crypto = getCrypto(true)) {\n        ParameterError.assert(parameters, HASH_ALGORITHM$1, \"issuerCertificate\");\n        const hashOID = crypto.getOIDByAlgorithm({ name: parameters.hashAlgorithm }, true, \"hashAlgorithm\");\n        this.hashAlgorithm = new AlgorithmIdentifier({\n            algorithmId: hashOID,\n            algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n        });\n        const issuerCertificate = parameters.issuerCertificate;\n        this.serialNumber = certificate.serialNumber;\n        const hashIssuerName = await crypto.digest({ name: parameters.hashAlgorithm }, issuerCertificate.subject.toSchema().toBER(false));\n        this.issuerNameHash = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: hashIssuerName });\n        const issuerKeyBuffer = issuerCertificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView;\n        const hashIssuerKey = await crypto.digest({ name: parameters.hashAlgorithm }, issuerKeyBuffer);\n        this.issuerKeyHash = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: hashIssuerKey });\n    }\n}\nCertID.CLASS_NAME = \"CertID\";\n\nconst CERT_ID = \"certID\";\nconst CERT_STATUS = \"certStatus\";\nconst THIS_UPDATE = \"thisUpdate\";\nconst NEXT_UPDATE = \"nextUpdate\";\nconst SINGLE_EXTENSIONS = \"singleExtensions\";\nconst CLEAR_PROPS$i = [\n    CERT_ID,\n    CERT_STATUS,\n    THIS_UPDATE,\n    NEXT_UPDATE,\n    SINGLE_EXTENSIONS,\n];\nclass SingleResponse extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERT_ID, SingleResponse.defaultValues(CERT_ID));\n        this.certStatus = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERT_STATUS, SingleResponse.defaultValues(CERT_STATUS));\n        this.thisUpdate = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, THIS_UPDATE, SingleResponse.defaultValues(THIS_UPDATE));\n        if (NEXT_UPDATE in parameters) {\n            this.nextUpdate = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NEXT_UPDATE, SingleResponse.defaultValues(NEXT_UPDATE));\n        }\n        if (SINGLE_EXTENSIONS in parameters) {\n            this.singleExtensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SINGLE_EXTENSIONS, SingleResponse.defaultValues(SINGLE_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERT_ID:\n                return new CertID();\n            case CERT_STATUS:\n                return {};\n            case THIS_UPDATE:\n            case NEXT_UPDATE:\n                return new Date(0, 0, 0);\n            case SINGLE_EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CERT_ID:\n                return ((CertID.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\n                    (CertID.compareWithDefault(\"issuerNameHash\", memberValue.issuerNameHash)) &&\n                    (CertID.compareWithDefault(\"issuerKeyHash\", memberValue.issuerKeyHash)) &&\n                    (CertID.compareWithDefault(\"serialNumber\", memberValue.serialNumber)));\n            case CERT_STATUS:\n                return (Object.keys(memberValue).length === 0);\n            case THIS_UPDATE:\n            case NEXT_UPDATE:\n                return (memberValue === SingleResponse.defaultValues(memberName));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                CertID.schema(names.certID || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                            name: (names.certStatus || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                        }),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            name: (names.certStatus || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: [\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime(),\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                    optional: true,\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    },\n                                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Enumerated()]\n                                })\n                            ]\n                        }),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                            name: (names.certStatus || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 2\n                            },\n                            lenBlock: { length: 1 }\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ name: (names.thisUpdate || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ name: (names.nextUpdate || EMPTY_STRING) })]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [Extensions.schema(names.singleExtensions || {})]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$i);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, SingleResponse.schema({\n            names: {\n                certID: {\n                    names: {\n                        blockName: CERT_ID\n                    }\n                },\n                certStatus: CERT_STATUS,\n                thisUpdate: THIS_UPDATE,\n                nextUpdate: NEXT_UPDATE,\n                singleExtensions: {\n                    names: {\n                        blockName: SINGLE_EXTENSIONS\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.certID = new CertID({ schema: asn1.result.certID });\n        this.certStatus = asn1.result.certStatus;\n        this.thisUpdate = asn1.result.thisUpdate.toDate();\n        if (NEXT_UPDATE in asn1.result)\n            this.nextUpdate = asn1.result.nextUpdate.toDate();\n        if (SINGLE_EXTENSIONS in asn1.result)\n            this.singleExtensions = Array.from(asn1.result.singleExtensions.valueBlock.value, element => new Extension({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.certID.toSchema());\n        outputArray.push(this.certStatus);\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueDate: this.thisUpdate }));\n        if (this.nextUpdate) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueDate: this.nextUpdate })]\n            }));\n        }\n        if (this.singleExtensions) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: Array.from(this.singleExtensions, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            certID: this.certID.toJSON(),\n            certStatus: this.certStatus.toJSON(),\n            thisUpdate: this.thisUpdate\n        };\n        if (this.nextUpdate) {\n            res.nextUpdate = this.nextUpdate;\n        }\n        if (this.singleExtensions) {\n            res.singleExtensions = Array.from(this.singleExtensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nSingleResponse.CLASS_NAME = \"SingleResponse\";\n\nconst TBS$2 = \"tbs\";\nconst VERSION$7 = \"version\";\nconst RESPONDER_ID = \"responderID\";\nconst PRODUCED_AT = \"producedAt\";\nconst RESPONSES = \"responses\";\nconst RESPONSE_EXTENSIONS = \"responseExtensions\";\nconst RESPONSE_DATA = \"ResponseData\";\nconst RESPONSE_DATA_VERSION = `${RESPONSE_DATA}.${VERSION$7}`;\nconst RESPONSE_DATA_RESPONDER_ID = `${RESPONSE_DATA}.${RESPONDER_ID}`;\nconst RESPONSE_DATA_PRODUCED_AT = `${RESPONSE_DATA}.${PRODUCED_AT}`;\nconst RESPONSE_DATA_RESPONSES = `${RESPONSE_DATA}.${RESPONSES}`;\nconst RESPONSE_DATA_RESPONSE_EXTENSIONS = `${RESPONSE_DATA}.${RESPONSE_EXTENSIONS}`;\nconst CLEAR_PROPS$h = [\n    RESPONSE_DATA,\n    RESPONSE_DATA_VERSION,\n    RESPONSE_DATA_RESPONDER_ID,\n    RESPONSE_DATA_PRODUCED_AT,\n    RESPONSE_DATA_RESPONSES,\n    RESPONSE_DATA_RESPONSE_EXTENSIONS\n];\nclass ResponseData extends PkiObject {\n    get tbs() {\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TBS$2, ResponseData.defaultValues(TBS$2)));\n        if (VERSION$7 in parameters) {\n            this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$7, ResponseData.defaultValues(VERSION$7));\n        }\n        this.responderID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RESPONDER_ID, ResponseData.defaultValues(RESPONDER_ID));\n        this.producedAt = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PRODUCED_AT, ResponseData.defaultValues(PRODUCED_AT));\n        this.responses = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RESPONSES, ResponseData.defaultValues(RESPONSES));\n        if (RESPONSE_EXTENSIONS in parameters) {\n            this.responseExtensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RESPONSE_EXTENSIONS, ResponseData.defaultValues(RESPONSE_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$7:\n                return 0;\n            case TBS$2:\n                return EMPTY_BUFFER;\n            case RESPONDER_ID:\n                return {};\n            case PRODUCED_AT:\n                return new Date(0, 0, 0);\n            case RESPONSES:\n            case RESPONSE_EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TBS$2:\n                return (memberValue.byteLength === 0);\n            case RESPONDER_ID:\n                return (Object.keys(memberValue).length === 0);\n            case PRODUCED_AT:\n                return (memberValue === ResponseData.defaultValues(memberName));\n            case RESPONSES:\n            case RESPONSE_EXTENSIONS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || RESPONSE_DATA),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || RESPONSE_DATA_VERSION) })]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            name: (names.responderID || RESPONSE_DATA_RESPONDER_ID),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: [RelativeDistinguishedNames.schema(names.ResponseDataByName || {\n                                    names: {\n                                        blockName: \"ResponseData.byName\"\n                                    }\n                                })]\n                        }),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            name: (names.responderID || RESPONSE_DATA_RESPONDER_ID),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 2\n                            },\n                            value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.ResponseDataByKey || \"ResponseData.byKey\") })]\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ name: (names.producedAt || RESPONSE_DATA_PRODUCED_AT) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: RESPONSE_DATA_RESPONSES,\n                            value: SingleResponse.schema(names.response || {})\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [Extensions.schema(names.extensions || {\n                            names: {\n                                blockName: RESPONSE_DATA_RESPONSE_EXTENSIONS\n                            }\n                        })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$h);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, ResponseData.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.ResponseData.valueBeforeDecodeView;\n        if (RESPONSE_DATA_VERSION in asn1.result)\n            this.version = asn1.result[RESPONSE_DATA_VERSION].valueBlock.valueDec;\n        if (asn1.result[RESPONSE_DATA_RESPONDER_ID].idBlock.tagNumber === 1)\n            this.responderID = new RelativeDistinguishedNames({ schema: asn1.result[RESPONSE_DATA_RESPONDER_ID].valueBlock.value[0] });\n        else\n            this.responderID = asn1.result[RESPONSE_DATA_RESPONDER_ID].valueBlock.value[0];\n        this.producedAt = asn1.result[RESPONSE_DATA_PRODUCED_AT].toDate();\n        this.responses = Array.from(asn1.result[RESPONSE_DATA_RESPONSES], element => new SingleResponse({ schema: element }));\n        if (RESPONSE_DATA_RESPONSE_EXTENSIONS in asn1.result)\n            this.responseExtensions = Array.from(asn1.result[RESPONSE_DATA_RESPONSE_EXTENSIONS].valueBlock.value, element => new Extension({ schema: element }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (encodeFlag === false) {\n            if (!this.tbsView.byteLength) {\n                return ResponseData.schema();\n            }\n            const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"TBS Response Data\");\n            tbsSchema = asn1.result;\n        }\n        else {\n            const outputArray = [];\n            if (VERSION$7 in this) {\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version })]\n                }));\n            }\n            if (this.responderID instanceof RelativeDistinguishedNames) {\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [this.responderID.toSchema()]\n                }));\n            }\n            else {\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [this.responderID]\n                }));\n            }\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueDate: this.producedAt }));\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: Array.from(this.responses, o => o.toSchema())\n            }));\n            if (this.responseExtensions) {\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                            value: Array.from(this.responseExtensions, o => o.toSchema())\n                        })]\n                }));\n            }\n            tbsSchema = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: outputArray\n            });\n        }\n        return tbsSchema;\n    }\n    toJSON() {\n        const res = {};\n        if (VERSION$7 in this) {\n            res.version = this.version;\n        }\n        if (this.responderID) {\n            res.responderID = this.responderID;\n        }\n        if (this.producedAt) {\n            res.producedAt = this.producedAt;\n        }\n        if (this.responses) {\n            res.responses = Array.from(this.responses, o => o.toJSON());\n        }\n        if (this.responseExtensions) {\n            res.responseExtensions = Array.from(this.responseExtensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nResponseData.CLASS_NAME = \"ResponseData\";\n\nconst TRUSTED_CERTS = \"trustedCerts\";\nconst CERTS$2 = \"certs\";\nconst CRLS$1 = \"crls\";\nconst OCSPS$1 = \"ocsps\";\nconst CHECK_DATE = \"checkDate\";\nconst FIND_ORIGIN = \"findOrigin\";\nconst FIND_ISSUER = \"findIssuer\";\nvar ChainValidationCode;\n(function (ChainValidationCode) {\n    ChainValidationCode[ChainValidationCode[\"unknown\"] = -1] = \"unknown\";\n    ChainValidationCode[ChainValidationCode[\"success\"] = 0] = \"success\";\n    ChainValidationCode[ChainValidationCode[\"noRevocation\"] = 11] = \"noRevocation\";\n    ChainValidationCode[ChainValidationCode[\"noPath\"] = 60] = \"noPath\";\n    ChainValidationCode[ChainValidationCode[\"noValidPath\"] = 97] = \"noValidPath\";\n})(ChainValidationCode || (ChainValidationCode = {}));\nclass ChainValidationError extends Error {\n    constructor(code, message) {\n        super(message);\n        this.name = ChainValidationError.NAME;\n        this.code = code;\n        this.message = message;\n    }\n}\nChainValidationError.NAME = \"ChainValidationError\";\nfunction isTrusted(cert, trustedList) {\n    for (let i = 0; i < trustedList.length; i++) {\n        if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(cert.tbsView, trustedList[i].tbsView)) {\n            return true;\n        }\n    }\n    return false;\n}\nclass CertificateChainValidationEngine {\n    constructor(parameters = {}) {\n        this.trustedCerts = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TRUSTED_CERTS, this.defaultValues(TRUSTED_CERTS));\n        this.certs = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERTS$2, this.defaultValues(CERTS$2));\n        this.crls = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRLS$1, this.defaultValues(CRLS$1));\n        this.ocsps = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OCSPS$1, this.defaultValues(OCSPS$1));\n        this.checkDate = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CHECK_DATE, this.defaultValues(CHECK_DATE));\n        this.findOrigin = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, FIND_ORIGIN, this.defaultValues(FIND_ORIGIN));\n        this.findIssuer = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, FIND_ISSUER, this.defaultValues(FIND_ISSUER));\n    }\n    static defaultFindOrigin(certificate, validationEngine) {\n        if (certificate.tbsView.byteLength === 0) {\n            certificate.tbsView = new Uint8Array(certificate.encodeTBS().toBER());\n        }\n        for (const localCert of validationEngine.certs) {\n            if (localCert.tbsView.byteLength === 0) {\n                localCert.tbsView = new Uint8Array(localCert.encodeTBS().toBER());\n            }\n            if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(certificate.tbsView, localCert.tbsView))\n                return \"Intermediate Certificates\";\n        }\n        for (const trustedCert of validationEngine.trustedCerts) {\n            if (trustedCert.tbsView.byteLength === 0)\n                trustedCert.tbsView = new Uint8Array(trustedCert.encodeTBS().toBER());\n            if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(certificate.tbsView, trustedCert.tbsView))\n                return \"Trusted Certificates\";\n        }\n        return \"Unknown\";\n    }\n    async defaultFindIssuer(certificate, validationEngine, crypto = getCrypto(true)) {\n        const result = [];\n        let keyIdentifier = null;\n        let authorityCertIssuer = null;\n        let authorityCertSerialNumber = null;\n        if (certificate.subject.isEqual(certificate.issuer)) {\n            try {\n                const verificationResult = await certificate.verify(undefined, crypto);\n                if (verificationResult) {\n                    return [certificate];\n                }\n            }\n            catch (ex) {\n            }\n        }\n        if (certificate.extensions) {\n            for (const extension of certificate.extensions) {\n                if (extension.extnID === id_AuthorityKeyIdentifier && extension.parsedValue instanceof AuthorityKeyIdentifier) {\n                    if (extension.parsedValue.keyIdentifier) {\n                        keyIdentifier = extension.parsedValue.keyIdentifier;\n                    }\n                    else {\n                        if (extension.parsedValue.authorityCertIssuer) {\n                            authorityCertIssuer = extension.parsedValue.authorityCertIssuer;\n                        }\n                        if (extension.parsedValue.authorityCertSerialNumber) {\n                            authorityCertSerialNumber = extension.parsedValue.authorityCertSerialNumber;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        function checkCertificate(possibleIssuer) {\n            if (keyIdentifier !== null) {\n                if (possibleIssuer.extensions) {\n                    let extensionFound = false;\n                    for (const extension of possibleIssuer.extensions) {\n                        if (extension.extnID === id_SubjectKeyIdentifier && extension.parsedValue) {\n                            extensionFound = true;\n                            if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(extension.parsedValue.valueBlock.valueHex, keyIdentifier.valueBlock.valueHexView)) {\n                                result.push(possibleIssuer);\n                            }\n                            break;\n                        }\n                    }\n                    if (extensionFound) {\n                        return;\n                    }\n                }\n            }\n            let authorityCertSerialNumberEqual = false;\n            if (authorityCertSerialNumber !== null)\n                authorityCertSerialNumberEqual = possibleIssuer.serialNumber.isEqual(authorityCertSerialNumber);\n            if (authorityCertIssuer !== null) {\n                if (possibleIssuer.subject.isEqual(authorityCertIssuer)) {\n                    if (authorityCertSerialNumberEqual)\n                        result.push(possibleIssuer);\n                }\n            }\n            else {\n                if (certificate.issuer.isEqual(possibleIssuer.subject))\n                    result.push(possibleIssuer);\n            }\n        }\n        for (const trustedCert of validationEngine.trustedCerts) {\n            checkCertificate(trustedCert);\n        }\n        for (const intermediateCert of validationEngine.certs) {\n            checkCertificate(intermediateCert);\n        }\n        for (let i = result.length - 1; i >= 0; i--) {\n            try {\n                const verificationResult = await certificate.verify(result[i], crypto);\n                if (verificationResult === false)\n                    result.splice(i, 1);\n            }\n            catch (ex) {\n                result.splice(i, 1);\n            }\n        }\n        return result;\n    }\n    defaultValues(memberName) {\n        switch (memberName) {\n            case TRUSTED_CERTS:\n                return [];\n            case CERTS$2:\n                return [];\n            case CRLS$1:\n                return [];\n            case OCSPS$1:\n                return [];\n            case CHECK_DATE:\n                return new Date();\n            case FIND_ORIGIN:\n                return CertificateChainValidationEngine.defaultFindOrigin;\n            case FIND_ISSUER:\n                return this.defaultFindIssuer;\n            default:\n                throw new Error(`Invalid member name for CertificateChainValidationEngine class: ${memberName}`);\n        }\n    }\n    async sort(passedWhenNotRevValues = false, crypto = getCrypto(true)) {\n        const localCerts = [];\n        const buildPath = async (certificate, crypto) => {\n            const result = [];\n            function checkUnique(array) {\n                let unique = true;\n                for (let i = 0; i < array.length; i++) {\n                    for (let j = 0; j < array.length; j++) {\n                        if (j === i)\n                            continue;\n                        if (array[i] === array[j]) {\n                            unique = false;\n                            break;\n                        }\n                    }\n                    if (!unique)\n                        break;\n                }\n                return unique;\n            }\n            if (isTrusted(certificate, this.trustedCerts)) {\n                return [[certificate]];\n            }\n            const findIssuerResult = await this.findIssuer(certificate, this, crypto);\n            if (findIssuerResult.length === 0) {\n                throw new Error(\"No valid certificate paths found\");\n            }\n            for (let i = 0; i < findIssuerResult.length; i++) {\n                if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(findIssuerResult[i].tbsView, certificate.tbsView)) {\n                    result.push([findIssuerResult[i]]);\n                    continue;\n                }\n                const buildPathResult = await buildPath(findIssuerResult[i], crypto);\n                for (let j = 0; j < buildPathResult.length; j++) {\n                    const copy = buildPathResult[j].slice();\n                    copy.splice(0, 0, findIssuerResult[i]);\n                    if (checkUnique(copy))\n                        result.push(copy);\n                    else\n                        result.push(buildPathResult[j]);\n                }\n            }\n            return result;\n        };\n        const findCRL = async (certificate) => {\n            const issuerCertificates = [];\n            const crls = [];\n            const crlsAndCertificates = [];\n            issuerCertificates.push(...localCerts.filter(element => certificate.issuer.isEqual(element.subject)));\n            if (issuerCertificates.length === 0) {\n                return {\n                    status: 1,\n                    statusMessage: \"No certificate's issuers\"\n                };\n            }\n            crls.push(...this.crls.filter(o => o.issuer.isEqual(certificate.issuer)));\n            if (crls.length === 0) {\n                return {\n                    status: 2,\n                    statusMessage: \"No CRLs for specific certificate issuer\"\n                };\n            }\n            for (let i = 0; i < crls.length; i++) {\n                const crl = crls[i];\n                if (crl.nextUpdate && crl.nextUpdate.value < this.checkDate) {\n                    continue;\n                }\n                for (let j = 0; j < issuerCertificates.length; j++) {\n                    try {\n                        const result = await crls[i].verify({ issuerCertificate: issuerCertificates[j] }, crypto);\n                        if (result) {\n                            crlsAndCertificates.push({\n                                crl: crls[i],\n                                certificate: issuerCertificates[j]\n                            });\n                            break;\n                        }\n                    }\n                    catch (ex) {\n                    }\n                }\n            }\n            if (crlsAndCertificates.length) {\n                return {\n                    status: 0,\n                    statusMessage: EMPTY_STRING,\n                    result: crlsAndCertificates\n                };\n            }\n            return {\n                status: 3,\n                statusMessage: \"No valid CRLs found\"\n            };\n        };\n        const findOCSP = async (certificate, issuerCertificate) => {\n            const hashAlgorithm = crypto.getAlgorithmByOID(certificate.signatureAlgorithm.algorithmId);\n            if (!hashAlgorithm.name) {\n                return 1;\n            }\n            if (!hashAlgorithm.hash) {\n                return 1;\n            }\n            for (let i = 0; i < this.ocsps.length; i++) {\n                const ocsp = this.ocsps[i];\n                const result = await ocsp.getCertificateStatus(certificate, issuerCertificate, crypto);\n                if (result.isForCertificate) {\n                    if (result.status === 0)\n                        return 0;\n                    return 1;\n                }\n            }\n            return 2;\n        };\n        async function checkForCA(certificate, needToCheckCRL = false) {\n            let isCA = false;\n            let mustBeCA = false;\n            let keyUsagePresent = false;\n            let cRLSign = false;\n            if (certificate.extensions) {\n                for (let j = 0; j < certificate.extensions.length; j++) {\n                    const extension = certificate.extensions[j];\n                    if (extension.critical && !extension.parsedValue) {\n                        return {\n                            result: false,\n                            resultCode: 6,\n                            resultMessage: `Unable to parse critical certificate extension: ${extension.extnID}`\n                        };\n                    }\n                    if (extension.extnID === id_KeyUsage) {\n                        keyUsagePresent = true;\n                        const view = new Uint8Array(extension.parsedValue.valueBlock.valueHex);\n                        if ((view[0] & 0x04) === 0x04)\n                            mustBeCA = true;\n                        if ((view[0] & 0x02) === 0x02)\n                            cRLSign = true;\n                    }\n                    if (extension.extnID === id_BasicConstraints) {\n                        if (\"cA\" in extension.parsedValue) {\n                            if (extension.parsedValue.cA === true)\n                                isCA = true;\n                        }\n                    }\n                }\n                if ((mustBeCA === true) && (isCA === false)) {\n                    return {\n                        result: false,\n                        resultCode: 3,\n                        resultMessage: \"Unable to build certificate chain - using \\\"keyCertSign\\\" flag set without BasicConstraints\"\n                    };\n                }\n                if ((keyUsagePresent === true) && (isCA === true) && (mustBeCA === false)) {\n                    return {\n                        result: false,\n                        resultCode: 4,\n                        resultMessage: \"Unable to build certificate chain - \\\"keyCertSign\\\" flag was not set\"\n                    };\n                }\n                if ((isCA === true) && (keyUsagePresent === true) && ((needToCheckCRL) && (cRLSign === false))) {\n                    return {\n                        result: false,\n                        resultCode: 5,\n                        resultMessage: \"Unable to build certificate chain - intermediate certificate must have \\\"cRLSign\\\" key usage flag\"\n                    };\n                }\n            }\n            if (isCA === false) {\n                return {\n                    result: false,\n                    resultCode: 7,\n                    resultMessage: \"Unable to build certificate chain - more than one possible end-user certificate\"\n                };\n            }\n            return {\n                result: true,\n                resultCode: 0,\n                resultMessage: EMPTY_STRING\n            };\n        }\n        const basicCheck = async (path, checkDate) => {\n            for (let i = 0; i < path.length; i++) {\n                if ((path[i].notBefore.value > checkDate) ||\n                    (path[i].notAfter.value < checkDate)) {\n                    return {\n                        result: false,\n                        resultCode: 8,\n                        resultMessage: \"The certificate is either not yet valid or expired\"\n                    };\n                }\n            }\n            if (path.length < 2) {\n                return {\n                    result: false,\n                    resultCode: 9,\n                    resultMessage: \"Too short certificate path\"\n                };\n            }\n            for (let i = (path.length - 2); i >= 0; i--) {\n                if (path[i].issuer.isEqual(path[i].subject) === false) {\n                    if (path[i].issuer.isEqual(path[i + 1].subject) === false) {\n                        return {\n                            result: false,\n                            resultCode: 10,\n                            resultMessage: \"Incorrect name chaining\"\n                        };\n                    }\n                }\n            }\n            if ((this.crls.length !== 0) || (this.ocsps.length !== 0)) {\n                for (let i = 0; i < (path.length - 1); i++) {\n                    let ocspResult = 2;\n                    let crlResult = {\n                        status: 0,\n                        statusMessage: EMPTY_STRING\n                    };\n                    if (this.ocsps.length !== 0) {\n                        ocspResult = await findOCSP(path[i], path[i + 1]);\n                        switch (ocspResult) {\n                            case 0:\n                                continue;\n                            case 1:\n                                return {\n                                    result: false,\n                                    resultCode: 12,\n                                    resultMessage: \"One of certificates was revoked via OCSP response\"\n                                };\n                        }\n                    }\n                    if (this.crls.length !== 0) {\n                        crlResult = await findCRL(path[i]);\n                        if (crlResult.status === 0 && crlResult.result) {\n                            for (let j = 0; j < crlResult.result.length; j++) {\n                                const isCertificateRevoked = crlResult.result[j].crl.isCertificateRevoked(path[i]);\n                                if (isCertificateRevoked) {\n                                    return {\n                                        result: false,\n                                        resultCode: 12,\n                                        resultMessage: \"One of certificates had been revoked\"\n                                    };\n                                }\n                                const isCertificateCA = await checkForCA(crlResult.result[j].certificate, true);\n                                if (isCertificateCA.result === false) {\n                                    return {\n                                        result: false,\n                                        resultCode: 13,\n                                        resultMessage: \"CRL issuer certificate is not a CA certificate or does not have crlSign flag\"\n                                    };\n                                }\n                            }\n                        }\n                        else {\n                            if (passedWhenNotRevValues === false) {\n                                throw new ChainValidationError(ChainValidationCode.noRevocation, `No revocation values found for one of certificates: ${crlResult.statusMessage}`);\n                            }\n                        }\n                    }\n                    else {\n                        if (ocspResult === 2) {\n                            return {\n                                result: false,\n                                resultCode: 11,\n                                resultMessage: \"No revocation values found for one of certificates\"\n                            };\n                        }\n                    }\n                    if ((ocspResult === 2) && (crlResult.status === 2) && passedWhenNotRevValues) {\n                        const issuerCertificate = path[i + 1];\n                        let extensionFound = false;\n                        if (issuerCertificate.extensions) {\n                            for (const extension of issuerCertificate.extensions) {\n                                switch (extension.extnID) {\n                                    case id_CRLDistributionPoints:\n                                    case id_FreshestCRL:\n                                    case id_AuthorityInfoAccess:\n                                        extensionFound = true;\n                                        break;\n                                }\n                            }\n                        }\n                        if (extensionFound) {\n                            throw new ChainValidationError(ChainValidationCode.noRevocation, `No revocation values found for one of certificates: ${crlResult.statusMessage}`);\n                        }\n                    }\n                }\n            }\n            for (const [i, cert] of path.entries()) {\n                if (!i) {\n                    continue;\n                }\n                const result = await checkForCA(cert);\n                if (!result.result) {\n                    return {\n                        result: false,\n                        resultCode: 14,\n                        resultMessage: \"One of intermediate certificates is not a CA certificate\"\n                    };\n                }\n            }\n            return {\n                result: true\n            };\n        };\n        localCerts.push(...this.trustedCerts);\n        localCerts.push(...this.certs);\n        for (let i = 0; i < localCerts.length; i++) {\n            for (let j = 0; j < localCerts.length; j++) {\n                if (i === j)\n                    continue;\n                if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(localCerts[i].tbsView, localCerts[j].tbsView)) {\n                    localCerts.splice(j, 1);\n                    i = 0;\n                    break;\n                }\n            }\n        }\n        const leafCert = localCerts[localCerts.length - 1];\n        let result;\n        const certificatePath = [leafCert];\n        result = await buildPath(leafCert, crypto);\n        if (result.length === 0) {\n            throw new ChainValidationError(ChainValidationCode.noPath, \"Unable to find certificate path\");\n        }\n        for (let i = result.length - 1; i >= 0; i--) {\n            let found = false;\n            for (let j = 0; j < (result[i]).length; j++) {\n                const certificate = (result[i])[j];\n                for (let k = 0; k < this.trustedCerts.length; k++) {\n                    if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(certificate.tbsView, this.trustedCerts[k].tbsView)) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (found)\n                    break;\n            }\n            if (!found) {\n                result.splice(i, 1);\n            }\n        }\n        if (result.length === 0) {\n            throw new ChainValidationError(ChainValidationCode.noValidPath, \"No valid certificate paths found\");\n        }\n        let shortestLength = result[0].length;\n        let shortestIndex = 0;\n        for (let i = 0; i < result.length; i++) {\n            if (result[i].length < shortestLength) {\n                shortestLength = result[i].length;\n                shortestIndex = i;\n            }\n        }\n        for (let i = 0; i < result[shortestIndex].length; i++)\n            certificatePath.push((result[shortestIndex])[i]);\n        result = await basicCheck(certificatePath, this.checkDate);\n        if (result.result === false)\n            throw result;\n        return certificatePath;\n    }\n    async verify(parameters = {}, crypto = getCrypto(true)) {\n        function compareDNSName(name, constraint) {\n            const namePrepared = stringPrep(name);\n            const constraintPrepared = stringPrep(constraint);\n            const nameSplitted = namePrepared.split(\".\");\n            const constraintSplitted = constraintPrepared.split(\".\");\n            const nameLen = nameSplitted.length;\n            const constrLen = constraintSplitted.length;\n            if ((nameLen === 0) || (constrLen === 0) || (nameLen < constrLen)) {\n                return false;\n            }\n            for (let i = 0; i < nameLen; i++) {\n                if (nameSplitted[i].length === 0) {\n                    return false;\n                }\n            }\n            for (let i = 0; i < constrLen; i++) {\n                if (constraintSplitted[i].length === 0) {\n                    if (i === 0) {\n                        if (constrLen === 1) {\n                            return false;\n                        }\n                        continue;\n                    }\n                    return false;\n                }\n            }\n            for (let i = 0; i < constrLen; i++) {\n                if (constraintSplitted[constrLen - 1 - i].length === 0) {\n                    continue;\n                }\n                if (nameSplitted[nameLen - 1 - i].localeCompare(constraintSplitted[constrLen - 1 - i]) !== 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        function compareRFC822Name(name, constraint) {\n            const namePrepared = stringPrep(name);\n            const constraintPrepared = stringPrep(constraint);\n            const nameSplitted = namePrepared.split(\"@\");\n            const constraintSplitted = constraintPrepared.split(\"@\");\n            if ((nameSplitted.length === 0) || (constraintSplitted.length === 0) || (nameSplitted.length < constraintSplitted.length))\n                return false;\n            if (constraintSplitted.length === 1) {\n                const result = compareDNSName(nameSplitted[1], constraintSplitted[0]);\n                if (result) {\n                    const ns = nameSplitted[1].split(\".\");\n                    const cs = constraintSplitted[0].split(\".\");\n                    if (cs[0].length === 0)\n                        return true;\n                    return ns.length === cs.length;\n                }\n                return false;\n            }\n            return (namePrepared.localeCompare(constraintPrepared) === 0);\n        }\n        function compareUniformResourceIdentifier(name, constraint) {\n            let namePrepared = stringPrep(name);\n            const constraintPrepared = stringPrep(constraint);\n            const ns = namePrepared.split(\"/\");\n            const cs = constraintPrepared.split(\"/\");\n            if (cs.length > 1)\n                return false;\n            if (ns.length > 1) {\n                for (let i = 0; i < ns.length; i++) {\n                    if ((ns[i].length > 0) && (ns[i].charAt(ns[i].length - 1) !== \":\")) {\n                        const nsPort = ns[i].split(\":\");\n                        namePrepared = nsPort[0];\n                        break;\n                    }\n                }\n            }\n            const result = compareDNSName(namePrepared, constraintPrepared);\n            if (result) {\n                const nameSplitted = namePrepared.split(\".\");\n                const constraintSplitted = constraintPrepared.split(\".\");\n                if (constraintSplitted[0].length === 0)\n                    return true;\n                return nameSplitted.length === constraintSplitted.length;\n            }\n            return false;\n        }\n        function compareIPAddress(name, constraint) {\n            const nameView = name.valueBlock.valueHexView;\n            const constraintView = constraint.valueBlock.valueHexView;\n            if ((nameView.length === 4) && (constraintView.length === 8)) {\n                for (let i = 0; i < 4; i++) {\n                    if ((nameView[i] ^ constraintView[i]) & constraintView[i + 4])\n                        return false;\n                }\n                return true;\n            }\n            if ((nameView.length === 16) && (constraintView.length === 32)) {\n                for (let i = 0; i < 16; i++) {\n                    if ((nameView[i] ^ constraintView[i]) & constraintView[i + 16])\n                        return false;\n                }\n                return true;\n            }\n            return false;\n        }\n        function compareDirectoryName(name, constraint) {\n            if ((name.typesAndValues.length === 0) || (constraint.typesAndValues.length === 0))\n                return true;\n            if (name.typesAndValues.length < constraint.typesAndValues.length)\n                return false;\n            let result = true;\n            let nameStart = 0;\n            for (let i = 0; i < constraint.typesAndValues.length; i++) {\n                let localResult = false;\n                for (let j = nameStart; j < name.typesAndValues.length; j++) {\n                    localResult = name.typesAndValues[j].isEqual(constraint.typesAndValues[i]);\n                    if (name.typesAndValues[j].type === constraint.typesAndValues[i].type)\n                        result = result && localResult;\n                    if (localResult === true) {\n                        if ((nameStart === 0) || (nameStart === j)) {\n                            nameStart = j + 1;\n                            break;\n                        }\n                        else\n                            return false;\n                    }\n                }\n                if (localResult === false)\n                    return false;\n            }\n            return (nameStart === 0) ? false : result;\n        }\n        try {\n            if (this.certs.length === 0)\n                throw new Error(\"Empty certificate array\");\n            const passedWhenNotRevValues = parameters.passedWhenNotRevValues || false;\n            const initialPolicySet = parameters.initialPolicySet || [id_AnyPolicy];\n            const initialExplicitPolicy = parameters.initialExplicitPolicy || false;\n            const initialPolicyMappingInhibit = parameters.initialPolicyMappingInhibit || false;\n            const initialInhibitPolicy = parameters.initialInhibitPolicy || false;\n            const initialPermittedSubtreesSet = parameters.initialPermittedSubtreesSet || [];\n            const initialExcludedSubtreesSet = parameters.initialExcludedSubtreesSet || [];\n            const initialRequiredNameForms = parameters.initialRequiredNameForms || [];\n            let explicitPolicyIndicator = initialExplicitPolicy;\n            let policyMappingInhibitIndicator = initialPolicyMappingInhibit;\n            let inhibitAnyPolicyIndicator = initialInhibitPolicy;\n            const pendingConstraints = [\n                false,\n                false,\n                false,\n            ];\n            let explicitPolicyPending = 0;\n            let policyMappingInhibitPending = 0;\n            let inhibitAnyPolicyPending = 0;\n            let permittedSubtrees = initialPermittedSubtreesSet;\n            let excludedSubtrees = initialExcludedSubtreesSet;\n            const requiredNameForms = initialRequiredNameForms;\n            let pathDepth = 1;\n            this.certs = await this.sort(passedWhenNotRevValues, crypto);\n            const allPolicies = [];\n            allPolicies.push(id_AnyPolicy);\n            const policiesAndCerts = [];\n            const anyPolicyArray = new Array(this.certs.length - 1);\n            for (let ii = 0; ii < (this.certs.length - 1); ii++)\n                anyPolicyArray[ii] = true;\n            policiesAndCerts.push(anyPolicyArray);\n            const policyMappings = new Array(this.certs.length - 1);\n            const certPolicies = new Array(this.certs.length - 1);\n            let explicitPolicyStart = (explicitPolicyIndicator) ? (this.certs.length - 1) : (-1);\n            for (let i = (this.certs.length - 2); i >= 0; i--, pathDepth++) {\n                const cert = this.certs[i];\n                if (cert.extensions) {\n                    for (let j = 0; j < cert.extensions.length; j++) {\n                        const extension = cert.extensions[j];\n                        if (extension.extnID === id_CertificatePolicies) {\n                            certPolicies[i] = extension.parsedValue;\n                            for (let s = 0; s < allPolicies.length; s++) {\n                                if (allPolicies[s] === id_AnyPolicy) {\n                                    delete (policiesAndCerts[s])[i];\n                                    break;\n                                }\n                            }\n                            for (let k = 0; k < extension.parsedValue.certificatePolicies.length; k++) {\n                                let policyIndex = (-1);\n                                const policyId = extension.parsedValue.certificatePolicies[k].policyIdentifier;\n                                for (let s = 0; s < allPolicies.length; s++) {\n                                    if (policyId === allPolicies[s]) {\n                                        policyIndex = s;\n                                        break;\n                                    }\n                                }\n                                if (policyIndex === (-1)) {\n                                    allPolicies.push(policyId);\n                                    const certArray = new Array(this.certs.length - 1);\n                                    certArray[i] = true;\n                                    policiesAndCerts.push(certArray);\n                                }\n                                else\n                                    (policiesAndCerts[policyIndex])[i] = true;\n                            }\n                        }\n                        if (extension.extnID === id_PolicyMappings) {\n                            if (policyMappingInhibitIndicator) {\n                                return {\n                                    result: false,\n                                    resultCode: 98,\n                                    resultMessage: \"Policy mapping prohibited\"\n                                };\n                            }\n                            policyMappings[i] = extension.parsedValue;\n                        }\n                        if (extension.extnID === id_PolicyConstraints) {\n                            if (explicitPolicyIndicator === false) {\n                                if (extension.parsedValue.requireExplicitPolicy === 0) {\n                                    explicitPolicyIndicator = true;\n                                    explicitPolicyStart = i;\n                                }\n                                else {\n                                    if (pendingConstraints[0] === false) {\n                                        pendingConstraints[0] = true;\n                                        explicitPolicyPending = extension.parsedValue.requireExplicitPolicy;\n                                    }\n                                    else\n                                        explicitPolicyPending = (explicitPolicyPending > extension.parsedValue.requireExplicitPolicy) ? extension.parsedValue.requireExplicitPolicy : explicitPolicyPending;\n                                }\n                                if (extension.parsedValue.inhibitPolicyMapping === 0)\n                                    policyMappingInhibitIndicator = true;\n                                else {\n                                    if (pendingConstraints[1] === false) {\n                                        pendingConstraints[1] = true;\n                                        policyMappingInhibitPending = extension.parsedValue.inhibitPolicyMapping + 1;\n                                    }\n                                    else\n                                        policyMappingInhibitPending = (policyMappingInhibitPending > (extension.parsedValue.inhibitPolicyMapping + 1)) ? (extension.parsedValue.inhibitPolicyMapping + 1) : policyMappingInhibitPending;\n                                }\n                            }\n                        }\n                        if (extension.extnID === id_InhibitAnyPolicy) {\n                            if (inhibitAnyPolicyIndicator === false) {\n                                if (extension.parsedValue.valueBlock.valueDec === 0)\n                                    inhibitAnyPolicyIndicator = true;\n                                else {\n                                    if (pendingConstraints[2] === false) {\n                                        pendingConstraints[2] = true;\n                                        inhibitAnyPolicyPending = extension.parsedValue.valueBlock.valueDec;\n                                    }\n                                    else\n                                        inhibitAnyPolicyPending = (inhibitAnyPolicyPending > extension.parsedValue.valueBlock.valueDec) ? extension.parsedValue.valueBlock.valueDec : inhibitAnyPolicyPending;\n                                }\n                            }\n                        }\n                    }\n                    if (inhibitAnyPolicyIndicator === true) {\n                        let policyIndex = (-1);\n                        for (let searchAnyPolicy = 0; searchAnyPolicy < allPolicies.length; searchAnyPolicy++) {\n                            if (allPolicies[searchAnyPolicy] === id_AnyPolicy) {\n                                policyIndex = searchAnyPolicy;\n                                break;\n                            }\n                        }\n                        if (policyIndex !== (-1))\n                            delete (policiesAndCerts[0])[i];\n                    }\n                    if (explicitPolicyIndicator === false) {\n                        if (pendingConstraints[0] === true) {\n                            explicitPolicyPending--;\n                            if (explicitPolicyPending === 0) {\n                                explicitPolicyIndicator = true;\n                                explicitPolicyStart = i;\n                                pendingConstraints[0] = false;\n                            }\n                        }\n                    }\n                    if (policyMappingInhibitIndicator === false) {\n                        if (pendingConstraints[1] === true) {\n                            policyMappingInhibitPending--;\n                            if (policyMappingInhibitPending === 0) {\n                                policyMappingInhibitIndicator = true;\n                                pendingConstraints[1] = false;\n                            }\n                        }\n                    }\n                    if (inhibitAnyPolicyIndicator === false) {\n                        if (pendingConstraints[2] === true) {\n                            inhibitAnyPolicyPending--;\n                            if (inhibitAnyPolicyPending === 0) {\n                                inhibitAnyPolicyIndicator = true;\n                                pendingConstraints[2] = false;\n                            }\n                        }\n                    }\n                }\n            }\n            for (let i = 0; i < (this.certs.length - 1); i++) {\n                if ((i < (this.certs.length - 2)) && (typeof policyMappings[i + 1] !== \"undefined\")) {\n                    for (let k = 0; k < policyMappings[i + 1].mappings.length; k++) {\n                        if ((policyMappings[i + 1].mappings[k].issuerDomainPolicy === id_AnyPolicy) || (policyMappings[i + 1].mappings[k].subjectDomainPolicy === id_AnyPolicy)) {\n                            return {\n                                result: false,\n                                resultCode: 99,\n                                resultMessage: \"The \\\"anyPolicy\\\" should not be a part of policy mapping scheme\"\n                            };\n                        }\n                        let issuerDomainPolicyIndex = (-1);\n                        let subjectDomainPolicyIndex = (-1);\n                        for (let n = 0; n < allPolicies.length; n++) {\n                            if (allPolicies[n] === policyMappings[i + 1].mappings[k].issuerDomainPolicy)\n                                issuerDomainPolicyIndex = n;\n                            if (allPolicies[n] === policyMappings[i + 1].mappings[k].subjectDomainPolicy)\n                                subjectDomainPolicyIndex = n;\n                        }\n                        if (typeof (policiesAndCerts[issuerDomainPolicyIndex])[i] !== \"undefined\")\n                            delete (policiesAndCerts[issuerDomainPolicyIndex])[i];\n                        for (let j = 0; j < certPolicies[i].certificatePolicies.length; j++) {\n                            if (policyMappings[i + 1].mappings[k].subjectDomainPolicy === certPolicies[i].certificatePolicies[j].policyIdentifier) {\n                                if ((issuerDomainPolicyIndex !== (-1)) && (subjectDomainPolicyIndex !== (-1))) {\n                                    for (let m = 0; m <= i; m++) {\n                                        if (typeof (policiesAndCerts[subjectDomainPolicyIndex])[m] !== \"undefined\") {\n                                            (policiesAndCerts[issuerDomainPolicyIndex])[m] = true;\n                                            delete (policiesAndCerts[subjectDomainPolicyIndex])[m];\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            for (let i = 0; i < allPolicies.length; i++) {\n                if (allPolicies[i] === id_AnyPolicy) {\n                    for (let j = 0; j < explicitPolicyStart; j++)\n                        delete (policiesAndCerts[i])[j];\n                }\n            }\n            const authConstrPolicies = [];\n            for (let i = 0; i < policiesAndCerts.length; i++) {\n                let found = true;\n                for (let j = 0; j < (this.certs.length - 1); j++) {\n                    let anyPolicyFound = false;\n                    if ((j < explicitPolicyStart) && (allPolicies[i] === id_AnyPolicy) && (allPolicies.length > 1)) {\n                        found = false;\n                        break;\n                    }\n                    if (typeof (policiesAndCerts[i])[j] === \"undefined\") {\n                        if (j >= explicitPolicyStart) {\n                            for (let k = 0; k < allPolicies.length; k++) {\n                                if (allPolicies[k] === id_AnyPolicy) {\n                                    if ((policiesAndCerts[k])[j] === true)\n                                        anyPolicyFound = true;\n                                    break;\n                                }\n                            }\n                        }\n                        if (!anyPolicyFound) {\n                            found = false;\n                            break;\n                        }\n                    }\n                }\n                if (found === true)\n                    authConstrPolicies.push(allPolicies[i]);\n            }\n            let userConstrPolicies = [];\n            if ((initialPolicySet.length === 1) && (initialPolicySet[0] === id_AnyPolicy) && (explicitPolicyIndicator === false))\n                userConstrPolicies = initialPolicySet;\n            else {\n                if ((authConstrPolicies.length === 1) && (authConstrPolicies[0] === id_AnyPolicy))\n                    userConstrPolicies = initialPolicySet;\n                else {\n                    for (let i = 0; i < authConstrPolicies.length; i++) {\n                        for (let j = 0; j < initialPolicySet.length; j++) {\n                            if ((initialPolicySet[j] === authConstrPolicies[i]) || (initialPolicySet[j] === id_AnyPolicy)) {\n                                userConstrPolicies.push(authConstrPolicies[i]);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            const policyResult = {\n                result: (userConstrPolicies.length > 0),\n                resultCode: 0,\n                resultMessage: (userConstrPolicies.length > 0) ? EMPTY_STRING : \"Zero \\\"userConstrPolicies\\\" array, no intersections with \\\"authConstrPolicies\\\"\",\n                authConstrPolicies,\n                userConstrPolicies,\n                explicitPolicyIndicator,\n                policyMappings,\n                certificatePath: this.certs\n            };\n            if (userConstrPolicies.length === 0)\n                return policyResult;\n            if (policyResult.result === false)\n                return policyResult;\n            pathDepth = 1;\n            for (let i = (this.certs.length - 2); i >= 0; i--, pathDepth++) {\n                const cert = this.certs[i];\n                let subjectAltNames = [];\n                let certPermittedSubtrees = [];\n                let certExcludedSubtrees = [];\n                if (cert.extensions) {\n                    for (let j = 0; j < cert.extensions.length; j++) {\n                        const extension = cert.extensions[j];\n                        if (extension.extnID === id_NameConstraints) {\n                            if (\"permittedSubtrees\" in extension.parsedValue)\n                                certPermittedSubtrees = certPermittedSubtrees.concat(extension.parsedValue.permittedSubtrees);\n                            if (\"excludedSubtrees\" in extension.parsedValue)\n                                certExcludedSubtrees = certExcludedSubtrees.concat(extension.parsedValue.excludedSubtrees);\n                        }\n                        if (extension.extnID === id_SubjectAltName)\n                            subjectAltNames = subjectAltNames.concat(extension.parsedValue.altNames);\n                    }\n                }\n                let formFound = (requiredNameForms.length <= 0);\n                for (let j = 0; j < requiredNameForms.length; j++) {\n                    switch (requiredNameForms[j].base.type) {\n                        case 4:\n                            {\n                                if (requiredNameForms[j].base.value.typesAndValues.length !== cert.subject.typesAndValues.length)\n                                    continue;\n                                formFound = true;\n                                for (let k = 0; k < cert.subject.typesAndValues.length; k++) {\n                                    if (cert.subject.typesAndValues[k].type !== requiredNameForms[j].base.value.typesAndValues[k].type) {\n                                        formFound = false;\n                                        break;\n                                    }\n                                }\n                                if (formFound === true)\n                                    break;\n                            }\n                            break;\n                        default:\n                    }\n                }\n                if (formFound === false) {\n                    policyResult.result = false;\n                    policyResult.resultCode = 21;\n                    policyResult.resultMessage = \"No necessary name form found\";\n                    throw policyResult;\n                }\n                const constrGroups = [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                ];\n                for (let j = 0; j < permittedSubtrees.length; j++) {\n                    switch (permittedSubtrees[j].base.type) {\n                        case 1:\n                            constrGroups[0].push(permittedSubtrees[j]);\n                            break;\n                        case 2:\n                            constrGroups[1].push(permittedSubtrees[j]);\n                            break;\n                        case 4:\n                            constrGroups[2].push(permittedSubtrees[j]);\n                            break;\n                        case 6:\n                            constrGroups[3].push(permittedSubtrees[j]);\n                            break;\n                        case 7:\n                            constrGroups[4].push(permittedSubtrees[j]);\n                            break;\n                        default:\n                    }\n                }\n                for (let p = 0; p < 5; p++) {\n                    let groupPermitted = false;\n                    let valueExists = false;\n                    const group = constrGroups[p];\n                    for (let j = 0; j < group.length; j++) {\n                        switch (p) {\n                            case 0:\n                                if (subjectAltNames.length > 0) {\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\n                                        if (subjectAltNames[k].type === 1) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareRFC822Name(subjectAltNames[k].value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                else {\n                                    for (let k = 0; k < cert.subject.typesAndValues.length; k++) {\n                                        if ((cert.subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||\n                                            (cert.subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareRFC822Name(cert.subject.typesAndValues[k].value.valueBlock.value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                break;\n                            case 1:\n                                if (subjectAltNames.length > 0) {\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\n                                        if (subjectAltNames[k].type === 2) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareDNSName(subjectAltNames[k].value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                break;\n                            case 2:\n                                valueExists = true;\n                                groupPermitted = compareDirectoryName(cert.subject, group[j].base.value);\n                                break;\n                            case 3:\n                                if (subjectAltNames.length > 0) {\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\n                                        if (subjectAltNames[k].type === 6) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareUniformResourceIdentifier(subjectAltNames[k].value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                break;\n                            case 4:\n                                if (subjectAltNames.length > 0) {\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\n                                        if (subjectAltNames[k].type === 7) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareIPAddress(subjectAltNames[k].value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                break;\n                            default:\n                        }\n                        if (groupPermitted)\n                            break;\n                    }\n                    if ((groupPermitted === false) && (group.length > 0) && valueExists) {\n                        policyResult.result = false;\n                        policyResult.resultCode = 41;\n                        policyResult.resultMessage = \"Failed to meet \\\"permitted sub-trees\\\" name constraint\";\n                        throw policyResult;\n                    }\n                }\n                let excluded = false;\n                for (let j = 0; j < excludedSubtrees.length; j++) {\n                    switch (excludedSubtrees[j].base.type) {\n                        case 1:\n                            if (subjectAltNames.length >= 0) {\n                                for (let k = 0; k < subjectAltNames.length; k++) {\n                                    if (subjectAltNames[k].type === 1)\n                                        excluded = excluded || compareRFC822Name(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            else {\n                                for (let k = 0; k < cert.subject.typesAndValues.length; k++) {\n                                    if ((cert.subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||\n                                        (cert.subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\"))\n                                        excluded = excluded || compareRFC822Name(cert.subject.typesAndValues[k].value.valueBlock.value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            break;\n                        case 2:\n                            if (subjectAltNames.length > 0) {\n                                for (let k = 0; k < subjectAltNames.length; k++) {\n                                    if (subjectAltNames[k].type === 2)\n                                        excluded = excluded || compareDNSName(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            break;\n                        case 4:\n                            excluded = excluded || compareDirectoryName(cert.subject, excludedSubtrees[j].base.value);\n                            break;\n                        case 6:\n                            if (subjectAltNames.length > 0) {\n                                for (let k = 0; k < subjectAltNames.length; k++) {\n                                    if (subjectAltNames[k].type === 6)\n                                        excluded = excluded || compareUniformResourceIdentifier(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            break;\n                        case 7:\n                            if (subjectAltNames.length > 0) {\n                                for (let k = 0; k < subjectAltNames.length; k++) {\n                                    if (subjectAltNames[k].type === 7)\n                                        excluded = excluded || compareIPAddress(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            break;\n                        default:\n                    }\n                    if (excluded)\n                        break;\n                }\n                if (excluded === true) {\n                    policyResult.result = false;\n                    policyResult.resultCode = 42;\n                    policyResult.resultMessage = \"Failed to meet \\\"excluded sub-trees\\\" name constraint\";\n                    throw policyResult;\n                }\n                permittedSubtrees = permittedSubtrees.concat(certPermittedSubtrees);\n                excludedSubtrees = excludedSubtrees.concat(certExcludedSubtrees);\n            }\n            return policyResult;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                if (error instanceof ChainValidationError) {\n                    return {\n                        result: false,\n                        resultCode: error.code,\n                        resultMessage: error.message,\n                        error: error,\n                    };\n                }\n                return {\n                    result: false,\n                    resultCode: ChainValidationCode.unknown,\n                    resultMessage: error.message,\n                    error: error,\n                };\n            }\n            if (error && typeof error === \"object\" && \"resultMessage\" in error) {\n                return error;\n            }\n            return {\n                result: false,\n                resultCode: -1,\n                resultMessage: `${error}`,\n            };\n        }\n    }\n}\n\nconst TBS_RESPONSE_DATA = \"tbsResponseData\";\nconst SIGNATURE_ALGORITHM$3 = \"signatureAlgorithm\";\nconst SIGNATURE$2 = \"signature\";\nconst CERTS$1 = \"certs\";\nconst BASIC_OCSP_RESPONSE = \"BasicOCSPResponse\";\nconst BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA = `${BASIC_OCSP_RESPONSE}.${TBS_RESPONSE_DATA}`;\nconst BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM = `${BASIC_OCSP_RESPONSE}.${SIGNATURE_ALGORITHM$3}`;\nconst BASIC_OCSP_RESPONSE_SIGNATURE = `${BASIC_OCSP_RESPONSE}.${SIGNATURE$2}`;\nconst BASIC_OCSP_RESPONSE_CERTS = `${BASIC_OCSP_RESPONSE}.${CERTS$1}`;\nconst CLEAR_PROPS$g = [\n    BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA,\n    BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM,\n    BASIC_OCSP_RESPONSE_SIGNATURE,\n    BASIC_OCSP_RESPONSE_CERTS\n];\nclass BasicOCSPResponse extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.tbsResponseData = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TBS_RESPONSE_DATA, BasicOCSPResponse.defaultValues(TBS_RESPONSE_DATA));\n        this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_ALGORITHM$3, BasicOCSPResponse.defaultValues(SIGNATURE_ALGORITHM$3));\n        this.signature = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE$2, BasicOCSPResponse.defaultValues(SIGNATURE$2));\n        if (CERTS$1 in parameters) {\n            this.certs = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERTS$1, BasicOCSPResponse.defaultValues(CERTS$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS_RESPONSE_DATA:\n                return new ResponseData();\n            case SIGNATURE_ALGORITHM$3:\n                return new AlgorithmIdentifier();\n            case SIGNATURE$2:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            case CERTS$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case \"type\":\n                {\n                    let comparisonResult = ((ResponseData.compareWithDefault(\"tbs\", memberValue.tbs)) &&\n                        (ResponseData.compareWithDefault(\"responderID\", memberValue.responderID)) &&\n                        (ResponseData.compareWithDefault(\"producedAt\", memberValue.producedAt)) &&\n                        (ResponseData.compareWithDefault(\"responses\", memberValue.responses)));\n                    if (\"responseExtensions\" in memberValue)\n                        comparisonResult = comparisonResult && (ResponseData.compareWithDefault(\"responseExtensions\", memberValue.responseExtensions));\n                    return comparisonResult;\n                }\n            case SIGNATURE_ALGORITHM$3:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case SIGNATURE$2:\n                return (memberValue.isEqual(BasicOCSPResponse.defaultValues(memberName)));\n            case CERTS$1:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || BASIC_OCSP_RESPONSE),\n            value: [\n                ResponseData.schema(names.tbsResponseData || {\n                    names: {\n                        blockName: BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA\n                    }\n                }),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n                    names: {\n                        blockName: BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.signature || BASIC_OCSP_RESPONSE_SIGNATURE) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                            value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                                    name: BASIC_OCSP_RESPONSE_CERTS,\n                                    value: Certificate.schema(names.certs || {})\n                                })]\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$g);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, BasicOCSPResponse.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsResponseData = new ResponseData({ schema: asn1.result[BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA] });\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM] });\n        this.signature = asn1.result[BASIC_OCSP_RESPONSE_SIGNATURE];\n        if (BASIC_OCSP_RESPONSE_CERTS in asn1.result) {\n            this.certs = Array.from(asn1.result[BASIC_OCSP_RESPONSE_CERTS], element => new Certificate({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.tbsResponseData.toSchema());\n        outputArray.push(this.signatureAlgorithm.toSchema());\n        outputArray.push(this.signature);\n        if (this.certs) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                        value: Array.from(this.certs, o => o.toSchema())\n                    })\n                ]\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            tbsResponseData: this.tbsResponseData.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signature: this.signature.toJSON(),\n        };\n        if (this.certs) {\n            res.certs = Array.from(this.certs, o => o.toJSON());\n        }\n        return res;\n    }\n    async getCertificateStatus(certificate, issuerCertificate, crypto = getCrypto(true)) {\n        const result = {\n            isForCertificate: false,\n            status: 2\n        };\n        const hashesObject = {};\n        const certIDs = [];\n        for (const response of this.tbsResponseData.responses) {\n            const hashAlgorithm = crypto.getAlgorithmByOID(response.certID.hashAlgorithm.algorithmId, true, \"CertID.hashAlgorithm\");\n            if (!hashesObject[hashAlgorithm.name]) {\n                hashesObject[hashAlgorithm.name] = 1;\n                const certID = new CertID();\n                certIDs.push(certID);\n                await certID.createForCertificate(certificate, {\n                    hashAlgorithm: hashAlgorithm.name,\n                    issuerCertificate\n                }, crypto);\n            }\n        }\n        for (const response of this.tbsResponseData.responses) {\n            for (const id of certIDs) {\n                if (response.certID.isEqual(id)) {\n                    result.isForCertificate = true;\n                    try {\n                        switch (response.certStatus.idBlock.isConstructed) {\n                            case true:\n                                if (response.certStatus.idBlock.tagNumber === 1)\n                                    result.status = 1;\n                                break;\n                            case false:\n                                switch (response.certStatus.idBlock.tagNumber) {\n                                    case 0:\n                                        result.status = 0;\n                                        break;\n                                    case 2:\n                                        result.status = 2;\n                                        break;\n                                    default:\n                                }\n                                break;\n                            default:\n                        }\n                    }\n                    catch (ex) {\n                    }\n                    return result;\n                }\n            }\n        }\n        return result;\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        if (!privateKey) {\n            throw new Error(\"Need to provide a private key for signing\");\n        }\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const algorithm = signatureParams.parameters.algorithm;\n        if (!(\"name\" in algorithm)) {\n            throw new Error(\"Empty algorithm\");\n        }\n        this.signatureAlgorithm = signatureParams.signatureAlgorithm;\n        this.tbsResponseData.tbsView = new Uint8Array(this.tbsResponseData.toSchema(true).toBER());\n        const signature = await crypto.signWithPrivateKey(this.tbsResponseData.tbsView, privateKey, { algorithm });\n        this.signature = new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ valueHex: signature });\n    }\n    async verify(params = {}, crypto = getCrypto(true)) {\n        let signerCert = null;\n        let certIndex = -1;\n        const trustedCerts = params.trustedCerts || [];\n        if (!this.certs) {\n            throw new Error(\"No certificates attached to the BasicOCSPResponse\");\n        }\n        switch (true) {\n            case (this.tbsResponseData.responderID instanceof RelativeDistinguishedNames):\n                for (const [index, certificate] of this.certs.entries()) {\n                    if (certificate.subject.isEqual(this.tbsResponseData.responderID)) {\n                        certIndex = index;\n                        break;\n                    }\n                }\n                break;\n            case (this.tbsResponseData.responderID instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString):\n                for (const [index, cert] of this.certs.entries()) {\n                    const hash = await crypto.digest({ name: \"sha-1\" }, cert.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);\n                    if (pvutils__WEBPACK_IMPORTED_MODULE_2__.isEqualBuffer(hash, this.tbsResponseData.responderID.valueBlock.valueHex)) {\n                        certIndex = index;\n                        break;\n                    }\n                }\n                break;\n            default:\n                throw new Error(\"Wrong value for responderID\");\n        }\n        if (certIndex === (-1))\n            throw new Error(\"Correct certificate was not found in OCSP response\");\n        signerCert = this.certs[certIndex];\n        const additionalCerts = [signerCert];\n        for (const cert of this.certs) {\n            const caCert = await checkCA(cert, signerCert);\n            if (caCert) {\n                additionalCerts.push(caCert);\n            }\n        }\n        const certChain = new CertificateChainValidationEngine({\n            certs: additionalCerts,\n            trustedCerts,\n        });\n        const verificationResult = await certChain.verify({}, crypto);\n        if (!verificationResult.result) {\n            throw new Error(\"Validation of signer's certificate failed\");\n        }\n        return crypto.verifyWithPublicKey(this.tbsResponseData.tbsView, this.signature, this.certs[certIndex].subjectPublicKeyInfo, this.signatureAlgorithm);\n    }\n}\nBasicOCSPResponse.CLASS_NAME = \"BasicOCSPResponse\";\n\nconst TBS$1 = \"tbs\";\nconst VERSION$6 = \"version\";\nconst SUBJECT = \"subject\";\nconst SPKI = \"subjectPublicKeyInfo\";\nconst ATTRIBUTES$1 = \"attributes\";\nconst SIGNATURE_ALGORITHM$2 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE = \"signatureValue\";\nconst CSR_INFO = \"CertificationRequestInfo\";\nconst CSR_INFO_VERSION = `${CSR_INFO}.version`;\nconst CSR_INFO_SUBJECT = `${CSR_INFO}.subject`;\nconst CSR_INFO_SPKI = `${CSR_INFO}.subjectPublicKeyInfo`;\nconst CSR_INFO_ATTRS = `${CSR_INFO}.attributes`;\nconst CLEAR_PROPS$f = [\n    CSR_INFO,\n    CSR_INFO_VERSION,\n    CSR_INFO_SUBJECT,\n    CSR_INFO_SPKI,\n    CSR_INFO_ATTRS,\n    SIGNATURE_ALGORITHM$2,\n    SIGNATURE_VALUE\n];\nfunction CertificationRequestInfo(parameters = {}) {\n    const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n    return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n        name: (names.CertificationRequestInfo || CSR_INFO),\n        value: [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.CertificationRequestInfoVersion || CSR_INFO_VERSION) }),\n            RelativeDistinguishedNames.schema(names.subject || {\n                names: {\n                    blockName: CSR_INFO_SUBJECT\n                }\n            }),\n            PublicKeyInfo.schema({\n                names: {\n                    blockName: CSR_INFO_SPKI\n                }\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                        optional: true,\n                        name: (names.CertificationRequestInfoAttributes || CSR_INFO_ATTRS),\n                        value: Attribute.schema(names.attributes || {})\n                    })\n                ]\n            })\n        ]\n    }));\n}\nclass CertificationRequest extends PkiObject {\n    get tbs() {\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TBS$1, CertificationRequest.defaultValues(TBS$1)));\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$6, CertificationRequest.defaultValues(VERSION$6));\n        this.subject = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SUBJECT, CertificationRequest.defaultValues(SUBJECT));\n        this.subjectPublicKeyInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SPKI, CertificationRequest.defaultValues(SPKI));\n        if (ATTRIBUTES$1 in parameters) {\n            this.attributes = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ATTRIBUTES$1, CertificationRequest.defaultValues(ATTRIBUTES$1));\n        }\n        this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_ALGORITHM$2, CertificationRequest.defaultValues(SIGNATURE_ALGORITHM$2));\n        this.signatureValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_VALUE, CertificationRequest.defaultValues(SIGNATURE_VALUE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS$1:\n                return EMPTY_BUFFER;\n            case VERSION$6:\n                return 0;\n            case SUBJECT:\n                return new RelativeDistinguishedNames();\n            case SPKI:\n                return new PublicKeyInfo();\n            case ATTRIBUTES$1:\n                return [];\n            case SIGNATURE_ALGORITHM$2:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                CertificationRequestInfo(names.certificationRequestInfo || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    name: (names.signatureAlgorithm || SIGNATURE_ALGORITHM$2),\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier(),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ optional: true })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.signatureValue || SIGNATURE_VALUE) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$f);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, CertificationRequest.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.CertificationRequestInfo.valueBeforeDecodeView;\n        this.version = asn1.result[CSR_INFO_VERSION].valueBlock.valueDec;\n        this.subject = new RelativeDistinguishedNames({ schema: asn1.result[CSR_INFO_SUBJECT] });\n        this.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[CSR_INFO_SPKI] });\n        if (CSR_INFO_ATTRS in asn1.result) {\n            this.attributes = Array.from(asn1.result[CSR_INFO_ATTRS], element => new Attribute({ schema: element }));\n        }\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    encodeTBS() {\n        const outputArray = [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }),\n            this.subject.toSchema(),\n            this.subjectPublicKeyInfo.toSchema()\n        ];\n        if (ATTRIBUTES$1 in this) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: Array.from(this.attributes || [], o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (encodeFlag === false) {\n            if (this.tbsView.byteLength === 0) {\n                return CertificationRequest.schema();\n            }\n            const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"PKCS#10 Certificate Request\");\n            tbsSchema = asn1.result;\n        }\n        else {\n            tbsSchema = this.encodeTBS();\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                tbsSchema,\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        const object = {\n            tbs: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToHex(this.tbsView),\n            version: this.version,\n            subject: this.subject.toJSON(),\n            subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON(),\n        };\n        if (ATTRIBUTES$1 in this) {\n            object.attributes = Array.from(this.attributes || [], o => o.toJSON());\n        }\n        return object;\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        if (!privateKey) {\n            throw new Error(\"Need to provide a private key for signing\");\n        }\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const parameters = signatureParams.parameters;\n        this.signatureAlgorithm = signatureParams.signatureAlgorithm;\n        this.tbsView = new Uint8Array(this.encodeTBS().toBER());\n        const signature = await crypto.signWithPrivateKey(this.tbsView, privateKey, parameters);\n        this.signatureValue = new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ valueHex: signature });\n    }\n    async verify(crypto = getCrypto(true)) {\n        return crypto.verifyWithPublicKey(this.tbsView, this.signatureValue, this.subjectPublicKeyInfo, this.signatureAlgorithm);\n    }\n    async getPublicKey(parameters, crypto = getCrypto(true)) {\n        return crypto.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\n    }\n}\nCertificationRequest.CLASS_NAME = \"CertificationRequest\";\n\nconst DIGEST_ALGORITHM$1 = \"digestAlgorithm\";\nconst DIGEST = \"digest\";\nconst CLEAR_PROPS$e = [\n    DIGEST_ALGORITHM$1,\n    DIGEST\n];\nclass DigestInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.digestAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DIGEST_ALGORITHM$1, DigestInfo.defaultValues(DIGEST_ALGORITHM$1));\n        this.digest = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DIGEST, DigestInfo.defaultValues(DIGEST));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DIGEST_ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case DIGEST:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case DIGEST_ALGORITHM$1:\n                return ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\n                    ((\"algorithmParams\" in memberValue) === false));\n            case DIGEST:\n                return (memberValue.isEqual(DigestInfo.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.digestAlgorithm || {\n                    names: {\n                        blockName: DIGEST_ALGORITHM$1\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.digest || DIGEST) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$e);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, DigestInfo.schema({\n            names: {\n                digestAlgorithm: {\n                    names: {\n                        blockName: DIGEST_ALGORITHM$1\n                    }\n                },\n                digest: DIGEST\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\n        this.digest = asn1.result.digest;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.digestAlgorithm.toSchema(),\n                this.digest\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            digestAlgorithm: this.digestAlgorithm.toJSON(),\n            digest: this.digest.toJSON(),\n        };\n    }\n}\nDigestInfo.CLASS_NAME = \"DigestInfo\";\n\nconst E_CONTENT_TYPE = \"eContentType\";\nconst E_CONTENT = \"eContent\";\nconst CLEAR_PROPS$d = [\n    E_CONTENT_TYPE,\n    E_CONTENT,\n];\nclass EncapsulatedContentInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.eContentType = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, E_CONTENT_TYPE, EncapsulatedContentInfo.defaultValues(E_CONTENT_TYPE));\n        if (E_CONTENT in parameters) {\n            this.eContent = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, E_CONTENT, EncapsulatedContentInfo.defaultValues(E_CONTENT));\n            if ((this.eContent.idBlock.tagClass === 1) &&\n                (this.eContent.idBlock.tagNumber === 4)) {\n                if (this.eContent.idBlock.isConstructed === false) {\n                    const constrString = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({\n                        idBlock: { isConstructed: true },\n                        isConstructed: true\n                    });\n                    let offset = 0;\n                    const viewHex = this.eContent.valueBlock.valueHexView.slice().buffer;\n                    let length = viewHex.byteLength;\n                    while (length > 0) {\n                        const pieceView = new Uint8Array(viewHex, offset, ((offset + 65536) > viewHex.byteLength) ? (viewHex.byteLength - offset) : 65536);\n                        const _array = new ArrayBuffer(pieceView.length);\n                        const _view = new Uint8Array(_array);\n                        for (let i = 0; i < _view.length; i++) {\n                            _view[i] = pieceView[i];\n                        }\n                        constrString.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: _array }));\n                        length -= pieceView.length;\n                        offset += pieceView.length;\n                    }\n                    this.eContent = constrString;\n                }\n            }\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case E_CONTENT_TYPE:\n                return EMPTY_STRING;\n            case E_CONTENT:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case E_CONTENT_TYPE:\n                return (memberValue === EMPTY_STRING);\n            case E_CONTENT:\n                {\n                    if ((memberValue.idBlock.tagClass === 1) && (memberValue.idBlock.tagNumber === 4))\n                        return (memberValue.isEqual(EncapsulatedContentInfo.defaultValues(E_CONTENT)));\n                    return false;\n                }\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.eContentType || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.eContent || EMPTY_STRING) })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$d);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, EncapsulatedContentInfo.schema({\n            names: {\n                eContentType: E_CONTENT_TYPE,\n                eContent: E_CONTENT\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.eContentType = asn1.result.eContentType.valueBlock.toString();\n        if (E_CONTENT in asn1.result)\n            this.eContent = asn1.result.eContent;\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.eContentType }));\n        if (this.eContent) {\n            if (EncapsulatedContentInfo.compareWithDefault(E_CONTENT, this.eContent) === false) {\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [this.eContent]\n                }));\n            }\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            eContentType: this.eContentType\n        };\n        if (this.eContent && EncapsulatedContentInfo.compareWithDefault(E_CONTENT, this.eContent) === false) {\n            res.eContent = this.eContent.toJSON();\n        }\n        return res;\n    }\n}\nEncapsulatedContentInfo.CLASS_NAME = \"EncapsulatedContentInfo\";\n\nclass KeyBag extends PrivateKeyInfo {\n    constructor(parameters = {}) {\n        super(parameters);\n    }\n}\n\nconst MAC = \"mac\";\nconst MAC_SALT = \"macSalt\";\nconst ITERATIONS = \"iterations\";\nconst CLEAR_PROPS$c = [\n    MAC,\n    MAC_SALT,\n    ITERATIONS\n];\nclass MacData extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.mac = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MAC, MacData.defaultValues(MAC));\n        this.macSalt = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MAC_SALT, MacData.defaultValues(MAC_SALT));\n        if (ITERATIONS in parameters) {\n            this.iterations = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ITERATIONS, MacData.defaultValues(ITERATIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case MAC:\n                return new DigestInfo();\n            case MAC_SALT:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case ITERATIONS:\n                return 1;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case MAC:\n                return ((DigestInfo.compareWithDefault(\"digestAlgorithm\", memberValue.digestAlgorithm)) &&\n                    (DigestInfo.compareWithDefault(\"digest\", memberValue.digest)));\n            case MAC_SALT:\n                return (memberValue.isEqual(MacData.defaultValues(memberName)));\n            case ITERATIONS:\n                return (memberValue === MacData.defaultValues(memberName));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            optional: (names.optional || true),\n            value: [\n                DigestInfo.schema(names.mac || {\n                    names: {\n                        blockName: MAC\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.macSalt || MAC_SALT) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n                    optional: true,\n                    name: (names.iterations || ITERATIONS)\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$c);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, MacData.schema({\n            names: {\n                mac: {\n                    names: {\n                        blockName: MAC\n                    }\n                },\n                macSalt: MAC_SALT,\n                iterations: ITERATIONS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.mac = new DigestInfo({ schema: asn1.result.mac });\n        this.macSalt = asn1.result.macSalt;\n        if (ITERATIONS in asn1.result)\n            this.iterations = asn1.result.iterations.valueBlock.valueDec;\n    }\n    toSchema() {\n        const outputArray = [\n            this.mac.toSchema(),\n            this.macSalt\n        ];\n        if (this.iterations !== undefined) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.iterations }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            mac: this.mac.toJSON(),\n            macSalt: this.macSalt.toJSON(),\n        };\n        if (this.iterations !== undefined) {\n            res.iterations = this.iterations;\n        }\n        return res;\n    }\n}\nMacData.CLASS_NAME = \"MacData\";\n\nconst HASH_ALGORITHM = \"hashAlgorithm\";\nconst HASHED_MESSAGE = \"hashedMessage\";\nconst CLEAR_PROPS$b = [\n    HASH_ALGORITHM,\n    HASHED_MESSAGE,\n];\nclass MessageImprint extends PkiObject {\n    static async create(hashAlgorithm, message, crypto = getCrypto(true)) {\n        const hashAlgorithmOID = crypto.getOIDByAlgorithm({ name: hashAlgorithm }, true, \"hashAlgorithm\");\n        const hashedMessage = await crypto.digest(hashAlgorithm, message);\n        const res = new MessageImprint({\n            hashAlgorithm: new AlgorithmIdentifier({\n                algorithmId: hashAlgorithmOID,\n                algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null(),\n            }),\n            hashedMessage: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: hashedMessage })\n        });\n        return res;\n    }\n    constructor(parameters = {}) {\n        super();\n        this.hashAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, HASH_ALGORITHM, MessageImprint.defaultValues(HASH_ALGORITHM));\n        this.hashedMessage = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, HASHED_MESSAGE, MessageImprint.defaultValues(HASHED_MESSAGE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case HASH_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case HASHED_MESSAGE:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case HASH_ALGORITHM:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case HASHED_MESSAGE:\n                return (memberValue.isEqual(MessageImprint.defaultValues(memberName)) === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.hashAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.hashedMessage || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$b);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, MessageImprint.schema({\n            names: {\n                hashAlgorithm: {\n                    names: {\n                        blockName: HASH_ALGORITHM\n                    }\n                },\n                hashedMessage: HASHED_MESSAGE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\n        this.hashedMessage = asn1.result.hashedMessage;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.hashAlgorithm.toSchema(),\n                this.hashedMessage\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            hashAlgorithm: this.hashAlgorithm.toJSON(),\n            hashedMessage: this.hashedMessage.toJSON(),\n        };\n    }\n}\nMessageImprint.CLASS_NAME = \"MessageImprint\";\n\nconst REQ_CERT = \"reqCert\";\nconst SINGLE_REQUEST_EXTENSIONS = \"singleRequestExtensions\";\nconst CLEAR_PROPS$a = [\n    REQ_CERT,\n    SINGLE_REQUEST_EXTENSIONS,\n];\nclass Request extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.reqCert = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, REQ_CERT, Request.defaultValues(REQ_CERT));\n        if (SINGLE_REQUEST_EXTENSIONS in parameters) {\n            this.singleRequestExtensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SINGLE_REQUEST_EXTENSIONS, Request.defaultValues(SINGLE_REQUEST_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case REQ_CERT:\n                return new CertID();\n            case SINGLE_REQUEST_EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case REQ_CERT:\n                return (memberValue.isEqual(Request.defaultValues(memberName)));\n            case SINGLE_REQUEST_EXTENSIONS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                CertID.schema(names.reqCert || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [Extension.schema(names.extensions || {\n                            names: {\n                                blockName: (names.singleRequestExtensions || EMPTY_STRING)\n                            }\n                        })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$a);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, Request.schema({\n            names: {\n                reqCert: {\n                    names: {\n                        blockName: REQ_CERT\n                    }\n                },\n                extensions: {\n                    names: {\n                        blockName: SINGLE_REQUEST_EXTENSIONS\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.reqCert = new CertID({ schema: asn1.result.reqCert });\n        if (SINGLE_REQUEST_EXTENSIONS in asn1.result) {\n            this.singleRequestExtensions = Array.from(asn1.result.singleRequestExtensions.valueBlock.value, element => new Extension({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.reqCert.toSchema());\n        if (this.singleRequestExtensions) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                        value: Array.from(this.singleRequestExtensions, o => o.toSchema())\n                    })\n                ]\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            reqCert: this.reqCert.toJSON()\n        };\n        if (this.singleRequestExtensions) {\n            res.singleRequestExtensions = Array.from(this.singleRequestExtensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nRequest.CLASS_NAME = \"Request\";\n\nconst TBS = \"tbs\";\nconst VERSION$5 = \"version\";\nconst REQUESTOR_NAME = \"requestorName\";\nconst REQUEST_LIST = \"requestList\";\nconst REQUEST_EXTENSIONS = \"requestExtensions\";\nconst TBS_REQUEST$1 = \"TBSRequest\";\nconst TBS_REQUEST_VERSION = `${TBS_REQUEST$1}.${VERSION$5}`;\nconst TBS_REQUEST_REQUESTOR_NAME = `${TBS_REQUEST$1}.${REQUESTOR_NAME}`;\nconst TBS_REQUEST_REQUESTS = `${TBS_REQUEST$1}.requests`;\nconst TBS_REQUEST_REQUEST_EXTENSIONS = `${TBS_REQUEST$1}.${REQUEST_EXTENSIONS}`;\nconst CLEAR_PROPS$9 = [\n    TBS_REQUEST$1,\n    TBS_REQUEST_VERSION,\n    TBS_REQUEST_REQUESTOR_NAME,\n    TBS_REQUEST_REQUESTS,\n    TBS_REQUEST_REQUEST_EXTENSIONS\n];\nclass TBSRequest extends PkiObject {\n    get tbs() {\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TBS, TBSRequest.defaultValues(TBS)));\n        if (VERSION$5 in parameters) {\n            this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$5, TBSRequest.defaultValues(VERSION$5));\n        }\n        if (REQUESTOR_NAME in parameters) {\n            this.requestorName = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, REQUESTOR_NAME, TBSRequest.defaultValues(REQUESTOR_NAME));\n        }\n        this.requestList = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, REQUEST_LIST, TBSRequest.defaultValues(REQUEST_LIST));\n        if (REQUEST_EXTENSIONS in parameters) {\n            this.requestExtensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, REQUEST_EXTENSIONS, TBSRequest.defaultValues(REQUEST_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS:\n                return EMPTY_BUFFER;\n            case VERSION$5:\n                return 0;\n            case REQUESTOR_NAME:\n                return new GeneralName();\n            case REQUEST_LIST:\n            case REQUEST_EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TBS:\n                return (memberValue.byteLength === 0);\n            case VERSION$5:\n                return (memberValue === TBSRequest.defaultValues(memberName));\n            case REQUESTOR_NAME:\n                return ((memberValue.type === GeneralName.defaultValues(\"type\")) && (Object.keys(memberValue.value).length === 0));\n            case REQUEST_LIST:\n            case REQUEST_EXTENSIONS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || TBS_REQUEST$1),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.TBSRequestVersion || TBS_REQUEST_VERSION) })]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [GeneralName.schema(names.requestorName || {\n                            names: {\n                                blockName: TBS_REQUEST_REQUESTOR_NAME\n                            }\n                        })]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    name: (names.requestList || \"TBSRequest.requestList\"),\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.requests || TBS_REQUEST_REQUESTS),\n                            value: Request.schema(names.requestNames || {})\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [Extensions.schema(names.extensions || {\n                            names: {\n                                blockName: (names.requestExtensions || TBS_REQUEST_REQUEST_EXTENSIONS)\n                            }\n                        })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$9);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, TBSRequest.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.TBSRequest.valueBeforeDecodeView;\n        if (TBS_REQUEST_VERSION in asn1.result)\n            this.version = asn1.result[TBS_REQUEST_VERSION].valueBlock.valueDec;\n        if (TBS_REQUEST_REQUESTOR_NAME in asn1.result)\n            this.requestorName = new GeneralName({ schema: asn1.result[TBS_REQUEST_REQUESTOR_NAME] });\n        this.requestList = Array.from(asn1.result[TBS_REQUEST_REQUESTS], element => new Request({ schema: element }));\n        if (TBS_REQUEST_REQUEST_EXTENSIONS in asn1.result)\n            this.requestExtensions = Array.from(asn1.result[TBS_REQUEST_REQUEST_EXTENSIONS].valueBlock.value, element => new Extension({ schema: element }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (encodeFlag === false) {\n            if (this.tbsView.byteLength === 0)\n                return TBSRequest.schema();\n            const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"TBS Request\");\n            if (!(asn1.result instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence)) {\n                throw new Error(\"ASN.1 result should be SEQUENCE\");\n            }\n            tbsSchema = asn1.result;\n        }\n        else {\n            const outputArray = [];\n            if (this.version !== undefined) {\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version })]\n                }));\n            }\n            if (this.requestorName) {\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [this.requestorName.toSchema()]\n                }));\n            }\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: Array.from(this.requestList, o => o.toSchema())\n            }));\n            if (this.requestExtensions) {\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                            value: Array.from(this.requestExtensions, o => o.toSchema())\n                        })\n                    ]\n                }));\n            }\n            tbsSchema = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: outputArray\n            });\n        }\n        return tbsSchema;\n    }\n    toJSON() {\n        const res = {};\n        if (this.version != undefined)\n            res.version = this.version;\n        if (this.requestorName) {\n            res.requestorName = this.requestorName.toJSON();\n        }\n        res.requestList = Array.from(this.requestList, o => o.toJSON());\n        if (this.requestExtensions) {\n            res.requestExtensions = Array.from(this.requestExtensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nTBSRequest.CLASS_NAME = \"TBSRequest\";\n\nconst SIGNATURE_ALGORITHM$1 = \"signatureAlgorithm\";\nconst SIGNATURE$1 = \"signature\";\nconst CERTS = \"certs\";\nclass Signature extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_ALGORITHM$1, Signature.defaultValues(SIGNATURE_ALGORITHM$1));\n        this.signature = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE$1, Signature.defaultValues(SIGNATURE$1));\n        if (CERTS in parameters) {\n            this.certs = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERTS, Signature.defaultValues(CERTS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SIGNATURE_ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case SIGNATURE$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            case CERTS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SIGNATURE_ALGORITHM$1:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case SIGNATURE$1:\n                return (memberValue.isEqual(Signature.defaultValues(memberName)));\n            case CERTS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.signature || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                            value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                                    name: (names.certs || EMPTY_STRING),\n                                    value: Certificate.schema({})\n                                })]\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            SIGNATURE_ALGORITHM$1,\n            SIGNATURE$1,\n            CERTS\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, Signature.schema({\n            names: {\n                signatureAlgorithm: {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$1\n                    }\n                },\n                signature: SIGNATURE$1,\n                certs: CERTS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signature = asn1.result.signature;\n        if (CERTS in asn1.result)\n            this.certs = Array.from(asn1.result.certs, element => new Certificate({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.signatureAlgorithm.toSchema());\n        outputArray.push(this.signature);\n        if (this.certs) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                        value: Array.from(this.certs, o => o.toSchema())\n                    })\n                ]\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signature: this.signature.toJSON(),\n        };\n        if (this.certs) {\n            res.certs = Array.from(this.certs, o => o.toJSON());\n        }\n        return res;\n    }\n}\nSignature.CLASS_NAME = \"Signature\";\n\nconst TBS_REQUEST = \"tbsRequest\";\nconst OPTIONAL_SIGNATURE = \"optionalSignature\";\nconst CLEAR_PROPS$8 = [\n    TBS_REQUEST,\n    OPTIONAL_SIGNATURE\n];\nclass OCSPRequest extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.tbsRequest = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TBS_REQUEST, OCSPRequest.defaultValues(TBS_REQUEST));\n        if (OPTIONAL_SIGNATURE in parameters) {\n            this.optionalSignature = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OPTIONAL_SIGNATURE, OCSPRequest.defaultValues(OPTIONAL_SIGNATURE));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS_REQUEST:\n                return new TBSRequest();\n            case OPTIONAL_SIGNATURE:\n                return new Signature();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TBS_REQUEST:\n                return ((TBSRequest.compareWithDefault(\"tbs\", memberValue.tbs)) &&\n                    (TBSRequest.compareWithDefault(\"version\", memberValue.version)) &&\n                    (TBSRequest.compareWithDefault(\"requestorName\", memberValue.requestorName)) &&\n                    (TBSRequest.compareWithDefault(\"requestList\", memberValue.requestList)) &&\n                    (TBSRequest.compareWithDefault(\"requestExtensions\", memberValue.requestExtensions)));\n            case OPTIONAL_SIGNATURE:\n                return ((Signature.compareWithDefault(\"signatureAlgorithm\", memberValue.signatureAlgorithm)) &&\n                    (Signature.compareWithDefault(\"signature\", memberValue.signature)) &&\n                    (Signature.compareWithDefault(\"certs\", memberValue.certs)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: names.blockName || \"OCSPRequest\",\n            value: [\n                TBSRequest.schema(names.tbsRequest || {\n                    names: {\n                        blockName: TBS_REQUEST\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        Signature.schema(names.optionalSignature || {\n                            names: {\n                                blockName: OPTIONAL_SIGNATURE\n                            }\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$8);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OCSPRequest.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsRequest = new TBSRequest({ schema: asn1.result.tbsRequest });\n        if (OPTIONAL_SIGNATURE in asn1.result)\n            this.optionalSignature = new Signature({ schema: asn1.result.optionalSignature });\n    }\n    toSchema(encodeFlag = false) {\n        const outputArray = [];\n        outputArray.push(this.tbsRequest.toSchema(encodeFlag));\n        if (this.optionalSignature)\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    this.optionalSignature.toSchema()\n                ]\n            }));\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            tbsRequest: this.tbsRequest.toJSON()\n        };\n        if (this.optionalSignature) {\n            res.optionalSignature = this.optionalSignature.toJSON();\n        }\n        return res;\n    }\n    async createForCertificate(certificate, parameters, crypto = getCrypto(true)) {\n        const certID = new CertID();\n        await certID.createForCertificate(certificate, parameters, crypto);\n        this.tbsRequest.requestList.push(new Request({\n            reqCert: certID,\n        }));\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        ParameterError.assertEmpty(privateKey, \"privateKey\", \"OCSPRequest.sign method\");\n        if (!this.optionalSignature) {\n            throw new Error(\"Need to create \\\"optionalSignature\\\" field before signing\");\n        }\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const parameters = signatureParams.parameters;\n        this.optionalSignature.signatureAlgorithm = signatureParams.signatureAlgorithm;\n        const tbs = this.tbsRequest.toSchema(true).toBER(false);\n        const signature = await crypto.signWithPrivateKey(tbs, privateKey, parameters);\n        this.optionalSignature.signature = new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ valueHex: signature });\n    }\n    verify() {\n    }\n}\nOCSPRequest.CLASS_NAME = \"OCSPRequest\";\n\nconst RESPONSE_TYPE = \"responseType\";\nconst RESPONSE = \"response\";\nconst CLEAR_PROPS$7 = [\n    RESPONSE_TYPE,\n    RESPONSE\n];\nclass ResponseBytes extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.responseType = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RESPONSE_TYPE, ResponseBytes.defaultValues(RESPONSE_TYPE));\n        this.response = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RESPONSE, ResponseBytes.defaultValues(RESPONSE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case RESPONSE_TYPE:\n                return EMPTY_STRING;\n            case RESPONSE:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case RESPONSE_TYPE:\n                return (memberValue === EMPTY_STRING);\n            case RESPONSE:\n                return (memberValue.isEqual(ResponseBytes.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.responseType || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.response || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$7);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, ResponseBytes.schema({\n            names: {\n                responseType: RESPONSE_TYPE,\n                response: RESPONSE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.responseType = asn1.result.responseType.valueBlock.toString();\n        this.response = asn1.result.response;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.responseType }),\n                this.response\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            responseType: this.responseType,\n            response: this.response.toJSON(),\n        };\n    }\n}\nResponseBytes.CLASS_NAME = \"ResponseBytes\";\n\nconst RESPONSE_STATUS = \"responseStatus\";\nconst RESPONSE_BYTES = \"responseBytes\";\nclass OCSPResponse extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.responseStatus = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RESPONSE_STATUS, OCSPResponse.defaultValues(RESPONSE_STATUS));\n        if (RESPONSE_BYTES in parameters) {\n            this.responseBytes = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RESPONSE_BYTES, OCSPResponse.defaultValues(RESPONSE_BYTES));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case RESPONSE_STATUS:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Enumerated();\n            case RESPONSE_BYTES:\n                return new ResponseBytes();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case RESPONSE_STATUS:\n                return (memberValue.isEqual(OCSPResponse.defaultValues(memberName)));\n            case RESPONSE_BYTES:\n                return ((ResponseBytes.compareWithDefault(\"responseType\", memberValue.responseType)) &&\n                    (ResponseBytes.compareWithDefault(\"response\", memberValue.response)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || \"OCSPResponse\"),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Enumerated({ name: (names.responseStatus || RESPONSE_STATUS) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        ResponseBytes.schema(names.responseBytes || {\n                            names: {\n                                blockName: RESPONSE_BYTES\n                            }\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            RESPONSE_STATUS,\n            RESPONSE_BYTES\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OCSPResponse.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.responseStatus = asn1.result.responseStatus;\n        if (RESPONSE_BYTES in asn1.result)\n            this.responseBytes = new ResponseBytes({ schema: asn1.result.responseBytes });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.responseStatus);\n        if (this.responseBytes) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.responseBytes.toSchema()]\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            responseStatus: this.responseStatus.toJSON()\n        };\n        if (this.responseBytes) {\n            res.responseBytes = this.responseBytes.toJSON();\n        }\n        return res;\n    }\n    async getCertificateStatus(certificate, issuerCertificate, crypto = getCrypto(true)) {\n        let basicResponse;\n        const result = {\n            isForCertificate: false,\n            status: 2\n        };\n        if (!this.responseBytes)\n            return result;\n        if (this.responseBytes.responseType !== id_PKIX_OCSP_Basic)\n            return result;\n        try {\n            const asn1Basic = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.responseBytes.response.valueBlock.valueHexView);\n            AsnError.assert(asn1Basic, \"Basic OCSP response\");\n            basicResponse = new BasicOCSPResponse({ schema: asn1Basic.result });\n        }\n        catch (ex) {\n            return result;\n        }\n        return basicResponse.getCertificateStatus(certificate, issuerCertificate, crypto);\n    }\n    async sign(privateKey, hashAlgorithm, crypto = getCrypto(true)) {\n        var _a;\n        if (this.responseBytes && this.responseBytes.responseType === id_PKIX_OCSP_Basic) {\n            const basicResponse = BasicOCSPResponse.fromBER(this.responseBytes.response.valueBlock.valueHexView);\n            return basicResponse.sign(privateKey, hashAlgorithm, crypto);\n        }\n        throw new Error(`Unknown ResponseBytes type: ${((_a = this.responseBytes) === null || _a === void 0 ? void 0 : _a.responseType) || \"Unknown\"}`);\n    }\n    async verify(issuerCertificate = null, crypto = getCrypto(true)) {\n        var _a;\n        if ((RESPONSE_BYTES in this) === false)\n            throw new Error(\"Empty ResponseBytes field\");\n        if (this.responseBytes && this.responseBytes.responseType === id_PKIX_OCSP_Basic) {\n            const basicResponse = BasicOCSPResponse.fromBER(this.responseBytes.response.valueBlock.valueHexView);\n            if (issuerCertificate !== null) {\n                if (!basicResponse.certs) {\n                    basicResponse.certs = [];\n                }\n                basicResponse.certs.push(issuerCertificate);\n            }\n            return basicResponse.verify({}, crypto);\n        }\n        throw new Error(`Unknown ResponseBytes type: ${((_a = this.responseBytes) === null || _a === void 0 ? void 0 : _a.responseType) || \"Unknown\"}`);\n    }\n}\nOCSPResponse.CLASS_NAME = \"OCSPResponse\";\n\nconst TYPE = \"type\";\nconst ATTRIBUTES = \"attributes\";\nconst ENCODED_VALUE = \"encodedValue\";\nconst CLEAR_PROPS$6 = [\n    ATTRIBUTES\n];\nclass SignedAndUnsignedAttributes extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TYPE, SignedAndUnsignedAttributes.defaultValues(TYPE));\n        this.attributes = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ATTRIBUTES, SignedAndUnsignedAttributes.defaultValues(ATTRIBUTES));\n        this.encodedValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCODED_VALUE, SignedAndUnsignedAttributes.defaultValues(ENCODED_VALUE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE:\n                return (-1);\n            case ATTRIBUTES:\n                return [];\n            case ENCODED_VALUE:\n                return EMPTY_BUFFER;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TYPE:\n                return (memberValue === SignedAndUnsignedAttributes.defaultValues(TYPE));\n            case ATTRIBUTES:\n                return (memberValue.length === 0);\n            case ENCODED_VALUE:\n                return (memberValue.byteLength === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n            name: (names.blockName || EMPTY_STRING),\n            optional: true,\n            idBlock: {\n                tagClass: 3,\n                tagNumber: names.tagNumber || 0\n            },\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.attributes || EMPTY_STRING),\n                    value: Attribute.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$6);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, SignedAndUnsignedAttributes.schema({\n            names: {\n                tagNumber: this.type,\n                attributes: ATTRIBUTES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.type = asn1.result.idBlock.tagNumber;\n        this.encodedValue = pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(asn1.result.valueBeforeDecodeView);\n        const encodedView = new Uint8Array(this.encodedValue);\n        encodedView[0] = 0x31;\n        if ((ATTRIBUTES in asn1.result) === false) {\n            if (this.type === 0)\n                throw new Error(\"Wrong structure of SignedUnsignedAttributes\");\n            else\n                return;\n        }\n        this.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\n    }\n    toSchema() {\n        if (SignedAndUnsignedAttributes.compareWithDefault(TYPE, this.type) || SignedAndUnsignedAttributes.compareWithDefault(ATTRIBUTES, this.attributes))\n            throw new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n            optional: true,\n            idBlock: {\n                tagClass: 3,\n                tagNumber: this.type\n            },\n            value: Array.from(this.attributes, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        if (SignedAndUnsignedAttributes.compareWithDefault(TYPE, this.type) || SignedAndUnsignedAttributes.compareWithDefault(ATTRIBUTES, this.attributes))\n            throw new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\n        return {\n            type: this.type,\n            attributes: Array.from(this.attributes, o => o.toJSON())\n        };\n    }\n}\nSignedAndUnsignedAttributes.CLASS_NAME = \"SignedAndUnsignedAttributes\";\n\nconst VERSION$4 = \"version\";\nconst SID = \"sid\";\nconst DIGEST_ALGORITHM = \"digestAlgorithm\";\nconst SIGNED_ATTRS = \"signedAttrs\";\nconst SIGNATURE_ALGORITHM = \"signatureAlgorithm\";\nconst SIGNATURE = \"signature\";\nconst UNSIGNED_ATTRS = \"unsignedAttrs\";\nconst SIGNER_INFO = \"SignerInfo\";\nconst SIGNER_INFO_VERSION = `${SIGNER_INFO}.${VERSION$4}`;\nconst SIGNER_INFO_SID = `${SIGNER_INFO}.${SID}`;\nconst SIGNER_INFO_DIGEST_ALGORITHM = `${SIGNER_INFO}.${DIGEST_ALGORITHM}`;\nconst SIGNER_INFO_SIGNED_ATTRS = `${SIGNER_INFO}.${SIGNED_ATTRS}`;\nconst SIGNER_INFO_SIGNATURE_ALGORITHM = `${SIGNER_INFO}.${SIGNATURE_ALGORITHM}`;\nconst SIGNER_INFO_SIGNATURE = `${SIGNER_INFO}.${SIGNATURE}`;\nconst SIGNER_INFO_UNSIGNED_ATTRS = `${SIGNER_INFO}.${UNSIGNED_ATTRS}`;\nconst CLEAR_PROPS$5 = [\n    SIGNER_INFO_VERSION,\n    SIGNER_INFO_SID,\n    SIGNER_INFO_DIGEST_ALGORITHM,\n    SIGNER_INFO_SIGNED_ATTRS,\n    SIGNER_INFO_SIGNATURE_ALGORITHM,\n    SIGNER_INFO_SIGNATURE,\n    SIGNER_INFO_UNSIGNED_ATTRS\n];\nclass SignerInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$4, SignerInfo.defaultValues(VERSION$4));\n        this.sid = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SID, SignerInfo.defaultValues(SID));\n        this.digestAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DIGEST_ALGORITHM, SignerInfo.defaultValues(DIGEST_ALGORITHM));\n        if (SIGNED_ATTRS in parameters) {\n            this.signedAttrs = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNED_ATTRS, SignerInfo.defaultValues(SIGNED_ATTRS));\n        }\n        this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_ALGORITHM, SignerInfo.defaultValues(SIGNATURE_ALGORITHM));\n        this.signature = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE, SignerInfo.defaultValues(SIGNATURE));\n        if (UNSIGNED_ATTRS in parameters) {\n            this.unsignedAttrs = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, UNSIGNED_ATTRS, SignerInfo.defaultValues(UNSIGNED_ATTRS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$4:\n                return 0;\n            case SID:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n            case DIGEST_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case SIGNED_ATTRS:\n                return new SignedAndUnsignedAttributes({ type: 0 });\n            case SIGNATURE_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case SIGNATURE:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case UNSIGNED_ATTRS:\n                return new SignedAndUnsignedAttributes({ type: 1 });\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$4:\n                return (SignerInfo.defaultValues(VERSION$4) === memberValue);\n            case SID:\n                return (memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any);\n            case DIGEST_ALGORITHM:\n                if ((memberValue instanceof AlgorithmIdentifier) === false)\n                    return false;\n                return memberValue.isEqual(SignerInfo.defaultValues(DIGEST_ALGORITHM));\n            case SIGNED_ATTRS:\n                return ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\n            case SIGNATURE_ALGORITHM:\n                if ((memberValue instanceof AlgorithmIdentifier) === false)\n                    return false;\n                return memberValue.isEqual(SignerInfo.defaultValues(SIGNATURE_ALGORITHM));\n            case SIGNATURE:\n            case UNSIGNED_ATTRS:\n                return ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: SIGNER_INFO,\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || SIGNER_INFO_VERSION) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                    value: [\n                        IssuerAndSerialNumber.schema(names.sidSchema || {\n                            names: {\n                                blockName: SIGNER_INFO_SID\n                            }\n                        }),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                            value: [\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                    optional: true,\n                                    name: (names.sid || SIGNER_INFO_SID),\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    },\n                                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString()]\n                                }),\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                                    optional: true,\n                                    name: (names.sid || SIGNER_INFO_SID),\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    }\n                                }),\n                            ]\n                        }),\n                    ]\n                }),\n                AlgorithmIdentifier.schema(names.digestAlgorithm || {\n                    names: {\n                        blockName: SIGNER_INFO_DIGEST_ALGORITHM\n                    }\n                }),\n                SignedAndUnsignedAttributes.schema(names.signedAttrs || {\n                    names: {\n                        blockName: SIGNER_INFO_SIGNED_ATTRS,\n                        tagNumber: 0\n                    }\n                }),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n                    names: {\n                        blockName: SIGNER_INFO_SIGNATURE_ALGORITHM\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.signature || SIGNER_INFO_SIGNATURE) }),\n                SignedAndUnsignedAttributes.schema(names.unsignedAttrs || {\n                    names: {\n                        blockName: SIGNER_INFO_UNSIGNED_ATTRS,\n                        tagNumber: 1\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$5);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, SignerInfo.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result[SIGNER_INFO_VERSION].valueBlock.valueDec;\n        const currentSid = asn1.result[SIGNER_INFO_SID];\n        if (currentSid.idBlock.tagClass === 1)\n            this.sid = new IssuerAndSerialNumber({ schema: currentSid });\n        else\n            this.sid = currentSid;\n        this.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[SIGNER_INFO_DIGEST_ALGORITHM] });\n        if (SIGNER_INFO_SIGNED_ATTRS in asn1.result)\n            this.signedAttrs = new SignedAndUnsignedAttributes({ type: 0, schema: asn1.result[SIGNER_INFO_SIGNED_ATTRS] });\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[SIGNER_INFO_SIGNATURE_ALGORITHM] });\n        this.signature = asn1.result[SIGNER_INFO_SIGNATURE];\n        if (SIGNER_INFO_UNSIGNED_ATTRS in asn1.result)\n            this.unsignedAttrs = new SignedAndUnsignedAttributes({ type: 1, schema: asn1.result[SIGNER_INFO_UNSIGNED_ATTRS] });\n    }\n    toSchema() {\n        if (SignerInfo.compareWithDefault(SID, this.sid))\n            throw new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        if (this.sid instanceof IssuerAndSerialNumber)\n            outputArray.push(this.sid.toSchema());\n        else\n            outputArray.push(this.sid);\n        outputArray.push(this.digestAlgorithm.toSchema());\n        if (this.signedAttrs) {\n            if (SignerInfo.compareWithDefault(SIGNED_ATTRS, this.signedAttrs) === false)\n                outputArray.push(this.signedAttrs.toSchema());\n        }\n        outputArray.push(this.signatureAlgorithm.toSchema());\n        outputArray.push(this.signature);\n        if (this.unsignedAttrs) {\n            if (SignerInfo.compareWithDefault(UNSIGNED_ATTRS, this.unsignedAttrs) === false)\n                outputArray.push(this.unsignedAttrs.toSchema());\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        if (SignerInfo.compareWithDefault(SID, this.sid)) {\n            throw new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\n        }\n        const res = {\n            version: this.version,\n            digestAlgorithm: this.digestAlgorithm.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signature: this.signature.toJSON(),\n        };\n        if (!(this.sid instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any))\n            res.sid = this.sid.toJSON();\n        if (this.signedAttrs && SignerInfo.compareWithDefault(SIGNED_ATTRS, this.signedAttrs) === false) {\n            res.signedAttrs = this.signedAttrs.toJSON();\n        }\n        if (this.unsignedAttrs && SignerInfo.compareWithDefault(UNSIGNED_ATTRS, this.unsignedAttrs) === false) {\n            res.unsignedAttrs = this.unsignedAttrs.toJSON();\n        }\n        return res;\n    }\n}\nSignerInfo.CLASS_NAME = \"SignerInfo\";\n\nconst VERSION$3 = \"version\";\nconst POLICY = \"policy\";\nconst MESSAGE_IMPRINT$1 = \"messageImprint\";\nconst SERIAL_NUMBER = \"serialNumber\";\nconst GEN_TIME = \"genTime\";\nconst ORDERING = \"ordering\";\nconst NONCE$1 = \"nonce\";\nconst ACCURACY = \"accuracy\";\nconst TSA = \"tsa\";\nconst EXTENSIONS$1 = \"extensions\";\nconst TST_INFO = \"TSTInfo\";\nconst TST_INFO_VERSION = `${TST_INFO}.${VERSION$3}`;\nconst TST_INFO_POLICY = `${TST_INFO}.${POLICY}`;\nconst TST_INFO_MESSAGE_IMPRINT = `${TST_INFO}.${MESSAGE_IMPRINT$1}`;\nconst TST_INFO_SERIAL_NUMBER = `${TST_INFO}.${SERIAL_NUMBER}`;\nconst TST_INFO_GEN_TIME = `${TST_INFO}.${GEN_TIME}`;\nconst TST_INFO_ACCURACY = `${TST_INFO}.${ACCURACY}`;\nconst TST_INFO_ORDERING = `${TST_INFO}.${ORDERING}`;\nconst TST_INFO_NONCE = `${TST_INFO}.${NONCE$1}`;\nconst TST_INFO_TSA = `${TST_INFO}.${TSA}`;\nconst TST_INFO_EXTENSIONS = `${TST_INFO}.${EXTENSIONS$1}`;\nconst CLEAR_PROPS$4 = [\n    TST_INFO_VERSION,\n    TST_INFO_POLICY,\n    TST_INFO_MESSAGE_IMPRINT,\n    TST_INFO_SERIAL_NUMBER,\n    TST_INFO_GEN_TIME,\n    TST_INFO_ACCURACY,\n    TST_INFO_ORDERING,\n    TST_INFO_NONCE,\n    TST_INFO_TSA,\n    TST_INFO_EXTENSIONS\n];\nclass TSTInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$3, TSTInfo.defaultValues(VERSION$3));\n        this.policy = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, POLICY, TSTInfo.defaultValues(POLICY));\n        this.messageImprint = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MESSAGE_IMPRINT$1, TSTInfo.defaultValues(MESSAGE_IMPRINT$1));\n        this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SERIAL_NUMBER, TSTInfo.defaultValues(SERIAL_NUMBER));\n        this.genTime = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, GEN_TIME, TSTInfo.defaultValues(GEN_TIME));\n        if (ACCURACY in parameters) {\n            this.accuracy = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ACCURACY, TSTInfo.defaultValues(ACCURACY));\n        }\n        if (ORDERING in parameters) {\n            this.ordering = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ORDERING, TSTInfo.defaultValues(ORDERING));\n        }\n        if (NONCE$1 in parameters) {\n            this.nonce = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NONCE$1, TSTInfo.defaultValues(NONCE$1));\n        }\n        if (TSA in parameters) {\n            this.tsa = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TSA, TSTInfo.defaultValues(TSA));\n        }\n        if (EXTENSIONS$1 in parameters) {\n            this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXTENSIONS$1, TSTInfo.defaultValues(EXTENSIONS$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$3:\n                return 0;\n            case POLICY:\n                return EMPTY_STRING;\n            case MESSAGE_IMPRINT$1:\n                return new MessageImprint();\n            case SERIAL_NUMBER:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case GEN_TIME:\n                return new Date(0, 0, 0);\n            case ACCURACY:\n                return new Accuracy();\n            case ORDERING:\n                return false;\n            case NONCE$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case TSA:\n                return new GeneralName();\n            case EXTENSIONS$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$3:\n            case POLICY:\n            case GEN_TIME:\n            case ORDERING:\n                return (memberValue === TSTInfo.defaultValues(ORDERING));\n            case MESSAGE_IMPRINT$1:\n                return ((MessageImprint.compareWithDefault(HASH_ALGORITHM, memberValue.hashAlgorithm)) &&\n                    (MessageImprint.compareWithDefault(HASHED_MESSAGE, memberValue.hashedMessage)));\n            case SERIAL_NUMBER:\n            case NONCE$1:\n                return (memberValue.isEqual(TSTInfo.defaultValues(NONCE$1)));\n            case ACCURACY:\n                return ((Accuracy.compareWithDefault(SECONDS, memberValue.seconds)) &&\n                    (Accuracy.compareWithDefault(MILLIS, memberValue.millis)) &&\n                    (Accuracy.compareWithDefault(MICROS, memberValue.micros)));\n            case TSA:\n                return ((GeneralName.compareWithDefault(TYPE$4, memberValue.type)) &&\n                    (GeneralName.compareWithDefault(VALUE$5, memberValue.value)));\n            case EXTENSIONS$1:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || TST_INFO),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || TST_INFO_VERSION) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.policy || TST_INFO_POLICY) }),\n                MessageImprint.schema(names.messageImprint || {\n                    names: {\n                        blockName: TST_INFO_MESSAGE_IMPRINT\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.serialNumber || TST_INFO_SERIAL_NUMBER) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ name: (names.genTime || TST_INFO_GEN_TIME) }),\n                Accuracy.schema(names.accuracy || {\n                    names: {\n                        blockName: TST_INFO_ACCURACY\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Boolean({\n                    name: (names.ordering || TST_INFO_ORDERING),\n                    optional: true\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n                    name: (names.nonce || TST_INFO_NONCE),\n                    optional: true\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [GeneralName.schema(names.tsa || {\n                            names: {\n                                blockName: TST_INFO_TSA\n                            }\n                        })]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.extensions || TST_INFO_EXTENSIONS),\n                            value: Extension.schema(names.extension || {})\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$4);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, TSTInfo.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result[TST_INFO_VERSION].valueBlock.valueDec;\n        this.policy = asn1.result[TST_INFO_POLICY].valueBlock.toString();\n        this.messageImprint = new MessageImprint({ schema: asn1.result[TST_INFO_MESSAGE_IMPRINT] });\n        this.serialNumber = asn1.result[TST_INFO_SERIAL_NUMBER];\n        this.genTime = asn1.result[TST_INFO_GEN_TIME].toDate();\n        if (TST_INFO_ACCURACY in asn1.result)\n            this.accuracy = new Accuracy({ schema: asn1.result[TST_INFO_ACCURACY] });\n        if (TST_INFO_ORDERING in asn1.result)\n            this.ordering = asn1.result[TST_INFO_ORDERING].valueBlock.value;\n        if (TST_INFO_NONCE in asn1.result)\n            this.nonce = asn1.result[TST_INFO_NONCE];\n        if (TST_INFO_TSA in asn1.result)\n            this.tsa = new GeneralName({ schema: asn1.result[TST_INFO_TSA] });\n        if (TST_INFO_EXTENSIONS in asn1.result)\n            this.extensions = Array.from(asn1.result[TST_INFO_EXTENSIONS], element => new Extension({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.policy }));\n        outputArray.push(this.messageImprint.toSchema());\n        outputArray.push(this.serialNumber);\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueDate: this.genTime }));\n        if (this.accuracy)\n            outputArray.push(this.accuracy.toSchema());\n        if (this.ordering !== undefined)\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Boolean({ value: this.ordering }));\n        if (this.nonce)\n            outputArray.push(this.nonce);\n        if (this.tsa) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.tsa.toSchema()]\n            }));\n        }\n        if (this.extensions) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.extensions, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            policy: this.policy,\n            messageImprint: this.messageImprint.toJSON(),\n            serialNumber: this.serialNumber.toJSON(),\n            genTime: this.genTime\n        };\n        if (this.accuracy)\n            res.accuracy = this.accuracy.toJSON();\n        if (this.ordering !== undefined)\n            res.ordering = this.ordering;\n        if (this.nonce)\n            res.nonce = this.nonce.toJSON();\n        if (this.tsa)\n            res.tsa = this.tsa.toJSON();\n        if (this.extensions)\n            res.extensions = Array.from(this.extensions, o => o.toJSON());\n        return res;\n    }\n    async verify(params, crypto = getCrypto(true)) {\n        if (!params.data) {\n            throw new Error(\"\\\"data\\\" is a mandatory attribute for TST_INFO verification\");\n        }\n        const data = params.data;\n        if (params.notBefore) {\n            if (this.genTime < params.notBefore)\n                throw new Error(\"Generation time for TSTInfo object is less than notBefore value\");\n        }\n        if (params.notAfter) {\n            if (this.genTime > params.notAfter)\n                throw new Error(\"Generation time for TSTInfo object is more than notAfter value\");\n        }\n        const shaAlgorithm = crypto.getAlgorithmByOID(this.messageImprint.hashAlgorithm.algorithmId, true, \"MessageImprint.hashAlgorithm\");\n        const hash = await crypto.digest(shaAlgorithm.name, new Uint8Array(data));\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(hash, this.messageImprint.hashedMessage.valueBlock.valueHexView);\n    }\n}\nTSTInfo.CLASS_NAME = \"TSTInfo\";\n\nconst VERSION$2 = \"version\";\nconst DIGEST_ALGORITHMS = \"digestAlgorithms\";\nconst ENCAP_CONTENT_INFO = \"encapContentInfo\";\nconst CERTIFICATES = \"certificates\";\nconst CRLS = \"crls\";\nconst SIGNER_INFOS = \"signerInfos\";\nconst OCSPS = \"ocsps\";\nconst SIGNED_DATA = \"SignedData\";\nconst SIGNED_DATA_VERSION = `${SIGNED_DATA}.${VERSION$2}`;\nconst SIGNED_DATA_DIGEST_ALGORITHMS = `${SIGNED_DATA}.${DIGEST_ALGORITHMS}`;\nconst SIGNED_DATA_ENCAP_CONTENT_INFO = `${SIGNED_DATA}.${ENCAP_CONTENT_INFO}`;\nconst SIGNED_DATA_CERTIFICATES = `${SIGNED_DATA}.${CERTIFICATES}`;\nconst SIGNED_DATA_CRLS = `${SIGNED_DATA}.${CRLS}`;\nconst SIGNED_DATA_SIGNER_INFOS = `${SIGNED_DATA}.${SIGNER_INFOS}`;\nconst CLEAR_PROPS$3 = [\n    SIGNED_DATA_VERSION,\n    SIGNED_DATA_DIGEST_ALGORITHMS,\n    SIGNED_DATA_ENCAP_CONTENT_INFO,\n    SIGNED_DATA_CERTIFICATES,\n    SIGNED_DATA_CRLS,\n    SIGNED_DATA_SIGNER_INFOS\n];\nclass SignedDataVerifyError extends Error {\n    constructor({ message, code = 0, date = new Date(), signatureVerified = null, signerCertificate = null, signerCertificateVerified = null, timestampSerial = null, certificatePath = [], }) {\n        super(message);\n        this.name = \"SignedDataVerifyError\";\n        this.date = date;\n        this.code = code;\n        this.timestampSerial = timestampSerial;\n        this.signatureVerified = signatureVerified;\n        this.signerCertificate = signerCertificate;\n        this.signerCertificateVerified = signerCertificateVerified;\n        this.certificatePath = certificatePath;\n    }\n}\nclass SignedData extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$2, SignedData.defaultValues(VERSION$2));\n        this.digestAlgorithms = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DIGEST_ALGORITHMS, SignedData.defaultValues(DIGEST_ALGORITHMS));\n        this.encapContentInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCAP_CONTENT_INFO, SignedData.defaultValues(ENCAP_CONTENT_INFO));\n        if (CERTIFICATES in parameters) {\n            this.certificates = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERTIFICATES, SignedData.defaultValues(CERTIFICATES));\n        }\n        if (CRLS in parameters) {\n            this.crls = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRLS, SignedData.defaultValues(CRLS));\n        }\n        if (OCSPS in parameters) {\n            this.ocsps = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OCSPS, SignedData.defaultValues(OCSPS));\n        }\n        this.signerInfos = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNER_INFOS, SignedData.defaultValues(SIGNER_INFOS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$2:\n                return 0;\n            case DIGEST_ALGORITHMS:\n                return [];\n            case ENCAP_CONTENT_INFO:\n                return new EncapsulatedContentInfo();\n            case CERTIFICATES:\n                return [];\n            case CRLS:\n                return [];\n            case OCSPS:\n                return [];\n            case SIGNER_INFOS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$2:\n                return (memberValue === SignedData.defaultValues(VERSION$2));\n            case ENCAP_CONTENT_INFO:\n                return EncapsulatedContentInfo.compareWithDefault(\"eContentType\", memberValue.eContentType) &&\n                    EncapsulatedContentInfo.compareWithDefault(\"eContent\", memberValue.eContent);\n            case DIGEST_ALGORITHMS:\n            case CERTIFICATES:\n            case CRLS:\n            case OCSPS:\n            case SIGNER_INFOS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        if (names.optional === undefined) {\n            names.optional = false;\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || SIGNED_DATA),\n            optional: names.optional,\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || SIGNED_DATA_VERSION) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.digestAlgorithms || SIGNED_DATA_DIGEST_ALGORITHMS),\n                            value: AlgorithmIdentifier.schema()\n                        })\n                    ]\n                }),\n                EncapsulatedContentInfo.schema(names.encapContentInfo || {\n                    names: {\n                        blockName: SIGNED_DATA_ENCAP_CONTENT_INFO\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.certificates || SIGNED_DATA_CERTIFICATES),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: CertificateSet.schema().valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: RevocationInfoChoices.schema(names.crls || {\n                        names: {\n                            crls: SIGNED_DATA_CRLS\n                        }\n                    }).valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.signerInfos || SIGNED_DATA_SIGNER_INFOS),\n                            value: SignerInfo.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$3);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, SignedData.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result[SIGNED_DATA_VERSION].valueBlock.valueDec;\n        if (SIGNED_DATA_DIGEST_ALGORITHMS in asn1.result)\n            this.digestAlgorithms = Array.from(asn1.result[SIGNED_DATA_DIGEST_ALGORITHMS], algorithm => new AlgorithmIdentifier({ schema: algorithm }));\n        this.encapContentInfo = new EncapsulatedContentInfo({ schema: asn1.result[SIGNED_DATA_ENCAP_CONTENT_INFO] });\n        if (SIGNED_DATA_CERTIFICATES in asn1.result) {\n            const certificateSet = new CertificateSet({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    value: asn1.result[SIGNED_DATA_CERTIFICATES].valueBlock.value\n                })\n            });\n            this.certificates = certificateSet.certificates.slice(0);\n        }\n        if (SIGNED_DATA_CRLS in asn1.result) {\n            this.crls = Array.from(asn1.result[SIGNED_DATA_CRLS], (crl) => {\n                if (crl.idBlock.tagClass === 1)\n                    return new CertificateRevocationList({ schema: crl });\n                crl.idBlock.tagClass = 1;\n                crl.idBlock.tagNumber = 16;\n                return new OtherRevocationInfoFormat({ schema: crl });\n            });\n        }\n        if (SIGNED_DATA_SIGNER_INFOS in asn1.result)\n            this.signerInfos = Array.from(asn1.result[SIGNED_DATA_SIGNER_INFOS], signerInfoSchema => new SignerInfo({ schema: signerInfoSchema }));\n    }\n    toSchema(encodeFlag = false) {\n        const outputArray = [];\n        if ((this.certificates && this.certificates.length && this.certificates.some(o => o instanceof OtherCertificateFormat))\n            || (this.crls && this.crls.length && this.crls.some(o => o instanceof OtherRevocationInfoFormat))) {\n            this.version = 5;\n        }\n        else if (this.certificates && this.certificates.length && this.certificates.some(o => o instanceof AttributeCertificateV2)) {\n            this.version = 4;\n        }\n        else if ((this.certificates && this.certificates.length && this.certificates.some(o => o instanceof AttributeCertificateV1))\n            || this.signerInfos.some(o => o.version === 3)\n            || this.encapContentInfo.eContentType !== SignedData.ID_DATA) {\n            this.version = 3;\n        }\n        else {\n            this.version = 1;\n        }\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n            value: Array.from(this.digestAlgorithms, algorithm => algorithm.toSchema())\n        }));\n        outputArray.push(this.encapContentInfo.toSchema());\n        if (this.certificates) {\n            const certificateSet = new CertificateSet({ certificates: this.certificates });\n            const certificateSetSchema = certificateSet.toSchema();\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: certificateSetSchema.valueBlock.value\n            }));\n        }\n        if (this.crls) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.crls, crl => {\n                    if (crl instanceof OtherRevocationInfoFormat) {\n                        const crlSchema = crl.toSchema();\n                        crlSchema.idBlock.tagClass = 3;\n                        crlSchema.idBlock.tagNumber = 1;\n                        return crlSchema;\n                    }\n                    return crl.toSchema(encodeFlag);\n                })\n            }));\n        }\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n            value: Array.from(this.signerInfos, signerInfo => signerInfo.toSchema())\n        }));\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            digestAlgorithms: Array.from(this.digestAlgorithms, algorithm => algorithm.toJSON()),\n            encapContentInfo: this.encapContentInfo.toJSON(),\n            signerInfos: Array.from(this.signerInfos, signerInfo => signerInfo.toJSON()),\n        };\n        if (this.certificates) {\n            res.certificates = Array.from(this.certificates, certificate => certificate.toJSON());\n        }\n        if (this.crls) {\n            res.crls = Array.from(this.crls, crl => crl.toJSON());\n        }\n        return res;\n    }\n    async verify({ signer = (-1), data = (EMPTY_BUFFER), trustedCerts = [], checkDate = (new Date()), checkChain = false, passedWhenNotRevValues = false, extendedMode = false, findOrigin = null, findIssuer = null } = {}, crypto = getCrypto(true)) {\n        let signerCert = null;\n        let timestampSerial = null;\n        try {\n            let messageDigestValue = EMPTY_BUFFER;\n            let shaAlgorithm = EMPTY_STRING;\n            let certificatePath = [];\n            const signerInfo = this.signerInfos[signer];\n            if (!signerInfo) {\n                throw new SignedDataVerifyError({\n                    date: checkDate,\n                    code: 1,\n                    message: \"Unable to get signer by supplied index\",\n                });\n            }\n            if (!this.certificates) {\n                throw new SignedDataVerifyError({\n                    date: checkDate,\n                    code: 2,\n                    message: \"No certificates attached to this signed data\",\n                });\n            }\n            if (signerInfo.sid instanceof IssuerAndSerialNumber) {\n                for (const certificate of this.certificates) {\n                    if (!(certificate instanceof Certificate))\n                        continue;\n                    if ((certificate.issuer.isEqual(signerInfo.sid.issuer)) &&\n                        (certificate.serialNumber.isEqual(signerInfo.sid.serialNumber))) {\n                        signerCert = certificate;\n                        break;\n                    }\n                }\n            }\n            else {\n                const sid = signerInfo.sid;\n                const keyId = sid.idBlock.isConstructed\n                    ? sid.valueBlock.value[0].valueBlock.valueHex\n                    : sid.valueBlock.valueHex;\n                for (const certificate of this.certificates) {\n                    if (!(certificate instanceof Certificate)) {\n                        continue;\n                    }\n                    const digest = await crypto.digest({ name: \"sha-1\" }, certificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);\n                    if (pvutils__WEBPACK_IMPORTED_MODULE_2__.isEqualBuffer(digest, keyId)) {\n                        signerCert = certificate;\n                        break;\n                    }\n                }\n            }\n            if (!signerCert) {\n                throw new SignedDataVerifyError({\n                    date: checkDate,\n                    code: 3,\n                    message: \"Unable to find signer certificate\",\n                });\n            }\n            if (this.encapContentInfo.eContentType === id_eContentType_TSTInfo) {\n                if (!this.encapContentInfo.eContent) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 15,\n                        message: \"Error during verification: TSTInfo eContent is empty\",\n                        signatureVerified: null,\n                        signerCertificate: signerCert,\n                        timestampSerial,\n                        signerCertificateVerified: true\n                    });\n                }\n                let tstInfo;\n                try {\n                    tstInfo = TSTInfo.fromBER(this.encapContentInfo.eContent.valueBlock.valueHexView);\n                }\n                catch (ex) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 15,\n                        message: \"Error during verification: TSTInfo wrong ASN.1 schema \",\n                        signatureVerified: null,\n                        signerCertificate: signerCert,\n                        timestampSerial,\n                        signerCertificateVerified: true\n                    });\n                }\n                checkDate = tstInfo.genTime;\n                timestampSerial = tstInfo.serialNumber.valueBlock.valueHexView.slice();\n                if (data.byteLength === 0) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 4,\n                        message: \"Missed detached data input array\",\n                    });\n                }\n                if (!(await tstInfo.verify({ data }, crypto))) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 15,\n                        message: \"Error during verification: TSTInfo verification is failed\",\n                        signatureVerified: false,\n                        signerCertificate: signerCert,\n                        timestampSerial,\n                        signerCertificateVerified: true\n                    });\n                }\n            }\n            if (checkChain) {\n                const certs = this.certificates.filter(certificate => (certificate instanceof Certificate && !!checkCA(certificate, signerCert)));\n                const chainParams = {\n                    checkDate,\n                    certs,\n                    trustedCerts,\n                };\n                if (findIssuer) {\n                    chainParams.findIssuer = findIssuer;\n                }\n                if (findOrigin) {\n                    chainParams.findOrigin = findOrigin;\n                }\n                const chainEngine = new CertificateChainValidationEngine(chainParams);\n                chainEngine.certs.push(signerCert);\n                if (this.crls) {\n                    for (const crl of this.crls) {\n                        if (\"thisUpdate\" in crl)\n                            chainEngine.crls.push(crl);\n                        else {\n                            if (crl.otherRevInfoFormat === id_PKIX_OCSP_Basic)\n                                chainEngine.ocsps.push(new BasicOCSPResponse({ schema: crl.otherRevInfo }));\n                        }\n                    }\n                }\n                if (this.ocsps) {\n                    chainEngine.ocsps.push(...(this.ocsps));\n                }\n                const verificationResult = await chainEngine.verify({ passedWhenNotRevValues }, crypto)\n                    .catch(e => {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 5,\n                        message: `Validation of signer's certificate failed with error: ${((e instanceof Object) ? e.resultMessage : e)}`,\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: false\n                    });\n                });\n                if (verificationResult.certificatePath) {\n                    certificatePath = verificationResult.certificatePath;\n                }\n                if (!verificationResult.result)\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 5,\n                        message: `Validation of signer's certificate failed: ${verificationResult.resultMessage}`,\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: false\n                    });\n            }\n            const signerInfoHashAlgorithm = crypto.getAlgorithmByOID(signerInfo.digestAlgorithm.algorithmId);\n            if (!(\"name\" in signerInfoHashAlgorithm)) {\n                throw new SignedDataVerifyError({\n                    date: checkDate,\n                    code: 7,\n                    message: `Unsupported signature algorithm: ${signerInfo.digestAlgorithm.algorithmId}`,\n                    signerCertificate: signerCert,\n                    signerCertificateVerified: true\n                });\n            }\n            shaAlgorithm = signerInfoHashAlgorithm.name;\n            const eContent = this.encapContentInfo.eContent;\n            if (eContent) {\n                if ((eContent.idBlock.tagClass === 1) &&\n                    (eContent.idBlock.tagNumber === 4)) {\n                    data = eContent.getValue();\n                }\n                else\n                    data = eContent.valueBlock.valueBeforeDecodeView;\n            }\n            else {\n                if (data.byteLength === 0) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 8,\n                        message: \"Missed detached data input array\",\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: true\n                    });\n                }\n            }\n            if (signerInfo.signedAttrs) {\n                let foundContentType = false;\n                let foundMessageDigest = false;\n                for (const attribute of signerInfo.signedAttrs.attributes) {\n                    if (attribute.type === \"1.2.840.113549.1.9.3\")\n                        foundContentType = true;\n                    if (attribute.type === \"1.2.840.113549.1.9.4\") {\n                        foundMessageDigest = true;\n                        messageDigestValue = attribute.values[0].valueBlock.valueHex;\n                    }\n                    if (foundContentType && foundMessageDigest)\n                        break;\n                }\n                if (foundContentType === false) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 9,\n                        message: \"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: true\n                    });\n                }\n                if (foundMessageDigest === false) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 10,\n                        message: \"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\n                        signatureVerified: null,\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: true\n                    });\n                }\n            }\n            if (signerInfo.signedAttrs) {\n                const messageDigest = await crypto.digest(shaAlgorithm, new Uint8Array(data));\n                if (!pvutils__WEBPACK_IMPORTED_MODULE_2__.isEqualBuffer(messageDigest, messageDigestValue)) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 15,\n                        message: \"Error during verification: Message digest doesn't match\",\n                        signatureVerified: null,\n                        signerCertificate: signerCert,\n                        timestampSerial,\n                        signerCertificateVerified: true\n                    });\n                }\n                data = signerInfo.signedAttrs.encodedValue;\n            }\n            const verifyResult = signerInfo.signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.1\"\n                ? await crypto.verifyWithPublicKey(data, signerInfo.signature, signerCert.subjectPublicKeyInfo, signerInfo.signatureAlgorithm, shaAlgorithm)\n                : await crypto.verifyWithPublicKey(data, signerInfo.signature, signerCert.subjectPublicKeyInfo, signerInfo.signatureAlgorithm);\n            if (extendedMode) {\n                return {\n                    date: checkDate,\n                    code: 14,\n                    message: EMPTY_STRING,\n                    signatureVerified: verifyResult,\n                    signerCertificate: signerCert,\n                    timestampSerial,\n                    signerCertificateVerified: true,\n                    certificatePath\n                };\n            }\n            else {\n                return verifyResult;\n            }\n        }\n        catch (e) {\n            if (e instanceof SignedDataVerifyError) {\n                throw e;\n            }\n            throw new SignedDataVerifyError({\n                date: checkDate,\n                code: 15,\n                message: `Error during verification: ${e instanceof Error ? e.message : e}`,\n                signatureVerified: null,\n                signerCertificate: signerCert,\n                timestampSerial,\n                signerCertificateVerified: true\n            });\n        }\n    }\n    async sign(privateKey, signerIndex, hashAlgorithm = \"SHA-1\", data = (EMPTY_BUFFER), crypto = getCrypto(true)) {\n        var _a;\n        if (!privateKey)\n            throw new Error(\"Need to provide a private key for signing\");\n        const signerInfo = this.signerInfos[signerIndex];\n        if (!signerInfo) {\n            throw new RangeError(\"SignerInfo index is out of range\");\n        }\n        if (!((_a = signerInfo.signedAttrs) === null || _a === void 0 ? void 0 : _a.attributes.length) && \"hash\" in privateKey.algorithm && \"hash\" in privateKey.algorithm && privateKey.algorithm.hash) {\n            hashAlgorithm = privateKey.algorithm.hash.name;\n        }\n        const hashAlgorithmOID = crypto.getOIDByAlgorithm({ name: hashAlgorithm }, true, \"hashAlgorithm\");\n        if ((this.digestAlgorithms.filter(algorithm => algorithm.algorithmId === hashAlgorithmOID)).length === 0) {\n            this.digestAlgorithms.push(new AlgorithmIdentifier({\n                algorithmId: hashAlgorithmOID,\n                algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n            }));\n        }\n        signerInfo.digestAlgorithm = new AlgorithmIdentifier({\n            algorithmId: hashAlgorithmOID,\n            algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n        });\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const parameters = signatureParams.parameters;\n        signerInfo.signatureAlgorithm = signatureParams.signatureAlgorithm;\n        if (signerInfo.signedAttrs) {\n            if (signerInfo.signedAttrs.encodedValue.byteLength !== 0)\n                data = signerInfo.signedAttrs.encodedValue;\n            else {\n                data = signerInfo.signedAttrs.toSchema().toBER();\n                const view = pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toUint8Array(data);\n                view[0] = 0x31;\n            }\n        }\n        else {\n            const eContent = this.encapContentInfo.eContent;\n            if (eContent) {\n                if ((eContent.idBlock.tagClass === 1) &&\n                    (eContent.idBlock.tagNumber === 4)) {\n                    data = eContent.getValue();\n                }\n                else\n                    data = eContent.valueBlock.valueBeforeDecodeView;\n            }\n            else {\n                if (data.byteLength === 0)\n                    throw new Error(\"Missed detached data input array\");\n            }\n        }\n        const signature = await crypto.signWithPrivateKey(data, privateKey, parameters);\n        signerInfo.signature = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: signature });\n    }\n}\nSignedData.CLASS_NAME = \"SignedData\";\nSignedData.ID_DATA = id_ContentType_Data;\n\nconst VERSION$1 = \"version\";\nconst AUTH_SAFE = \"authSafe\";\nconst MAC_DATA = \"macData\";\nconst PARSED_VALUE = \"parsedValue\";\nconst CLERA_PROPS = [\n    VERSION$1,\n    AUTH_SAFE,\n    MAC_DATA\n];\nclass PFX extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$1, PFX.defaultValues(VERSION$1));\n        this.authSafe = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, AUTH_SAFE, PFX.defaultValues(AUTH_SAFE));\n        if (MAC_DATA in parameters) {\n            this.macData = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MAC_DATA, PFX.defaultValues(MAC_DATA));\n        }\n        if (PARSED_VALUE in parameters) {\n            this.parsedValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PARSED_VALUE, PFX.defaultValues(PARSED_VALUE));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$1:\n                return 3;\n            case AUTH_SAFE:\n                return (new ContentInfo());\n            case MAC_DATA:\n                return (new MacData());\n            case PARSED_VALUE:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$1:\n                return (memberValue === PFX.defaultValues(memberName));\n            case AUTH_SAFE:\n                return ((ContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\n                    (ContentInfo.compareWithDefault(\"content\", memberValue.content)));\n            case MAC_DATA:\n                return ((MacData.compareWithDefault(\"mac\", memberValue.mac)) &&\n                    (MacData.compareWithDefault(\"macSalt\", memberValue.macSalt)) &&\n                    (MacData.compareWithDefault(\"iterations\", memberValue.iterations)));\n            case PARSED_VALUE:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || VERSION$1) }),\n                ContentInfo.schema(names.authSafe || {\n                    names: {\n                        blockName: AUTH_SAFE\n                    }\n                }),\n                MacData.schema(names.macData || {\n                    names: {\n                        blockName: MAC_DATA,\n                        optional: true\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLERA_PROPS);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PFX.schema({\n            names: {\n                version: VERSION$1,\n                authSafe: {\n                    names: {\n                        blockName: AUTH_SAFE\n                    }\n                },\n                macData: {\n                    names: {\n                        blockName: MAC_DATA\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.authSafe = new ContentInfo({ schema: asn1.result.authSafe });\n        if (MAC_DATA in asn1.result)\n            this.macData = new MacData({ schema: asn1.result.macData });\n    }\n    toSchema() {\n        const outputArray = [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }),\n            this.authSafe.toSchema()\n        ];\n        if (this.macData) {\n            outputArray.push(this.macData.toSchema());\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const output = {\n            version: this.version,\n            authSafe: this.authSafe.toJSON()\n        };\n        if (this.macData) {\n            output.macData = this.macData.toJSON();\n        }\n        return output;\n    }\n    async makeInternalValues(parameters = {}, crypto = getCrypto(true)) {\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        if (!this.parsedValue) {\n            throw new Error(\"Please call \\\"parseValues\\\" function first in order to make \\\"parsedValue\\\" data\");\n        }\n        ParameterError.assertEmpty(this.parsedValue.integrityMode, \"integrityMode\", \"parsedValue\");\n        ParameterError.assertEmpty(this.parsedValue.authenticatedSafe, \"authenticatedSafe\", \"parsedValue\");\n        switch (this.parsedValue.integrityMode) {\n            case 0:\n                {\n                    if (!(\"iterations\" in parameters))\n                        throw new ParameterError(\"iterations\");\n                    ParameterError.assertEmpty(parameters.pbkdf2HashAlgorithm, \"pbkdf2HashAlgorithm\");\n                    ParameterError.assertEmpty(parameters.hmacHashAlgorithm, \"hmacHashAlgorithm\");\n                    ParameterError.assertEmpty(parameters.password, \"password\");\n                    const saltBuffer = new ArrayBuffer(64);\n                    const saltView = new Uint8Array(saltBuffer);\n                    crypto.getRandomValues(saltView);\n                    const data = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\n                    this.authSafe = new ContentInfo({\n                        contentType: ContentInfo.DATA,\n                        content: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: data })\n                    });\n                    const result = await crypto.stampDataWithPassword({\n                        password: parameters.password,\n                        hashAlgorithm: parameters.hmacHashAlgorithm,\n                        salt: saltBuffer,\n                        iterationCount: parameters.iterations,\n                        contentToStamp: data\n                    });\n                    this.macData = new MacData({\n                        mac: new DigestInfo({\n                            digestAlgorithm: new AlgorithmIdentifier({\n                                algorithmId: crypto.getOIDByAlgorithm({ name: parameters.hmacHashAlgorithm }, true, \"hmacHashAlgorithm\"),\n                            }),\n                            digest: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: result })\n                        }),\n                        macSalt: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: saltBuffer }),\n                        iterations: parameters.iterations\n                    });\n                }\n                break;\n            case 1:\n                {\n                    if (!(\"signingCertificate\" in parameters)) {\n                        throw new ParameterError(\"signingCertificate\");\n                    }\n                    ParameterError.assertEmpty(parameters.privateKey, \"privateKey\");\n                    ParameterError.assertEmpty(parameters.hashAlgorithm, \"hashAlgorithm\");\n                    const toBeSigned = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\n                    const cmsSigned = new SignedData({\n                        version: 1,\n                        encapContentInfo: new EncapsulatedContentInfo({\n                            eContentType: \"1.2.840.113549.1.7.1\",\n                            eContent: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: toBeSigned })\n                        }),\n                        certificates: [parameters.signingCertificate]\n                    });\n                    const result = await crypto.digest({ name: parameters.hashAlgorithm }, new Uint8Array(toBeSigned));\n                    const signedAttr = [];\n                    signedAttr.push(new Attribute({\n                        type: \"1.2.840.113549.1.9.3\",\n                        values: [\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: \"1.2.840.113549.1.7.1\" })\n                        ]\n                    }));\n                    signedAttr.push(new Attribute({\n                        type: \"1.2.840.113549.1.9.5\",\n                        values: [\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.UTCTime({ valueDate: new Date() })\n                        ]\n                    }));\n                    signedAttr.push(new Attribute({\n                        type: \"1.2.840.113549.1.9.4\",\n                        values: [\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: result })\n                        ]\n                    }));\n                    cmsSigned.signerInfos.push(new SignerInfo({\n                        version: 1,\n                        sid: new IssuerAndSerialNumber({\n                            issuer: parameters.signingCertificate.issuer,\n                            serialNumber: parameters.signingCertificate.serialNumber\n                        }),\n                        signedAttrs: new SignedAndUnsignedAttributes({\n                            type: 0,\n                            attributes: signedAttr\n                        })\n                    }));\n                    await cmsSigned.sign(parameters.privateKey, 0, parameters.hashAlgorithm, undefined, crypto);\n                    this.authSafe = new ContentInfo({\n                        contentType: \"1.2.840.113549.1.7.2\",\n                        content: cmsSigned.toSchema(true)\n                    });\n                }\n                break;\n            default:\n                throw new Error(`Parameter \"integrityMode\" has unknown value: ${this.parsedValue.integrityMode}`);\n        }\n    }\n    async parseInternalValues(parameters, crypto = getCrypto(true)) {\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        if (parameters.checkIntegrity === undefined) {\n            parameters.checkIntegrity = true;\n        }\n        this.parsedValue = {};\n        switch (this.authSafe.contentType) {\n            case ContentInfo.DATA:\n                {\n                    ParameterError.assertEmpty(parameters.password, \"password\");\n                    this.parsedValue.integrityMode = 0;\n                    ArgumentError.assert(this.authSafe.content, \"authSafe.content\", asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString);\n                    const authSafeContent = this.authSafe.content.getValue();\n                    this.parsedValue.authenticatedSafe = AuthenticatedSafe.fromBER(authSafeContent);\n                    if (parameters.checkIntegrity) {\n                        if (!this.macData) {\n                            throw new Error(\"Absent \\\"macData\\\" value, can not check PKCS#12 data integrity\");\n                        }\n                        const hashAlgorithm = crypto.getAlgorithmByOID(this.macData.mac.digestAlgorithm.algorithmId, true, \"digestAlgorithm\");\n                        const result = await crypto.verifyDataStampedWithPassword({\n                            password: parameters.password,\n                            hashAlgorithm: hashAlgorithm.name,\n                            salt: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(this.macData.macSalt.valueBlock.valueHexView),\n                            iterationCount: this.macData.iterations || 1,\n                            contentToVerify: authSafeContent,\n                            signatureToVerify: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(this.macData.mac.digest.valueBlock.valueHexView),\n                        });\n                        if (!result) {\n                            throw new Error(\"Integrity for the PKCS#12 data is broken!\");\n                        }\n                    }\n                }\n                break;\n            case ContentInfo.SIGNED_DATA:\n                {\n                    this.parsedValue.integrityMode = 1;\n                    const cmsSigned = new SignedData({ schema: this.authSafe.content });\n                    const eContent = cmsSigned.encapContentInfo.eContent;\n                    ParameterError.assert(eContent, \"eContent\", \"cmsSigned.encapContentInfo\");\n                    ArgumentError.assert(eContent, \"eContent\", asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString);\n                    const data = eContent.getValue();\n                    this.parsedValue.authenticatedSafe = AuthenticatedSafe.fromBER(data);\n                    const ok = await cmsSigned.verify({ signer: 0, checkChain: false }, crypto);\n                    if (!ok) {\n                        throw new Error(\"Integrity for the PKCS#12 data is broken!\");\n                    }\n                }\n                break;\n            default:\n                throw new Error(`Incorrect value for \"this.authSafe.contentType\": ${this.authSafe.contentType}`);\n        }\n    }\n}\nPFX.CLASS_NAME = \"PFX\";\n\nconst STATUS$1 = \"status\";\nconst STATUS_STRINGS = \"statusStrings\";\nconst FAIL_INFO = \"failInfo\";\nconst CLEAR_PROPS$2 = [\n    STATUS$1,\n    STATUS_STRINGS,\n    FAIL_INFO\n];\nvar PKIStatus;\n(function (PKIStatus) {\n    PKIStatus[PKIStatus[\"granted\"] = 0] = \"granted\";\n    PKIStatus[PKIStatus[\"grantedWithMods\"] = 1] = \"grantedWithMods\";\n    PKIStatus[PKIStatus[\"rejection\"] = 2] = \"rejection\";\n    PKIStatus[PKIStatus[\"waiting\"] = 3] = \"waiting\";\n    PKIStatus[PKIStatus[\"revocationWarning\"] = 4] = \"revocationWarning\";\n    PKIStatus[PKIStatus[\"revocationNotification\"] = 5] = \"revocationNotification\";\n})(PKIStatus || (PKIStatus = {}));\nclass PKIStatusInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.status = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, STATUS$1, PKIStatusInfo.defaultValues(STATUS$1));\n        if (STATUS_STRINGS in parameters) {\n            this.statusStrings = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, STATUS_STRINGS, PKIStatusInfo.defaultValues(STATUS_STRINGS));\n        }\n        if (FAIL_INFO in parameters) {\n            this.failInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, FAIL_INFO, PKIStatusInfo.defaultValues(FAIL_INFO));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case STATUS$1:\n                return 2;\n            case STATUS_STRINGS:\n                return [];\n            case FAIL_INFO:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case STATUS$1:\n                return (memberValue === PKIStatusInfo.defaultValues(memberName));\n            case STATUS_STRINGS:\n                return (memberValue.length === 0);\n            case FAIL_INFO:\n                return (memberValue.isEqual(PKIStatusInfo.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.status || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    optional: true,\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.statusStrings || EMPTY_STRING),\n                            value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Utf8String()\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({\n                    name: (names.failInfo || EMPTY_STRING),\n                    optional: true\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$2);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PKIStatusInfo.schema({\n            names: {\n                status: STATUS$1,\n                statusStrings: STATUS_STRINGS,\n                failInfo: FAIL_INFO\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        const _status = asn1.result.status;\n        if ((_status.valueBlock.isHexOnly === true) ||\n            (_status.valueBlock.valueDec < 0) ||\n            (_status.valueBlock.valueDec > 5))\n            throw new Error(\"PKIStatusInfo \\\"status\\\" has invalid value\");\n        this.status = _status.valueBlock.valueDec;\n        if (STATUS_STRINGS in asn1.result)\n            this.statusStrings = asn1.result.statusStrings;\n        if (FAIL_INFO in asn1.result)\n            this.failInfo = asn1.result.failInfo;\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.status }));\n        if (this.statusStrings) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                optional: true,\n                value: this.statusStrings\n            }));\n        }\n        if (this.failInfo) {\n            outputArray.push(this.failInfo);\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            status: this.status\n        };\n        if (this.statusStrings) {\n            res.statusStrings = Array.from(this.statusStrings, o => o.toJSON());\n        }\n        if (this.failInfo) {\n            res.failInfo = this.failInfo.toJSON();\n        }\n        return res;\n    }\n}\nPKIStatusInfo.CLASS_NAME = \"PKIStatusInfo\";\n\nconst VERSION = \"version\";\nconst MESSAGE_IMPRINT = \"messageImprint\";\nconst REQ_POLICY = \"reqPolicy\";\nconst NONCE = \"nonce\";\nconst CERT_REQ = \"certReq\";\nconst EXTENSIONS = \"extensions\";\nconst TIME_STAMP_REQ = \"TimeStampReq\";\nconst TIME_STAMP_REQ_VERSION = `${TIME_STAMP_REQ}.${VERSION}`;\nconst TIME_STAMP_REQ_MESSAGE_IMPRINT = `${TIME_STAMP_REQ}.${MESSAGE_IMPRINT}`;\nconst TIME_STAMP_REQ_POLICY = `${TIME_STAMP_REQ}.${REQ_POLICY}`;\nconst TIME_STAMP_REQ_NONCE = `${TIME_STAMP_REQ}.${NONCE}`;\nconst TIME_STAMP_REQ_CERT_REQ = `${TIME_STAMP_REQ}.${CERT_REQ}`;\nconst TIME_STAMP_REQ_EXTENSIONS = `${TIME_STAMP_REQ}.${EXTENSIONS}`;\nconst CLEAR_PROPS$1 = [\n    TIME_STAMP_REQ_VERSION,\n    TIME_STAMP_REQ_MESSAGE_IMPRINT,\n    TIME_STAMP_REQ_POLICY,\n    TIME_STAMP_REQ_NONCE,\n    TIME_STAMP_REQ_CERT_REQ,\n    TIME_STAMP_REQ_EXTENSIONS,\n];\nclass TimeStampReq extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION, TimeStampReq.defaultValues(VERSION));\n        this.messageImprint = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MESSAGE_IMPRINT, TimeStampReq.defaultValues(MESSAGE_IMPRINT));\n        if (REQ_POLICY in parameters) {\n            this.reqPolicy = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, REQ_POLICY, TimeStampReq.defaultValues(REQ_POLICY));\n        }\n        if (NONCE in parameters) {\n            this.nonce = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NONCE, TimeStampReq.defaultValues(NONCE));\n        }\n        if (CERT_REQ in parameters) {\n            this.certReq = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERT_REQ, TimeStampReq.defaultValues(CERT_REQ));\n        }\n        if (EXTENSIONS in parameters) {\n            this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXTENSIONS, TimeStampReq.defaultValues(EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION:\n                return 0;\n            case MESSAGE_IMPRINT:\n                return new MessageImprint();\n            case REQ_POLICY:\n                return EMPTY_STRING;\n            case NONCE:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case CERT_REQ:\n                return false;\n            case EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION:\n            case REQ_POLICY:\n            case CERT_REQ:\n                return (memberValue === TimeStampReq.defaultValues(memberName));\n            case MESSAGE_IMPRINT:\n                return ((MessageImprint.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\n                    (MessageImprint.compareWithDefault(\"hashedMessage\", memberValue.hashedMessage)));\n            case NONCE:\n                return (memberValue.isEqual(TimeStampReq.defaultValues(memberName)));\n            case EXTENSIONS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || TIME_STAMP_REQ),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || TIME_STAMP_REQ_VERSION) }),\n                MessageImprint.schema(names.messageImprint || {\n                    names: {\n                        blockName: TIME_STAMP_REQ_MESSAGE_IMPRINT\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({\n                    name: (names.reqPolicy || TIME_STAMP_REQ_POLICY),\n                    optional: true\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n                    name: (names.nonce || TIME_STAMP_REQ_NONCE),\n                    optional: true\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Boolean({\n                    name: (names.certReq || TIME_STAMP_REQ_CERT_REQ),\n                    optional: true\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.extensions || TIME_STAMP_REQ_EXTENSIONS),\n                            value: Extension.schema()\n                        })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, TimeStampReq.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result[TIME_STAMP_REQ_VERSION].valueBlock.valueDec;\n        this.messageImprint = new MessageImprint({ schema: asn1.result[TIME_STAMP_REQ_MESSAGE_IMPRINT] });\n        if (TIME_STAMP_REQ_POLICY in asn1.result)\n            this.reqPolicy = asn1.result[TIME_STAMP_REQ_POLICY].valueBlock.toString();\n        if (TIME_STAMP_REQ_NONCE in asn1.result)\n            this.nonce = asn1.result[TIME_STAMP_REQ_NONCE];\n        if (TIME_STAMP_REQ_CERT_REQ in asn1.result)\n            this.certReq = asn1.result[TIME_STAMP_REQ_CERT_REQ].valueBlock.value;\n        if (TIME_STAMP_REQ_EXTENSIONS in asn1.result)\n            this.extensions = Array.from(asn1.result[TIME_STAMP_REQ_EXTENSIONS], element => new Extension({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        outputArray.push(this.messageImprint.toSchema());\n        if (this.reqPolicy)\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.reqPolicy }));\n        if (this.nonce)\n            outputArray.push(this.nonce);\n        if ((CERT_REQ in this) && (TimeStampReq.compareWithDefault(CERT_REQ, this.certReq) === false))\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Boolean({ value: this.certReq }));\n        if (this.extensions) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: Array.from(this.extensions, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            messageImprint: this.messageImprint.toJSON()\n        };\n        if (this.reqPolicy !== undefined)\n            res.reqPolicy = this.reqPolicy;\n        if (this.nonce !== undefined)\n            res.nonce = this.nonce.toJSON();\n        if ((this.certReq !== undefined) && (TimeStampReq.compareWithDefault(CERT_REQ, this.certReq) === false))\n            res.certReq = this.certReq;\n        if (this.extensions) {\n            res.extensions = Array.from(this.extensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nTimeStampReq.CLASS_NAME = \"TimeStampReq\";\n\nconst STATUS = \"status\";\nconst TIME_STAMP_TOKEN = \"timeStampToken\";\nconst TIME_STAMP_RESP = \"TimeStampResp\";\nconst TIME_STAMP_RESP_STATUS = `${TIME_STAMP_RESP}.${STATUS}`;\nconst TIME_STAMP_RESP_TOKEN = `${TIME_STAMP_RESP}.${TIME_STAMP_TOKEN}`;\nconst CLEAR_PROPS = [\n    TIME_STAMP_RESP_STATUS,\n    TIME_STAMP_RESP_TOKEN\n];\nclass TimeStampResp extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.status = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, STATUS, TimeStampResp.defaultValues(STATUS));\n        if (TIME_STAMP_TOKEN in parameters) {\n            this.timeStampToken = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TIME_STAMP_TOKEN, TimeStampResp.defaultValues(TIME_STAMP_TOKEN));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case STATUS:\n                return new PKIStatusInfo();\n            case TIME_STAMP_TOKEN:\n                return new ContentInfo();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case STATUS:\n                return ((PKIStatusInfo.compareWithDefault(STATUS, memberValue.status)) &&\n                    ((\"statusStrings\" in memberValue) === false) &&\n                    ((\"failInfo\" in memberValue) === false));\n            case TIME_STAMP_TOKEN:\n                return ((memberValue.contentType === EMPTY_STRING) &&\n                    (memberValue.content instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || TIME_STAMP_RESP),\n            value: [\n                PKIStatusInfo.schema(names.status || {\n                    names: {\n                        blockName: TIME_STAMP_RESP_STATUS\n                    }\n                }),\n                ContentInfo.schema(names.timeStampToken || {\n                    names: {\n                        blockName: TIME_STAMP_RESP_TOKEN,\n                        optional: true\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, TimeStampResp.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.status = new PKIStatusInfo({ schema: asn1.result[TIME_STAMP_RESP_STATUS] });\n        if (TIME_STAMP_RESP_TOKEN in asn1.result)\n            this.timeStampToken = new ContentInfo({ schema: asn1.result[TIME_STAMP_RESP_TOKEN] });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.status.toSchema());\n        if (this.timeStampToken) {\n            outputArray.push(this.timeStampToken.toSchema());\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            status: this.status.toJSON()\n        };\n        if (this.timeStampToken) {\n            res.timeStampToken = this.timeStampToken.toJSON();\n        }\n        return res;\n    }\n    async sign(privateKey, hashAlgorithm, crypto = getCrypto(true)) {\n        this.assertContentType();\n        const signed = new SignedData({ schema: this.timeStampToken.content });\n        return signed.sign(privateKey, 0, hashAlgorithm, undefined, crypto);\n    }\n    async verify(verificationParameters = { signer: 0, trustedCerts: [], data: EMPTY_BUFFER }, crypto = getCrypto(true)) {\n        this.assertContentType();\n        const signed = new SignedData({ schema: this.timeStampToken.content });\n        return signed.verify(verificationParameters, crypto);\n    }\n    assertContentType() {\n        if (!this.timeStampToken) {\n            throw new Error(\"timeStampToken is absent in TSP response\");\n        }\n        if (this.timeStampToken.contentType !== id_ContentType_SignedData) {\n            throw new Error(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\n        }\n    }\n}\nTimeStampResp.CLASS_NAME = \"TimeStampResp\";\n\nfunction initCryptoEngine() {\n    if (typeof self !== \"undefined\") {\n        if (\"crypto\" in self) {\n            let engineName = \"webcrypto\";\n            if (\"webkitSubtle\" in self.crypto) {\n                engineName = \"safari\";\n            }\n            setEngine(engineName, new CryptoEngine({ name: engineName, crypto: crypto }));\n        }\n    }\n    else if (typeof crypto !== \"undefined\" && \"webcrypto\" in crypto) {\n        const name = \"NodeJS ^15\";\n        const nodeCrypto = crypto.webcrypto;\n        setEngine(name, new CryptoEngine({ name, crypto: nodeCrypto }));\n    }\n}\n\ninitCryptoEngine();\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pkijs/build/index.es.js\n");

/***/ })

};
;