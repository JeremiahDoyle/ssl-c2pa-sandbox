"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/bytestreamjs";
exports.ids = ["vendor-chunks/bytestreamjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/bytestreamjs/build/mjs/bit.js":
/*!****************************************************!*\
  !*** ./node_modules/bytestreamjs/build/mjs/bit.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bitsToStringArray: () => (/* binding */ bitsToStringArray)\n/* harmony export */ });\nconst bitsToStringArray = [\n    \"00000000\", \"00000001\", \"00000010\",\n    \"00000011\", \"00000100\", \"00000101\",\n    \"00000110\", \"00000111\", \"00001000\",\n    \"00001001\", \"00001010\", \"00001011\",\n    \"00001100\", \"00001101\", \"00001110\",\n    \"00001111\", \"00010000\", \"00010001\",\n    \"00010010\", \"00010011\", \"00010100\",\n    \"00010101\", \"00010110\", \"00010111\",\n    \"00011000\", \"00011001\", \"00011010\",\n    \"00011011\", \"00011100\", \"00011101\",\n    \"00011110\", \"00011111\", \"00100000\",\n    \"00100001\", \"00100010\", \"00100011\",\n    \"00100100\", \"00100101\", \"00100110\",\n    \"00100111\", \"00101000\", \"00101001\",\n    \"00101010\", \"00101011\", \"00101100\",\n    \"00101101\", \"00101110\", \"00101111\",\n    \"00110000\", \"00110001\", \"00110010\",\n    \"00110011\", \"00110100\", \"00110101\",\n    \"00110110\", \"00110111\", \"00111000\",\n    \"00111001\", \"00111010\", \"00111011\",\n    \"00111100\", \"00111101\", \"00111110\",\n    \"00111111\", \"01000000\", \"01000001\",\n    \"01000010\", \"01000011\", \"01000100\",\n    \"01000101\", \"01000110\", \"01000111\",\n    \"01001000\", \"01001001\", \"01001010\",\n    \"01001011\", \"01001100\", \"01001101\",\n    \"01001110\", \"01001111\", \"01010000\",\n    \"01010001\", \"01010010\", \"01010011\",\n    \"01010100\", \"01010101\", \"01010110\",\n    \"01010111\", \"01011000\", \"01011001\",\n    \"01011010\", \"01011011\", \"01011100\",\n    \"01011101\", \"01011110\", \"01011111\",\n    \"01100000\", \"01100001\", \"01100010\",\n    \"01100011\", \"01100100\", \"01100101\",\n    \"01100110\", \"01100111\", \"01101000\",\n    \"01101001\", \"01101010\", \"01101011\",\n    \"01101100\", \"01101101\", \"01101110\",\n    \"01101111\", \"01110000\", \"01110001\",\n    \"01110010\", \"01110011\", \"01110100\",\n    \"01110101\", \"01110110\", \"01110111\",\n    \"01111000\", \"01111001\", \"01111010\",\n    \"01111011\", \"01111100\", \"01111101\",\n    \"01111110\", \"01111111\", \"10000000\",\n    \"10000001\", \"10000010\", \"10000011\",\n    \"10000100\", \"10000101\", \"10000110\",\n    \"10000111\", \"10001000\", \"10001001\",\n    \"10001010\", \"10001011\", \"10001100\",\n    \"10001101\", \"10001110\", \"10001111\",\n    \"10010000\", \"10010001\", \"10010010\",\n    \"10010011\", \"10010100\", \"10010101\",\n    \"10010110\", \"10010111\", \"10011000\",\n    \"10011001\", \"10011010\", \"10011011\",\n    \"10011100\", \"10011101\", \"10011110\",\n    \"10011111\", \"10100000\", \"10100001\",\n    \"10100010\", \"10100011\", \"10100100\",\n    \"10100101\", \"10100110\", \"10100111\",\n    \"10101000\", \"10101001\", \"10101010\",\n    \"10101011\", \"10101100\", \"10101101\",\n    \"10101110\", \"10101111\", \"10110000\",\n    \"10110001\", \"10110010\", \"10110011\",\n    \"10110100\", \"10110101\", \"10110110\",\n    \"10110111\", \"10111000\", \"10111001\",\n    \"10111010\", \"10111011\", \"10111100\",\n    \"10111101\", \"10111110\", \"10111111\",\n    \"11000000\", \"11000001\", \"11000010\",\n    \"11000011\", \"11000100\", \"11000101\",\n    \"11000110\", \"11000111\", \"11001000\",\n    \"11001001\", \"11001010\", \"11001011\",\n    \"11001100\", \"11001101\", \"11001110\",\n    \"11001111\", \"11010000\", \"11010001\",\n    \"11010010\", \"11010011\", \"11010100\",\n    \"11010101\", \"11010110\", \"11010111\",\n    \"11011000\", \"11011001\", \"11011010\",\n    \"11011011\", \"11011100\", \"11011101\",\n    \"11011110\", \"11011111\", \"11100000\",\n    \"11100001\", \"11100010\", \"11100011\",\n    \"11100100\", \"11100101\", \"11100110\",\n    \"11100111\", \"11101000\", \"11101001\",\n    \"11101010\", \"11101011\", \"11101100\",\n    \"11101101\", \"11101110\", \"11101111\",\n    \"11110000\", \"11110001\", \"11110010\",\n    \"11110011\", \"11110100\", \"11110101\",\n    \"11110110\", \"11110111\", \"11111000\",\n    \"11111001\", \"11111010\", \"11111011\",\n    \"11111100\", \"11111101\", \"11111110\",\n    \"11111111\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYnl0ZXN0cmVhbWpzL2J1aWxkL21qcy9iaXQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRGVza3RvcC9jMnBhIHRvb2wvbm9kZV9tb2R1bGVzL2J5dGVzdHJlYW1qcy9idWlsZC9tanMvYml0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBiaXRzVG9TdHJpbmdBcnJheSA9IFtcbiAgICBcIjAwMDAwMDAwXCIsIFwiMDAwMDAwMDFcIiwgXCIwMDAwMDAxMFwiLFxuICAgIFwiMDAwMDAwMTFcIiwgXCIwMDAwMDEwMFwiLCBcIjAwMDAwMTAxXCIsXG4gICAgXCIwMDAwMDExMFwiLCBcIjAwMDAwMTExXCIsIFwiMDAwMDEwMDBcIixcbiAgICBcIjAwMDAxMDAxXCIsIFwiMDAwMDEwMTBcIiwgXCIwMDAwMTAxMVwiLFxuICAgIFwiMDAwMDExMDBcIiwgXCIwMDAwMTEwMVwiLCBcIjAwMDAxMTEwXCIsXG4gICAgXCIwMDAwMTExMVwiLCBcIjAwMDEwMDAwXCIsIFwiMDAwMTAwMDFcIixcbiAgICBcIjAwMDEwMDEwXCIsIFwiMDAwMTAwMTFcIiwgXCIwMDAxMDEwMFwiLFxuICAgIFwiMDAwMTAxMDFcIiwgXCIwMDAxMDExMFwiLCBcIjAwMDEwMTExXCIsXG4gICAgXCIwMDAxMTAwMFwiLCBcIjAwMDExMDAxXCIsIFwiMDAwMTEwMTBcIixcbiAgICBcIjAwMDExMDExXCIsIFwiMDAwMTExMDBcIiwgXCIwMDAxMTEwMVwiLFxuICAgIFwiMDAwMTExMTBcIiwgXCIwMDAxMTExMVwiLCBcIjAwMTAwMDAwXCIsXG4gICAgXCIwMDEwMDAwMVwiLCBcIjAwMTAwMDEwXCIsIFwiMDAxMDAwMTFcIixcbiAgICBcIjAwMTAwMTAwXCIsIFwiMDAxMDAxMDFcIiwgXCIwMDEwMDExMFwiLFxuICAgIFwiMDAxMDAxMTFcIiwgXCIwMDEwMTAwMFwiLCBcIjAwMTAxMDAxXCIsXG4gICAgXCIwMDEwMTAxMFwiLCBcIjAwMTAxMDExXCIsIFwiMDAxMDExMDBcIixcbiAgICBcIjAwMTAxMTAxXCIsIFwiMDAxMDExMTBcIiwgXCIwMDEwMTExMVwiLFxuICAgIFwiMDAxMTAwMDBcIiwgXCIwMDExMDAwMVwiLCBcIjAwMTEwMDEwXCIsXG4gICAgXCIwMDExMDAxMVwiLCBcIjAwMTEwMTAwXCIsIFwiMDAxMTAxMDFcIixcbiAgICBcIjAwMTEwMTEwXCIsIFwiMDAxMTAxMTFcIiwgXCIwMDExMTAwMFwiLFxuICAgIFwiMDAxMTEwMDFcIiwgXCIwMDExMTAxMFwiLCBcIjAwMTExMDExXCIsXG4gICAgXCIwMDExMTEwMFwiLCBcIjAwMTExMTAxXCIsIFwiMDAxMTExMTBcIixcbiAgICBcIjAwMTExMTExXCIsIFwiMDEwMDAwMDBcIiwgXCIwMTAwMDAwMVwiLFxuICAgIFwiMDEwMDAwMTBcIiwgXCIwMTAwMDAxMVwiLCBcIjAxMDAwMTAwXCIsXG4gICAgXCIwMTAwMDEwMVwiLCBcIjAxMDAwMTEwXCIsIFwiMDEwMDAxMTFcIixcbiAgICBcIjAxMDAxMDAwXCIsIFwiMDEwMDEwMDFcIiwgXCIwMTAwMTAxMFwiLFxuICAgIFwiMDEwMDEwMTFcIiwgXCIwMTAwMTEwMFwiLCBcIjAxMDAxMTAxXCIsXG4gICAgXCIwMTAwMTExMFwiLCBcIjAxMDAxMTExXCIsIFwiMDEwMTAwMDBcIixcbiAgICBcIjAxMDEwMDAxXCIsIFwiMDEwMTAwMTBcIiwgXCIwMTAxMDAxMVwiLFxuICAgIFwiMDEwMTAxMDBcIiwgXCIwMTAxMDEwMVwiLCBcIjAxMDEwMTEwXCIsXG4gICAgXCIwMTAxMDExMVwiLCBcIjAxMDExMDAwXCIsIFwiMDEwMTEwMDFcIixcbiAgICBcIjAxMDExMDEwXCIsIFwiMDEwMTEwMTFcIiwgXCIwMTAxMTEwMFwiLFxuICAgIFwiMDEwMTExMDFcIiwgXCIwMTAxMTExMFwiLCBcIjAxMDExMTExXCIsXG4gICAgXCIwMTEwMDAwMFwiLCBcIjAxMTAwMDAxXCIsIFwiMDExMDAwMTBcIixcbiAgICBcIjAxMTAwMDExXCIsIFwiMDExMDAxMDBcIiwgXCIwMTEwMDEwMVwiLFxuICAgIFwiMDExMDAxMTBcIiwgXCIwMTEwMDExMVwiLCBcIjAxMTAxMDAwXCIsXG4gICAgXCIwMTEwMTAwMVwiLCBcIjAxMTAxMDEwXCIsIFwiMDExMDEwMTFcIixcbiAgICBcIjAxMTAxMTAwXCIsIFwiMDExMDExMDFcIiwgXCIwMTEwMTExMFwiLFxuICAgIFwiMDExMDExMTFcIiwgXCIwMTExMDAwMFwiLCBcIjAxMTEwMDAxXCIsXG4gICAgXCIwMTExMDAxMFwiLCBcIjAxMTEwMDExXCIsIFwiMDExMTAxMDBcIixcbiAgICBcIjAxMTEwMTAxXCIsIFwiMDExMTAxMTBcIiwgXCIwMTExMDExMVwiLFxuICAgIFwiMDExMTEwMDBcIiwgXCIwMTExMTAwMVwiLCBcIjAxMTExMDEwXCIsXG4gICAgXCIwMTExMTAxMVwiLCBcIjAxMTExMTAwXCIsIFwiMDExMTExMDFcIixcbiAgICBcIjAxMTExMTEwXCIsIFwiMDExMTExMTFcIiwgXCIxMDAwMDAwMFwiLFxuICAgIFwiMTAwMDAwMDFcIiwgXCIxMDAwMDAxMFwiLCBcIjEwMDAwMDExXCIsXG4gICAgXCIxMDAwMDEwMFwiLCBcIjEwMDAwMTAxXCIsIFwiMTAwMDAxMTBcIixcbiAgICBcIjEwMDAwMTExXCIsIFwiMTAwMDEwMDBcIiwgXCIxMDAwMTAwMVwiLFxuICAgIFwiMTAwMDEwMTBcIiwgXCIxMDAwMTAxMVwiLCBcIjEwMDAxMTAwXCIsXG4gICAgXCIxMDAwMTEwMVwiLCBcIjEwMDAxMTEwXCIsIFwiMTAwMDExMTFcIixcbiAgICBcIjEwMDEwMDAwXCIsIFwiMTAwMTAwMDFcIiwgXCIxMDAxMDAxMFwiLFxuICAgIFwiMTAwMTAwMTFcIiwgXCIxMDAxMDEwMFwiLCBcIjEwMDEwMTAxXCIsXG4gICAgXCIxMDAxMDExMFwiLCBcIjEwMDEwMTExXCIsIFwiMTAwMTEwMDBcIixcbiAgICBcIjEwMDExMDAxXCIsIFwiMTAwMTEwMTBcIiwgXCIxMDAxMTAxMVwiLFxuICAgIFwiMTAwMTExMDBcIiwgXCIxMDAxMTEwMVwiLCBcIjEwMDExMTEwXCIsXG4gICAgXCIxMDAxMTExMVwiLCBcIjEwMTAwMDAwXCIsIFwiMTAxMDAwMDFcIixcbiAgICBcIjEwMTAwMDEwXCIsIFwiMTAxMDAwMTFcIiwgXCIxMDEwMDEwMFwiLFxuICAgIFwiMTAxMDAxMDFcIiwgXCIxMDEwMDExMFwiLCBcIjEwMTAwMTExXCIsXG4gICAgXCIxMDEwMTAwMFwiLCBcIjEwMTAxMDAxXCIsIFwiMTAxMDEwMTBcIixcbiAgICBcIjEwMTAxMDExXCIsIFwiMTAxMDExMDBcIiwgXCIxMDEwMTEwMVwiLFxuICAgIFwiMTAxMDExMTBcIiwgXCIxMDEwMTExMVwiLCBcIjEwMTEwMDAwXCIsXG4gICAgXCIxMDExMDAwMVwiLCBcIjEwMTEwMDEwXCIsIFwiMTAxMTAwMTFcIixcbiAgICBcIjEwMTEwMTAwXCIsIFwiMTAxMTAxMDFcIiwgXCIxMDExMDExMFwiLFxuICAgIFwiMTAxMTAxMTFcIiwgXCIxMDExMTAwMFwiLCBcIjEwMTExMDAxXCIsXG4gICAgXCIxMDExMTAxMFwiLCBcIjEwMTExMDExXCIsIFwiMTAxMTExMDBcIixcbiAgICBcIjEwMTExMTAxXCIsIFwiMTAxMTExMTBcIiwgXCIxMDExMTExMVwiLFxuICAgIFwiMTEwMDAwMDBcIiwgXCIxMTAwMDAwMVwiLCBcIjExMDAwMDEwXCIsXG4gICAgXCIxMTAwMDAxMVwiLCBcIjExMDAwMTAwXCIsIFwiMTEwMDAxMDFcIixcbiAgICBcIjExMDAwMTEwXCIsIFwiMTEwMDAxMTFcIiwgXCIxMTAwMTAwMFwiLFxuICAgIFwiMTEwMDEwMDFcIiwgXCIxMTAwMTAxMFwiLCBcIjExMDAxMDExXCIsXG4gICAgXCIxMTAwMTEwMFwiLCBcIjExMDAxMTAxXCIsIFwiMTEwMDExMTBcIixcbiAgICBcIjExMDAxMTExXCIsIFwiMTEwMTAwMDBcIiwgXCIxMTAxMDAwMVwiLFxuICAgIFwiMTEwMTAwMTBcIiwgXCIxMTAxMDAxMVwiLCBcIjExMDEwMTAwXCIsXG4gICAgXCIxMTAxMDEwMVwiLCBcIjExMDEwMTEwXCIsIFwiMTEwMTAxMTFcIixcbiAgICBcIjExMDExMDAwXCIsIFwiMTEwMTEwMDFcIiwgXCIxMTAxMTAxMFwiLFxuICAgIFwiMTEwMTEwMTFcIiwgXCIxMTAxMTEwMFwiLCBcIjExMDExMTAxXCIsXG4gICAgXCIxMTAxMTExMFwiLCBcIjExMDExMTExXCIsIFwiMTExMDAwMDBcIixcbiAgICBcIjExMTAwMDAxXCIsIFwiMTExMDAwMTBcIiwgXCIxMTEwMDAxMVwiLFxuICAgIFwiMTExMDAxMDBcIiwgXCIxMTEwMDEwMVwiLCBcIjExMTAwMTEwXCIsXG4gICAgXCIxMTEwMDExMVwiLCBcIjExMTAxMDAwXCIsIFwiMTExMDEwMDFcIixcbiAgICBcIjExMTAxMDEwXCIsIFwiMTExMDEwMTFcIiwgXCIxMTEwMTEwMFwiLFxuICAgIFwiMTExMDExMDFcIiwgXCIxMTEwMTExMFwiLCBcIjExMTAxMTExXCIsXG4gICAgXCIxMTExMDAwMFwiLCBcIjExMTEwMDAxXCIsIFwiMTExMTAwMTBcIixcbiAgICBcIjExMTEwMDExXCIsIFwiMTExMTAxMDBcIiwgXCIxMTExMDEwMVwiLFxuICAgIFwiMTExMTAxMTBcIiwgXCIxMTExMDExMVwiLCBcIjExMTExMDAwXCIsXG4gICAgXCIxMTExMTAwMVwiLCBcIjExMTExMDEwXCIsIFwiMTExMTEwMTFcIixcbiAgICBcIjExMTExMTAwXCIsIFwiMTExMTExMDFcIiwgXCIxMTExMTExMFwiLFxuICAgIFwiMTExMTExMTFcIlxuXTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bytestreamjs/build/mjs/bit.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bytestreamjs/build/mjs/bit_stream.js":
/*!***********************************************************!*\
  !*** ./node_modules/bytestreamjs/build/mjs/bit_stream.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BitStream: () => (/* binding */ BitStream)\n/* harmony export */ });\n/* harmony import */ var _bit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bit */ \"(ssr)/./node_modules/bytestreamjs/build/mjs/bit.js\");\n/* harmony import */ var _byte_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./byte_stream */ \"(ssr)/./node_modules/bytestreamjs/build/mjs/byte_stream.js\");\n\n\nclass BitStream {\n    constructor(parameters) {\n        this.buffer = new ArrayBuffer(0);\n        this.view = new Uint8Array(this.buffer);\n        this.bitsCount = 0;\n        if (parameters) {\n            if (\"byteStream\" in parameters) {\n                this.fromByteStream(parameters.byteStream);\n            }\n            if (\"view\" in parameters) {\n                this.fromUint8Array(parameters.view);\n            }\n            if (\"buffer\" in parameters) {\n                this.fromArrayBuffer(parameters.buffer);\n            }\n            if (\"string\" in parameters) {\n                this.fromString(parameters.string);\n            }\n            if (\"uint32\" in parameters) {\n                this.fromUint32(parameters.uint32);\n            }\n            if (\"bitsCount\" in parameters && parameters.bitsCount) {\n                this.bitsCount = parameters.bitsCount;\n            }\n        }\n    }\n    clear() {\n        this.buffer = new ArrayBuffer(0);\n        this.view = new Uint8Array(this.buffer);\n        this.bitsCount = 0;\n    }\n    fromByteStream(stream) {\n        this.fromUint8Array(stream.view);\n    }\n    fromArrayBuffer(array) {\n        this.buffer = array;\n        this.view = new Uint8Array(array);\n        this.bitsCount = this.view.length << 3;\n    }\n    fromUint8Array(array) {\n        this.fromArrayBuffer(new Uint8Array(array).buffer);\n    }\n    fromString(string) {\n        const stringLength = string.length;\n        this.buffer = new ArrayBuffer((stringLength >> 3) + ((stringLength % 8) ? 1 : 0));\n        this.view = new Uint8Array(this.buffer);\n        this.bitsCount = ((stringLength >> 3) + 1) << 3;\n        let byteIndex = 0;\n        for (let i = 0; i < stringLength; i++) {\n            if (string[i] == \"1\")\n                this.view[byteIndex] |= 1 << (7 - (i % 8));\n            if (i && (((i + 1) % 8) == 0))\n                byteIndex++;\n        }\n        if (stringLength % 8)\n            this.shiftRight(8 - (stringLength % 8));\n        this.bitsCount = stringLength;\n    }\n    fromUint32(uint32) {\n        this.buffer = new ArrayBuffer(4);\n        this.view = new Uint8Array(this.buffer);\n        const value = new Uint32Array([uint32]);\n        const view = new Uint8Array(value.buffer);\n        for (let i = 3; i >= 0; i--)\n            this.view[i] = view[3 - i];\n        this.bitsCount = 32;\n    }\n    toString(start, length) {\n        if (start == null) {\n            start = 0;\n        }\n        if ((start >= this.view.length) || (start < 0)) {\n            start = 0;\n        }\n        if (length == null) {\n            length = this.view.length - start;\n        }\n        if ((length >= this.view.length) || (length < 0)) {\n            length = this.view.length - start;\n        }\n        const result = [];\n        for (let i = start; i < (start + length); i++) {\n            result.push(_bit__WEBPACK_IMPORTED_MODULE_0__.bitsToStringArray[this.view[i]]);\n        }\n        return result.join(\"\").substring((this.view.length << 3) - this.bitsCount);\n    }\n    shiftRight(shift, needShrink = true) {\n        if (this.view.length == 0) {\n            return;\n        }\n        if ((shift < 0) || (shift > 8)) {\n            throw new Error(\"The \\\"shift\\\" parameter must be in range 0-8\");\n        }\n        if (shift > this.bitsCount) {\n            throw new Error(\"The \\\"shift\\\" parameter can not be bigger than \\\"this.bitsCount\\\"\");\n        }\n        const shiftMask = 0xFF >> (8 - shift);\n        this.view[this.view.length - 1] >>= shift;\n        for (let i = (this.view.length - 2); i >= 0; i--) {\n            this.view[i + 1] |= (this.view[i] & shiftMask) << (8 - shift);\n            this.view[i] >>= shift;\n        }\n        this.bitsCount -= shift;\n        if (this.bitsCount == 0) {\n            this.clear();\n        }\n        if (needShrink) {\n            this.shrink();\n        }\n    }\n    shiftLeft(shift) {\n        if (this.view.length == 0) {\n            return;\n        }\n        if ((shift < 0) || (shift > 8)) {\n            throw new Error(\"The \\\"shift\\\" parameter must be in range 0-8\");\n        }\n        if (shift > this.bitsCount) {\n            throw new Error(\"The \\\"shift\\\" parameter can not be bigger than \\\"this.bitsCount\\\"\");\n        }\n        const bitsOffset = this.bitsCount & 0x07;\n        if (bitsOffset > shift) {\n            this.view[0] &= 0xFF >> (bitsOffset + shift);\n        }\n        else {\n            const view = this.view.slice(1);\n            view[0] &= 0xFF >> (shift - bitsOffset);\n            this.buffer = view.buffer;\n            this.view = view;\n        }\n        this.bitsCount -= shift;\n        if (this.bitsCount == 0) {\n            this.clear();\n        }\n    }\n    slice(start = 0, end = 0) {\n        let valueShift = 0;\n        if (this.bitsCount % 8) {\n            valueShift = (8 - (this.bitsCount % 8));\n        }\n        start += valueShift;\n        end += valueShift;\n        const maxEnd = (this.view.length << 3) - 1;\n        if ((start < 0) || (start > maxEnd)) {\n            return new BitStream();\n        }\n        if (!end) {\n            end = maxEnd;\n        }\n        if ((end < 0) || (end > maxEnd)) {\n            return new BitStream();\n        }\n        if ((end - start + 1) > this.bitsCount) {\n            return new BitStream();\n        }\n        const startIndex = start >> 3;\n        const startOffset = start & 0x07;\n        const endIndex = end >> 3;\n        const endOffset = end & 0x07;\n        const bitsLength = ((endIndex - startIndex) == 0) ? 1 : (endIndex - startIndex + 1);\n        const result = new BitStream({\n            buffer: this.buffer.slice(startIndex, startIndex + bitsLength),\n            bitsCount: bitsLength << 3,\n        });\n        result.view[0] &= (0xFF >> startOffset);\n        result.view[bitsLength] &= (0xFF << (7 - endOffset));\n        if (7 - endOffset) {\n            result.shiftRight(7 - endOffset, false);\n        }\n        result.bitsCount = (end - start + 1);\n        result.shrink();\n        return result;\n    }\n    copy(start = 0, length = 0) {\n        const maxEnd = (this.view.length << 3) - 1;\n        if ((start < 0) || (start > maxEnd)) {\n            return new BitStream();\n        }\n        if (!length) {\n            length = (this.view.length << 3) - start - 1;\n        }\n        if (length > this.bitsCount) {\n            return new BitStream();\n        }\n        return this.slice(start, start + length - 1);\n    }\n    shrink() {\n        const currentLength = (this.bitsCount >> 3) + ((this.bitsCount % 8) ? 1 : 0);\n        if (currentLength < this.view.length) {\n            const view = this.view.slice(this.view.length - currentLength, (this.view.length - currentLength) + currentLength);\n            this.view = view;\n            this.buffer = view.buffer;\n        }\n    }\n    reverseBytes() {\n        for (let i = 0; i < this.view.length; i++) {\n            this.view[i] = ((this.view[i] * 0x0802 & 0x22110) | (this.view[i] * 0x8020 & 0x88440)) * 0x10101 >> 16;\n        }\n        if (this.bitsCount % 8) {\n            const currentLength = (this.bitsCount >> 3) + ((this.bitsCount % 8) ? 1 : 0);\n            this.view[this.view.length - currentLength] >>= (8 - (this.bitsCount & 0x07));\n        }\n    }\n    reverseValue() {\n        const initialValue = this.toString();\n        const initialValueLength = initialValue.length;\n        const reversedValue = new Array(initialValueLength);\n        for (let i = 0; i < initialValueLength; i++) {\n            reversedValue[initialValueLength - 1 - i] = initialValue[i];\n        }\n        this.fromString(reversedValue.join(\"\"));\n    }\n    getNumberValue() {\n        const byteLength = (this.view.length - 1);\n        if (byteLength > 3) {\n            return (-1);\n        }\n        if (byteLength == (-1)) {\n            return 0;\n        }\n        const value = new Uint32Array(1);\n        const view = new Uint8Array(value.buffer);\n        for (let i = byteLength; i >= 0; i--) {\n            view[byteLength - i] = this.view[i];\n        }\n        return value[0];\n    }\n    findPattern(pattern, start, length, backward) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString(),\n        });\n        const stringPattern = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: pattern.toString()\n        });\n        return stringStream.findPattern(stringPattern, start, length, backward);\n    }\n    findFirstIn(patterns, start, length, backward) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString(),\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.findFirstIn(stringPatterns, start, length, backward);\n    }\n    findAllIn(patterns, start, length) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.findAllIn(stringPatterns, start, length);\n    }\n    findAllPatternIn(pattern, start, length) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringPattern = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: pattern.toString()\n        });\n        return stringStream.findAllPatternIn(stringPattern, start, length);\n    }\n    findFirstNotIn(patterns, start, length, backward) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.findFirstNotIn(stringPatterns, start, length, backward);\n    }\n    findAllNotIn(patterns, start, length) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.findAllNotIn(stringPatterns, start, length);\n    }\n    findFirstSequence(patterns, start, length, backward) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.findFirstSequence(stringPatterns, start, length, backward);\n    }\n    findAllSequences(patterns, start, length) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.findAllSequences(stringPatterns, start, length);\n    }\n    findPairedPatterns(leftPattern, rightPattern, start, length) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringLeftPattern = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: leftPattern.toString()\n        });\n        const stringRightPattern = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: rightPattern.toString()\n        });\n        return stringStream.findPairedPatterns(stringLeftPattern, stringRightPattern, start, length);\n    }\n    findPairedArrays(inputLeftPatterns, inputRightPatterns, start, length) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringLeftPatterns = new Array(inputLeftPatterns.length);\n        for (let i = 0; i < inputLeftPatterns.length; i++) {\n            stringLeftPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: inputLeftPatterns[i].toString()\n            });\n        }\n        const stringRightPatterns = new Array(inputRightPatterns.length);\n        for (let i = 0; i < inputRightPatterns.length; i++) {\n            stringRightPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: inputRightPatterns[i].toString()\n            });\n        }\n        return stringStream.findPairedArrays(stringLeftPatterns, stringRightPatterns, start, length);\n    }\n    replacePattern(searchPattern, replacePattern, start, length) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringSearchPattern = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: searchPattern.toString()\n        });\n        const stringReplacePattern = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: replacePattern.toString()\n        });\n        if (stringStream.replacePattern(stringSearchPattern, stringReplacePattern, start, length)) {\n            this.fromString(stringStream.toString());\n            return true;\n        }\n        return false;\n    }\n    skipPatterns(patterns, start, length, backward) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.skipPatterns(stringPatterns, start, length, backward);\n    }\n    skipNotPatterns(patterns, start, length, backward) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.skipNotPatterns(stringPatterns, start, length, backward);\n    }\n    append(stream) {\n        this.fromString([\n            this.toString(),\n            stream.toString()\n        ].join(\"\"));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bytestreamjs/build/mjs/bit_stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bytestreamjs/build/mjs/byte_stream.js":
/*!************************************************************!*\
  !*** ./node_modules/bytestreamjs/build/mjs/byte_stream.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ByteStream: () => (/* binding */ ByteStream)\n/* harmony export */ });\nclass ByteStream {\n    constructor(parameters = {}) {\n        if (\"view\" in parameters) {\n            this.fromUint8Array(parameters.view);\n        }\n        else if (\"buffer\" in parameters) {\n            this.fromArrayBuffer(parameters.buffer);\n        }\n        else if (\"string\" in parameters) {\n            this.fromString(parameters.string);\n        }\n        else if (\"hexstring\" in parameters) {\n            this.fromHexString(parameters.hexstring);\n        }\n        else {\n            if (\"length\" in parameters && parameters.length > 0) {\n                this.length = parameters.length;\n                if (parameters.stub) {\n                    for (let i = 0; i < this._view.length; i++) {\n                        this._view[i] = parameters.stub;\n                    }\n                }\n            }\n            else {\n                this.length = 0;\n            }\n        }\n    }\n    set buffer(value) {\n        this._buffer = value;\n        this._view = new Uint8Array(this._buffer);\n    }\n    get buffer() {\n        return this._buffer;\n    }\n    set view(value) {\n        this._buffer = new ArrayBuffer(value.length);\n        this._view = new Uint8Array(this._buffer);\n        this._view.set(value);\n    }\n    get view() {\n        return this._view;\n    }\n    get length() {\n        return this.view.byteLength;\n    }\n    set length(value) {\n        this._buffer = new ArrayBuffer(value);\n        this._view = new Uint8Array(this._buffer);\n    }\n    clear() {\n        this._buffer = new ArrayBuffer(0);\n        this._view = new Uint8Array(this._buffer);\n    }\n    fromArrayBuffer(array) {\n        this._buffer = array;\n        this._view = new Uint8Array(this._buffer);\n    }\n    fromUint8Array(array) {\n        this.fromArrayBuffer(new Uint8Array(array).buffer);\n    }\n    fromString(string) {\n        const stringLength = string.length;\n        this.length = stringLength;\n        for (let i = 0; i < stringLength; i++)\n            this.view[i] = string.charCodeAt(i);\n    }\n    toString(start = 0, length = (this.view.length - start)) {\n        let result = \"\";\n        if ((start >= this.view.length) || (start < 0)) {\n            start = 0;\n        }\n        if ((length >= this.view.length) || (length < 0)) {\n            length = this.view.length - start;\n        }\n        for (let i = start; i < (start + length); i++)\n            result += String.fromCharCode(this.view[i]);\n        return result;\n    }\n    fromHexString(hexString) {\n        const stringLength = hexString.length;\n        this.buffer = new ArrayBuffer(stringLength >> 1);\n        this.view = new Uint8Array(this.buffer);\n        const hexMap = new Map();\n        hexMap.set(\"0\", 0x00);\n        hexMap.set(\"1\", 0x01);\n        hexMap.set(\"2\", 0x02);\n        hexMap.set(\"3\", 0x03);\n        hexMap.set(\"4\", 0x04);\n        hexMap.set(\"5\", 0x05);\n        hexMap.set(\"6\", 0x06);\n        hexMap.set(\"7\", 0x07);\n        hexMap.set(\"8\", 0x08);\n        hexMap.set(\"9\", 0x09);\n        hexMap.set(\"A\", 0x0A);\n        hexMap.set(\"a\", 0x0A);\n        hexMap.set(\"B\", 0x0B);\n        hexMap.set(\"b\", 0x0B);\n        hexMap.set(\"C\", 0x0C);\n        hexMap.set(\"c\", 0x0C);\n        hexMap.set(\"D\", 0x0D);\n        hexMap.set(\"d\", 0x0D);\n        hexMap.set(\"E\", 0x0E);\n        hexMap.set(\"e\", 0x0E);\n        hexMap.set(\"F\", 0x0F);\n        hexMap.set(\"f\", 0x0F);\n        let j = 0;\n        let temp = 0x00;\n        for (let i = 0; i < stringLength; i++) {\n            if (!(i % 2)) {\n                temp = hexMap.get(hexString.charAt(i)) << 4;\n            }\n            else {\n                temp |= hexMap.get(hexString.charAt(i));\n                this.view[j] = temp;\n                j++;\n            }\n        }\n    }\n    toHexString(start = 0, length = (this.view.length - start)) {\n        let result = \"\";\n        if ((start >= this.view.length) || (start < 0)) {\n            start = 0;\n        }\n        if ((length >= this.view.length) || (length < 0)) {\n            length = this.view.length - start;\n        }\n        for (let i = start; i < (start + length); i++) {\n            const str = this.view[i].toString(16).toUpperCase();\n            result = result + ((str.length == 1) ? \"0\" : \"\") + str;\n        }\n        return result;\n    }\n    copy(start = 0, length = (this.length - start)) {\n        if (!start && !this.length) {\n            return new ByteStream();\n        }\n        if ((start < 0) || (start > (this.length - 1))) {\n            throw new Error(`Wrong start position: ${start}`);\n        }\n        const stream = new ByteStream({\n            buffer: this._buffer.slice(start, start + length)\n        });\n        return stream;\n    }\n    slice(start = 0, end = this.length) {\n        if (!start && !this.length) {\n            return new ByteStream();\n        }\n        if ((start < 0) || (start > (this.length - 1))) {\n            throw new Error(`Wrong start position: ${start}`);\n        }\n        const stream = new ByteStream({\n            buffer: this._buffer.slice(start, end),\n        });\n        return stream;\n    }\n    realloc(size) {\n        const buffer = new ArrayBuffer(size);\n        const view = new Uint8Array(buffer);\n        if (size > this._view.length)\n            view.set(this._view);\n        else {\n            view.set(new Uint8Array(this._buffer, 0, size));\n        }\n        this._buffer = buffer;\n        this._view = new Uint8Array(this._buffer);\n    }\n    append(stream) {\n        const initialSize = this.length;\n        const streamViewLength = stream.length;\n        const subarrayView = stream._view.subarray();\n        this.realloc(initialSize + streamViewLength);\n        this._view.set(subarrayView, initialSize);\n    }\n    insert(stream, start = 0, length = (this.length - start)) {\n        if (start > (this.length - 1))\n            return false;\n        if (length > (this.length - start)) {\n            length = this.length - start;\n        }\n        if (length > stream.length) {\n            length = stream.length;\n        }\n        if (length == stream.length)\n            this._view.set(stream._view, start);\n        else {\n            this._view.set(stream._view.subarray(0, length), start);\n        }\n        return true;\n    }\n    isEqual(stream) {\n        if (this.length != stream.length)\n            return false;\n        for (let i = 0; i < stream.length; i++) {\n            if (this.view[i] != stream.view[i])\n                return false;\n        }\n        return true;\n    }\n    isEqualView(view) {\n        if (view.length != this.view.length)\n            return false;\n        for (let i = 0; i < view.length; i++) {\n            if (this.view[i] != view[i])\n                return false;\n        }\n        return true;\n    }\n    findPattern(pattern, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const patternLength = pattern.length;\n        if (patternLength > length) {\n            return (-1);\n        }\n        const patternArray = [];\n        for (let i = 0; i < patternLength; i++)\n            patternArray.push(pattern.view[i]);\n        for (let i = 0; i <= (length - patternLength); i++) {\n            let equal = true;\n            const equalStart = (backward) ? (start - patternLength - i) : (start + i);\n            for (let j = 0; j < patternLength; j++) {\n                if (this.view[j + equalStart] != patternArray[j]) {\n                    equal = false;\n                    break;\n                }\n            }\n            if (equal) {\n                return (backward) ? (start - patternLength - i) : (start + patternLength + i);\n            }\n        }\n        return (-1);\n    }\n    findFirstIn(patterns, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const result = {\n            id: (-1),\n            position: (backward) ? 0 : (start + length),\n            length: 0\n        };\n        for (let i = 0; i < patterns.length; i++) {\n            const position = this.findPattern(patterns[i], start, length, backward);\n            if (position != (-1)) {\n                let valid = false;\n                const patternLength = patterns[i].length;\n                if (backward) {\n                    if ((position - patternLength) >= (result.position - result.length))\n                        valid = true;\n                }\n                else {\n                    if ((position - patternLength) <= (result.position - result.length))\n                        valid = true;\n                }\n                if (valid) {\n                    result.position = position;\n                    result.id = i;\n                    result.length = patternLength;\n                }\n            }\n        }\n        return result;\n    }\n    findAllIn(patterns, start_, length_) {\n        let { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let patternFound = {\n            id: (-1),\n            position: start\n        };\n        do {\n            const position = patternFound.position;\n            patternFound = this.findFirstIn(patterns, patternFound.position, length);\n            if (patternFound.id == (-1)) {\n                break;\n            }\n            length -= (patternFound.position - position);\n            result.push({\n                id: patternFound.id,\n                position: patternFound.position\n            });\n        } while (true);\n        return result;\n    }\n    findAllPatternIn(pattern, start_, length_) {\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        const patternLength = pattern.length;\n        if (patternLength > length) {\n            return (-1);\n        }\n        const patternArray = Array.from(pattern.view);\n        for (let i = 0; i <= (length - patternLength); i++) {\n            let equal = true;\n            const equalStart = start + i;\n            for (let j = 0; j < patternLength; j++) {\n                if (this.view[j + equalStart] != patternArray[j]) {\n                    equal = false;\n                    break;\n                }\n            }\n            if (equal) {\n                result.push(start + patternLength + i);\n                i += (patternLength - 1);\n            }\n        }\n        return result;\n    }\n    findFirstNotIn(patterns, start_, length_, backward_) {\n        let { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const result = {\n            left: {\n                id: (-1),\n                position: start\n            },\n            right: {\n                id: (-1),\n                position: 0\n            },\n            value: new ByteStream()\n        };\n        let currentLength = length;\n        while (currentLength > 0) {\n            result.right = this.findFirstIn(patterns, (backward) ? (start - length + currentLength) : (start + length - currentLength), currentLength, backward);\n            if (result.right.id == (-1)) {\n                length = currentLength;\n                if (backward) {\n                    start -= length;\n                }\n                else {\n                    start = result.left.position;\n                }\n                result.value = new ByteStream({\n                    buffer: this._buffer.slice(start, start + length),\n                });\n                break;\n            }\n            if (result.right.position != ((backward) ? (result.left.position - patterns[result.right.id].length) : (result.left.position + patterns[result.right.id].length))) {\n                if (backward) {\n                    start = result.right.position + patterns[result.right.id].length;\n                    length = result.left.position - result.right.position - patterns[result.right.id].length;\n                }\n                else {\n                    start = result.left.position;\n                    length = result.right.position - result.left.position - patterns[result.right.id].length;\n                }\n                result.value = new ByteStream({\n                    buffer: this._buffer.slice(start, start + length),\n                });\n                break;\n            }\n            result.left = result.right;\n            currentLength -= patterns[result.right.id].length;\n        }\n        if (backward) {\n            const temp = result.right;\n            result.right = result.left;\n            result.left = temp;\n        }\n        return result;\n    }\n    findAllNotIn(patterns, start_, length_) {\n        let { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let patternFound = {\n            left: {\n                id: (-1),\n                position: start\n            },\n            right: {\n                id: (-1),\n                position: start\n            },\n            value: new ByteStream()\n        };\n        do {\n            const position = patternFound.right.position;\n            patternFound = this.findFirstNotIn(patterns, patternFound.right.position, length);\n            length -= (patternFound.right.position - position);\n            result.push({\n                left: {\n                    id: patternFound.left.id,\n                    position: patternFound.left.position\n                },\n                right: {\n                    id: patternFound.right.id,\n                    position: patternFound.right.position\n                },\n                value: patternFound.value\n            });\n        } while (patternFound.right.id != (-1));\n        return result;\n    }\n    findFirstSequence(patterns, start_, length_, backward_) {\n        let { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const firstIn = this.skipNotPatterns(patterns, start, length, backward);\n        if (firstIn == (-1)) {\n            return {\n                position: (-1),\n                value: new ByteStream()\n            };\n        }\n        const firstNotIn = this.skipPatterns(patterns, firstIn, length - ((backward) ? (start - firstIn) : (firstIn - start)), backward);\n        if (backward) {\n            start = firstNotIn;\n            length = (firstIn - firstNotIn);\n        }\n        else {\n            start = firstIn;\n            length = (firstNotIn - firstIn);\n        }\n        const value = new ByteStream({\n            buffer: this._buffer.slice(start, start + length),\n        });\n        return {\n            position: firstNotIn,\n            value\n        };\n    }\n    findAllSequences(patterns, start_, length_) {\n        let { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let patternFound = {\n            position: start,\n            value: new ByteStream()\n        };\n        do {\n            const position = patternFound.position;\n            patternFound = this.findFirstSequence(patterns, patternFound.position, length);\n            if (patternFound.position != (-1)) {\n                length -= (patternFound.position - position);\n                result.push({\n                    position: patternFound.position,\n                    value: patternFound.value,\n                });\n            }\n        } while (patternFound.position != (-1));\n        return result;\n    }\n    findPairedPatterns(leftPattern, rightPattern, start_, length_) {\n        const result = [];\n        if (leftPattern.isEqual(rightPattern))\n            return result;\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        let currentPositionLeft = 0;\n        const leftPatterns = this.findAllPatternIn(leftPattern, start, length);\n        if (!Array.isArray(leftPatterns) || leftPatterns.length == 0) {\n            return result;\n        }\n        const rightPatterns = this.findAllPatternIn(rightPattern, start, length);\n        if (!Array.isArray(rightPatterns) || rightPatterns.length == 0) {\n            return result;\n        }\n        while (currentPositionLeft < leftPatterns.length) {\n            if (rightPatterns.length == 0) {\n                break;\n            }\n            if (leftPatterns[0] == rightPatterns[0]) {\n                result.push({\n                    left: leftPatterns[0],\n                    right: rightPatterns[0]\n                });\n                leftPatterns.splice(0, 1);\n                rightPatterns.splice(0, 1);\n                continue;\n            }\n            if (leftPatterns[currentPositionLeft] > rightPatterns[0]) {\n                break;\n            }\n            while (leftPatterns[currentPositionLeft] < rightPatterns[0]) {\n                currentPositionLeft++;\n                if (currentPositionLeft >= leftPatterns.length) {\n                    break;\n                }\n            }\n            result.push({\n                left: leftPatterns[currentPositionLeft - 1],\n                right: rightPatterns[0]\n            });\n            leftPatterns.splice(currentPositionLeft - 1, 1);\n            rightPatterns.splice(0, 1);\n            currentPositionLeft = 0;\n        }\n        result.sort((a, b) => (a.left - b.left));\n        return result;\n    }\n    findPairedArrays(inputLeftPatterns, inputRightPatterns, start_, length_) {\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let currentPositionLeft = 0;\n        const leftPatterns = this.findAllIn(inputLeftPatterns, start, length);\n        if (leftPatterns.length == 0)\n            return result;\n        const rightPatterns = this.findAllIn(inputRightPatterns, start, length);\n        if (rightPatterns.length == 0)\n            return result;\n        while (currentPositionLeft < leftPatterns.length) {\n            if (rightPatterns.length == 0) {\n                break;\n            }\n            if (leftPatterns[0].position == rightPatterns[0].position) {\n                result.push({\n                    left: leftPatterns[0],\n                    right: rightPatterns[0]\n                });\n                leftPatterns.splice(0, 1);\n                rightPatterns.splice(0, 1);\n                continue;\n            }\n            if (leftPatterns[currentPositionLeft].position > rightPatterns[0].position) {\n                break;\n            }\n            while (leftPatterns[currentPositionLeft].position < rightPatterns[0].position) {\n                currentPositionLeft++;\n                if (currentPositionLeft >= leftPatterns.length) {\n                    break;\n                }\n            }\n            result.push({\n                left: leftPatterns[currentPositionLeft - 1],\n                right: rightPatterns[0]\n            });\n            leftPatterns.splice(currentPositionLeft - 1, 1);\n            rightPatterns.splice(0, 1);\n            currentPositionLeft = 0;\n        }\n        result.sort((a, b) => (a.left.position - b.left.position));\n        return result;\n    }\n    replacePattern(searchPattern, replacePattern, start_, length_, findAllResult = null) {\n        let result = [];\n        let i;\n        const output = {\n            status: (-1),\n            searchPatternPositions: [],\n            replacePatternPositions: []\n        };\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        if (findAllResult == null) {\n            result = this.findAllIn([searchPattern], start, length);\n            if (result.length == 0) {\n                return output;\n            }\n        }\n        else {\n            result = findAllResult;\n        }\n        output.searchPatternPositions.push(...Array.from(result, element => element.position));\n        const patternDifference = searchPattern.length - replacePattern.length;\n        const changedBuffer = new ArrayBuffer(this.view.length - (result.length * patternDifference));\n        const changedView = new Uint8Array(changedBuffer);\n        changedView.set(new Uint8Array(this.buffer, 0, start));\n        for (i = 0; i < result.length; i++) {\n            const currentPosition = (i == 0) ? start : result[i - 1].position;\n            changedView.set(new Uint8Array(this.buffer, currentPosition, result[i].position - searchPattern.length - currentPosition), currentPosition - i * patternDifference);\n            changedView.set(replacePattern.view, result[i].position - searchPattern.length - i * patternDifference);\n            output.replacePatternPositions.push(result[i].position - searchPattern.length - i * patternDifference);\n        }\n        i--;\n        changedView.set(new Uint8Array(this.buffer, result[i].position, this.length - result[i].position), result[i].position - searchPattern.length + replacePattern.length - i * patternDifference);\n        this.buffer = changedBuffer;\n        this.view = new Uint8Array(this.buffer);\n        output.status = 1;\n        return output;\n    }\n    skipPatterns(patterns, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        let result = start;\n        for (let k = 0; k < patterns.length; k++) {\n            const patternLength = patterns[k].length;\n            const equalStart = (backward) ? (result - patternLength) : (result);\n            let equal = true;\n            for (let j = 0; j < patternLength; j++) {\n                if (this.view[j + equalStart] != patterns[k].view[j]) {\n                    equal = false;\n                    break;\n                }\n            }\n            if (equal) {\n                k = (-1);\n                if (backward) {\n                    result -= patternLength;\n                    if (result <= 0)\n                        return result;\n                }\n                else {\n                    result += patternLength;\n                    if (result >= (start + length))\n                        return result;\n                }\n            }\n        }\n        return result;\n    }\n    skipNotPatterns(patterns, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        let result = (-1);\n        for (let i = 0; i < length; i++) {\n            for (let k = 0; k < patterns.length; k++) {\n                const patternLength = patterns[k].length;\n                const equalStart = (backward) ? (start - i - patternLength) : (start + i);\n                let equal = true;\n                for (let j = 0; j < patternLength; j++) {\n                    if (this.view[j + equalStart] != patterns[k].view[j]) {\n                        equal = false;\n                        break;\n                    }\n                }\n                if (equal) {\n                    result = (backward) ? (start - i) : (start + i);\n                    break;\n                }\n            }\n            if (result != (-1)) {\n                break;\n            }\n        }\n        return result;\n    }\n    prepareFindParameters(start = null, length = null, backward = false) {\n        if (start === null) {\n            start = (backward) ? this.length : 0;\n        }\n        if (start > this.length) {\n            start = this.length;\n        }\n        if (backward) {\n            if (length === null) {\n                length = start;\n            }\n            if (length > start) {\n                length = start;\n            }\n        }\n        else {\n            if (length === null) {\n                length = this.length - start;\n            }\n            if (length > (this.length - start)) {\n                length = this.length - start;\n            }\n        }\n        return { start, length, backward };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bytestreamjs/build/mjs/byte_stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bytestreamjs/build/mjs/helpers.js":
/*!********************************************************!*\
  !*** ./node_modules/bytestreamjs/build/mjs/helpers.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseByteMap: () => (/* binding */ parseByteMap)\n/* harmony export */ });\nfunction parseByteMap(stream, map, elements, start = null, length = null) {\n    if (start === null) {\n        start = 0;\n    }\n    if (start > (stream.length - 1)) {\n        return [];\n    }\n    if (length === null) {\n        length = stream.length - start;\n    }\n    if (length > (stream.length - start)) {\n        length = stream.length - start;\n    }\n    let dataView;\n    if ((start == 0) && (length == stream.length)) {\n        dataView = stream.view;\n    }\n    else {\n        dataView = new Uint8Array(stream.buffer, start, length);\n    }\n    const resultArray = new Array(elements);\n    let elementsCount = 0;\n    let count = 0;\n    const mapLength = map.length;\n    while (count < length) {\n        let structureLength = 0;\n        resultArray[elementsCount] = {};\n        for (let i = 0; i < mapLength; i++) {\n            if (map[i].maxlength == 0) {\n                if (\"defaultValue\" in map[i]) {\n                    (resultArray[elementsCount])[map[i].name] = map[i].defaultValue;\n                }\n                continue;\n            }\n            const array = new Uint8Array(map[i].maxlength);\n            for (let j = 0; j < map[i].maxlength; j++) {\n                array[j] = dataView[count++];\n            }\n            const result = (map[i].func)(array);\n            if (result.status == (-1)) {\n                if (resultArray.length == 1) {\n                    return [];\n                }\n                return resultArray.slice(0, resultArray.length - 1);\n            }\n            if (map[i].type != \"check\") {\n                (resultArray[elementsCount])[map[i].name] = result.value;\n            }\n            count -= (map[i].maxlength - result.length);\n            structureLength += result.length;\n        }\n        (resultArray[elementsCount++]).structureLength = structureLength;\n    }\n    return resultArray;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYnl0ZXN0cmVhbWpzL2J1aWxkL21qcy9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZUFBZTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixzQkFBc0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9EZXNrdG9wL2MycGEgdG9vbC9ub2RlX21vZHVsZXMvYnl0ZXN0cmVhbWpzL2J1aWxkL21qcy9oZWxwZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBwYXJzZUJ5dGVNYXAoc3RyZWFtLCBtYXAsIGVsZW1lbnRzLCBzdGFydCA9IG51bGwsIGxlbmd0aCA9IG51bGwpIHtcbiAgICBpZiAoc3RhcnQgPT09IG51bGwpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgIH1cbiAgICBpZiAoc3RhcnQgPiAoc3RyZWFtLmxlbmd0aCAtIDEpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaWYgKGxlbmd0aCA9PT0gbnVsbCkge1xuICAgICAgICBsZW5ndGggPSBzdHJlYW0ubGVuZ3RoIC0gc3RhcnQ7XG4gICAgfVxuICAgIGlmIChsZW5ndGggPiAoc3RyZWFtLmxlbmd0aCAtIHN0YXJ0KSkge1xuICAgICAgICBsZW5ndGggPSBzdHJlYW0ubGVuZ3RoIC0gc3RhcnQ7XG4gICAgfVxuICAgIGxldCBkYXRhVmlldztcbiAgICBpZiAoKHN0YXJ0ID09IDApICYmIChsZW5ndGggPT0gc3RyZWFtLmxlbmd0aCkpIHtcbiAgICAgICAgZGF0YVZpZXcgPSBzdHJlYW0udmlldztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGRhdGFWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoc3RyZWFtLmJ1ZmZlciwgc3RhcnQsIGxlbmd0aCk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdEFycmF5ID0gbmV3IEFycmF5KGVsZW1lbnRzKTtcbiAgICBsZXQgZWxlbWVudHNDb3VudCA9IDA7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICBjb25zdCBtYXBMZW5ndGggPSBtYXAubGVuZ3RoO1xuICAgIHdoaWxlIChjb3VudCA8IGxlbmd0aCkge1xuICAgICAgICBsZXQgc3RydWN0dXJlTGVuZ3RoID0gMDtcbiAgICAgICAgcmVzdWx0QXJyYXlbZWxlbWVudHNDb3VudF0gPSB7fTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXBMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG1hcFtpXS5tYXhsZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChcImRlZmF1bHRWYWx1ZVwiIGluIG1hcFtpXSkge1xuICAgICAgICAgICAgICAgICAgICAocmVzdWx0QXJyYXlbZWxlbWVudHNDb3VudF0pW21hcFtpXS5uYW1lXSA9IG1hcFtpXS5kZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYXJyYXkgPSBuZXcgVWludDhBcnJheShtYXBbaV0ubWF4bGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWFwW2ldLm1heGxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbal0gPSBkYXRhVmlld1tjb3VudCsrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IChtYXBbaV0uZnVuYykoYXJyYXkpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT0gKC0xKSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRBcnJheS5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRBcnJheS5zbGljZSgwLCByZXN1bHRBcnJheS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXBbaV0udHlwZSAhPSBcImNoZWNrXCIpIHtcbiAgICAgICAgICAgICAgICAocmVzdWx0QXJyYXlbZWxlbWVudHNDb3VudF0pW21hcFtpXS5uYW1lXSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvdW50IC09IChtYXBbaV0ubWF4bGVuZ3RoIC0gcmVzdWx0Lmxlbmd0aCk7XG4gICAgICAgICAgICBzdHJ1Y3R1cmVMZW5ndGggKz0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICAocmVzdWx0QXJyYXlbZWxlbWVudHNDb3VudCsrXSkuc3RydWN0dXJlTGVuZ3RoID0gc3RydWN0dXJlTGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0QXJyYXk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bytestreamjs/build/mjs/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bytestreamjs/build/mjs/index.js":
/*!******************************************************!*\
  !*** ./node_modules/bytestreamjs/build/mjs/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BitStream: () => (/* reexport safe */ _bit_stream__WEBPACK_IMPORTED_MODULE_3__.BitStream),\n/* harmony export */   ByteStream: () => (/* reexport safe */ _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream),\n/* harmony export */   SeqBitStream: () => (/* reexport safe */ _seq_bit_stream__WEBPACK_IMPORTED_MODULE_4__.SeqBitStream),\n/* harmony export */   SeqStream: () => (/* reexport safe */ _seq_stream__WEBPACK_IMPORTED_MODULE_1__.SeqStream),\n/* harmony export */   parseByteMap: () => (/* reexport safe */ _helpers__WEBPACK_IMPORTED_MODULE_2__.parseByteMap)\n/* harmony export */ });\n/* harmony import */ var _byte_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./byte_stream */ \"(ssr)/./node_modules/bytestreamjs/build/mjs/byte_stream.js\");\n/* harmony import */ var _seq_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./seq_stream */ \"(ssr)/./node_modules/bytestreamjs/build/mjs/seq_stream.js\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers */ \"(ssr)/./node_modules/bytestreamjs/build/mjs/helpers.js\");\n/* harmony import */ var _bit_stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bit_stream */ \"(ssr)/./node_modules/bytestreamjs/build/mjs/bit_stream.js\");\n/* harmony import */ var _seq_bit_stream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./seq_bit_stream */ \"(ssr)/./node_modules/bytestreamjs/build/mjs/seq_bit_stream.js\");\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYnl0ZXN0cmVhbWpzL2J1aWxkL21qcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQThCO0FBQ0Q7QUFDSDtBQUNHO0FBQ0kiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9EZXNrdG9wL2MycGEgdG9vbC9ub2RlX21vZHVsZXMvYnl0ZXN0cmVhbWpzL2J1aWxkL21qcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9ieXRlX3N0cmVhbVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2VxX3N0cmVhbVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vaGVscGVyc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYml0X3N0cmVhbVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2VxX2JpdF9zdHJlYW1cIjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bytestreamjs/build/mjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bytestreamjs/build/mjs/seq_bit_stream.js":
/*!***************************************************************!*\
  !*** ./node_modules/bytestreamjs/build/mjs/seq_bit_stream.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SeqBitStream: () => (/* binding */ SeqBitStream)\n/* harmony export */ });\n/* harmony import */ var _bit_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bit_stream */ \"(ssr)/./node_modules/bytestreamjs/build/mjs/bit_stream.js\");\n\nclass SeqBitStream {\n    constructor(parameters = {}) {\n        var _a;\n        this._length = 0;\n        this._start = 0;\n        this.prevLength = 0;\n        this.prevStart = 0;\n        this.stream = ((_a = parameters.stream) === null || _a === void 0 ? void 0 : _a.slice()) || new _bit_stream__WEBPACK_IMPORTED_MODULE_0__.BitStream();\n        this.appendBlock = parameters.appendBlock || 0;\n        if (parameters.start && parameters.start > 0) {\n            this.start = parameters.start;\n        }\n        if (parameters.length && parameters.length > 0) {\n            this.length = parameters.length;\n        }\n        this.backward = parameters.backward || false;\n    }\n    set start(value) {\n        if (value > this.stream.bitsCount) {\n            return;\n        }\n        this._length -= ((this.backward) ? (this._start - value) : (value - this._start));\n        this._start = value;\n        this.prevStart = this._start;\n        this.prevLength = this._length;\n    }\n    get start() {\n        return this._start;\n    }\n    set length(value) {\n        if (value > this.stream.bitsCount) {\n            return;\n        }\n        this.prevLength = this._length;\n        this._length = value;\n    }\n    get length() {\n        return this._length;\n    }\n    set stream(value) {\n        this._stream = value;\n        this.prevLength = this._length;\n        this._length = value.bitsCount;\n        this.prevStart = this._start;\n        this._start = (this.backward) ? this.length : 0;\n    }\n    get stream() {\n        return this._stream;\n    }\n    getBits(length = null) {\n        if (length === null) {\n            length = 0;\n        }\n        else if (length === 0) {\n            return new _bit_stream__WEBPACK_IMPORTED_MODULE_0__.BitStream();\n        }\n        if ((this.start + length) > this.stream.bitsCount) {\n            length = (this.stream.bitsCount - this.start);\n        }\n        let result;\n        if (this.backward) {\n            result = this.stream.copy(this.start - length, length);\n            this.start -= result.bitsCount;\n        }\n        else {\n            result = this.stream.copy(this.start, length);\n            this.start += result.bitsCount;\n        }\n        return result;\n    }\n    getBitsString(length) {\n        return this.getBits(length).toString();\n    }\n    getBitsReversedValue(length) {\n        const initialValue = this.getBitsString(length);\n        const initialValueLength = initialValue.length;\n        let byteIndex;\n        const initialOffset = 8 - (initialValueLength % 8);\n        const reversedValue = new Array(initialValueLength);\n        const value = new Uint32Array(1);\n        const valueView = new Uint8Array(value.buffer, 0, 4);\n        let i;\n        if (initialValueLength > 32) {\n            return (-1);\n        }\n        if (length == 32) {\n            byteIndex = 3;\n        }\n        else {\n            byteIndex = ((initialValueLength - 1) >> 3);\n        }\n        for (i = 0; i < initialValueLength; i++) {\n            reversedValue[initialValueLength - 1 - i] = initialValue[i];\n        }\n        for (i = initialOffset; i < (initialOffset + initialValueLength); i++) {\n            if (reversedValue[i - initialOffset] == \"1\") {\n                valueView[byteIndex] |= 0x01 << (7 - (i % 8));\n            }\n            if (i && (((i + 1) % 8) == 0)) {\n                byteIndex--;\n            }\n        }\n        return value[0];\n    }\n    toString() {\n        const streamToDisplay = this.stream.copy(this.start, this.length);\n        return streamToDisplay.toString();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYnl0ZXN0cmVhbWpzL2J1aWxkL21qcy9zZXFfYml0X3N0cmVhbS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5QztBQUNsQztBQUNQLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0dBQXdHLGtEQUFTO0FBQ2pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGtEQUFTO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix3QkFBd0I7QUFDNUM7QUFDQTtBQUNBLGdDQUFnQywwQ0FBMEM7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0Rlc2t0b3AvYzJwYSB0b29sL25vZGVfbW9kdWxlcy9ieXRlc3RyZWFtanMvYnVpbGQvbWpzL3NlcV9iaXRfc3RyZWFtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJpdFN0cmVhbSB9IGZyb20gXCIuL2JpdF9zdHJlYW1cIjtcbmV4cG9ydCBjbGFzcyBTZXFCaXRTdHJlYW0ge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuX2xlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuX3N0YXJ0ID0gMDtcbiAgICAgICAgdGhpcy5wcmV2TGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5wcmV2U3RhcnQgPSAwO1xuICAgICAgICB0aGlzLnN0cmVhbSA9ICgoX2EgPSBwYXJhbWV0ZXJzLnN0cmVhbSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNsaWNlKCkpIHx8IG5ldyBCaXRTdHJlYW0oKTtcbiAgICAgICAgdGhpcy5hcHBlbmRCbG9jayA9IHBhcmFtZXRlcnMuYXBwZW5kQmxvY2sgfHwgMDtcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMuc3RhcnQgJiYgcGFyYW1ldGVycy5zdGFydCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQgPSBwYXJhbWV0ZXJzLnN0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbWV0ZXJzLmxlbmd0aCAmJiBwYXJhbWV0ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gcGFyYW1ldGVycy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYWNrd2FyZCA9IHBhcmFtZXRlcnMuYmFja3dhcmQgfHwgZmFsc2U7XG4gICAgfVxuICAgIHNldCBzdGFydCh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPiB0aGlzLnN0cmVhbS5iaXRzQ291bnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9sZW5ndGggLT0gKCh0aGlzLmJhY2t3YXJkKSA/ICh0aGlzLl9zdGFydCAtIHZhbHVlKSA6ICh2YWx1ZSAtIHRoaXMuX3N0YXJ0KSk7XG4gICAgICAgIHRoaXMuX3N0YXJ0ID0gdmFsdWU7XG4gICAgICAgIHRoaXMucHJldlN0YXJ0ID0gdGhpcy5fc3RhcnQ7XG4gICAgICAgIHRoaXMucHJldkxlbmd0aCA9IHRoaXMuX2xlbmd0aDtcbiAgICB9XG4gICAgZ2V0IHN0YXJ0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhcnQ7XG4gICAgfVxuICAgIHNldCBsZW5ndGgodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID4gdGhpcy5zdHJlYW0uYml0c0NvdW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcmV2TGVuZ3RoID0gdGhpcy5fbGVuZ3RoO1xuICAgICAgICB0aGlzLl9sZW5ndGggPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xlbmd0aDtcbiAgICB9XG4gICAgc2V0IHN0cmVhbSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9zdHJlYW0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5wcmV2TGVuZ3RoID0gdGhpcy5fbGVuZ3RoO1xuICAgICAgICB0aGlzLl9sZW5ndGggPSB2YWx1ZS5iaXRzQ291bnQ7XG4gICAgICAgIHRoaXMucHJldlN0YXJ0ID0gdGhpcy5fc3RhcnQ7XG4gICAgICAgIHRoaXMuX3N0YXJ0ID0gKHRoaXMuYmFja3dhcmQpID8gdGhpcy5sZW5ndGggOiAwO1xuICAgIH1cbiAgICBnZXQgc3RyZWFtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RyZWFtO1xuICAgIH1cbiAgICBnZXRCaXRzKGxlbmd0aCA9IG51bGwpIHtcbiAgICAgICAgaWYgKGxlbmd0aCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbGVuZ3RoID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQml0U3RyZWFtKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh0aGlzLnN0YXJ0ICsgbGVuZ3RoKSA+IHRoaXMuc3RyZWFtLmJpdHNDb3VudCkge1xuICAgICAgICAgICAgbGVuZ3RoID0gKHRoaXMuc3RyZWFtLmJpdHNDb3VudCAtIHRoaXMuc3RhcnQpO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIGlmICh0aGlzLmJhY2t3YXJkKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnN0cmVhbS5jb3B5KHRoaXMuc3RhcnQgLSBsZW5ndGgsIGxlbmd0aCk7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0IC09IHJlc3VsdC5iaXRzQ291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnN0cmVhbS5jb3B5KHRoaXMuc3RhcnQsIGxlbmd0aCk7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0ICs9IHJlc3VsdC5iaXRzQ291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZ2V0Qml0c1N0cmluZyhsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Qml0cyhsZW5ndGgpLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGdldEJpdHNSZXZlcnNlZFZhbHVlKGxlbmd0aCkge1xuICAgICAgICBjb25zdCBpbml0aWFsVmFsdWUgPSB0aGlzLmdldEJpdHNTdHJpbmcobGVuZ3RoKTtcbiAgICAgICAgY29uc3QgaW5pdGlhbFZhbHVlTGVuZ3RoID0gaW5pdGlhbFZhbHVlLmxlbmd0aDtcbiAgICAgICAgbGV0IGJ5dGVJbmRleDtcbiAgICAgICAgY29uc3QgaW5pdGlhbE9mZnNldCA9IDggLSAoaW5pdGlhbFZhbHVlTGVuZ3RoICUgOCk7XG4gICAgICAgIGNvbnN0IHJldmVyc2VkVmFsdWUgPSBuZXcgQXJyYXkoaW5pdGlhbFZhbHVlTGVuZ3RoKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBuZXcgVWludDMyQXJyYXkoMSk7XG4gICAgICAgIGNvbnN0IHZhbHVlVmlldyA9IG5ldyBVaW50OEFycmF5KHZhbHVlLmJ1ZmZlciwgMCwgNCk7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBpZiAoaW5pdGlhbFZhbHVlTGVuZ3RoID4gMzIpIHtcbiAgICAgICAgICAgIHJldHVybiAoLTEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZW5ndGggPT0gMzIpIHtcbiAgICAgICAgICAgIGJ5dGVJbmRleCA9IDM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBieXRlSW5kZXggPSAoKGluaXRpYWxWYWx1ZUxlbmd0aCAtIDEpID4+IDMpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbml0aWFsVmFsdWVMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcmV2ZXJzZWRWYWx1ZVtpbml0aWFsVmFsdWVMZW5ndGggLSAxIC0gaV0gPSBpbml0aWFsVmFsdWVbaV07XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gaW5pdGlhbE9mZnNldDsgaSA8IChpbml0aWFsT2Zmc2V0ICsgaW5pdGlhbFZhbHVlTGVuZ3RoKTsgaSsrKSB7XG4gICAgICAgICAgICBpZiAocmV2ZXJzZWRWYWx1ZVtpIC0gaW5pdGlhbE9mZnNldF0gPT0gXCIxXCIpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZVZpZXdbYnl0ZUluZGV4XSB8PSAweDAxIDw8ICg3IC0gKGkgJSA4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaSAmJiAoKChpICsgMSkgJSA4KSA9PSAwKSkge1xuICAgICAgICAgICAgICAgIGJ5dGVJbmRleC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZVswXTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGNvbnN0IHN0cmVhbVRvRGlzcGxheSA9IHRoaXMuc3RyZWFtLmNvcHkodGhpcy5zdGFydCwgdGhpcy5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gc3RyZWFtVG9EaXNwbGF5LnRvU3RyaW5nKCk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bytestreamjs/build/mjs/seq_bit_stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/bytestreamjs/build/mjs/seq_stream.js":
/*!***********************************************************!*\
  !*** ./node_modules/bytestreamjs/build/mjs/seq_stream.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SeqStream: () => (/* binding */ SeqStream)\n/* harmony export */ });\n/* harmony import */ var _byte_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./byte_stream */ \"(ssr)/./node_modules/bytestreamjs/build/mjs/byte_stream.js\");\n\nconst pow2_24 = 16777216;\nclass SeqStream {\n    constructor(parameters = {}) {\n        this._stream = new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream();\n        this._length = 0;\n        this._start = 0;\n        this.backward = false;\n        this.appendBlock = 0;\n        this.prevLength = 0;\n        this.prevStart = 0;\n        if (\"view\" in parameters) {\n            this.stream = new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream({ view: parameters.view });\n        }\n        else if (\"buffer\" in parameters) {\n            this.stream = new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream({ buffer: parameters.buffer });\n        }\n        else if (\"string\" in parameters) {\n            this.stream = new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream({ string: parameters.string });\n        }\n        else if (\"hexstring\" in parameters) {\n            this.stream = new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream({ hexstring: parameters.hexstring });\n        }\n        else if (\"stream\" in parameters) {\n            this.stream = parameters.stream.slice();\n        }\n        else {\n            this.stream = new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream();\n        }\n        if (\"backward\" in parameters && parameters.backward) {\n            this.backward = parameters.backward;\n            this._start = this.stream.length;\n        }\n        if (\"length\" in parameters && parameters.length > 0) {\n            this._length = parameters.length;\n        }\n        if (\"start\" in parameters && parameters.start && parameters.start > 0) {\n            this._start = parameters.start;\n        }\n        if (\"appendBlock\" in parameters && parameters.appendBlock && parameters.appendBlock > 0) {\n            this.appendBlock = parameters.appendBlock;\n        }\n    }\n    set stream(value) {\n        this._stream = value;\n        this.prevLength = this._length;\n        this._length = value.length;\n        this.prevStart = this._start;\n        this._start = 0;\n    }\n    get stream() {\n        return this._stream;\n    }\n    set length(value) {\n        this.prevLength = this._length;\n        this._length = value;\n    }\n    get length() {\n        if (this.appendBlock) {\n            return this.start;\n        }\n        return this._length;\n    }\n    set start(value) {\n        if (value > this.stream.length)\n            return;\n        this.prevStart = this._start;\n        this.prevLength = this._length;\n        this._length -= (this.backward) ? (this._start - value) : (value - this._start);\n        this._start = value;\n    }\n    get start() {\n        return this._start;\n    }\n    get buffer() {\n        return this._stream.buffer.slice(0, this._length);\n    }\n    resetPosition() {\n        this._start = this.prevStart;\n        this._length = this.prevLength;\n    }\n    findPattern(pattern, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const result = this.stream.findPattern(pattern, this.start, this.length, this.backward);\n        if (result == (-1))\n            return result;\n        if (this.backward) {\n            if (result < (this.start - pattern.length - gap)) {\n                return (-1);\n            }\n        }\n        else {\n            if (result > (this.start + pattern.length + gap)) {\n                return (-1);\n            }\n        }\n        this.start = result;\n        return result;\n    }\n    findFirstIn(patterns, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const result = this.stream.findFirstIn(patterns, this.start, this.length, this.backward);\n        if (result.id == (-1))\n            return result;\n        if (this.backward) {\n            if (result.position < (this.start - patterns[result.id].length - gap)) {\n                return {\n                    id: (-1),\n                    position: (this.backward) ? 0 : (this.start + this.length)\n                };\n            }\n        }\n        else {\n            if (result.position > (this.start + patterns[result.id].length + gap)) {\n                return {\n                    id: (-1),\n                    position: (this.backward) ? 0 : (this.start + this.length)\n                };\n            }\n        }\n        this.start = result.position;\n        return result;\n    }\n    findAllIn(patterns) {\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        return this.stream.findAllIn(patterns, start, this.length);\n    }\n    findFirstNotIn(patterns, gap = null) {\n        if ((gap == null) || (gap > this._length)) {\n            gap = this._length;\n        }\n        const result = this._stream.findFirstNotIn(patterns, this._start, this._length, this.backward);\n        if ((result.left.id == (-1)) && (result.right.id == (-1))) {\n            return result;\n        }\n        if (this.backward) {\n            if (result.right.id != (-1)) {\n                if (result.right.position < (this._start - patterns[result.right.id].length - gap)) {\n                    return {\n                        left: {\n                            id: (-1),\n                            position: this._start\n                        },\n                        right: {\n                            id: (-1),\n                            position: 0\n                        },\n                        value: new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream()\n                    };\n                }\n            }\n        }\n        else {\n            if (result.left.id != (-1)) {\n                if (result.left.position > (this._start + patterns[result.left.id].length + gap)) {\n                    return {\n                        left: {\n                            id: (-1),\n                            position: this._start\n                        },\n                        right: {\n                            id: (-1),\n                            position: 0\n                        },\n                        value: new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream()\n                    };\n                }\n            }\n        }\n        if (this.backward) {\n            if (result.left.id == (-1)) {\n                this.start = 0;\n            }\n            else {\n                this.start = result.left.position;\n            }\n        }\n        else {\n            if (result.right.id == (-1)) {\n                this.start = (this._start + this._length);\n            }\n            else {\n                this.start = result.right.position;\n            }\n        }\n        return result;\n    }\n    findAllNotIn(patterns) {\n        const start = (this.backward) ? (this._start - this._length) : this._start;\n        return this._stream.findAllNotIn(patterns, start, this._length);\n    }\n    findFirstSequence(patterns, length = null, gap = null) {\n        if ((length == null) || (length > this._length)) {\n            length = this._length;\n        }\n        if ((gap == null) || (gap > length)) {\n            gap = length;\n        }\n        const result = this._stream.findFirstSequence(patterns, this._start, length, this.backward);\n        if (result.value.length == 0) {\n            return result;\n        }\n        if (this.backward) {\n            if (result.position < (this._start - result.value.length - gap)) {\n                return {\n                    position: (-1),\n                    value: new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream()\n                };\n            }\n        }\n        else {\n            if (result.position > (this._start + result.value.length + gap)) {\n                return {\n                    position: (-1),\n                    value: new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream()\n                };\n            }\n        }\n        this.start = result.position;\n        return result;\n    }\n    findAllSequences(patterns) {\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        return this.stream.findAllSequences(patterns, start, this.length);\n    }\n    findPairedPatterns(leftPattern, rightPattern, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        const result = this.stream.findPairedPatterns(leftPattern, rightPattern, start, this.length);\n        if (result.length) {\n            if (this.backward) {\n                if (result[0].right < (this.start - rightPattern.length - gap)) {\n                    return [];\n                }\n            }\n            else {\n                if (result[0].left > (this.start + leftPattern.length + gap)) {\n                    return [];\n                }\n            }\n        }\n        return result;\n    }\n    findPairedArrays(leftPatterns, rightPatterns, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        const result = this.stream.findPairedArrays(leftPatterns, rightPatterns, start, this.length);\n        if (result.length) {\n            if (this.backward) {\n                if (result[0].right.position < (this.start - rightPatterns[result[0].right.id].length - gap)) {\n                    return [];\n                }\n            }\n            else {\n                if (result[0].left.position > (this.start + leftPatterns[result[0].left.id].length + gap)) {\n                    return [];\n                }\n            }\n        }\n        return result;\n    }\n    replacePattern(searchPattern, replacePattern) {\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        return this.stream.replacePattern(searchPattern, replacePattern, start, this.length);\n    }\n    skipPatterns(patterns) {\n        const result = this.stream.skipPatterns(patterns, this.start, this.length, this.backward);\n        this.start = result;\n        return result;\n    }\n    skipNotPatterns(patterns) {\n        const result = this.stream.skipNotPatterns(patterns, this.start, this.length, this.backward);\n        if (result == (-1))\n            return (-1);\n        this.start = result;\n        return result;\n    }\n    append(stream) {\n        this.beforeAppend(stream.length);\n        this._stream.view.set(stream.view, this._start);\n        this._length += (stream.length * 2);\n        this.start = (this._start + stream.length);\n        this.prevLength -= (stream.length * 2);\n    }\n    appendView(view) {\n        this.beforeAppend(view.length);\n        this._stream.view.set(view, this._start);\n        this._length += (view.length * 2);\n        this.start = (this._start + view.length);\n        this.prevLength -= (view.length * 2);\n    }\n    appendChar(char) {\n        this.beforeAppend(1);\n        this._stream.view[this._start] = char;\n        this._length += 2;\n        this.start = (this._start + 1);\n        this.prevLength -= 2;\n    }\n    appendUint16(number) {\n        this.beforeAppend(2);\n        const value = new Uint16Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this.stream.view[this._start] = view[1];\n        this._stream.view[this._start + 1] = view[0];\n        this._length += 4;\n        this.start = this._start + 2;\n        this.prevLength -= 4;\n    }\n    appendUint24(number) {\n        this.beforeAppend(3);\n        const value = new Uint32Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[2];\n        this._stream.view[this._start + 1] = view[1];\n        this._stream.view[this._start + 2] = view[0];\n        this._length += 6;\n        this.start = (this._start + 3);\n        this.prevLength -= 6;\n    }\n    appendUint32(number) {\n        this.beforeAppend(4);\n        const value = new Uint32Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[3];\n        this._stream.view[this._start + 1] = view[2];\n        this._stream.view[this._start + 2] = view[1];\n        this._stream.view[this._start + 3] = view[0];\n        this._length += 8;\n        this.start = (this._start + 4);\n        this.prevLength -= 8;\n    }\n    appendInt16(number) {\n        this.beforeAppend(2);\n        const value = new Int16Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[1];\n        this._stream.view[this._start + 1] = view[0];\n        this._length += 4;\n        this.start = (this._start + 2);\n        this.prevLength -= 4;\n    }\n    appendInt32(number) {\n        this.beforeAppend(4);\n        const value = new Int32Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[3];\n        this._stream.view[this._start + 1] = view[2];\n        this._stream.view[this._start + 2] = view[1];\n        this._stream.view[this._start + 3] = view[0];\n        this._length += 8;\n        this.start = (this._start + 4);\n        this.prevLength -= 8;\n    }\n    getBlock(size, changeLength = true) {\n        if (this._length <= 0) {\n            return new Uint8Array(0);\n        }\n        if (this._length < size) {\n            size = this._length;\n        }\n        let result;\n        if (this.backward) {\n            const view = this._stream.view.subarray(this._length - size, this._length);\n            result = new Uint8Array(size);\n            for (let i = 0; i < size; i++) {\n                result[size - 1 - i] = view[i];\n            }\n        }\n        else {\n            result = this._stream.view.subarray(this._start, this._start + size);\n        }\n        if (changeLength) {\n            this.start += ((this.backward) ? ((-1) * size) : size);\n        }\n        return result;\n    }\n    getUint16(changeLength = true) {\n        const block = this.getBlock(2, changeLength);\n        if (block.length < 2)\n            return 0;\n        return (block[0] << 8) | block[1];\n    }\n    getInt16(changeLength = true) {\n        const num = this.getUint16(changeLength);\n        const negative = 0x8000;\n        if (num & negative) {\n            return -(negative - (num ^ negative));\n        }\n        return num;\n    }\n    getUint24(changeLength = true) {\n        const block = this.getBlock(4, changeLength);\n        if (block.length < 3)\n            return 0;\n        return (block[0] << 16) |\n            (block[1] << 8) |\n            block[2];\n    }\n    getUint32(changeLength = true) {\n        const block = this.getBlock(4, changeLength);\n        if (block.length < 4)\n            return 0;\n        return (block[0] * pow2_24) +\n            (block[1] << 16) +\n            (block[2] << 8) +\n            block[3];\n    }\n    getInt32(changeLength = true) {\n        const num = this.getUint32(changeLength);\n        const negative = 0x80000000;\n        if (num & negative) {\n            return -(negative - (num ^ negative));\n        }\n        return num;\n    }\n    beforeAppend(size) {\n        if ((this._start + size) > this._stream.length) {\n            if (size > this.appendBlock) {\n                this.appendBlock = size + SeqStream.APPEND_BLOCK;\n            }\n            this._stream.realloc(this._stream.length + this.appendBlock);\n        }\n    }\n}\nSeqStream.APPEND_BLOCK = 1000;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/bytestreamjs/build/mjs/seq_stream.js\n");

/***/ })

};
;