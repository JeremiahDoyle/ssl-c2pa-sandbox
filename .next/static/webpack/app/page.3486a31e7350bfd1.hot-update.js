"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/c2paClient.ts":
/*!***************************!*\
  !*** ./lib/c2paClient.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signImageWithManifest: () => (/* binding */ signImageWithManifest),\n/* harmony export */   verifyAsset: () => (/* binding */ verifyAsset)\n/* harmony export */ });\n// C2PA helpers backed by the `c2pa` WebAssembly library.\n// We use dynamic imports and loose typing to keep integration resilient across minor versions.\nasync function loadC2pa() {\n    // Dynamic import to avoid SSR issues\n    const mod = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_c2pa_dist_c2pa_esm_js\").then(__webpack_require__.bind(__webpack_require__, /*! c2pa */ \"(app-pages-browser)/./node_modules/c2pa/dist/c2pa.esm.js\"));\n    var _mod_default;\n    return (_mod_default = mod === null || mod === void 0 ? void 0 : mod.default) !== null && _mod_default !== void 0 ? _mod_default : mod;\n}\nfunction publicC2paAsset(file) {\n    // We expect WASM/worker assets to be copied into /public/c2pa\n    return \"/c2pa/\".concat(file);\n}\nasync function signImageWithManifest(opts) {\n    var _c2paMod_Signer;\n    const { image, manifestJson, certificatePem, privateKeyPem, tsaUrl } = opts;\n    const c2paMod = await loadC2pa();\n    // Try common initialization patterns across c2pa versions\n    const wasmCandidates = [\n        'toolkit_bg.wasm',\n        'c2pa_wasm_bg.wasm',\n        'c2pa_wasm.wasm'\n    ];\n    const workerCandidates = [\n        'c2pa.worker.js',\n        'c2pa_worker.js',\n        'worker.js'\n    ];\n    let c2pa;\n    let lastErr;\n    for (const wasm of wasmCandidates){\n        for (const worker of workerCandidates){\n            try {\n                var _c2paMod_C2pa;\n                console.log(\"[C2PA] Trying to initialize with WASM: \".concat(wasm, \", Worker: \").concat(worker));\n                if (typeof ((_c2paMod_C2pa = c2paMod.C2pa) === null || _c2paMod_C2pa === void 0 ? void 0 : _c2paMod_C2pa.create) === 'function') {\n                    c2pa = await c2paMod.C2pa.create({\n                        wasmSrc: publicC2paAsset(wasm),\n                        workerSrc: publicC2paAsset(worker)\n                    });\n                    console.log('[C2PA] Successfully initialized using C2pa.create');\n                } else if (typeof c2paMod.create === 'function') {\n                    c2pa = await c2paMod.create({\n                        wasmSrc: publicC2paAsset(wasm),\n                        workerSrc: publicC2paAsset(worker)\n                    });\n                    console.log('[C2PA] Successfully initialized using create');\n                } else {\n                    // Some versions may work without explicit init\n                    c2pa = c2paMod;\n                    console.log('[C2PA] Using module directly (no explicit init)');\n                }\n                lastErr = null;\n                break;\n            } catch (e) {\n                console.warn(\"[C2PA] Failed to initialize with \".concat(wasm, \"/\").concat(worker, \":\"), e);\n                lastErr = e;\n            }\n        }\n        if (c2pa) break;\n    }\n    if (!c2pa && lastErr) {\n        throw new Error('Failed to initialize C2PA. Ensure WASM/worker assets are served under /public/c2pa. ' + 'Run: npm run copy:c2pa');\n    }\n    // Build a signer; different versions expose different factories\n    const signerOpts = {\n        privateKeyPem,\n        privateKey: privateKeyPem,\n        certificatePem,\n        certChain: [\n            certificatePem\n        ],\n        certificateChain: [\n            certificatePem\n        ],\n        timeAuthorityUrl: tsaUrl,\n        timeStampUrl: tsaUrl,\n        timestampUrl: tsaUrl,\n        taUrl: tsaUrl\n    };\n    let signer;\n    if (typeof ((_c2paMod_Signer = c2paMod.Signer) === null || _c2paMod_Signer === void 0 ? void 0 : _c2paMod_Signer.create) === 'function') {\n        console.log('[C2PA] Creating signer using Signer.create');\n        signer = await c2paMod.Signer.create(signerOpts);\n    } else if (typeof c2paMod.createSigner === 'function') {\n        console.log('[C2PA] Creating signer using createSigner');\n        try {\n            signer = await c2paMod.createSigner(signerOpts);\n        } catch (e) {\n            signer = await c2paMod.createSigner({\n                privateKey: privateKeyPem,\n                certChain: [\n                    certificatePem\n                ],\n                timeAuthorityUrl: tsaUrl\n            });\n        }\n    } else {\n        // Fallback: pass signer as a plain object; c2pa.sign may build internally\n        console.log('[C2PA] Using plain signer object (no factory method found)');\n        signer = signerOpts;\n    }\n    console.log('[C2PA] Signer created:', signer ? 'success' : 'failed');\n    // Ensure manifest has a TSA URL reachable from the browser.\n    // Prefer the app's proxy to avoid CORS issues with staging TSA.\n    let manifestForSign = manifestJson || {};\n    try {\n        const origin =  true ? window.location.origin : 0;\n        const proxyUrl = origin ? \"\".concat(origin, \"/api/tsa/timestamp\") : '/api/tsa/timestamp';\n        // If ta_url missing or points to external TSA, route through our proxy\n        const ta = manifestForSign === null || manifestForSign === void 0 ? void 0 : manifestForSign.ta_url;\n        const needsProxy = !ta || /^https?:\\/\\//i.test(ta);\n        manifestForSign = {\n            ...manifestForSign,\n            ta_url: proxyUrl\n        };\n    } catch (e) {\n    // ignore\n    }\n    // Sign\n    const attemptErrors = [];\n    function coerceToBlob(anyOut) {\n        if (!anyOut) return null;\n        if (anyOut instanceof Blob) return anyOut;\n        if (anyOut instanceof ArrayBuffer) return new Blob([\n            anyOut\n        ], {\n            type: image.type\n        });\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.buffer) instanceof ArrayBuffer) return new Blob([\n            anyOut.buffer\n        ], {\n            type: image.type\n        });\n        if (anyOut instanceof Uint8Array) return new Blob([\n            anyOut\n        ], {\n            type: image.type\n        });\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.blob) instanceof Blob) return anyOut.blob;\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.file) instanceof Blob) return anyOut.file;\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.signed) instanceof Blob) return anyOut.signed;\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.data) instanceof ArrayBuffer) return new Blob([\n            anyOut.data\n        ], {\n            type: image.type\n        });\n        return null;\n    }\n    async function trySign(target) {\n        if (!target) return null;\n        // sign(file, { signer, manifest })\n        try {\n            if (typeof target.sign === 'function') {\n                const out1 = await target.sign(image, {\n                    signer,\n                    manifest: manifestForSign\n                });\n                const b1 = coerceToBlob(out1);\n                if (b1) return b1;\n                if (out1 === null || out1 === void 0 ? void 0 : out1.arrayBuffer) {\n                    const buf = await out1.arrayBuffer();\n                    return new Blob([\n                        buf\n                    ], {\n                        type: image.type\n                    });\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        // sign({ file, signer, manifest })\n        try {\n            if (typeof target.sign === 'function') {\n                const out2 = await target.sign({\n                    file: image,\n                    signer,\n                    manifest: manifestForSign\n                });\n                const b2 = coerceToBlob(out2);\n                if (b2) return b2;\n                if (out2 === null || out2 === void 0 ? void 0 : out2.arrayBuffer) {\n                    const buf = await out2.arrayBuffer();\n                    return new Blob([\n                        buf\n                    ], {\n                        type: image.type\n                    });\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        // sign(manifest, file, signer)\n        try {\n            if (typeof target.sign === 'function') {\n                const out3 = await target.sign(manifestForSign, image, signer);\n                const b3 = coerceToBlob(out3);\n                if (b3) return b3;\n                if (out3 === null || out3 === void 0 ? void 0 : out3.arrayBuffer) {\n                    const buf = await out3.arrayBuffer();\n                    return new Blob([\n                        buf\n                    ], {\n                        type: image.type\n                    });\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        return null;\n    }\n    // Try sign on created instance and on the module itself\n    console.log('[C2PA] Attempting to sign using c2pa instance...');\n    let blob = await trySign(c2pa);\n    if (!blob) {\n        console.log('[C2PA] c2pa instance sign failed, trying c2paMod...');\n        blob = await trySign(c2paMod);\n    }\n    // Try writer APIs\n    async function tryWriter(factoryOwner) {\n        try {\n            var _factoryOwner_Writer;\n            if (factoryOwner === null || factoryOwner === void 0 ? void 0 : (_factoryOwner_Writer = factoryOwner.Writer) === null || _factoryOwner_Writer === void 0 ? void 0 : _factoryOwner_Writer.create) {\n                const writer = await factoryOwner.Writer.create({\n                    signer\n                });\n                if (writer === null || writer === void 0 ? void 0 : writer.sign) {\n                    const out = await writer.sign(image, manifestForSign);\n                    const b = coerceToBlob(out);\n                    if (b) return b;\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        try {\n            if (typeof (factoryOwner === null || factoryOwner === void 0 ? void 0 : factoryOwner.createWriter) === 'function') {\n                const writer = await factoryOwner.createWriter({\n                    signer\n                });\n                if (writer === null || writer === void 0 ? void 0 : writer.sign) {\n                    const out = await writer.sign(image, manifestForSign);\n                    const b = coerceToBlob(out);\n                    if (b) return b;\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        return null;\n    }\n    if (!blob) {\n        console.log('[C2PA] Sign methods failed, trying writer API on c2paMod...');\n        blob = await tryWriter(c2paMod);\n    }\n    if (!blob) {\n        console.log('[C2PA] c2paMod writer failed, trying c2pa writer...');\n        blob = await tryWriter(c2pa);\n    }\n    if (blob) {\n        console.log('[C2PA] Successfully signed image, returning blob');\n        return blob;\n    }\n    // Fallback: return original image blob if no output recognized\n    console.warn('c2pa sign returned an unexpected result shape. Attempts:', attemptErrors);\n    const errorDetails = attemptErrors.length > 0 ? \"\\n\\nAttempt errors:\\n\".concat(attemptErrors.map((e, i)=>\"\".concat(i + 1, \". \").concat(e)).join('\\n')) : '';\n    throw new Error(\"C2PA sign did not return a Blob\".concat(errorDetails));\n}\nasync function verifyAsset(file) {\n    var _c2paMod_C2pa;\n    const c2paMod = await loadC2pa();\n    let c2pa = c2paMod;\n    if (typeof ((_c2paMod_C2pa = c2paMod.C2pa) === null || _c2paMod_C2pa === void 0 ? void 0 : _c2paMod_C2pa.create) === 'function') {\n        try {\n            c2pa = await c2paMod.C2pa.create({\n                wasmSrc: publicC2paAsset('toolkit_bg.wasm'),\n                workerSrc: publicC2paAsset('c2pa.worker.js')\n            });\n        } catch (e) {\n            // try using module directly\n            c2pa = c2paMod;\n        }\n    }\n    if (typeof c2pa.verify === 'function') {\n        return await c2pa.verify(file);\n    }\n    if (typeof c2pa.read === 'function') {\n        return await c2pa.read({\n            file\n        });\n    }\n    throw new Error('C2PA verify/read API not found');\n} /* eslint-disable @typescript-eslint/no-explicit-any */ \n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/c2paClient.ts\n"));

/***/ })

});