"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/c2paClient.ts":
/*!***************************!*\
  !*** ./lib/c2paClient.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signImageWithManifest: () => (/* binding */ signImageWithManifest),\n/* harmony export */   verifyAsset: () => (/* binding */ verifyAsset)\n/* harmony export */ });\n// C2PA helpers backed by the `c2pa` WebAssembly library.\n// We use dynamic imports and loose typing to keep integration resilient across minor versions.\nasync function loadC2pa() {\n    // Dynamic import to avoid SSR issues\n    const mod = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_c2pa_dist_c2pa_esm_js\").then(__webpack_require__.bind(__webpack_require__, /*! c2pa */ \"(app-pages-browser)/./node_modules/c2pa/dist/c2pa.esm.js\"));\n    var _mod_default;\n    return (_mod_default = mod === null || mod === void 0 ? void 0 : mod.default) !== null && _mod_default !== void 0 ? _mod_default : mod;\n}\nfunction publicC2paAsset(file) {\n    // We expect WASM/worker assets to be copied into /public/c2pa\n    return \"/c2pa/\".concat(file);\n}\nasync function signImageWithManifest(opts) {\n    var _c2paMod_Signer;\n    const { image, manifestJson, certificatePem, privateKeyPem, tsaUrl } = opts;\n    const c2paMod = await loadC2pa();\n    // Try common initialization patterns across c2pa versions\n    const wasmCandidates = [\n        'toolkit_bg.wasm',\n        'c2pa_wasm_bg.wasm',\n        'c2pa_wasm.wasm'\n    ];\n    const workerCandidates = [\n        'c2pa.worker.js',\n        'c2pa_worker.js',\n        'worker.js'\n    ];\n    let c2pa;\n    let lastErr;\n    for (const wasm of wasmCandidates){\n        for (const worker of workerCandidates){\n            try {\n                var _c2paMod_C2pa;\n                if (typeof ((_c2paMod_C2pa = c2paMod.C2pa) === null || _c2paMod_C2pa === void 0 ? void 0 : _c2paMod_C2pa.create) === 'function') {\n                    c2pa = await c2paMod.C2pa.create({\n                        wasmSrc: publicC2paAsset(wasm),\n                        workerSrc: publicC2paAsset(worker)\n                    });\n                } else if (typeof c2paMod.create === 'function') {\n                    c2pa = await c2paMod.create({\n                        wasmSrc: publicC2paAsset(wasm),\n                        workerSrc: publicC2paAsset(worker)\n                    });\n                } else {\n                    // Some versions may work without explicit init\n                    c2pa = c2paMod;\n                }\n                lastErr = null;\n                break;\n            } catch (e) {\n                lastErr = e;\n            }\n        }\n        if (c2pa) break;\n    }\n    if (!c2pa && lastErr) {\n        throw new Error('Failed to initialize C2PA. Ensure WASM/worker assets are served under /public/c2pa. ' + 'Run: npm run copy:c2pa');\n    }\n    // Build a signer; different versions expose different factories\n    const signerOpts = {\n        privateKeyPem,\n        privateKey: privateKeyPem,\n        certificatePem,\n        certChain: [\n            certificatePem\n        ],\n        certificateChain: [\n            certificatePem\n        ],\n        timeAuthorityUrl: tsaUrl,\n        timeStampUrl: tsaUrl,\n        timestampUrl: tsaUrl,\n        taUrl: tsaUrl\n    };\n    let signer;\n    if (typeof ((_c2paMod_Signer = c2paMod.Signer) === null || _c2paMod_Signer === void 0 ? void 0 : _c2paMod_Signer.create) === 'function') {\n        signer = await c2paMod.Signer.create(signerOpts);\n    } else if (typeof c2paMod.createSigner === 'function') {\n        try {\n            signer = await c2paMod.createSigner(signerOpts);\n        } catch (e) {\n            signer = await c2paMod.createSigner({\n                privateKey: privateKeyPem,\n                certChain: [\n                    certificatePem\n                ],\n                timeAuthorityUrl: tsaUrl\n            });\n        }\n    } else {\n        // Fallback: pass signer as a plain object; c2pa.sign may build internally\n        signer = signerOpts;\n    }\n    // Ensure manifest has a TSA URL reachable from the browser.\n    // Prefer the app's proxy to avoid CORS issues with staging TSA.\n    let manifestForSign = manifestJson || {};\n    try {\n        const origin =  true ? window.location.origin : 0;\n        const proxyUrl = origin ? \"\".concat(origin, \"/api/tsa/timestamp\") : '/api/tsa/timestamp';\n        // If ta_url missing or points to external TSA, route through our proxy\n        const ta = manifestForSign === null || manifestForSign === void 0 ? void 0 : manifestForSign.ta_url;\n        const needsProxy = !ta || /^https?:\\/\\//i.test(ta);\n        manifestForSign = {\n            ...manifestForSign,\n            ta_url: proxyUrl\n        };\n    } catch (e) {\n    // ignore\n    }\n    // Sign\n    const attemptErrors = [];\n    function coerceToBlob(anyOut) {\n        if (!anyOut) return null;\n        if (anyOut instanceof Blob) return anyOut;\n        if (anyOut instanceof ArrayBuffer) return new Blob([\n            anyOut\n        ], {\n            type: image.type\n        });\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.buffer) instanceof ArrayBuffer) return new Blob([\n            anyOut.buffer\n        ], {\n            type: image.type\n        });\n        if (anyOut instanceof Uint8Array) return new Blob([\n            anyOut\n        ], {\n            type: image.type\n        });\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.blob) instanceof Blob) return anyOut.blob;\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.file) instanceof Blob) return anyOut.file;\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.signed) instanceof Blob) return anyOut.signed;\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.data) instanceof ArrayBuffer) return new Blob([\n            anyOut.data\n        ], {\n            type: image.type\n        });\n        return null;\n    }\n    async function trySign(target) {\n        if (!target) return null;\n        // sign(file, { signer, manifest })\n        try {\n            if (typeof target.sign === 'function') {\n                const out1 = await target.sign(image, {\n                    signer,\n                    manifest: manifestForSign\n                });\n                const b1 = coerceToBlob(out1);\n                if (b1) return b1;\n                if (out1 === null || out1 === void 0 ? void 0 : out1.arrayBuffer) {\n                    const buf = await out1.arrayBuffer();\n                    return new Blob([\n                        buf\n                    ], {\n                        type: image.type\n                    });\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        // sign({ file, signer, manifest })\n        try {\n            if (typeof target.sign === 'function') {\n                const out2 = await target.sign({\n                    file: image,\n                    signer,\n                    manifest: manifestForSign\n                });\n                const b2 = coerceToBlob(out2);\n                if (b2) return b2;\n                if (out2 === null || out2 === void 0 ? void 0 : out2.arrayBuffer) {\n                    const buf = await out2.arrayBuffer();\n                    return new Blob([\n                        buf\n                    ], {\n                        type: image.type\n                    });\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        // sign(manifest, file, signer)\n        try {\n            if (typeof target.sign === 'function') {\n                const out3 = await target.sign(manifestForSign, image, signer);\n                const b3 = coerceToBlob(out3);\n                if (b3) return b3;\n                if (out3 === null || out3 === void 0 ? void 0 : out3.arrayBuffer) {\n                    const buf = await out3.arrayBuffer();\n                    return new Blob([\n                        buf\n                    ], {\n                        type: image.type\n                    });\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        return null;\n    }\n    // Try sign on created instance and on the module itself\n    let blob = await trySign(c2pa);\n    if (!blob) blob = await trySign(c2paMod);\n    // Try writer APIs\n    async function tryWriter(factoryOwner) {\n        try {\n            var _factoryOwner_Writer;\n            if (factoryOwner === null || factoryOwner === void 0 ? void 0 : (_factoryOwner_Writer = factoryOwner.Writer) === null || _factoryOwner_Writer === void 0 ? void 0 : _factoryOwner_Writer.create) {\n                const writer = await factoryOwner.Writer.create({\n                    signer\n                });\n                if (writer === null || writer === void 0 ? void 0 : writer.sign) {\n                    const out = await writer.sign(image, manifestForSign);\n                    const b = coerceToBlob(out);\n                    if (b) return b;\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        try {\n            if (typeof (factoryOwner === null || factoryOwner === void 0 ? void 0 : factoryOwner.createWriter) === 'function') {\n                const writer = await factoryOwner.createWriter({\n                    signer\n                });\n                if (writer === null || writer === void 0 ? void 0 : writer.sign) {\n                    const out = await writer.sign(image, manifestForSign);\n                    const b = coerceToBlob(out);\n                    if (b) return b;\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        return null;\n    }\n    if (!blob) blob = await tryWriter(c2paMod);\n    if (!blob) blob = await tryWriter(c2pa);\n    if (blob) return blob;\n    // Fallback: return original image blob if no output recognized\n    console.warn('c2pa sign returned an unexpected result shape. Attempts:', attemptErrors);\n    const errorDetails = attemptErrors.length > 0 ? \"\\n\\nAttempt errors:\\n\".concat(attemptErrors.map((e, i)=>\"\".concat(i + 1, \". \").concat(e)).join('\\n')) : '';\n    throw new Error(\"C2PA sign did not return a Blob\".concat(errorDetails));\n}\nasync function verifyAsset(file) {\n    var _c2paMod_C2pa;\n    const c2paMod = await loadC2pa();\n    let c2pa = c2paMod;\n    if (typeof ((_c2paMod_C2pa = c2paMod.C2pa) === null || _c2paMod_C2pa === void 0 ? void 0 : _c2paMod_C2pa.create) === 'function') {\n        try {\n            c2pa = await c2paMod.C2pa.create({\n                wasmSrc: publicC2paAsset('toolkit_bg.wasm'),\n                workerSrc: publicC2paAsset('c2pa.worker.js')\n            });\n        } catch (e) {\n            // try using module directly\n            c2pa = c2paMod;\n        }\n    }\n    if (typeof c2pa.verify === 'function') {\n        return await c2pa.verify(file);\n    }\n    if (typeof c2pa.read === 'function') {\n        return await c2pa.read({\n            file\n        });\n    }\n    throw new Error('C2PA verify/read API not found');\n} /* eslint-disable @typescript-eslint/no-explicit-any */ \n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFFLE1BQU0sT0FBRjVELElBQUs2RCxJQUFJLENBQUMsU0FDM0U7SUFDSixNQUFNLElBQUk1RCxNQUFNLGtDQUErQyxPQUFid0Q7QUFDcEQ7QUFFTyxlQUFlSyxZQUFZakYsSUFBaUI7UUFHdENHO0lBRlgsTUFBTUEsVUFBVSxNQUFNUDtJQUN0QixJQUFJZSxPQUFZUjtJQUNoQixJQUFJLFNBQU9BLGdCQUFBQSxRQUFRWSxJQUFJLGNBQVpaLG9DQUFBQSxjQUFjYSxNQUFNLE1BQUssWUFBWTtRQUM5QyxJQUFJO1lBQ0ZMLE9BQU8sTUFBTVIsUUFBUVksSUFBSSxDQUFDQyxNQUFNLENBQUM7Z0JBQUVDLFNBQVNsQixnQkFBZ0I7Z0JBQW9CbUIsV0FBV25CLGdCQUFnQjtZQUFrQjtRQUMvSCxFQUFFLFVBQU07WUFDTiw0QkFBNEI7WUFDNUJZLE9BQU9SO1FBQ1Q7SUFDRjtJQUVBLElBQUksT0FBT1EsS0FBS3VFLE1BQU0sS0FBSyxZQUFZO1FBQ3JDLE9BQU8sTUFBTXZFLEtBQUt1RSxNQUFNLENBQUNsRjtJQUMzQjtJQUNBLElBQUksT0FBT1csS0FBS3dFLElBQUksS0FBSyxZQUFZO1FBQ25DLE9BQU8sTUFBTXhFLEtBQUt3RSxJQUFJLENBQUM7WUFBRW5GO1FBQUs7SUFDaEM7SUFDQSxNQUFNLElBQUlvQixNQUFNO0FBQ2xCLEVBQ0EscURBQXFEIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRGVza3RvcC9jMnBhIHRvb2wvbGliL2MycGFDbGllbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQzJQQSBoZWxwZXJzIGJhY2tlZCBieSB0aGUgYGMycGFgIFdlYkFzc2VtYmx5IGxpYnJhcnkuXG4vLyBXZSB1c2UgZHluYW1pYyBpbXBvcnRzIGFuZCBsb29zZSB0eXBpbmcgdG8ga2VlcCBpbnRlZ3JhdGlvbiByZXNpbGllbnQgYWNyb3NzIG1pbm9yIHZlcnNpb25zLlxuXG50eXBlIFNpZ25PcHRzID0ge1xuICBpbWFnZTogRmlsZTtcbiAgbWFuaWZlc3RKc29uOiBhbnk7XG4gIGNlcnRpZmljYXRlUGVtOiBzdHJpbmc7XG4gIHByaXZhdGVLZXlQZW06IHN0cmluZzsgLy8gUEtDUyM4IGluIFBFTVxuICB0c2FVcmw/OiBzdHJpbmc7XG59O1xuXG5hc3luYyBmdW5jdGlvbiBsb2FkQzJwYSgpIHtcbiAgLy8gRHluYW1pYyBpbXBvcnQgdG8gYXZvaWQgU1NSIGlzc3Vlc1xuICBjb25zdCBtb2Q6IGFueSA9IGF3YWl0IGltcG9ydCgnYzJwYScpO1xuICByZXR1cm4gKG1vZD8uZGVmYXVsdCA/PyBtb2QpO1xufVxuXG5mdW5jdGlvbiBwdWJsaWNDMnBhQXNzZXQoZmlsZTogc3RyaW5nKSB7XG4gIC8vIFdlIGV4cGVjdCBXQVNNL3dvcmtlciBhc3NldHMgdG8gYmUgY29waWVkIGludG8gL3B1YmxpYy9jMnBhXG4gIHJldHVybiBgL2MycGEvJHtmaWxlfWA7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaWduSW1hZ2VXaXRoTWFuaWZlc3Qob3B0czogU2lnbk9wdHMpOiBQcm9taXNlPEJsb2I+IHtcbiAgY29uc3QgeyBpbWFnZSwgbWFuaWZlc3RKc29uLCBjZXJ0aWZpY2F0ZVBlbSwgcHJpdmF0ZUtleVBlbSwgdHNhVXJsIH0gPSBvcHRzO1xuICBjb25zdCBjMnBhTW9kID0gYXdhaXQgbG9hZEMycGEoKTtcblxuICAvLyBUcnkgY29tbW9uIGluaXRpYWxpemF0aW9uIHBhdHRlcm5zIGFjcm9zcyBjMnBhIHZlcnNpb25zXG4gIGNvbnN0IHdhc21DYW5kaWRhdGVzID0gW1xuICAgICd0b29sa2l0X2JnLndhc20nLFxuICAgICdjMnBhX3dhc21fYmcud2FzbScsXG4gICAgJ2MycGFfd2FzbS53YXNtJyxcbiAgXTtcbiAgY29uc3Qgd29ya2VyQ2FuZGlkYXRlcyA9IFtcbiAgICAnYzJwYS53b3JrZXIuanMnLFxuICAgICdjMnBhX3dvcmtlci5qcycsXG4gICAgJ3dvcmtlci5qcycsXG4gIF07XG5cbiAgbGV0IGMycGE6IGFueTtcbiAgbGV0IGxhc3RFcnI6IGFueTtcbiAgZm9yIChjb25zdCB3YXNtIG9mIHdhc21DYW5kaWRhdGVzKSB7XG4gICAgZm9yIChjb25zdCB3b3JrZXIgb2Ygd29ya2VyQ2FuZGlkYXRlcykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjMnBhTW9kLkMycGE/LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGMycGEgPSBhd2FpdCBjMnBhTW9kLkMycGEuY3JlYXRlKHtcbiAgICAgICAgICAgIHdhc21TcmM6IHB1YmxpY0MycGFBc3NldCh3YXNtKSxcbiAgICAgICAgICAgIHdvcmtlclNyYzogcHVibGljQzJwYUFzc2V0KHdvcmtlciksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGMycGFNb2QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgYzJwYSA9IGF3YWl0IGMycGFNb2QuY3JlYXRlKHtcbiAgICAgICAgICAgIHdhc21TcmM6IHB1YmxpY0MycGFBc3NldCh3YXNtKSxcbiAgICAgICAgICAgIHdvcmtlclNyYzogcHVibGljQzJwYUFzc2V0KHdvcmtlciksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBtYXkgd29yayB3aXRob3V0IGV4cGxpY2l0IGluaXRcbiAgICAgICAgICBjMnBhID0gYzJwYU1vZDtcbiAgICAgICAgfVxuICAgICAgICBsYXN0RXJyID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxhc3RFcnIgPSBlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYzJwYSkgYnJlYWs7XG4gIH1cblxuICBpZiAoIWMycGEgJiYgbGFzdEVycikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBDMlBBLiBFbnN1cmUgV0FTTS93b3JrZXIgYXNzZXRzIGFyZSBzZXJ2ZWQgdW5kZXIgL3B1YmxpYy9jMnBhLiAnICtcbiAgICAgICdSdW46IG5wbSBydW4gY29weTpjMnBhJ1xuICAgICk7XG4gIH1cblxuICAvLyBCdWlsZCBhIHNpZ25lcjsgZGlmZmVyZW50IHZlcnNpb25zIGV4cG9zZSBkaWZmZXJlbnQgZmFjdG9yaWVzXG4gIGNvbnN0IHNpZ25lck9wdHM6IGFueSA9IHtcbiAgICBwcml2YXRlS2V5UGVtLFxuICAgIHByaXZhdGVLZXk6IHByaXZhdGVLZXlQZW0sXG4gICAgY2VydGlmaWNhdGVQZW0sXG4gICAgY2VydENoYWluOiBbY2VydGlmaWNhdGVQZW1dLFxuICAgIGNlcnRpZmljYXRlQ2hhaW46IFtjZXJ0aWZpY2F0ZVBlbV0sXG4gICAgdGltZUF1dGhvcml0eVVybDogdHNhVXJsLFxuICAgIHRpbWVTdGFtcFVybDogdHNhVXJsLFxuICAgIHRpbWVzdGFtcFVybDogdHNhVXJsLFxuICAgIHRhVXJsOiB0c2FVcmwsXG4gIH07XG5cbiAgbGV0IHNpZ25lcjogYW55O1xuICBpZiAodHlwZW9mIGMycGFNb2QuU2lnbmVyPy5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzaWduZXIgPSBhd2FpdCBjMnBhTW9kLlNpZ25lci5jcmVhdGUoc2lnbmVyT3B0cyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGMycGFNb2QuY3JlYXRlU2lnbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIHNpZ25lciA9IGF3YWl0IGMycGFNb2QuY3JlYXRlU2lnbmVyKHNpZ25lck9wdHMpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgc2lnbmVyID0gYXdhaXQgYzJwYU1vZC5jcmVhdGVTaWduZXIoeyBwcml2YXRlS2V5OiBwcml2YXRlS2V5UGVtLCBjZXJ0Q2hhaW46IFtjZXJ0aWZpY2F0ZVBlbV0sIHRpbWVBdXRob3JpdHlVcmw6IHRzYVVybCB9IGFzIGFueSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBwYXNzIHNpZ25lciBhcyBhIHBsYWluIG9iamVjdDsgYzJwYS5zaWduIG1heSBidWlsZCBpbnRlcm5hbGx5XG4gICAgc2lnbmVyID0gc2lnbmVyT3B0cztcbiAgfVxuXG4gIC8vIEVuc3VyZSBtYW5pZmVzdCBoYXMgYSBUU0EgVVJMIHJlYWNoYWJsZSBmcm9tIHRoZSBicm93c2VyLlxuICAvLyBQcmVmZXIgdGhlIGFwcCdzIHByb3h5IHRvIGF2b2lkIENPUlMgaXNzdWVzIHdpdGggc3RhZ2luZyBUU0EuXG4gIGxldCBtYW5pZmVzdEZvclNpZ24gPSBtYW5pZmVzdEpzb24gfHwge307XG4gIHRyeSB7XG4gICAgY29uc3Qgb3JpZ2luID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIDogJyc7XG4gICAgY29uc3QgcHJveHlVcmwgPSBvcmlnaW4gPyBgJHtvcmlnaW59L2FwaS90c2EvdGltZXN0YW1wYCA6ICcvYXBpL3RzYS90aW1lc3RhbXAnO1xuICAgIC8vIElmIHRhX3VybCBtaXNzaW5nIG9yIHBvaW50cyB0byBleHRlcm5hbCBUU0EsIHJvdXRlIHRocm91Z2ggb3VyIHByb3h5XG4gICAgY29uc3QgdGEgPSBtYW5pZmVzdEZvclNpZ24/LnRhX3VybCBhcyBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgY29uc3QgbmVlZHNQcm94eSA9ICF0YSB8fCAvXmh0dHBzPzpcXC9cXC8vaS50ZXN0KHRhKTtcbiAgICBtYW5pZmVzdEZvclNpZ24gPSB7IC4uLm1hbmlmZXN0Rm9yU2lnbiwgdGFfdXJsOiBwcm94eVVybCB9O1xuICB9IGNhdGNoIHtcbiAgICAvLyBpZ25vcmVcbiAgfVxuXG4gIC8vIFNpZ25cbiAgY29uc3QgYXR0ZW1wdEVycm9yczogc3RyaW5nW10gPSBbXTtcbiAgZnVuY3Rpb24gY29lcmNlVG9CbG9iKGFueU91dDogYW55KTogQmxvYiB8IG51bGwge1xuICAgIGlmICghYW55T3V0KSByZXR1cm4gbnVsbDtcbiAgICBpZiAoYW55T3V0IGluc3RhbmNlb2YgQmxvYikgcmV0dXJuIGFueU91dDtcbiAgICBpZiAoYW55T3V0IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHJldHVybiBuZXcgQmxvYihbYW55T3V0XSwgeyB0eXBlOiBpbWFnZS50eXBlIH0pO1xuICAgIGlmIChhbnlPdXQ/LmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSByZXR1cm4gbmV3IEJsb2IoW2FueU91dC5idWZmZXJdLCB7IHR5cGU6IGltYWdlLnR5cGUgfSk7XG4gICAgaWYgKGFueU91dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHJldHVybiBuZXcgQmxvYihbYW55T3V0IGFzIFVpbnQ4QXJyYXk8QXJyYXlCdWZmZXI+XSwgeyB0eXBlOiBpbWFnZS50eXBlIH0pO1xuICAgIGlmIChhbnlPdXQ/LmJsb2IgaW5zdGFuY2VvZiBCbG9iKSByZXR1cm4gYW55T3V0LmJsb2I7XG4gICAgaWYgKGFueU91dD8uZmlsZSBpbnN0YW5jZW9mIEJsb2IpIHJldHVybiBhbnlPdXQuZmlsZTtcbiAgICBpZiAoYW55T3V0Py5zaWduZWQgaW5zdGFuY2VvZiBCbG9iKSByZXR1cm4gYW55T3V0LnNpZ25lZDtcbiAgICBpZiAoYW55T3V0Py5kYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHJldHVybiBuZXcgQmxvYihbYW55T3V0LmRhdGFdLCB7IHR5cGU6IGltYWdlLnR5cGUgfSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiB0cnlTaWduKHRhcmdldDogYW55KTogUHJvbWlzZTxCbG9iIHwgbnVsbD4ge1xuICAgIGlmICghdGFyZ2V0KSByZXR1cm4gbnVsbDtcbiAgICAvLyBzaWduKGZpbGUsIHsgc2lnbmVyLCBtYW5pZmVzdCB9KVxuICAgIHRyeSB7XG4gICAgICBpZiAodHlwZW9mIHRhcmdldC5zaWduID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IG91dDE6IGFueSA9IGF3YWl0IHRhcmdldC5zaWduKGltYWdlLCB7IHNpZ25lciwgbWFuaWZlc3Q6IG1hbmlmZXN0Rm9yU2lnbiB9KTtcbiAgICAgICAgY29uc3QgYjEgPSBjb2VyY2VUb0Jsb2Iob3V0MSk7XG4gICAgICAgIGlmIChiMSkgcmV0dXJuIGIxO1xuICAgICAgICBpZiAob3V0MT8uYXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICBjb25zdCBidWYgPSBhd2FpdCBvdXQxLmFycmF5QnVmZmVyKCk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBCbG9iKFtidWZdLCB7IHR5cGU6IGltYWdlLnR5cGUgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgIGF0dGVtcHRFcnJvcnMucHVzaChlPy5tZXNzYWdlIHx8IFN0cmluZyhlKSk7XG4gICAgfVxuICAgIC8vIHNpZ24oeyBmaWxlLCBzaWduZXIsIG1hbmlmZXN0IH0pXG4gICAgdHJ5IHtcbiAgICAgIGlmICh0eXBlb2YgdGFyZ2V0LnNpZ24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uc3Qgb3V0MjogYW55ID0gYXdhaXQgdGFyZ2V0LnNpZ24oeyBmaWxlOiBpbWFnZSwgc2lnbmVyLCBtYW5pZmVzdDogbWFuaWZlc3RGb3JTaWduIH0pO1xuICAgICAgICBjb25zdCBiMiA9IGNvZXJjZVRvQmxvYihvdXQyKTtcbiAgICAgICAgaWYgKGIyKSByZXR1cm4gYjI7XG4gICAgICAgIGlmIChvdXQyPy5hcnJheUJ1ZmZlcikge1xuICAgICAgICAgIGNvbnN0IGJ1ZiA9IGF3YWl0IG91dDIuYXJyYXlCdWZmZXIoKTtcbiAgICAgICAgICByZXR1cm4gbmV3IEJsb2IoW2J1Zl0sIHsgdHlwZTogaW1hZ2UudHlwZSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgYXR0ZW1wdEVycm9ycy5wdXNoKGU/Lm1lc3NhZ2UgfHwgU3RyaW5nKGUpKTtcbiAgICB9XG4gICAgLy8gc2lnbihtYW5pZmVzdCwgZmlsZSwgc2lnbmVyKVxuICAgIHRyeSB7XG4gICAgICBpZiAodHlwZW9mIHRhcmdldC5zaWduID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IG91dDM6IGFueSA9IGF3YWl0IHRhcmdldC5zaWduKG1hbmlmZXN0Rm9yU2lnbiwgaW1hZ2UsIHNpZ25lcik7XG4gICAgICAgIGNvbnN0IGIzID0gY29lcmNlVG9CbG9iKG91dDMpO1xuICAgICAgICBpZiAoYjMpIHJldHVybiBiMztcbiAgICAgICAgaWYgKG91dDM/LmFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgY29uc3QgYnVmID0gYXdhaXQgb3V0My5hcnJheUJ1ZmZlcigpO1xuICAgICAgICAgIHJldHVybiBuZXcgQmxvYihbYnVmXSwgeyB0eXBlOiBpbWFnZS50eXBlIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgICBhdHRlbXB0RXJyb3JzLnB1c2goZT8ubWVzc2FnZSB8fCBTdHJpbmcoZSkpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIFRyeSBzaWduIG9uIGNyZWF0ZWQgaW5zdGFuY2UgYW5kIG9uIHRoZSBtb2R1bGUgaXRzZWxmXG4gIGxldCBibG9iID0gYXdhaXQgdHJ5U2lnbihjMnBhKTtcbiAgaWYgKCFibG9iKSBibG9iID0gYXdhaXQgdHJ5U2lnbihjMnBhTW9kKTtcblxuICAvLyBUcnkgd3JpdGVyIEFQSXNcbiAgYXN5bmMgZnVuY3Rpb24gdHJ5V3JpdGVyKGZhY3RvcnlPd25lcjogYW55KTogUHJvbWlzZTxCbG9iIHwgbnVsbD4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoZmFjdG9yeU93bmVyPy5Xcml0ZXI/LmNyZWF0ZSkge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBhd2FpdCBmYWN0b3J5T3duZXIuV3JpdGVyLmNyZWF0ZSh7IHNpZ25lciB9KTtcbiAgICAgICAgaWYgKHdyaXRlcj8uc2lnbikge1xuICAgICAgICAgIGNvbnN0IG91dCA9IGF3YWl0IHdyaXRlci5zaWduKGltYWdlLCBtYW5pZmVzdEZvclNpZ24pO1xuICAgICAgICAgIGNvbnN0IGIgPSBjb2VyY2VUb0Jsb2Iob3V0KTtcbiAgICAgICAgICBpZiAoYikgcmV0dXJuIGI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgIGF0dGVtcHRFcnJvcnMucHVzaChlPy5tZXNzYWdlIHx8IFN0cmluZyhlKSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBpZiAodHlwZW9mIGZhY3RvcnlPd25lcj8uY3JlYXRlV3JpdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IGF3YWl0IGZhY3RvcnlPd25lci5jcmVhdGVXcml0ZXIoeyBzaWduZXIgfSk7XG4gICAgICAgIGlmICh3cml0ZXI/LnNpZ24pIHtcbiAgICAgICAgICBjb25zdCBvdXQgPSBhd2FpdCB3cml0ZXIuc2lnbihpbWFnZSwgbWFuaWZlc3RGb3JTaWduKTtcbiAgICAgICAgICBjb25zdCBiID0gY29lcmNlVG9CbG9iKG91dCk7XG4gICAgICAgICAgaWYgKGIpIHJldHVybiBiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgICBhdHRlbXB0RXJyb3JzLnB1c2goZT8ubWVzc2FnZSB8fCBTdHJpbmcoZSkpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICghYmxvYikgYmxvYiA9IGF3YWl0IHRyeVdyaXRlcihjMnBhTW9kKTtcbiAgaWYgKCFibG9iKSBibG9iID0gYXdhaXQgdHJ5V3JpdGVyKGMycGEpO1xuICBpZiAoYmxvYikgcmV0dXJuIGJsb2I7XG5cbiAgLy8gRmFsbGJhY2s6IHJldHVybiBvcmlnaW5hbCBpbWFnZSBibG9iIGlmIG5vIG91dHB1dCByZWNvZ25pemVkXG4gIGNvbnNvbGUud2FybignYzJwYSBzaWduIHJldHVybmVkIGFuIHVuZXhwZWN0ZWQgcmVzdWx0IHNoYXBlLiBBdHRlbXB0czonLCBhdHRlbXB0RXJyb3JzKTtcbiAgY29uc3QgZXJyb3JEZXRhaWxzID0gYXR0ZW1wdEVycm9ycy5sZW5ndGggPiAwXG4gICAgPyBgXFxuXFxuQXR0ZW1wdCBlcnJvcnM6XFxuJHthdHRlbXB0RXJyb3JzLm1hcCgoZSwgaSkgPT4gYCR7aSArIDF9LiAke2V9YCkuam9pbignXFxuJyl9YFxuICAgIDogJyc7XG4gIHRocm93IG5ldyBFcnJvcihgQzJQQSBzaWduIGRpZCBub3QgcmV0dXJuIGEgQmxvYiR7ZXJyb3JEZXRhaWxzfWApO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdmVyaWZ5QXNzZXQoZmlsZTogRmlsZSB8IEJsb2IpOiBQcm9taXNlPHVua25vd24+IHtcbiAgY29uc3QgYzJwYU1vZCA9IGF3YWl0IGxvYWRDMnBhKCk7XG4gIGxldCBjMnBhOiBhbnkgPSBjMnBhTW9kO1xuICBpZiAodHlwZW9mIGMycGFNb2QuQzJwYT8uY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIGMycGEgPSBhd2FpdCBjMnBhTW9kLkMycGEuY3JlYXRlKHsgd2FzbVNyYzogcHVibGljQzJwYUFzc2V0KCd0b29sa2l0X2JnLndhc20nKSwgd29ya2VyU3JjOiBwdWJsaWNDMnBhQXNzZXQoJ2MycGEud29ya2VyLmpzJykgfSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyB0cnkgdXNpbmcgbW9kdWxlIGRpcmVjdGx5XG4gICAgICBjMnBhID0gYzJwYU1vZDtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIGMycGEudmVyaWZ5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGF3YWl0IGMycGEudmVyaWZ5KGZpbGUpO1xuICB9XG4gIGlmICh0eXBlb2YgYzJwYS5yZWFkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGF3YWl0IGMycGEucmVhZCh7IGZpbGUgfSk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdDMlBBIHZlcmlmeS9yZWFkIEFQSSBub3QgZm91bmQnKTtcbn1cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbiJdLCJuYW1lcyI6WyJsb2FkQzJwYSIsIm1vZCIsImRlZmF1bHQiLCJwdWJsaWNDMnBhQXNzZXQiLCJmaWxlIiwic2lnbkltYWdlV2l0aE1hbmlmZXN0Iiwib3B0cyIsImMycGFNb2QiLCJpbWFnZSIsIm1hbmlmZXN0SnNvbiIsImNlcnRpZmljYXRlUGVtIiwicHJpdmF0ZUtleVBlbSIsInRzYVVybCIsIndhc21DYW5kaWRhdGVzIiwid29ya2VyQ2FuZGlkYXRlcyIsImMycGEiLCJsYXN0RXJyIiwid2FzbSIsIndvcmtlciIsIkMycGEiLCJjcmVhdGUiLCJ3YXNtU3JjIiwid29ya2VyU3JjIiwiZSIsIkVycm9yIiwic2lnbmVyT3B0cyIsInByaXZhdGVLZXkiLCJjZXJ0Q2hhaW4iLCJjZXJ0aWZpY2F0ZUNoYWluIiwidGltZUF1dGhvcml0eVVybCIsInRpbWVTdGFtcFVybCIsInRpbWVzdGFtcFVybCIsInRhVXJsIiwic2lnbmVyIiwiU2lnbmVyIiwiY3JlYXRlU2lnbmVyIiwibWFuaWZlc3RGb3JTaWduIiwib3JpZ2luIiwid2luZG93IiwibG9jYXRpb24iLCJwcm94eVVybCIsInRhIiwidGFfdXJsIiwibmVlZHNQcm94eSIsInRlc3QiLCJhdHRlbXB0RXJyb3JzIiwiY29lcmNlVG9CbG9iIiwiYW55T3V0IiwiQmxvYiIsIkFycmF5QnVmZmVyIiwidHlwZSIsImJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJibG9iIiwic2lnbmVkIiwiZGF0YSIsInRyeVNpZ24iLCJ0YXJnZXQiLCJzaWduIiwib3V0MSIsIm1hbmlmZXN0IiwiYjEiLCJhcnJheUJ1ZmZlciIsImJ1ZiIsInB1c2giLCJtZXNzYWdlIiwiU3RyaW5nIiwib3V0MiIsImIyIiwib3V0MyIsImIzIiwidHJ5V3JpdGVyIiwiZmFjdG9yeU93bmVyIiwiV3JpdGVyIiwid3JpdGVyIiwib3V0IiwiYiIsImNyZWF0ZVdyaXRlciIsImNvbnNvbGUiLCJ3YXJuIiwiZXJyb3JEZXRhaWxzIiwibGVuZ3RoIiwibWFwIiwiaSIsImpvaW4iLCJ2ZXJpZnlBc3NldCIsInZlcmlmeSIsInJlYWQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/c2paClient.ts\n"));

/***/ })

});