"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/c2paClient.ts":
/*!***************************!*\
  !*** ./lib/c2paClient.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signImageWithManifest: () => (/* binding */ signImageWithManifest),\n/* harmony export */   verifyAsset: () => (/* binding */ verifyAsset)\n/* harmony export */ });\n// C2PA helpers backed by the `c2pa` WebAssembly library.\n// We use dynamic imports and loose typing to keep integration resilient across minor versions.\nasync function loadC2pa() {\n    // Dynamic import to avoid SSR issues\n    const mod = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_c2pa_dist_c2pa_esm_js\").then(__webpack_require__.bind(__webpack_require__, /*! c2pa */ \"(app-pages-browser)/./node_modules/c2pa/dist/c2pa.esm.js\"));\n    var _mod_default;\n    return (_mod_default = mod === null || mod === void 0 ? void 0 : mod.default) !== null && _mod_default !== void 0 ? _mod_default : mod;\n}\nfunction publicC2paAsset(file) {\n    // We expect WASM/worker assets to be copied into /public/c2pa\n    return \"/c2pa/\".concat(file);\n}\nasync function signImageWithManifest(opts) {\n    var _c2paMod_Signer;\n    const { image, manifestJson, certificatePem, privateKeyPem, tsaUrl } = opts;\n    const c2paMod = await loadC2pa();\n    // Try common initialization patterns across c2pa versions\n    const wasmCandidates = [\n        'toolkit_bg.wasm',\n        'c2pa_wasm_bg.wasm',\n        'c2pa_wasm.wasm'\n    ];\n    const workerCandidates = [\n        'c2pa.worker.js',\n        'c2pa_worker.js',\n        'worker.js'\n    ];\n    let c2pa;\n    let lastErr;\n    for (const wasm of wasmCandidates){\n        for (const worker of workerCandidates){\n            try {\n                var _c2paMod_C2pa;\n                console.log(\"[C2PA] Trying to initialize with WASM: \".concat(wasm, \", Worker: \").concat(worker));\n                if (typeof ((_c2paMod_C2pa = c2paMod.C2pa) === null || _c2paMod_C2pa === void 0 ? void 0 : _c2paMod_C2pa.create) === 'function') {\n                    c2pa = await c2paMod.C2pa.create({\n                        wasmSrc: publicC2paAsset(wasm),\n                        workerSrc: publicC2paAsset(worker)\n                    });\n                    console.log('[C2PA] Successfully initialized using C2pa.create');\n                } else if (typeof c2paMod.create === 'function') {\n                    c2pa = await c2paMod.create({\n                        wasmSrc: publicC2paAsset(wasm),\n                        workerSrc: publicC2paAsset(worker)\n                    });\n                    console.log('[C2PA] Successfully initialized using create');\n                } else {\n                    // Some versions may work without explicit init\n                    c2pa = c2paMod;\n                    console.log('[C2PA] Using module directly (no explicit init)');\n                }\n                lastErr = null;\n                break;\n            } catch (e) {\n                console.warn(\"[C2PA] Failed to initialize with \".concat(wasm, \"/\").concat(worker, \":\"), e);\n                lastErr = e;\n            }\n        }\n        if (c2pa) break;\n    }\n    if (!c2pa && lastErr) {\n        throw new Error('Failed to initialize C2PA. Ensure WASM/worker assets are served under /public/c2pa. ' + 'Run: npm run copy:c2pa');\n    }\n    // Build a signer; different versions expose different factories\n    const signerOpts = {\n        privateKeyPem,\n        privateKey: privateKeyPem,\n        certificatePem,\n        certChain: [\n            certificatePem\n        ],\n        certificateChain: [\n            certificatePem\n        ],\n        timeAuthorityUrl: tsaUrl,\n        timeStampUrl: tsaUrl,\n        timestampUrl: tsaUrl,\n        taUrl: tsaUrl\n    };\n    let signer;\n    if (typeof ((_c2paMod_Signer = c2paMod.Signer) === null || _c2paMod_Signer === void 0 ? void 0 : _c2paMod_Signer.create) === 'function') {\n        signer = await c2paMod.Signer.create(signerOpts);\n    } else if (typeof c2paMod.createSigner === 'function') {\n        try {\n            signer = await c2paMod.createSigner(signerOpts);\n        } catch (e) {\n            signer = await c2paMod.createSigner({\n                privateKey: privateKeyPem,\n                certChain: [\n                    certificatePem\n                ],\n                timeAuthorityUrl: tsaUrl\n            });\n        }\n    } else {\n        // Fallback: pass signer as a plain object; c2pa.sign may build internally\n        signer = signerOpts;\n    }\n    // Ensure manifest has a TSA URL reachable from the browser.\n    // Prefer the app's proxy to avoid CORS issues with staging TSA.\n    let manifestForSign = manifestJson || {};\n    try {\n        const origin =  true ? window.location.origin : 0;\n        const proxyUrl = origin ? \"\".concat(origin, \"/api/tsa/timestamp\") : '/api/tsa/timestamp';\n        // If ta_url missing or points to external TSA, route through our proxy\n        const ta = manifestForSign === null || manifestForSign === void 0 ? void 0 : manifestForSign.ta_url;\n        const needsProxy = !ta || /^https?:\\/\\//i.test(ta);\n        manifestForSign = {\n            ...manifestForSign,\n            ta_url: proxyUrl\n        };\n    } catch (e) {\n    // ignore\n    }\n    // Sign\n    const attemptErrors = [];\n    function coerceToBlob(anyOut) {\n        if (!anyOut) return null;\n        if (anyOut instanceof Blob) return anyOut;\n        if (anyOut instanceof ArrayBuffer) return new Blob([\n            anyOut\n        ], {\n            type: image.type\n        });\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.buffer) instanceof ArrayBuffer) return new Blob([\n            anyOut.buffer\n        ], {\n            type: image.type\n        });\n        if (anyOut instanceof Uint8Array) return new Blob([\n            anyOut\n        ], {\n            type: image.type\n        });\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.blob) instanceof Blob) return anyOut.blob;\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.file) instanceof Blob) return anyOut.file;\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.signed) instanceof Blob) return anyOut.signed;\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.data) instanceof ArrayBuffer) return new Blob([\n            anyOut.data\n        ], {\n            type: image.type\n        });\n        return null;\n    }\n    async function trySign(target) {\n        if (!target) return null;\n        // sign(file, { signer, manifest })\n        try {\n            if (typeof target.sign === 'function') {\n                const out1 = await target.sign(image, {\n                    signer,\n                    manifest: manifestForSign\n                });\n                const b1 = coerceToBlob(out1);\n                if (b1) return b1;\n                if (out1 === null || out1 === void 0 ? void 0 : out1.arrayBuffer) {\n                    const buf = await out1.arrayBuffer();\n                    return new Blob([\n                        buf\n                    ], {\n                        type: image.type\n                    });\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        // sign({ file, signer, manifest })\n        try {\n            if (typeof target.sign === 'function') {\n                const out2 = await target.sign({\n                    file: image,\n                    signer,\n                    manifest: manifestForSign\n                });\n                const b2 = coerceToBlob(out2);\n                if (b2) return b2;\n                if (out2 === null || out2 === void 0 ? void 0 : out2.arrayBuffer) {\n                    const buf = await out2.arrayBuffer();\n                    return new Blob([\n                        buf\n                    ], {\n                        type: image.type\n                    });\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        // sign(manifest, file, signer)\n        try {\n            if (typeof target.sign === 'function') {\n                const out3 = await target.sign(manifestForSign, image, signer);\n                const b3 = coerceToBlob(out3);\n                if (b3) return b3;\n                if (out3 === null || out3 === void 0 ? void 0 : out3.arrayBuffer) {\n                    const buf = await out3.arrayBuffer();\n                    return new Blob([\n                        buf\n                    ], {\n                        type: image.type\n                    });\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        return null;\n    }\n    // Try sign on created instance and on the module itself\n    let blob = await trySign(c2pa);\n    if (!blob) blob = await trySign(c2paMod);\n    // Try writer APIs\n    async function tryWriter(factoryOwner) {\n        try {\n            var _factoryOwner_Writer;\n            if (factoryOwner === null || factoryOwner === void 0 ? void 0 : (_factoryOwner_Writer = factoryOwner.Writer) === null || _factoryOwner_Writer === void 0 ? void 0 : _factoryOwner_Writer.create) {\n                const writer = await factoryOwner.Writer.create({\n                    signer\n                });\n                if (writer === null || writer === void 0 ? void 0 : writer.sign) {\n                    const out = await writer.sign(image, manifestForSign);\n                    const b = coerceToBlob(out);\n                    if (b) return b;\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        try {\n            if (typeof (factoryOwner === null || factoryOwner === void 0 ? void 0 : factoryOwner.createWriter) === 'function') {\n                const writer = await factoryOwner.createWriter({\n                    signer\n                });\n                if (writer === null || writer === void 0 ? void 0 : writer.sign) {\n                    const out = await writer.sign(image, manifestForSign);\n                    const b = coerceToBlob(out);\n                    if (b) return b;\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        return null;\n    }\n    if (!blob) blob = await tryWriter(c2paMod);\n    if (!blob) blob = await tryWriter(c2pa);\n    if (blob) return blob;\n    // Fallback: return original image blob if no output recognized\n    console.warn('c2pa sign returned an unexpected result shape. Attempts:', attemptErrors);\n    const errorDetails = attemptErrors.length > 0 ? \"\\n\\nAttempt errors:\\n\".concat(attemptErrors.map((e, i)=>\"\".concat(i + 1, \". \").concat(e)).join('\\n')) : '';\n    throw new Error(\"C2PA sign did not return a Blob\".concat(errorDetails));\n}\nasync function verifyAsset(file) {\n    var _c2paMod_C2pa;\n    const c2paMod = await loadC2pa();\n    let c2pa = c2paMod;\n    if (typeof ((_c2paMod_C2pa = c2paMod.C2pa) === null || _c2paMod_C2pa === void 0 ? void 0 : _c2paMod_C2pa.create) === 'function') {\n        try {\n            c2pa = await c2paMod.C2pa.create({\n                wasmSrc: publicC2paAsset('toolkit_bg.wasm'),\n                workerSrc: publicC2paAsset('c2pa.worker.js')\n            });\n        } catch (e) {\n            // try using module directly\n            c2pa = c2paMod;\n        }\n    }\n    if (typeof c2pa.verify === 'function') {\n        return await c2pa.verify(file);\n    }\n    if (typeof c2pa.read === 'function') {\n        return await c2pa.read({\n            file\n        });\n    }\n    throw new Error('C2PA verify/read API not found');\n} /* eslint-disable @typescript-eslint/no-explicit-any */ \n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9jMnBhQ2xpZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseURBQXlEO0FBQ3pELCtGQUErRjtBQVUvRixlQUFlQTtJQUNiLHFDQUFxQztJQUNyQyxNQUFNQyxNQUFXLE1BQU0sME5BQWM7UUFDN0JBO0lBQVIsT0FBUUEsQ0FBQUEsZUFBQUEsZ0JBQUFBLDBCQUFBQSxJQUFLQyxPQUFPLGNBQVpELDBCQUFBQSxlQUFnQkE7QUFDMUI7QUFFQSxTQUFTRSxnQkFBZ0JDLElBQVk7SUFDbkMsOERBQThEO0lBQzlELE9BQU8sU0FBYyxPQUFMQTtBQUNsQjtBQUVPLGVBQWVDLHNCQUFzQkMsSUFBYztRQXNFN0NDO0lBckVYLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxZQUFZLEVBQUVDLGNBQWMsRUFBRUMsYUFBYSxFQUFFQyxNQUFNLEVBQUUsR0FBR047SUFDdkUsTUFBTUMsVUFBVSxNQUFNUDtJQUV0QiwwREFBMEQ7SUFDMUQsTUFBTWEsaUJBQWlCO1FBQ3JCO1FBQ0E7UUFDQTtLQUNEO0lBQ0QsTUFBTUMsbUJBQW1CO1FBQ3ZCO1FBQ0E7UUFDQTtLQUNEO0lBRUQsSUFBSUM7SUFDSixJQUFJQztJQUNKLEtBQUssTUFBTUMsUUFBUUosZUFBZ0I7UUFDakMsS0FBSyxNQUFNSyxVQUFVSixpQkFBa0I7WUFDckMsSUFBSTtvQkFFU1A7Z0JBRFhZLFFBQVFDLEdBQUcsQ0FBQywwQ0FBMkRGLE9BQWpCRCxNQUFLLGNBQW1CLE9BQVBDO2dCQUN2RSxJQUFJLFNBQU9YLGdCQUFBQSxRQUFRYyxJQUFJLGNBQVpkLG9DQUFBQSxjQUFjZSxNQUFNLE1BQUssWUFBWTtvQkFDOUNQLE9BQU8sTUFBTVIsUUFBUWMsSUFBSSxDQUFDQyxNQUFNLENBQUM7d0JBQy9CQyxTQUFTcEIsZ0JBQWdCYzt3QkFDekJPLFdBQVdyQixnQkFBZ0JlO29CQUM3QjtvQkFDQUMsUUFBUUMsR0FBRyxDQUFDO2dCQUNkLE9BQU8sSUFBSSxPQUFPYixRQUFRZSxNQUFNLEtBQUssWUFBWTtvQkFDL0NQLE9BQU8sTUFBTVIsUUFBUWUsTUFBTSxDQUFDO3dCQUMxQkMsU0FBU3BCLGdCQUFnQmM7d0JBQ3pCTyxXQUFXckIsZ0JBQWdCZTtvQkFDN0I7b0JBQ0FDLFFBQVFDLEdBQUcsQ0FBQztnQkFDZCxPQUFPO29CQUNMLCtDQUErQztvQkFDL0NMLE9BQU9SO29CQUNQWSxRQUFRQyxHQUFHLENBQUM7Z0JBQ2Q7Z0JBQ0FKLFVBQVU7Z0JBQ1Y7WUFDRixFQUFFLE9BQU9TLEdBQUc7Z0JBQ1ZOLFFBQVFPLElBQUksQ0FBQyxvQ0FBNENSLE9BQVJELE1BQUssS0FBVSxPQUFQQyxRQUFPLE1BQUlPO2dCQUNwRVQsVUFBVVM7WUFDWjtRQUNGO1FBQ0EsSUFBSVYsTUFBTTtJQUNaO0lBRUEsSUFBSSxDQUFDQSxRQUFRQyxTQUFTO1FBQ3BCLE1BQU0sSUFBSVcsTUFDUix5RkFDQTtJQUVKO0lBRUEsZ0VBQWdFO0lBQ2hFLE1BQU1DLGFBQWtCO1FBQ3RCakI7UUFDQWtCLFlBQVlsQjtRQUNaRDtRQUNBb0IsV0FBVztZQUFDcEI7U0FBZTtRQUMzQnFCLGtCQUFrQjtZQUFDckI7U0FBZTtRQUNsQ3NCLGtCQUFrQnBCO1FBQ2xCcUIsY0FBY3JCO1FBQ2RzQixjQUFjdEI7UUFDZHVCLE9BQU92QjtJQUNUO0lBRUEsSUFBSXdCO0lBQ0osSUFBSSxTQUFPN0Isa0JBQUFBLFFBQVE4QixNQUFNLGNBQWQ5QixzQ0FBQUEsZ0JBQWdCZSxNQUFNLE1BQUssWUFBWTtRQUNoRGMsU0FBUyxNQUFNN0IsUUFBUThCLE1BQU0sQ0FBQ2YsTUFBTSxDQUFDTTtJQUN2QyxPQUFPLElBQUksT0FBT3JCLFFBQVErQixZQUFZLEtBQUssWUFBWTtRQUNyRCxJQUFJO1lBQ0ZGLFNBQVMsTUFBTTdCLFFBQVErQixZQUFZLENBQUNWO1FBQ3RDLEVBQUUsVUFBTTtZQUNOUSxTQUFTLE1BQU03QixRQUFRK0IsWUFBWSxDQUFDO2dCQUFFVCxZQUFZbEI7Z0JBQWVtQixXQUFXO29CQUFDcEI7aUJBQWU7Z0JBQUVzQixrQkFBa0JwQjtZQUFPO1FBQ3pIO0lBQ0YsT0FBTztRQUNMLDBFQUEwRTtRQUMxRXdCLFNBQVNSO0lBQ1g7SUFFQSw0REFBNEQ7SUFDNUQsZ0VBQWdFO0lBQ2hFLElBQUlXLGtCQUFrQjlCLGdCQUFnQixDQUFDO0lBQ3ZDLElBQUk7UUFDRixNQUFNK0IsU0FBUyxLQUE2QixHQUFHQyxPQUFPQyxRQUFRLENBQUNGLE1BQU0sR0FBRyxDQUFFO1FBQzFFLE1BQU1HLFdBQVdILFNBQVMsR0FBVSxPQUFQQSxRQUFPLHdCQUFzQjtRQUMxRCx1RUFBdUU7UUFDdkUsTUFBTUksS0FBS0wsNEJBQUFBLHNDQUFBQSxnQkFBaUJNLE1BQU07UUFDbEMsTUFBTUMsYUFBYSxDQUFDRixNQUFNLGdCQUFnQkcsSUFBSSxDQUFDSDtRQUMvQ0wsa0JBQWtCO1lBQUUsR0FBR0EsZUFBZTtZQUFFTSxRQUFRRjtRQUFTO0lBQzNELEVBQUUsVUFBTTtJQUNOLFNBQVM7SUFDWDtJQUVBLE9BQU87SUFDUCxNQUFNSyxnQkFBMEIsRUFBRTtJQUNsQyxTQUFTQyxhQUFhQyxNQUFXO1FBQy9CLElBQUksQ0FBQ0EsUUFBUSxPQUFPO1FBQ3BCLElBQUlBLGtCQUFrQkMsTUFBTSxPQUFPRDtRQUNuQyxJQUFJQSxrQkFBa0JFLGFBQWEsT0FBTyxJQUFJRCxLQUFLO1lBQUNEO1NBQU8sRUFBRTtZQUFFRyxNQUFNN0MsTUFBTTZDLElBQUk7UUFBQztRQUNoRixJQUFJSCxDQUFBQSxtQkFBQUEsNkJBQUFBLE9BQVFJLE1BQU0sYUFBWUYsYUFBYSxPQUFPLElBQUlELEtBQUs7WUFBQ0QsT0FBT0ksTUFBTTtTQUFDLEVBQUU7WUFBRUQsTUFBTTdDLE1BQU02QyxJQUFJO1FBQUM7UUFDL0YsSUFBSUgsa0JBQWtCSyxZQUFZLE9BQU8sSUFBSUosS0FBSztZQUFDRDtTQUFrQyxFQUFFO1lBQUVHLE1BQU03QyxNQUFNNkMsSUFBSTtRQUFDO1FBQzFHLElBQUlILENBQUFBLG1CQUFBQSw2QkFBQUEsT0FBUU0sSUFBSSxhQUFZTCxNQUFNLE9BQU9ELE9BQU9NLElBQUk7UUFDcEQsSUFBSU4sQ0FBQUEsbUJBQUFBLDZCQUFBQSxPQUFROUMsSUFBSSxhQUFZK0MsTUFBTSxPQUFPRCxPQUFPOUMsSUFBSTtRQUNwRCxJQUFJOEMsQ0FBQUEsbUJBQUFBLDZCQUFBQSxPQUFRTyxNQUFNLGFBQVlOLE1BQU0sT0FBT0QsT0FBT08sTUFBTTtRQUN4RCxJQUFJUCxDQUFBQSxtQkFBQUEsNkJBQUFBLE9BQVFRLElBQUksYUFBWU4sYUFBYSxPQUFPLElBQUlELEtBQUs7WUFBQ0QsT0FBT1EsSUFBSTtTQUFDLEVBQUU7WUFBRUwsTUFBTTdDLE1BQU02QyxJQUFJO1FBQUM7UUFDM0YsT0FBTztJQUNUO0lBRUEsZUFBZU0sUUFBUUMsTUFBVztRQUNoQyxJQUFJLENBQUNBLFFBQVEsT0FBTztRQUNwQixtQ0FBbUM7UUFDbkMsSUFBSTtZQUNGLElBQUksT0FBT0EsT0FBT0MsSUFBSSxLQUFLLFlBQVk7Z0JBQ3JDLE1BQU1DLE9BQVksTUFBTUYsT0FBT0MsSUFBSSxDQUFDckQsT0FBTztvQkFBRTRCO29CQUFRMkIsVUFBVXhCO2dCQUFnQjtnQkFDL0UsTUFBTXlCLEtBQUtmLGFBQWFhO2dCQUN4QixJQUFJRSxJQUFJLE9BQU9BO2dCQUNmLElBQUlGLGlCQUFBQSwyQkFBQUEsS0FBTUcsV0FBVyxFQUFFO29CQUNyQixNQUFNQyxNQUFNLE1BQU1KLEtBQUtHLFdBQVc7b0JBQ2xDLE9BQU8sSUFBSWQsS0FBSzt3QkFBQ2U7cUJBQUksRUFBRTt3QkFBRWIsTUFBTTdDLE1BQU02QyxJQUFJO29CQUFDO2dCQUM1QztZQUNGO1FBQ0YsRUFBRSxPQUFPNUIsR0FBUTtZQUNmdUIsY0FBY21CLElBQUksQ0FBQzFDLENBQUFBLGNBQUFBLHdCQUFBQSxFQUFHMkMsT0FBTyxLQUFJQyxPQUFPNUM7UUFDMUM7UUFDQSxtQ0FBbUM7UUFDbkMsSUFBSTtZQUNGLElBQUksT0FBT21DLE9BQU9DLElBQUksS0FBSyxZQUFZO2dCQUNyQyxNQUFNUyxPQUFZLE1BQU1WLE9BQU9DLElBQUksQ0FBQztvQkFBRXpELE1BQU1JO29CQUFPNEI7b0JBQVEyQixVQUFVeEI7Z0JBQWdCO2dCQUNyRixNQUFNZ0MsS0FBS3RCLGFBQWFxQjtnQkFDeEIsSUFBSUMsSUFBSSxPQUFPQTtnQkFDZixJQUFJRCxpQkFBQUEsMkJBQUFBLEtBQU1MLFdBQVcsRUFBRTtvQkFDckIsTUFBTUMsTUFBTSxNQUFNSSxLQUFLTCxXQUFXO29CQUNsQyxPQUFPLElBQUlkLEtBQUs7d0JBQUNlO3FCQUFJLEVBQUU7d0JBQUViLE1BQU03QyxNQUFNNkMsSUFBSTtvQkFBQztnQkFDNUM7WUFDRjtRQUNGLEVBQUUsT0FBTzVCLEdBQVE7WUFDZnVCLGNBQWNtQixJQUFJLENBQUMxQyxDQUFBQSxjQUFBQSx3QkFBQUEsRUFBRzJDLE9BQU8sS0FBSUMsT0FBTzVDO1FBQzFDO1FBQ0EsK0JBQStCO1FBQy9CLElBQUk7WUFDRixJQUFJLE9BQU9tQyxPQUFPQyxJQUFJLEtBQUssWUFBWTtnQkFDckMsTUFBTVcsT0FBWSxNQUFNWixPQUFPQyxJQUFJLENBQUN0QixpQkFBaUIvQixPQUFPNEI7Z0JBQzVELE1BQU1xQyxLQUFLeEIsYUFBYXVCO2dCQUN4QixJQUFJQyxJQUFJLE9BQU9BO2dCQUNmLElBQUlELGlCQUFBQSwyQkFBQUEsS0FBTVAsV0FBVyxFQUFFO29CQUNyQixNQUFNQyxNQUFNLE1BQU1NLEtBQUtQLFdBQVc7b0JBQ2xDLE9BQU8sSUFBSWQsS0FBSzt3QkFBQ2U7cUJBQUksRUFBRTt3QkFBRWIsTUFBTTdDLE1BQU02QyxJQUFJO29CQUFDO2dCQUM1QztZQUNGO1FBQ0YsRUFBRSxPQUFPNUIsR0FBUTtZQUNmdUIsY0FBY21CLElBQUksQ0FBQzFDLENBQUFBLGNBQUFBLHdCQUFBQSxFQUFHMkMsT0FBTyxLQUFJQyxPQUFPNUM7UUFDMUM7UUFDQSxPQUFPO0lBQ1Q7SUFFQSx3REFBd0Q7SUFDeEQsSUFBSStCLE9BQU8sTUFBTUcsUUFBUTVDO0lBQ3pCLElBQUksQ0FBQ3lDLE1BQU1BLE9BQU8sTUFBTUcsUUFBUXBEO0lBRWhDLGtCQUFrQjtJQUNsQixlQUFlbUUsVUFBVUMsWUFBaUI7UUFDeEMsSUFBSTtnQkFDRUE7WUFBSixJQUFJQSx5QkFBQUEsb0NBQUFBLHVCQUFBQSxhQUFjQyxNQUFNLGNBQXBCRCwyQ0FBQUEscUJBQXNCckQsTUFBTSxFQUFFO2dCQUNoQyxNQUFNdUQsU0FBUyxNQUFNRixhQUFhQyxNQUFNLENBQUN0RCxNQUFNLENBQUM7b0JBQUVjO2dCQUFPO2dCQUN6RCxJQUFJeUMsbUJBQUFBLDZCQUFBQSxPQUFRaEIsSUFBSSxFQUFFO29CQUNoQixNQUFNaUIsTUFBTSxNQUFNRCxPQUFPaEIsSUFBSSxDQUFDckQsT0FBTytCO29CQUNyQyxNQUFNd0MsSUFBSTlCLGFBQWE2QjtvQkFDdkIsSUFBSUMsR0FBRyxPQUFPQTtnQkFDaEI7WUFDRjtRQUNGLEVBQUUsT0FBT3RELEdBQVE7WUFDZnVCLGNBQWNtQixJQUFJLENBQUMxQyxDQUFBQSxjQUFBQSx3QkFBQUEsRUFBRzJDLE9BQU8sS0FBSUMsT0FBTzVDO1FBQzFDO1FBQ0EsSUFBSTtZQUNGLElBQUksUUFBT2tELHlCQUFBQSxtQ0FBQUEsYUFBY0ssWUFBWSxNQUFLLFlBQVk7Z0JBQ3BELE1BQU1ILFNBQVMsTUFBTUYsYUFBYUssWUFBWSxDQUFDO29CQUFFNUM7Z0JBQU87Z0JBQ3hELElBQUl5QyxtQkFBQUEsNkJBQUFBLE9BQVFoQixJQUFJLEVBQUU7b0JBQ2hCLE1BQU1pQixNQUFNLE1BQU1ELE9BQU9oQixJQUFJLENBQUNyRCxPQUFPK0I7b0JBQ3JDLE1BQU13QyxJQUFJOUIsYUFBYTZCO29CQUN2QixJQUFJQyxHQUFHLE9BQU9BO2dCQUNoQjtZQUNGO1FBQ0YsRUFBRSxPQUFPdEQsR0FBUTtZQUNmdUIsY0FBY21CLElBQUksQ0FBQzFDLENBQUFBLGNBQUFBLHdCQUFBQSxFQUFHMkMsT0FBTyxLQUFJQyxPQUFPNUM7UUFDMUM7UUFDQSxPQUFPO0lBQ1Q7SUFFQSxJQUFJLENBQUMrQixNQUFNQSxPQUFPLE1BQU1rQixVQUFVbkU7SUFDbEMsSUFBSSxDQUFDaUQsTUFBTUEsT0FBTyxNQUFNa0IsVUFBVTNEO0lBQ2xDLElBQUl5QyxNQUFNLE9BQU9BO0lBRWpCLCtEQUErRDtJQUMvRHJDLFFBQVFPLElBQUksQ0FBQyw0REFBNERzQjtJQUN6RSxNQUFNaUMsZUFBZWpDLGNBQWNrQyxNQUFNLEdBQUcsSUFDeEMsd0JBQWlGLE9BQXpEbEMsY0FBY21DLEdBQUcsQ0FBQyxDQUFDMUQsR0FBRzJELElBQU0sR0FBYTNELE9BQVYyRCxJQUFJLEdBQUUsTUFBTSxPQUFGM0QsSUFBSzRELElBQUksQ0FBQyxTQUMzRTtJQUNKLE1BQU0sSUFBSTFELE1BQU0sa0NBQStDLE9BQWJzRDtBQUNwRDtBQUVPLGVBQWVLLFlBQVlsRixJQUFpQjtRQUd0Q0c7SUFGWCxNQUFNQSxVQUFVLE1BQU1QO0lBQ3RCLElBQUllLE9BQVlSO0lBQ2hCLElBQUksU0FBT0EsZ0JBQUFBLFFBQVFjLElBQUksY0FBWmQsb0NBQUFBLGNBQWNlLE1BQU0sTUFBSyxZQUFZO1FBQzlDLElBQUk7WUFDRlAsT0FBTyxNQUFNUixRQUFRYyxJQUFJLENBQUNDLE1BQU0sQ0FBQztnQkFBRUMsU0FBU3BCLGdCQUFnQjtnQkFBb0JxQixXQUFXckIsZ0JBQWdCO1lBQWtCO1FBQy9ILEVBQUUsVUFBTTtZQUNOLDRCQUE0QjtZQUM1QlksT0FBT1I7UUFDVDtJQUNGO0lBRUEsSUFBSSxPQUFPUSxLQUFLd0UsTUFBTSxLQUFLLFlBQVk7UUFDckMsT0FBTyxNQUFNeEUsS0FBS3dFLE1BQU0sQ0FBQ25GO0lBQzNCO0lBQ0EsSUFBSSxPQUFPVyxLQUFLeUUsSUFBSSxLQUFLLFlBQVk7UUFDbkMsT0FBTyxNQUFNekUsS0FBS3lFLElBQUksQ0FBQztZQUFFcEY7UUFBSztJQUNoQztJQUNBLE1BQU0sSUFBSXVCLE1BQU07QUFDbEIsRUFDQSxxREFBcUQiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9EZXNrdG9wL2MycGEgdG9vbC9saWIvYzJwYUNsaWVudC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDMlBBIGhlbHBlcnMgYmFja2VkIGJ5IHRoZSBgYzJwYWAgV2ViQXNzZW1ibHkgbGlicmFyeS5cbi8vIFdlIHVzZSBkeW5hbWljIGltcG9ydHMgYW5kIGxvb3NlIHR5cGluZyB0byBrZWVwIGludGVncmF0aW9uIHJlc2lsaWVudCBhY3Jvc3MgbWlub3IgdmVyc2lvbnMuXG5cbnR5cGUgU2lnbk9wdHMgPSB7XG4gIGltYWdlOiBGaWxlO1xuICBtYW5pZmVzdEpzb246IGFueTtcbiAgY2VydGlmaWNhdGVQZW06IHN0cmluZztcbiAgcHJpdmF0ZUtleVBlbTogc3RyaW5nOyAvLyBQS0NTIzggaW4gUEVNXG4gIHRzYVVybD86IHN0cmluZztcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRDMnBhKCkge1xuICAvLyBEeW5hbWljIGltcG9ydCB0byBhdm9pZCBTU1IgaXNzdWVzXG4gIGNvbnN0IG1vZDogYW55ID0gYXdhaXQgaW1wb3J0KCdjMnBhJyk7XG4gIHJldHVybiAobW9kPy5kZWZhdWx0ID8/IG1vZCk7XG59XG5cbmZ1bmN0aW9uIHB1YmxpY0MycGFBc3NldChmaWxlOiBzdHJpbmcpIHtcbiAgLy8gV2UgZXhwZWN0IFdBU00vd29ya2VyIGFzc2V0cyB0byBiZSBjb3BpZWQgaW50byAvcHVibGljL2MycGFcbiAgcmV0dXJuIGAvYzJwYS8ke2ZpbGV9YDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25JbWFnZVdpdGhNYW5pZmVzdChvcHRzOiBTaWduT3B0cyk6IFByb21pc2U8QmxvYj4ge1xuICBjb25zdCB7IGltYWdlLCBtYW5pZmVzdEpzb24sIGNlcnRpZmljYXRlUGVtLCBwcml2YXRlS2V5UGVtLCB0c2FVcmwgfSA9IG9wdHM7XG4gIGNvbnN0IGMycGFNb2QgPSBhd2FpdCBsb2FkQzJwYSgpO1xuXG4gIC8vIFRyeSBjb21tb24gaW5pdGlhbGl6YXRpb24gcGF0dGVybnMgYWNyb3NzIGMycGEgdmVyc2lvbnNcbiAgY29uc3Qgd2FzbUNhbmRpZGF0ZXMgPSBbXG4gICAgJ3Rvb2xraXRfYmcud2FzbScsXG4gICAgJ2MycGFfd2FzbV9iZy53YXNtJyxcbiAgICAnYzJwYV93YXNtLndhc20nLFxuICBdO1xuICBjb25zdCB3b3JrZXJDYW5kaWRhdGVzID0gW1xuICAgICdjMnBhLndvcmtlci5qcycsXG4gICAgJ2MycGFfd29ya2VyLmpzJyxcbiAgICAnd29ya2VyLmpzJyxcbiAgXTtcblxuICBsZXQgYzJwYTogYW55O1xuICBsZXQgbGFzdEVycjogYW55O1xuICBmb3IgKGNvbnN0IHdhc20gb2Ygd2FzbUNhbmRpZGF0ZXMpIHtcbiAgICBmb3IgKGNvbnN0IHdvcmtlciBvZiB3b3JrZXJDYW5kaWRhdGVzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zb2xlLmxvZyhgW0MyUEFdIFRyeWluZyB0byBpbml0aWFsaXplIHdpdGggV0FTTTogJHt3YXNtfSwgV29ya2VyOiAke3dvcmtlcn1gKTtcbiAgICAgICAgaWYgKHR5cGVvZiBjMnBhTW9kLkMycGE/LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGMycGEgPSBhd2FpdCBjMnBhTW9kLkMycGEuY3JlYXRlKHtcbiAgICAgICAgICAgIHdhc21TcmM6IHB1YmxpY0MycGFBc3NldCh3YXNtKSxcbiAgICAgICAgICAgIHdvcmtlclNyYzogcHVibGljQzJwYUFzc2V0KHdvcmtlciksXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1tDMlBBXSBTdWNjZXNzZnVsbHkgaW5pdGlhbGl6ZWQgdXNpbmcgQzJwYS5jcmVhdGUnKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYzJwYU1vZC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjMnBhID0gYXdhaXQgYzJwYU1vZC5jcmVhdGUoe1xuICAgICAgICAgICAgd2FzbVNyYzogcHVibGljQzJwYUFzc2V0KHdhc20pLFxuICAgICAgICAgICAgd29ya2VyU3JjOiBwdWJsaWNDMnBhQXNzZXQod29ya2VyKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb25zb2xlLmxvZygnW0MyUEFdIFN1Y2Nlc3NmdWxseSBpbml0aWFsaXplZCB1c2luZyBjcmVhdGUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG1heSB3b3JrIHdpdGhvdXQgZXhwbGljaXQgaW5pdFxuICAgICAgICAgIGMycGEgPSBjMnBhTW9kO1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdbQzJQQV0gVXNpbmcgbW9kdWxlIGRpcmVjdGx5IChubyBleHBsaWNpdCBpbml0KScpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RFcnIgPSBudWxsO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBbQzJQQV0gRmFpbGVkIHRvIGluaXRpYWxpemUgd2l0aCAke3dhc219LyR7d29ya2VyfTpgLCBlKTtcbiAgICAgICAgbGFzdEVyciA9IGU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjMnBhKSBicmVhaztcbiAgfVxuXG4gIGlmICghYzJwYSAmJiBsYXN0RXJyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0ZhaWxlZCB0byBpbml0aWFsaXplIEMyUEEuIEVuc3VyZSBXQVNNL3dvcmtlciBhc3NldHMgYXJlIHNlcnZlZCB1bmRlciAvcHVibGljL2MycGEuICcgK1xuICAgICAgJ1J1bjogbnBtIHJ1biBjb3B5OmMycGEnXG4gICAgKTtcbiAgfVxuXG4gIC8vIEJ1aWxkIGEgc2lnbmVyOyBkaWZmZXJlbnQgdmVyc2lvbnMgZXhwb3NlIGRpZmZlcmVudCBmYWN0b3JpZXNcbiAgY29uc3Qgc2lnbmVyT3B0czogYW55ID0ge1xuICAgIHByaXZhdGVLZXlQZW0sXG4gICAgcHJpdmF0ZUtleTogcHJpdmF0ZUtleVBlbSxcbiAgICBjZXJ0aWZpY2F0ZVBlbSxcbiAgICBjZXJ0Q2hhaW46IFtjZXJ0aWZpY2F0ZVBlbV0sXG4gICAgY2VydGlmaWNhdGVDaGFpbjogW2NlcnRpZmljYXRlUGVtXSxcbiAgICB0aW1lQXV0aG9yaXR5VXJsOiB0c2FVcmwsXG4gICAgdGltZVN0YW1wVXJsOiB0c2FVcmwsXG4gICAgdGltZXN0YW1wVXJsOiB0c2FVcmwsXG4gICAgdGFVcmw6IHRzYVVybCxcbiAgfTtcblxuICBsZXQgc2lnbmVyOiBhbnk7XG4gIGlmICh0eXBlb2YgYzJwYU1vZC5TaWduZXI/LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHNpZ25lciA9IGF3YWl0IGMycGFNb2QuU2lnbmVyLmNyZWF0ZShzaWduZXJPcHRzKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYzJwYU1vZC5jcmVhdGVTaWduZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgc2lnbmVyID0gYXdhaXQgYzJwYU1vZC5jcmVhdGVTaWduZXIoc2lnbmVyT3B0cyk7XG4gICAgfSBjYXRjaCB7XG4gICAgICBzaWduZXIgPSBhd2FpdCBjMnBhTW9kLmNyZWF0ZVNpZ25lcih7IHByaXZhdGVLZXk6IHByaXZhdGVLZXlQZW0sIGNlcnRDaGFpbjogW2NlcnRpZmljYXRlUGVtXSwgdGltZUF1dGhvcml0eVVybDogdHNhVXJsIH0gYXMgYW55KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IHBhc3Mgc2lnbmVyIGFzIGEgcGxhaW4gb2JqZWN0OyBjMnBhLnNpZ24gbWF5IGJ1aWxkIGludGVybmFsbHlcbiAgICBzaWduZXIgPSBzaWduZXJPcHRzO1xuICB9XG5cbiAgLy8gRW5zdXJlIG1hbmlmZXN0IGhhcyBhIFRTQSBVUkwgcmVhY2hhYmxlIGZyb20gdGhlIGJyb3dzZXIuXG4gIC8vIFByZWZlciB0aGUgYXBwJ3MgcHJveHkgdG8gYXZvaWQgQ09SUyBpc3N1ZXMgd2l0aCBzdGFnaW5nIFRTQS5cbiAgbGV0IG1hbmlmZXN0Rm9yU2lnbiA9IG1hbmlmZXN0SnNvbiB8fCB7fTtcbiAgdHJ5IHtcbiAgICBjb25zdCBvcmlnaW4gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gOiAnJztcbiAgICBjb25zdCBwcm94eVVybCA9IG9yaWdpbiA/IGAke29yaWdpbn0vYXBpL3RzYS90aW1lc3RhbXBgIDogJy9hcGkvdHNhL3RpbWVzdGFtcCc7XG4gICAgLy8gSWYgdGFfdXJsIG1pc3Npbmcgb3IgcG9pbnRzIHRvIGV4dGVybmFsIFRTQSwgcm91dGUgdGhyb3VnaCBvdXIgcHJveHlcbiAgICBjb25zdCB0YSA9IG1hbmlmZXN0Rm9yU2lnbj8udGFfdXJsIGFzIHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBjb25zdCBuZWVkc1Byb3h5ID0gIXRhIHx8IC9eaHR0cHM/OlxcL1xcLy9pLnRlc3QodGEpO1xuICAgIG1hbmlmZXN0Rm9yU2lnbiA9IHsgLi4ubWFuaWZlc3RGb3JTaWduLCB0YV91cmw6IHByb3h5VXJsIH07XG4gIH0gY2F0Y2gge1xuICAgIC8vIGlnbm9yZVxuICB9XG5cbiAgLy8gU2lnblxuICBjb25zdCBhdHRlbXB0RXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xuICBmdW5jdGlvbiBjb2VyY2VUb0Jsb2IoYW55T3V0OiBhbnkpOiBCbG9iIHwgbnVsbCB7XG4gICAgaWYgKCFhbnlPdXQpIHJldHVybiBudWxsO1xuICAgIGlmIChhbnlPdXQgaW5zdGFuY2VvZiBCbG9iKSByZXR1cm4gYW55T3V0O1xuICAgIGlmIChhbnlPdXQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgcmV0dXJuIG5ldyBCbG9iKFthbnlPdXRdLCB7IHR5cGU6IGltYWdlLnR5cGUgfSk7XG4gICAgaWYgKGFueU91dD8uYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHJldHVybiBuZXcgQmxvYihbYW55T3V0LmJ1ZmZlcl0sIHsgdHlwZTogaW1hZ2UudHlwZSB9KTtcbiAgICBpZiAoYW55T3V0IGluc3RhbmNlb2YgVWludDhBcnJheSkgcmV0dXJuIG5ldyBCbG9iKFthbnlPdXQgYXMgVWludDhBcnJheTxBcnJheUJ1ZmZlcj5dLCB7IHR5cGU6IGltYWdlLnR5cGUgfSk7XG4gICAgaWYgKGFueU91dD8uYmxvYiBpbnN0YW5jZW9mIEJsb2IpIHJldHVybiBhbnlPdXQuYmxvYjtcbiAgICBpZiAoYW55T3V0Py5maWxlIGluc3RhbmNlb2YgQmxvYikgcmV0dXJuIGFueU91dC5maWxlO1xuICAgIGlmIChhbnlPdXQ/LnNpZ25lZCBpbnN0YW5jZW9mIEJsb2IpIHJldHVybiBhbnlPdXQuc2lnbmVkO1xuICAgIGlmIChhbnlPdXQ/LmRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgcmV0dXJuIG5ldyBCbG9iKFthbnlPdXQuZGF0YV0sIHsgdHlwZTogaW1hZ2UudHlwZSB9KTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHRyeVNpZ24odGFyZ2V0OiBhbnkpOiBQcm9taXNlPEJsb2IgfCBudWxsPiB7XG4gICAgaWYgKCF0YXJnZXQpIHJldHVybiBudWxsO1xuICAgIC8vIHNpZ24oZmlsZSwgeyBzaWduZXIsIG1hbmlmZXN0IH0pXG4gICAgdHJ5IHtcbiAgICAgIGlmICh0eXBlb2YgdGFyZ2V0LnNpZ24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uc3Qgb3V0MTogYW55ID0gYXdhaXQgdGFyZ2V0LnNpZ24oaW1hZ2UsIHsgc2lnbmVyLCBtYW5pZmVzdDogbWFuaWZlc3RGb3JTaWduIH0pO1xuICAgICAgICBjb25zdCBiMSA9IGNvZXJjZVRvQmxvYihvdXQxKTtcbiAgICAgICAgaWYgKGIxKSByZXR1cm4gYjE7XG4gICAgICAgIGlmIChvdXQxPy5hcnJheUJ1ZmZlcikge1xuICAgICAgICAgIGNvbnN0IGJ1ZiA9IGF3YWl0IG91dDEuYXJyYXlCdWZmZXIoKTtcbiAgICAgICAgICByZXR1cm4gbmV3IEJsb2IoW2J1Zl0sIHsgdHlwZTogaW1hZ2UudHlwZSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgYXR0ZW1wdEVycm9ycy5wdXNoKGU/Lm1lc3NhZ2UgfHwgU3RyaW5nKGUpKTtcbiAgICB9XG4gICAgLy8gc2lnbih7IGZpbGUsIHNpZ25lciwgbWFuaWZlc3QgfSlcbiAgICB0cnkge1xuICAgICAgaWYgKHR5cGVvZiB0YXJnZXQuc2lnbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjb25zdCBvdXQyOiBhbnkgPSBhd2FpdCB0YXJnZXQuc2lnbih7IGZpbGU6IGltYWdlLCBzaWduZXIsIG1hbmlmZXN0OiBtYW5pZmVzdEZvclNpZ24gfSk7XG4gICAgICAgIGNvbnN0IGIyID0gY29lcmNlVG9CbG9iKG91dDIpO1xuICAgICAgICBpZiAoYjIpIHJldHVybiBiMjtcbiAgICAgICAgaWYgKG91dDI/LmFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgY29uc3QgYnVmID0gYXdhaXQgb3V0Mi5hcnJheUJ1ZmZlcigpO1xuICAgICAgICAgIHJldHVybiBuZXcgQmxvYihbYnVmXSwgeyB0eXBlOiBpbWFnZS50eXBlIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgICBhdHRlbXB0RXJyb3JzLnB1c2goZT8ubWVzc2FnZSB8fCBTdHJpbmcoZSkpO1xuICAgIH1cbiAgICAvLyBzaWduKG1hbmlmZXN0LCBmaWxlLCBzaWduZXIpXG4gICAgdHJ5IHtcbiAgICAgIGlmICh0eXBlb2YgdGFyZ2V0LnNpZ24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uc3Qgb3V0MzogYW55ID0gYXdhaXQgdGFyZ2V0LnNpZ24obWFuaWZlc3RGb3JTaWduLCBpbWFnZSwgc2lnbmVyKTtcbiAgICAgICAgY29uc3QgYjMgPSBjb2VyY2VUb0Jsb2Iob3V0Myk7XG4gICAgICAgIGlmIChiMykgcmV0dXJuIGIzO1xuICAgICAgICBpZiAob3V0Mz8uYXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICBjb25zdCBidWYgPSBhd2FpdCBvdXQzLmFycmF5QnVmZmVyKCk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBCbG9iKFtidWZdLCB7IHR5cGU6IGltYWdlLnR5cGUgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgIGF0dGVtcHRFcnJvcnMucHVzaChlPy5tZXNzYWdlIHx8IFN0cmluZyhlKSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gVHJ5IHNpZ24gb24gY3JlYXRlZCBpbnN0YW5jZSBhbmQgb24gdGhlIG1vZHVsZSBpdHNlbGZcbiAgbGV0IGJsb2IgPSBhd2FpdCB0cnlTaWduKGMycGEpO1xuICBpZiAoIWJsb2IpIGJsb2IgPSBhd2FpdCB0cnlTaWduKGMycGFNb2QpO1xuXG4gIC8vIFRyeSB3cml0ZXIgQVBJc1xuICBhc3luYyBmdW5jdGlvbiB0cnlXcml0ZXIoZmFjdG9yeU93bmVyOiBhbnkpOiBQcm9taXNlPEJsb2IgfCBudWxsPiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChmYWN0b3J5T3duZXI/LldyaXRlcj8uY3JlYXRlKSB7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IGF3YWl0IGZhY3RvcnlPd25lci5Xcml0ZXIuY3JlYXRlKHsgc2lnbmVyIH0pO1xuICAgICAgICBpZiAod3JpdGVyPy5zaWduKSB7XG4gICAgICAgICAgY29uc3Qgb3V0ID0gYXdhaXQgd3JpdGVyLnNpZ24oaW1hZ2UsIG1hbmlmZXN0Rm9yU2lnbik7XG4gICAgICAgICAgY29uc3QgYiA9IGNvZXJjZVRvQmxvYihvdXQpO1xuICAgICAgICAgIGlmIChiKSByZXR1cm4gYjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgYXR0ZW1wdEVycm9ycy5wdXNoKGU/Lm1lc3NhZ2UgfHwgU3RyaW5nKGUpKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0eXBlb2YgZmFjdG9yeU93bmVyPy5jcmVhdGVXcml0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gYXdhaXQgZmFjdG9yeU93bmVyLmNyZWF0ZVdyaXRlcih7IHNpZ25lciB9KTtcbiAgICAgICAgaWYgKHdyaXRlcj8uc2lnbikge1xuICAgICAgICAgIGNvbnN0IG91dCA9IGF3YWl0IHdyaXRlci5zaWduKGltYWdlLCBtYW5pZmVzdEZvclNpZ24pO1xuICAgICAgICAgIGNvbnN0IGIgPSBjb2VyY2VUb0Jsb2Iob3V0KTtcbiAgICAgICAgICBpZiAoYikgcmV0dXJuIGI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgIGF0dGVtcHRFcnJvcnMucHVzaChlPy5tZXNzYWdlIHx8IFN0cmluZyhlKSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKCFibG9iKSBibG9iID0gYXdhaXQgdHJ5V3JpdGVyKGMycGFNb2QpO1xuICBpZiAoIWJsb2IpIGJsb2IgPSBhd2FpdCB0cnlXcml0ZXIoYzJwYSk7XG4gIGlmIChibG9iKSByZXR1cm4gYmxvYjtcblxuICAvLyBGYWxsYmFjazogcmV0dXJuIG9yaWdpbmFsIGltYWdlIGJsb2IgaWYgbm8gb3V0cHV0IHJlY29nbml6ZWRcbiAgY29uc29sZS53YXJuKCdjMnBhIHNpZ24gcmV0dXJuZWQgYW4gdW5leHBlY3RlZCByZXN1bHQgc2hhcGUuIEF0dGVtcHRzOicsIGF0dGVtcHRFcnJvcnMpO1xuICBjb25zdCBlcnJvckRldGFpbHMgPSBhdHRlbXB0RXJyb3JzLmxlbmd0aCA+IDBcbiAgICA/IGBcXG5cXG5BdHRlbXB0IGVycm9yczpcXG4ke2F0dGVtcHRFcnJvcnMubWFwKChlLCBpKSA9PiBgJHtpICsgMX0uICR7ZX1gKS5qb2luKCdcXG4nKX1gXG4gICAgOiAnJztcbiAgdGhyb3cgbmV3IEVycm9yKGBDMlBBIHNpZ24gZGlkIG5vdCByZXR1cm4gYSBCbG9iJHtlcnJvckRldGFpbHN9YCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlBc3NldChmaWxlOiBGaWxlIHwgQmxvYik6IFByb21pc2U8dW5rbm93bj4ge1xuICBjb25zdCBjMnBhTW9kID0gYXdhaXQgbG9hZEMycGEoKTtcbiAgbGV0IGMycGE6IGFueSA9IGMycGFNb2Q7XG4gIGlmICh0eXBlb2YgYzJwYU1vZC5DMnBhPy5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgYzJwYSA9IGF3YWl0IGMycGFNb2QuQzJwYS5jcmVhdGUoeyB3YXNtU3JjOiBwdWJsaWNDMnBhQXNzZXQoJ3Rvb2xraXRfYmcud2FzbScpLCB3b3JrZXJTcmM6IHB1YmxpY0MycGFBc3NldCgnYzJwYS53b3JrZXIuanMnKSB9KTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIHRyeSB1c2luZyBtb2R1bGUgZGlyZWN0bHlcbiAgICAgIGMycGEgPSBjMnBhTW9kO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgYzJwYS52ZXJpZnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYXdhaXQgYzJwYS52ZXJpZnkoZmlsZSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBjMnBhLnJlYWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYXdhaXQgYzJwYS5yZWFkKHsgZmlsZSB9KTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ0MyUEEgdmVyaWZ5L3JlYWQgQVBJIG5vdCBmb3VuZCcpO1xufVxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuIl0sIm5hbWVzIjpbImxvYWRDMnBhIiwibW9kIiwiZGVmYXVsdCIsInB1YmxpY0MycGFBc3NldCIsImZpbGUiLCJzaWduSW1hZ2VXaXRoTWFuaWZlc3QiLCJvcHRzIiwiYzJwYU1vZCIsImltYWdlIiwibWFuaWZlc3RKc29uIiwiY2VydGlmaWNhdGVQZW0iLCJwcml2YXRlS2V5UGVtIiwidHNhVXJsIiwid2FzbUNhbmRpZGF0ZXMiLCJ3b3JrZXJDYW5kaWRhdGVzIiwiYzJwYSIsImxhc3RFcnIiLCJ3YXNtIiwid29ya2VyIiwiY29uc29sZSIsImxvZyIsIkMycGEiLCJjcmVhdGUiLCJ3YXNtU3JjIiwid29ya2VyU3JjIiwiZSIsIndhcm4iLCJFcnJvciIsInNpZ25lck9wdHMiLCJwcml2YXRlS2V5IiwiY2VydENoYWluIiwiY2VydGlmaWNhdGVDaGFpbiIsInRpbWVBdXRob3JpdHlVcmwiLCJ0aW1lU3RhbXBVcmwiLCJ0aW1lc3RhbXBVcmwiLCJ0YVVybCIsInNpZ25lciIsIlNpZ25lciIsImNyZWF0ZVNpZ25lciIsIm1hbmlmZXN0Rm9yU2lnbiIsIm9yaWdpbiIsIndpbmRvdyIsImxvY2F0aW9uIiwicHJveHlVcmwiLCJ0YSIsInRhX3VybCIsIm5lZWRzUHJveHkiLCJ0ZXN0IiwiYXR0ZW1wdEVycm9ycyIsImNvZXJjZVRvQmxvYiIsImFueU91dCIsIkJsb2IiLCJBcnJheUJ1ZmZlciIsInR5cGUiLCJidWZmZXIiLCJVaW50OEFycmF5IiwiYmxvYiIsInNpZ25lZCIsImRhdGEiLCJ0cnlTaWduIiwidGFyZ2V0Iiwic2lnbiIsIm91dDEiLCJtYW5pZmVzdCIsImIxIiwiYXJyYXlCdWZmZXIiLCJidWYiLCJwdXNoIiwibWVzc2FnZSIsIlN0cmluZyIsIm91dDIiLCJiMiIsIm91dDMiLCJiMyIsInRyeVdyaXRlciIsImZhY3RvcnlPd25lciIsIldyaXRlciIsIndyaXRlciIsIm91dCIsImIiLCJjcmVhdGVXcml0ZXIiLCJlcnJvckRldGFpbHMiLCJsZW5ndGgiLCJtYXAiLCJpIiwiam9pbiIsInZlcmlmeUFzc2V0IiwidmVyaWZ5IiwicmVhZCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/c2paClient.ts\n"));

/***/ })

});