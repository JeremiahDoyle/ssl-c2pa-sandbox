/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/page"],{

/***/ "(app-pages-browser)/./app/page.tsx":
/*!**********************!*\
  !*** ./app/page.tsx ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Page)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/image */ \"(app-pages-browser)/./node_modules/next/dist/api/image.js\");\n/* harmony import */ var react_hot_toast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-hot-toast */ \"(app-pages-browser)/./node_modules/react-hot-toast/dist/index.mjs\");\n/* harmony import */ var _components_Card__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/components/Card */ \"(app-pages-browser)/./components/Card.tsx\");\n/* harmony import */ var _components_Dropzone__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/Dropzone */ \"(app-pages-browser)/./components/Dropzone.tsx\");\n/* harmony import */ var _lib_manifest__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/manifest */ \"(app-pages-browser)/./lib/manifest.ts\");\n/* harmony import */ var _lib_csr__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/lib/csr */ \"(app-pages-browser)/./lib/csr.ts\");\n/* harmony import */ var _lib_c2paClient__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/lib/c2paClient */ \"(app-pages-browser)/./lib/c2paClient.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\nfunction toPem(type, data) {\n    const bytes = new Uint8Array(data);\n    let bin = '';\n    for(let i = 0; i < bytes.byteLength; i++)bin += String.fromCharCode(bytes[i]);\n    const b64 = btoa(bin);\n    const wrapped = b64.replace(/(.{64})/g, '$1\\n');\n    return \"-----BEGIN \".concat(type, \"-----\\n\").concat(wrapped, \"\\n-----END \").concat(type, \"-----\");\n}\nasync function exportKeys(kp) {\n    // Export in PKCS#8 format (standard format)\n    const pkcs8 = await crypto.subtle.exportKey('pkcs8', kp.privateKey);\n    const pkcs8Pem = toPem('PRIVATE KEY', pkcs8);\n    // Also export for EC-specific PEM (c2patool may prefer this)\n    // PKCS#8 is fine for most tools, but we'll label it correctly\n    const ecPem = toPem('PRIVATE KEY', pkcs8);\n    const spki = await crypto.subtle.exportKey('spki', kp.publicKey);\n    return {\n        pkcs8Pem,\n        ecPem,\n        spkiPem: toPem('PUBLIC KEY', spki)\n    };\n}\nfunction Page() {\n    _s();\n    const [keys, setKeys] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [status, setStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('Keys in memory only • not uploaded');\n    const [certPem, setCertPem] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [csrPem, setCsrPem] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [manifestJson, setManifestJson] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(JSON.stringify(_lib_manifest__WEBPACK_IMPORTED_MODULE_6__.Presets.minimal, null, 2));\n    const [manifestError, setManifestError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [imageFile, setImageFile] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [verifyReport, setVerifyReport] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [showCurl, setShowCurl] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [tsaAlgo, setTsaAlgo] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('ecc');\n    // CSR fields\n    const [subjectCN, setSubjectCN] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [subjectO, setSubjectO] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [subjectC, setSubjectC] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    // Profile IDs (RSA/ECC) provided by your VP Eng\n    const PROFILES = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"Page.useMemo[PROFILES]\": ()=>[\n                {\n                    id: '6ba3b70c-38fe-44c3-803f-910c5873d1d6',\n                    name: 'RSA C2PA Profile'\n                },\n                {\n                    id: '764b6cdd-1c1b-4a46-9967-22a112a0b390',\n                    name: 'ECC C2PA Profile'\n                }\n            ]\n    }[\"Page.useMemo[PROFILES]\"], []);\n    const defaultProfile = process.env.NEXT_PUBLIC_CERT_PROFILE_ID || PROFILES[1].id; // default ECC\n    const [profileId, setProfileId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(defaultProfile);\n    const defaultProductId = process.env.NEXT_PUBLIC_CONFORMING_PRODUCT_ID || (typeof crypto !== 'undefined' && 'randomUUID' in crypto ? crypto.randomUUID() : '');\n    const [conformingProductId, setConformingProductId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(defaultProductId);\n    const [useServerSigner, setUseServerSigner] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true); // demo mode: server-side c2patool\n    const haveKeys = !!keys.privateKey && !!keys.publicKey;\n    const canSign = useServerSigner ? !!imageFile : haveKeys && !!certPem && !!imageFile && !!keys.pkcs8Pem;\n    const [preset, setPreset] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('minimal');\n    const generateKeysAndCsr = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"Page.useCallback[generateKeysAndCsr]\": async ()=>{\n            try {\n                setStatus('Generating EC P-256 keypair…');\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_3__[\"default\"].loading('Generating keys...', {\n                    id: 'keygen'\n                });\n                const kp = await crypto.subtle.generateKey({\n                    name: 'ECDSA',\n                    namedCurve: 'P-256'\n                }, true, [\n                    'sign',\n                    'verify'\n                ]);\n                const exported = await exportKeys(kp);\n                setKeys({\n                    privateKey: kp.privateKey,\n                    publicKey: kp.publicKey,\n                    ...exported\n                });\n                const csr = await (0,_lib_csr__WEBPACK_IMPORTED_MODULE_7__.generateCsrPem)({\n                    publicKey: kp.publicKey,\n                    privateKey: kp.privateKey,\n                    subject: {\n                        CN: subjectCN || undefined,\n                        O: subjectO || undefined,\n                        C: subjectC || undefined\n                    }\n                });\n                setCsrPem(csr);\n                setStatus('Keys ready in memory • not uploaded');\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_3__[\"default\"].success('Keys and CSR generated successfully!', {\n                    id: 'keygen'\n                });\n            } catch (e) {\n                setCsrPem('');\n                const msg = (e === null || e === void 0 ? void 0 : e.message) || String(e);\n                setStatus(\"Error: \".concat(msg));\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_3__[\"default\"].error(\"Failed to generate keys: \".concat(msg), {\n                    id: 'keygen'\n                });\n            }\n        }\n    }[\"Page.useCallback[generateKeysAndCsr]\"], [\n        subjectCN,\n        subjectO,\n        subjectC\n    ]);\n    const requestCertificate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"Page.useCallback[requestCertificate]\": async ()=>{\n            setCertPem('');\n            setStatus('Requesting certificate…');\n            react_hot_toast__WEBPACK_IMPORTED_MODULE_3__[\"default\"].loading('Requesting certificate from SSL.com...', {\n                id: 'cert'\n            });\n            try {\n                const res = await fetch('/api/cert-requests', {\n                    method: 'POST',\n                    headers: {\n                        'content-type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        csr: csrPem || '---PEM CSR---',\n                        profileId: profileId || undefined,\n                        conformingProductId: conformingProductId || undefined,\n                        subject: {\n                            CN: subjectCN || undefined,\n                            O: subjectO || undefined,\n                            C: subjectC || undefined\n                        }\n                    })\n                });\n                const data = await res.json();\n                if (!res.ok) throw new Error((data === null || data === void 0 ? void 0 : data.error) || 'Request failed');\n                setCertPem(data.certificatePem || '');\n                setStatus('Certificate received');\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_3__[\"default\"].success('Certificate received successfully!', {\n                    id: 'cert'\n                });\n            } catch (e) {\n                const msg = e.message || String(e);\n                setStatus(\"Error: \".concat(msg));\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_3__[\"default\"].error(\"Failed to get certificate: \".concat(msg), {\n                    id: 'cert'\n                });\n            }\n        }\n    }[\"Page.useCallback[requestCertificate]\"], [\n        csrPem,\n        profileId,\n        conformingProductId,\n        subjectCN,\n        subjectO,\n        subjectC\n    ]);\n    const onDropImage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"Page.useCallback[onDropImage]\": (file)=>{\n            setImageFile(file);\n        }\n    }[\"Page.useCallback[onDropImage]\"], []);\n    const signImage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"Page.useCallback[signImage]\": async ()=>{\n            if (!imageFile) return;\n            try {\n                const parsed = JSON.parse(manifestJson);\n                const res = _lib_manifest__WEBPACK_IMPORTED_MODULE_6__.ManifestSchema.safeParse(parsed);\n                if (!res.success) {\n                    setManifestError('Invalid manifest');\n                    react_hot_toast__WEBPACK_IMPORTED_MODULE_3__[\"default\"].error('Invalid manifest JSON');\n                    return;\n                }\n                setManifestError('');\n                setStatus('Signing image…');\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_3__[\"default\"].loading('Signing image...', {\n                    id: 'sign'\n                });\n                // All signing now happens server-side using c2patool\n                const form = new FormData();\n                form.append('file', imageFile);\n                form.append('manifest', JSON.stringify(res.data));\n                // Add user credentials if not in demo mode\n                if (!useServerSigner) {\n                    if (!keys.pkcs8Pem || !certPem) throw new Error('Missing certificate or private key');\n                    form.append('certPem', certPem);\n                    form.append('privateKeyPem', keys.pkcs8Pem);\n                }\n                const resp = await fetch('/api/sign', {\n                    method: 'POST',\n                    body: form\n                });\n                if (!resp.ok) {\n                    let msg = 'Signing failed';\n                    let hint = '';\n                    const ct = resp.headers.get('content-type') || '';\n                    try {\n                        if (ct.includes('application/json')) {\n                            const j = await resp.json();\n                            msg = (j === null || j === void 0 ? void 0 : j.detail) || (j === null || j === void 0 ? void 0 : j.error) || JSON.stringify(j);\n                            hint = (j === null || j === void 0 ? void 0 : j.hint) || '';\n                        } else {\n                            msg = await resp.text();\n                        }\n                    } catch (e) {}\n                    const fullMsg = hint ? \"\".concat(msg, \"\\n\\n\").concat(hint) : msg;\n                    throw new Error((fullMsg || '').toString().slice(0, 800));\n                }\n                const blob = await resp.blob();\n                const url = URL.createObjectURL(blob);\n                const a = document.createElement('a');\n                a.href = url;\n                a.download = 'signed-' + (imageFile.name || 'image');\n                a.click();\n                URL.revokeObjectURL(url);\n                setVerifyReport(useServerSigner ? 'Signed (demo mode with default cert)' : 'Signed (with your SSL.com cert)');\n                setStatus('Image signed successfully');\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_3__[\"default\"].success('Image signed and downloaded!', {\n                    id: 'sign'\n                });\n            } catch (e) {\n                const msg = e instanceof Error ? e.message : String(e);\n                setStatus(\"Error: \".concat(msg));\n                // Show longer toast for errors with hints (demo mode errors)\n                const duration = msg.includes('Quick fix') || msg.includes('c2patool') ? 10000 : 6000;\n                const displayMsg = msg.length > 300 ? msg.slice(0, 300) + '...' : msg;\n                react_hot_toast__WEBPACK_IMPORTED_MODULE_3__[\"default\"].error(\"Signing failed:\\n\\n\".concat(displayMsg), {\n                    id: 'sign',\n                    duration,\n                    style: {\n                        maxWidth: '600px'\n                    }\n                });\n            }\n        }\n    }[\"Page.useCallback[signImage]\"], [\n        imageFile,\n        keys.privateKey,\n        keys.pkcs8Pem,\n        certPem,\n        manifestJson,\n        useServerSigner\n    ]);\n    const verifyOnly = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"Page.useCallback[verifyOnly]\": async ()=>{\n            if (!imageFile) return;\n            setStatus('Verifying…');\n            const report = await (0,_lib_c2paClient__WEBPACK_IMPORTED_MODULE_8__.verifyAsset)(imageFile);\n            setVerifyReport(JSON.stringify(report, null, 2));\n        }\n    }[\"Page.useCallback[verifyOnly]\"], [\n        imageFile\n    ]);\n    const imagePreviewUrl = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"Page.useMemo[imagePreviewUrl]\": ()=>imageFile ? URL.createObjectURL(imageFile) : ''\n    }[\"Page.useMemo[imagePreviewUrl]\"], [\n        imageFile\n    ]);\n    const curlCommand = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"Page.useMemo[curlCommand]\": ()=>{\n            const apiBase = process.env.NEXT_PUBLIC_API_BASE || 'https://api.c2patool.io';\n            const bodyOut = {\n                certificate_profile_id: profileId || undefined,\n                certificate_signing_request: csrPem || '-----BEGIN CERTIFICATE REQUEST-----\\\\n...\\\\n-----END CERTIFICATE REQUEST-----',\n                conforming_product_id: conformingProductId || undefined\n            };\n            const subj = {\n                CN: subjectCN || undefined,\n                O: subjectO || undefined,\n                C: subjectC || undefined\n            };\n            if (subj.CN || subj.O || subj.C) bodyOut.experimental = subj;\n            const json = JSON.stringify(bodyOut);\n            const cmd = [\n                \"curl --location '\".concat(apiBase, \"/api/v1/certificate-requests' \\\\\"),\n                \"--header 'Content-Type: application/json' \\\\\",\n                \"--header 'Authorization: Bearer 9b049052a999e98dd5c63b480c523c703a9df4d633910310f0b965bc278993ab' \\\\\",\n                \"--data '\".concat(json, \"'\")\n            ].join('\\n');\n            return cmd;\n        }\n    }[\"Page.useMemo[curlCommand]\"], [\n        profileId,\n        csrPem,\n        conformingProductId,\n        subjectCN,\n        subjectO,\n        subjectC\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"space-y-6\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                className: \"text-sm text-gray-600\",\n                children: \"Developer tool for testing SSL.com C2PA API endpoints. Configure your own credentials or use the shared test token provided.\"\n            }, void 0, false, {\n                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                lineNumber: 230,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Card__WEBPACK_IMPORTED_MODULE_4__.Card, {\n                title: \"Keys & Certificate\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-xs text-gray-500\",\n                        children: status\n                    }, void 0, false, {\n                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                        lineNumber: 234,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"mt-4 flex flex-wrap gap-2\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                className: \"px-3 py-2 rounded bg-blue-600 text-white disabled:opacity-50\",\n                                onClick: generateKeysAndCsr,\n                                children: \"Generate Keys & CSR\"\n                            }, void 0, false, {\n                                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                lineNumber: 236,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                className: \"px-3 py-2 rounded bg-blue-600 text-white disabled:opacity-50\",\n                                onClick: requestCertificate,\n                                disabled: !haveKeys,\n                                children: \"Request Certificate\"\n                            }, void 0, false, {\n                                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                lineNumber: 239,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                className: \"px-3 py-2 rounded border\",\n                                type: \"button\",\n                                onClick: ()=>setShowCurl((s)=>!s),\n                                children: [\n                                    showCurl ? 'Hide' : 'Show',\n                                    \" API cURL\"\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                lineNumber: 242,\n                                columnNumber: 11\n                            }, this),\n                            keys.pkcs8Pem && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                className: \"px-3 py-2 rounded border text-blue-700 border-blue-200\",\n                                href: \"data:application/x-pem-file;charset=utf-8,\".concat(encodeURIComponent(keys.pkcs8Pem)),\n                                download: \"private_key.pk8.pem\",\n                                children: \"Download Private Key\"\n                            }, void 0, false, {\n                                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                lineNumber: 246,\n                                columnNumber: 13\n                            }, this),\n                            certPem && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                className: \"px-3 py-2 rounded border text-blue-700 border-blue-200\",\n                                href: \"data:application/x-pem-file;charset=utf-8,\".concat(encodeURIComponent(certPem)),\n                                download: \"certificate.pem\",\n                                children: \"Download Cert\"\n                            }, void 0, false, {\n                                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                lineNumber: 255,\n                                columnNumber: 13\n                            }, this),\n                            csrPem && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                                className: \"px-3 py-2 rounded border text-blue-700 border-blue-200\",\n                                href: \"data:application/pkcs10;charset=utf-8,\".concat(encodeURIComponent(csrPem)),\n                                download: \"request.csr.pem\",\n                                children: \"Download CSR\"\n                            }, void 0, false, {\n                                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                lineNumber: 264,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                        lineNumber: 235,\n                        columnNumber: 9\n                    }, this),\n                    showCurl && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"mt-3\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                className: \"block text-xs text-gray-600 mb-1\",\n                                children: \"Certificate Request — cURL (copy and use in your app)\"\n                            }, void 0, false, {\n                                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                lineNumber: 275,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"pre\", {\n                                className: \"p-3 bg-gray-50 border rounded text-[12px] whitespace-pre-wrap break-all\",\n                                children: curlCommand\n                            }, void 0, false, {\n                                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                lineNumber: 276,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"mt-2 flex gap-2\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                        type: \"button\",\n                                        className: \"px-3 py-2 rounded border\",\n                                        onClick: ()=>{\n                                            var _navigator_clipboard;\n                                            return (_navigator_clipboard = navigator.clipboard) === null || _navigator_clipboard === void 0 ? void 0 : _navigator_clipboard.writeText(curlCommand);\n                                        },\n                                        children: \"Copy\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                        lineNumber: 278,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"text-[11px] text-gray-500\",\n                                        children: \"Replace <YOUR_ACCOUNT_TOKEN> with your account token. Shared test token is pre-filled for quick testing.\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                        lineNumber: 285,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                lineNumber: 277,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                        lineNumber: 274,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"mt-4 grid grid-cols-1 md:grid-cols-3 gap-3\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        className: \"block text-xs text-gray-600\",\n                                        children: \"Subject CN\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                        lineNumber: 291,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                        className: \"w-full border rounded px-2 py-1\",\n                                        value: subjectCN,\n                                        onChange: (e)=>setSubjectCN(e.target.value)\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                        lineNumber: 292,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                lineNumber: 290,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        className: \"block text-xs text-gray-600\",\n                                        children: \"Subject O\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                        lineNumber: 295,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                        className: \"w-full border rounded px-2 py-1\",\n                                        value: subjectO,\n                                        onChange: (e)=>setSubjectO(e.target.value)\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                        lineNumber: 296,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                lineNumber: 294,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        className: \"block text-xs text-gray-600\",\n                                        children: \"Subject C\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                        lineNumber: 299,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                        className: \"w-full border rounded px-2 py-1\",\n                                        value: subjectC,\n                                        onChange: (e)=>setSubjectC(e.target.value)\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                        lineNumber: 300,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                lineNumber: 298,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        className: \"block text-xs text-gray-600\",\n                                        children: \"Profile\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                        lineNumber: 303,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                                        className: \"w-full border rounded px-2 py-2 text-sm\",\n                                        value: profileId,\n                                        onChange: (e)=>setProfileId(e.target.value),\n                                        children: PROFILES.map((p)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                value: p.id,\n                                                children: p.name\n                                            }, p.id, false, {\n                                                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                                lineNumber: 310,\n                                                columnNumber: 17\n                                            }, this))\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                        lineNumber: 304,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        className: \"text-[11px] text-gray-500 mt-1\",\n                                        children: \"Autofills known RSA/ECC profile IDs\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                        lineNumber: 313,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                lineNumber: 302,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                        className: \"block text-xs text-gray-600\",\n                                        children: \"Conforming Product ID\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                        lineNumber: 316,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex gap-2\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                                className: \"w-full border rounded px-2 py-1\",\n                                                value: conformingProductId,\n                                                onChange: (e)=>setConformingProductId(e.target.value)\n                                            }, void 0, false, {\n                                                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                                lineNumber: 318,\n                                                columnNumber: 15\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                                type: \"button\",\n                                                className: \"px-2 py-1 text-xs border rounded\",\n                                                onClick: ()=>setConformingProductId(typeof crypto !== 'undefined' && 'randomUUID' in crypto ? crypto.randomUUID() : ''),\n                                                children: \"Random\"\n                                            }, void 0, false, {\n                                                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                                lineNumber: 319,\n                                                columnNumber: 15\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                        lineNumber: 317,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                        className: \"text-[11px] text-gray-500 mt-1\",\n                                        children: \"Prefill with a random UUID, or paste your own\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                        lineNumber: 327,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                lineNumber: 315,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                        lineNumber: 289,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                lineNumber: 233,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Card__WEBPACK_IMPORTED_MODULE_4__.Card, {\n                title: \"Image & Manifest\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"mt-3 grid grid-cols-1 md:grid-cols-2 gap-4\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                    className: \"block text-sm font-medium text-gray-700 mb-1\",\n                                    children: \"Image\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                    lineNumber: 336,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Dropzone__WEBPACK_IMPORTED_MODULE_5__.Dropzone, {\n                                    onFile: onDropImage\n                                }, void 0, false, {\n                                    fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                    lineNumber: 337,\n                                    columnNumber: 13\n                                }, this),\n                                imagePreviewUrl && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_image__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                                    src: imagePreviewUrl,\n                                    alt: \"preview\",\n                                    width: 320,\n                                    height: 240,\n                                    className: \"mt-2 rounded border object-contain\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                    lineNumber: 339,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                            lineNumber: 335,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                    className: \"block text-sm font-medium text-gray-700 mb-1\",\n                                    children: \"Manifest JSON\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                    lineNumber: 343,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"textarea\", {\n                                    className: \"w-full h-40 border rounded p-2 font-mono text-sm\",\n                                    value: manifestJson,\n                                    onChange: (e)=>setManifestJson(e.target.value)\n                                }, void 0, false, {\n                                    fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                    lineNumber: 344,\n                                    columnNumber: 13\n                                }, this),\n                                manifestError && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                    className: \"text-xs text-red-600 mt-1\",\n                                    children: manifestError\n                                }, void 0, false, {\n                                    fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                    lineNumber: 349,\n                                    columnNumber: 31\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"mt-2 flex flex-wrap gap-2 items-center\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                            className: \"px-3 py-2 rounded bg-blue-600 text-white disabled:opacity-50\",\n                                            disabled: !canSign,\n                                            onClick: signImage,\n                                            children: \"Sign Image\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                            lineNumber: 351,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                            className: \"inline-flex items-center gap-2 text-xs text-gray-700\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                                    type: \"checkbox\",\n                                                    checked: useServerSigner,\n                                                    onChange: (e)=>setUseServerSigner(e.target.checked)\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                                    lineNumber: 355,\n                                                    columnNumber: 17\n                                                }, this),\n                                                \"Quick demo mode (no credentials needed)\"\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                            lineNumber: 354,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                            className: \"px-3 py-2 rounded border\",\n                                            onClick: ()=>setManifestJson(JSON.stringify(JSON.parse(manifestJson), null, 2)),\n                                            children: \"Format\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                            lineNumber: 358,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                            className: \"text-xs text-gray-600\",\n                                            children: \"Preset\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                            lineNumber: 359,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                                            className: \"px-2 py-2 border rounded text-sm\",\n                                            value: preset,\n                                            onChange: (e)=>{\n                                                const v = e.target.value;\n                                                setPreset(v);\n                                                setManifestJson(JSON.stringify(_lib_manifest__WEBPACK_IMPORTED_MODULE_6__.Presets[v], null, 2));\n                                            },\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"minimal\",\n                                                    children: \"Minimal\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                                    lineNumber: 369,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"editorial\",\n                                                    children: \"Editorial\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                                    lineNumber: 370,\n                                                    columnNumber: 17\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                            lineNumber: 360,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                            className: \"text-xs text-gray-600\",\n                                            children: \"TSA\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                            lineNumber: 372,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                                            className: \"px-2 py-2 border rounded text-sm\",\n                                            value: tsaAlgo,\n                                            onChange: (e)=>{\n                                                const algo = e.target.value;\n                                                setTsaAlgo(algo);\n                                                try {\n                                                    const parsed = JSON.parse(manifestJson);\n                                                    parsed.ta_url = algo === 'rsa' ? 'https://api.staging.c2pa.ssl.com/v1/timestamp/rsa' : 'https://api.staging.c2pa.ssl.com/v1/timestamp';\n                                                    setManifestError('');\n                                                    setManifestJson(JSON.stringify(parsed, null, 2));\n                                                } catch (err) {\n                                                    setManifestError('Invalid JSON; cannot set TSA');\n                                                }\n                                            },\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"ecc\",\n                                                    children: \"ECC (default)\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                                    lineNumber: 391,\n                                                    columnNumber: 17\n                                                }, this),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                                    value: \"rsa\",\n                                                    children: \"RSA\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                                    lineNumber: 392,\n                                                    columnNumber: 17\n                                                }, this)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                            lineNumber: 373,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                            className: \"px-3 py-2 rounded border\",\n                                            onClick: ()=>setManifestJson('{}'),\n                                            children: \"Reset\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                            lineNumber: 394,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                            className: \"px-3 py-2 rounded border\",\n                                            onClick: ()=>{\n                                                try {\n                                                    const parsed = JSON.parse(manifestJson);\n                                                    const res = _lib_manifest__WEBPACK_IMPORTED_MODULE_6__.ManifestSchema.safeParse(parsed);\n                                                    if (!res.success) throw new Error('Invalid manifest');\n                                                    setManifestError('');\n                                                    const blob = new Blob([\n                                                        JSON.stringify(res.data, null, 2)\n                                                    ], {\n                                                        type: 'application/json'\n                                                    });\n                                                    const url = URL.createObjectURL(blob);\n                                                    const a = document.createElement('a');\n                                                    a.href = url;\n                                                    a.download = 'manifest.json';\n                                                    a.click();\n                                                    URL.revokeObjectURL(url);\n                                                } catch (e) {\n                                                    const msg = e instanceof Error ? e.message : String(e);\n                                                    setManifestError(msg || 'Invalid JSON');\n                                                }\n                                            },\n                                            children: \"Download Manifest\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                            lineNumber: 395,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                    lineNumber: 350,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                            lineNumber: 342,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                    lineNumber: 334,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                lineNumber: 333,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_Card__WEBPACK_IMPORTED_MODULE_4__.Card, {\n                title: \"Verify\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"mt-3 flex gap-2 items-center\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                className: \"px-3 py-2 rounded bg-blue-600 text-white\",\n                                onClick: verifyOnly,\n                                children: \"Verify\"\n                            }, void 0, false, {\n                                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                lineNumber: 426,\n                                columnNumber: 11\n                            }, this),\n                            verifyReport && (()=>{\n                                try {\n                                    const r = JSON.parse(verifyReport);\n                                    const status = (r.status || '').toLowerCase();\n                                    const cls = status === 'ok' ? 'bg-green-100 text-green-800 border-green-200' : status === 'warn' ? 'bg-amber-100 text-amber-800 border-amber-200' : 'bg-red-100 text-red-800 border-red-200';\n                                    const label = status === 'ok' ? 'Pass' : status === 'warn' ? 'Warnings' : 'Fail';\n                                    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"inline-flex items-center text-xs font-medium rounded px-2 py-1 border \".concat(cls),\n                                        children: label\n                                    }, void 0, false, {\n                                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                                        lineNumber: 435,\n                                        columnNumber: 22\n                                    }, this);\n                                } catch (e) {\n                                    return null;\n                                }\n                            })()\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                        lineNumber: 425,\n                        columnNumber: 9\n                    }, this),\n                    verifyReport && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"pre\", {\n                        className: \"mt-3 whitespace-pre-wrap text-sm bg-gray-50 border rounded p-3\",\n                        children: verifyReport\n                    }, void 0, false, {\n                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                        lineNumber: 442,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                lineNumber: 424,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"footer\", {\n                className: \"text-xs text-gray-500 mt-8\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        children: \"SSL.com C2PA Developer Tool • Test certificate issuance, signing, and verification APIs\"\n                    }, void 0, false, {\n                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                        lineNumber: 447,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"mt-2\",\n                        children: \"TSA Endpoints: ECC — https://api.staging.c2pa.ssl.com/v1/timestamp • RSA — https://api.staging.c2pa.ssl.com/v1/timestamp/rsa\"\n                    }, void 0, false, {\n                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                        lineNumber: 448,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        children: \"Trust Bundles: ECC — https://api.staging.c2pa.ssl.com/repository/C2PA-ECC-TRUST-BUNDLE.pem • RSA — https://api.staging.c2pa.ssl.com/repository/C2PA-RSA-TRUST-BUNDLE.pem\"\n                    }, void 0, false, {\n                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                        lineNumber: 449,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n                lineNumber: 446,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/jeremiah/Desktop/c2pa tool/app/page.tsx\",\n        lineNumber: 229,\n        columnNumber: 5\n    }, this);\n}\n_s(Page, \"9/A4RCypEZ5hO7PDjW3eZA5MeuE=\");\n_c = Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./components/Card.tsx":
/*!*****************************!*\
  !*** ./components/Card.tsx ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Card: () => (/* binding */ Card)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n\nfunction Card(param) {\n    let { title, children } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"section\", {\n        className: \"card\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                className: \"text-lg font-semibold\",\n                children: title\n            }, void 0, false, {\n                fileName: \"/Users/jeremiah/Desktop/c2pa tool/components/Card.tsx\",\n                lineNumber: 6,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"mt-3\",\n                children: children\n            }, void 0, false, {\n                fileName: \"/Users/jeremiah/Desktop/c2pa tool/components/Card.tsx\",\n                lineNumber: 7,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/jeremiah/Desktop/c2pa tool/components/Card.tsx\",\n        lineNumber: 5,\n        columnNumber: 5\n    }, this);\n}\n_c = Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvQ2FyZC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRU8sU0FBU0EsS0FBSyxLQUEyRDtRQUEzRCxFQUFFQyxLQUFLLEVBQUVDLFFBQVEsRUFBMEMsR0FBM0Q7SUFDbkIscUJBQ0UsOERBQUNDO1FBQVFDLFdBQVU7OzBCQUNqQiw4REFBQ0M7Z0JBQUdELFdBQVU7MEJBQXlCSDs7Ozs7OzBCQUN2Qyw4REFBQ0s7Z0JBQUlGLFdBQVU7MEJBQVFGOzs7Ozs7Ozs7Ozs7QUFHN0I7S0FQZ0JGIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRGVza3RvcC9jMnBhIHRvb2wvY29tcG9uZW50cy9DYXJkLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBDYXJkKHsgdGl0bGUsIGNoaWxkcmVuIH06IHsgdGl0bGU6IHN0cmluZzsgY2hpbGRyZW46IFJlYWN0Tm9kZSB9KSB7XG4gIHJldHVybiAoXG4gICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiY2FyZFwiPlxuICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQtbGcgZm9udC1zZW1pYm9sZFwiPnt0aXRsZX08L2gyPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdC0zXCI+e2NoaWxkcmVufTwvZGl2PlxuICAgIDwvc2VjdGlvbj5cbiAgKTtcbn1cblxuIl0sIm5hbWVzIjpbIkNhcmQiLCJ0aXRsZSIsImNoaWxkcmVuIiwic2VjdGlvbiIsImNsYXNzTmFtZSIsImgyIiwiZGl2Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/Card.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./components/Dropzone.tsx":
/*!*********************************!*\
  !*** ./components/Dropzone.tsx ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Dropzone: () => (/* binding */ Dropzone)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ Dropzone auto */ \nvar _s = $RefreshSig$();\n\nfunction Dropzone(param) {\n    let { onFile, accept = 'image/jpeg,image/png,image/webp', maxBytes = 10 * 1024 * 1024 } = param;\n    _s();\n    const [active, setActive] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const inputRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const onDrop = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"Dropzone.useCallback[onDrop]\": (e)=>{\n            var _e_dataTransfer_files;\n            e.preventDefault();\n            setActive(false);\n            const f = (_e_dataTransfer_files = e.dataTransfer.files) === null || _e_dataTransfer_files === void 0 ? void 0 : _e_dataTransfer_files[0];\n            if (f) {\n                if (f.size > maxBytes) return alert('File too large');\n                onFile(f);\n            }\n        }\n    }[\"Dropzone.useCallback[onDrop]\"], [\n        onFile,\n        maxBytes\n    ]);\n    const onChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"Dropzone.useCallback[onChange]\": (e)=>{\n            var _e_target_files;\n            const f = (_e_target_files = e.target.files) === null || _e_target_files === void 0 ? void 0 : _e_target_files[0];\n            if (f) {\n                if (f.size > maxBytes) return alert('File too large');\n                onFile(f);\n            }\n        }\n    }[\"Dropzone.useCallback[onChange]\"], [\n        onFile,\n        maxBytes\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                role: \"button\",\n                tabIndex: 0,\n                \"aria-label\": \"Upload image\",\n                onKeyDown: (e)=>{\n                    var _inputRef_current;\n                    if (e.key === 'Enter') (_inputRef_current = inputRef.current) === null || _inputRef_current === void 0 ? void 0 : _inputRef_current.click();\n                },\n                onDragOver: (e)=>{\n                    e.preventDefault();\n                    setActive(true);\n                },\n                onDragLeave: ()=>setActive(false),\n                onDrop: onDrop,\n                onClick: ()=>{\n                    var _inputRef_current;\n                    return (_inputRef_current = inputRef.current) === null || _inputRef_current === void 0 ? void 0 : _inputRef_current.click();\n                },\n                className: \"border-2 border-dashed rounded p-6 text-center cursor-pointer \".concat(active ? 'border-blue-400 bg-blue-50' : 'border-gray-300'),\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-sm text-gray-600\",\n                        children: \"Drag-and-drop an image, or click to select.\"\n                    }, void 0, false, {\n                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/components/Dropzone.tsx\",\n                        lineNumber: 50,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-xs text-gray-500 mt-1\",\n                        children: \"Accepted: JPEG, PNG, WebP\"\n                    }, void 0, false, {\n                        fileName: \"/Users/jeremiah/Desktop/c2pa tool/components/Dropzone.tsx\",\n                        lineNumber: 51,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/jeremiah/Desktop/c2pa tool/components/Dropzone.tsx\",\n                lineNumber: 39,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                ref: inputRef,\n                type: \"file\",\n                accept: accept,\n                className: \"hidden\",\n                onChange: onChange\n            }, void 0, false, {\n                fileName: \"/Users/jeremiah/Desktop/c2pa tool/components/Dropzone.tsx\",\n                lineNumber: 53,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/jeremiah/Desktop/c2pa tool/components/Dropzone.tsx\",\n        lineNumber: 38,\n        columnNumber: 5\n    }, this);\n}\n_s(Dropzone, \"GlxbBcjZvaqySmhH1QBowV5oKJU=\");\n_c = Dropzone;\nvar _c;\n$RefreshReg$(_c, \"Dropzone\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvRHJvcHpvbmUudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNzRDtBQUUvQyxTQUFTRyxTQUFTLEtBUXhCO1FBUndCLEVBQ3ZCQyxNQUFNLEVBQ05DLFNBQVMsaUNBQWlDLEVBQzFDQyxXQUFXLEtBQUssT0FBTyxJQUFJLEVBSzVCLEdBUndCOztJQVN2QixNQUFNLENBQUNDLFFBQVFDLFVBQVUsR0FBR04sK0NBQVFBLENBQUM7SUFDckMsTUFBTU8sV0FBV1IsNkNBQU1BLENBQTBCO0lBRWpELE1BQU1TLFNBQVNWLGtEQUFXQTt3Q0FDeEIsQ0FBQ1c7Z0JBR1dBO1lBRlZBLEVBQUVDLGNBQWM7WUFDaEJKLFVBQVU7WUFDVixNQUFNSyxLQUFJRix3QkFBQUEsRUFBRUcsWUFBWSxDQUFDQyxLQUFLLGNBQXBCSiw0Q0FBQUEscUJBQXNCLENBQUMsRUFBRTtZQUNuQyxJQUFJRSxHQUFHO2dCQUNMLElBQUlBLEVBQUVHLElBQUksR0FBR1YsVUFBVSxPQUFPVyxNQUFNO2dCQUNwQ2IsT0FBT1M7WUFDVDtRQUNGO3VDQUNBO1FBQUNUO1FBQVFFO0tBQVM7SUFHcEIsTUFBTVksV0FBV2xCLGtEQUFXQTswQ0FBQyxDQUFDVztnQkFDbEJBO1lBQVYsTUFBTUUsS0FBSUYsa0JBQUFBLEVBQUVRLE1BQU0sQ0FBQ0osS0FBSyxjQUFkSixzQ0FBQUEsZUFBZ0IsQ0FBQyxFQUFFO1lBQzdCLElBQUlFLEdBQUc7Z0JBQ0wsSUFBSUEsRUFBRUcsSUFBSSxHQUFHVixVQUFVLE9BQU9XLE1BQU07Z0JBQ3BDYixPQUFPUztZQUNUO1FBQ0Y7eUNBQUc7UUFBQ1Q7UUFBUUU7S0FBUztJQUVyQixxQkFDRSw4REFBQ2M7OzBCQUNDLDhEQUFDQTtnQkFDQ0MsTUFBSztnQkFDTEMsVUFBVTtnQkFDVkMsY0FBVztnQkFDWEMsV0FBVyxDQUFDYjt3QkFBK0JGO29CQUF2QixJQUFJRSxFQUFFYyxHQUFHLEtBQUssVUFBU2hCLG9CQUFBQSxTQUFTaUIsT0FBTyxjQUFoQmpCLHdDQUFBQSxrQkFBa0JrQixLQUFLO2dCQUFJO2dCQUN0RUMsWUFBWSxDQUFDakI7b0JBQVFBLEVBQUVDLGNBQWM7b0JBQUlKLFVBQVU7Z0JBQU87Z0JBQzFEcUIsYUFBYSxJQUFNckIsVUFBVTtnQkFDN0JFLFFBQVFBO2dCQUNSb0IsU0FBUzt3QkFBTXJCOzRCQUFBQSxvQkFBQUEsU0FBU2lCLE9BQU8sY0FBaEJqQix3Q0FBQUEsa0JBQWtCa0IsS0FBSzs7Z0JBQ3RDSSxXQUFXLGlFQUEySCxPQUExRHhCLFNBQVMsK0JBQStCOztrQ0FFcEgsOERBQUN5Qjt3QkFBRUQsV0FBVTtrQ0FBd0I7Ozs7OztrQ0FDckMsOERBQUNDO3dCQUFFRCxXQUFVO2tDQUE2Qjs7Ozs7Ozs7Ozs7OzBCQUU1Qyw4REFBQ0U7Z0JBQU1DLEtBQUt6QjtnQkFBVTBCLE1BQUs7Z0JBQU85QixRQUFRQTtnQkFBUTBCLFdBQVU7Z0JBQVNiLFVBQVVBOzs7Ozs7Ozs7Ozs7QUFHckY7R0FwRGdCZjtLQUFBQSIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0Rlc2t0b3AvYzJwYSB0b29sL2NvbXBvbmVudHMvRHJvcHpvbmUudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBEcm9wem9uZSh7XG4gIG9uRmlsZSxcbiAgYWNjZXB0ID0gJ2ltYWdlL2pwZWcsaW1hZ2UvcG5nLGltYWdlL3dlYnAnLFxuICBtYXhCeXRlcyA9IDEwICogMTAyNCAqIDEwMjQsXG59OiB7XG4gIG9uRmlsZTogKGZpbGU6IEZpbGUpID0+IHZvaWQ7XG4gIGFjY2VwdD86IHN0cmluZztcbiAgbWF4Qnl0ZXM/OiBudW1iZXI7XG59KSB7XG4gIGNvbnN0IFthY3RpdmUsIHNldEFjdGl2ZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IGlucHV0UmVmID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsPihudWxsKTtcblxuICBjb25zdCBvbkRyb3AgPSB1c2VDYWxsYmFjayhcbiAgICAoZTogUmVhY3QuRHJhZ0V2ZW50KSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBzZXRBY3RpdmUoZmFsc2UpO1xuICAgICAgY29uc3QgZiA9IGUuZGF0YVRyYW5zZmVyLmZpbGVzPy5bMF07XG4gICAgICBpZiAoZikge1xuICAgICAgICBpZiAoZi5zaXplID4gbWF4Qnl0ZXMpIHJldHVybiBhbGVydCgnRmlsZSB0b28gbGFyZ2UnKTtcbiAgICAgICAgb25GaWxlKGYpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW29uRmlsZSwgbWF4Qnl0ZXNdXG4gICk7XG5cbiAgY29uc3Qgb25DaGFuZ2UgPSB1c2VDYWxsYmFjaygoZTogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICBjb25zdCBmID0gZS50YXJnZXQuZmlsZXM/LlswXTtcbiAgICBpZiAoZikge1xuICAgICAgaWYgKGYuc2l6ZSA+IG1heEJ5dGVzKSByZXR1cm4gYWxlcnQoJ0ZpbGUgdG9vIGxhcmdlJyk7XG4gICAgICBvbkZpbGUoZik7XG4gICAgfVxuICB9LCBbb25GaWxlLCBtYXhCeXRlc10pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxkaXZcbiAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICBhcmlhLWxhYmVsPVwiVXBsb2FkIGltYWdlXCJcbiAgICAgICAgb25LZXlEb3duPXsoZSkgPT4geyBpZiAoZS5rZXkgPT09ICdFbnRlcicpIGlucHV0UmVmLmN1cnJlbnQ/LmNsaWNrKCk7IH19XG4gICAgICAgIG9uRHJhZ092ZXI9eyhlKSA9PiB7IGUucHJldmVudERlZmF1bHQoKTsgc2V0QWN0aXZlKHRydWUpOyB9fVxuICAgICAgICBvbkRyYWdMZWF2ZT17KCkgPT4gc2V0QWN0aXZlKGZhbHNlKX1cbiAgICAgICAgb25Ecm9wPXtvbkRyb3B9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IGlucHV0UmVmLmN1cnJlbnQ/LmNsaWNrKCl9XG4gICAgICAgIGNsYXNzTmFtZT17YGJvcmRlci0yIGJvcmRlci1kYXNoZWQgcm91bmRlZCBwLTYgdGV4dC1jZW50ZXIgY3Vyc29yLXBvaW50ZXIgJHthY3RpdmUgPyAnYm9yZGVyLWJsdWUtNDAwIGJnLWJsdWUtNTAnIDogJ2JvcmRlci1ncmF5LTMwMCd9YH1cbiAgICAgID5cbiAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWdyYXktNjAwXCI+RHJhZy1hbmQtZHJvcCBhbiBpbWFnZSwgb3IgY2xpY2sgdG8gc2VsZWN0LjwvcD5cbiAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC14cyB0ZXh0LWdyYXktNTAwIG10LTFcIj5BY2NlcHRlZDogSlBFRywgUE5HLCBXZWJQPC9wPlxuICAgICAgPC9kaXY+XG4gICAgICA8aW5wdXQgcmVmPXtpbnB1dFJlZn0gdHlwZT1cImZpbGVcIiBhY2NlcHQ9e2FjY2VwdH0gY2xhc3NOYW1lPVwiaGlkZGVuXCIgb25DaGFuZ2U9e29uQ2hhbmdlfSAvPlxuICAgIDwvZGl2PlxuICApO1xufVxuIl0sIm5hbWVzIjpbInVzZUNhbGxiYWNrIiwidXNlUmVmIiwidXNlU3RhdGUiLCJEcm9wem9uZSIsIm9uRmlsZSIsImFjY2VwdCIsIm1heEJ5dGVzIiwiYWN0aXZlIiwic2V0QWN0aXZlIiwiaW5wdXRSZWYiLCJvbkRyb3AiLCJlIiwicHJldmVudERlZmF1bHQiLCJmIiwiZGF0YVRyYW5zZmVyIiwiZmlsZXMiLCJzaXplIiwiYWxlcnQiLCJvbkNoYW5nZSIsInRhcmdldCIsImRpdiIsInJvbGUiLCJ0YWJJbmRleCIsImFyaWEtbGFiZWwiLCJvbktleURvd24iLCJrZXkiLCJjdXJyZW50IiwiY2xpY2siLCJvbkRyYWdPdmVyIiwib25EcmFnTGVhdmUiLCJvbkNsaWNrIiwiY2xhc3NOYW1lIiwicCIsImlucHV0IiwicmVmIiwidHlwZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/Dropzone.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/c2paClient.ts":
/*!***************************!*\
  !*** ./lib/c2paClient.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signImageWithManifest: () => (/* binding */ signImageWithManifest),\n/* harmony export */   verifyAsset: () => (/* binding */ verifyAsset)\n/* harmony export */ });\n// C2PA helpers backed by the `c2pa` WebAssembly library.\n// We use dynamic imports and loose typing to keep integration resilient across minor versions.\nasync function loadC2pa() {\n    // Dynamic import to avoid SSR issues\n    const mod = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_c2pa_dist_c2pa_esm_js\").then(__webpack_require__.bind(__webpack_require__, /*! c2pa */ \"(app-pages-browser)/./node_modules/c2pa/dist/c2pa.esm.js\"));\n    var _mod_default;\n    return (_mod_default = mod === null || mod === void 0 ? void 0 : mod.default) !== null && _mod_default !== void 0 ? _mod_default : mod;\n}\nfunction publicC2paAsset(file) {\n    // We expect WASM/worker assets to be copied into /public/c2pa\n    return \"/c2pa/\".concat(file);\n}\nasync function signImageWithManifest(opts) {\n    var _c2paMod_Signer;\n    const { image, manifestJson, certificatePem, privateKeyPem, tsaUrl } = opts;\n    const c2paMod = await loadC2pa();\n    // Try common initialization patterns across c2pa versions\n    const wasmCandidates = [\n        'toolkit_bg.wasm',\n        'c2pa_wasm_bg.wasm',\n        'c2pa_wasm.wasm'\n    ];\n    const workerCandidates = [\n        'c2pa.worker.js',\n        'c2pa_worker.js',\n        'worker.js'\n    ];\n    let c2pa;\n    let lastErr;\n    for (const wasm of wasmCandidates){\n        for (const worker of workerCandidates){\n            try {\n                var _c2paMod_C2pa;\n                console.log(\"[C2PA] Trying to initialize with WASM: \".concat(wasm, \", Worker: \").concat(worker));\n                if (typeof ((_c2paMod_C2pa = c2paMod.C2pa) === null || _c2paMod_C2pa === void 0 ? void 0 : _c2paMod_C2pa.create) === 'function') {\n                    c2pa = await c2paMod.C2pa.create({\n                        wasmSrc: publicC2paAsset(wasm),\n                        workerSrc: publicC2paAsset(worker)\n                    });\n                    console.log('[C2PA] Successfully initialized using C2pa.create');\n                } else if (typeof c2paMod.create === 'function') {\n                    c2pa = await c2paMod.create({\n                        wasmSrc: publicC2paAsset(wasm),\n                        workerSrc: publicC2paAsset(worker)\n                    });\n                    console.log('[C2PA] Successfully initialized using create');\n                } else {\n                    // Some versions may work without explicit init\n                    c2pa = c2paMod;\n                    console.log('[C2PA] Using module directly (no explicit init)');\n                }\n                lastErr = null;\n                break;\n            } catch (e) {\n                console.warn(\"[C2PA] Failed to initialize with \".concat(wasm, \"/\").concat(worker, \":\"), e);\n                lastErr = e;\n            }\n        }\n        if (c2pa) break;\n    }\n    if (!c2pa && lastErr) {\n        throw new Error('Failed to initialize C2PA. Ensure WASM/worker assets are served under /public/c2pa. ' + 'Run: npm run copy:c2pa');\n    }\n    // Build a signer; different versions expose different factories\n    const signerOpts = {\n        privateKeyPem,\n        privateKey: privateKeyPem,\n        certificatePem,\n        certChain: [\n            certificatePem\n        ],\n        certificateChain: [\n            certificatePem\n        ],\n        timeAuthorityUrl: tsaUrl,\n        timeStampUrl: tsaUrl,\n        timestampUrl: tsaUrl,\n        taUrl: tsaUrl\n    };\n    let signer;\n    if (typeof ((_c2paMod_Signer = c2paMod.Signer) === null || _c2paMod_Signer === void 0 ? void 0 : _c2paMod_Signer.create) === 'function') {\n        console.log('[C2PA] Creating signer using Signer.create');\n        signer = await c2paMod.Signer.create(signerOpts);\n    } else if (typeof c2paMod.createSigner === 'function') {\n        console.log('[C2PA] Creating signer using createSigner');\n        try {\n            signer = await c2paMod.createSigner(signerOpts);\n        } catch (e) {\n            signer = await c2paMod.createSigner({\n                privateKey: privateKeyPem,\n                certChain: [\n                    certificatePem\n                ],\n                timeAuthorityUrl: tsaUrl\n            });\n        }\n    } else {\n        // Fallback: pass signer as a plain object; c2pa.sign may build internally\n        console.log('[C2PA] Using plain signer object (no factory method found)');\n        signer = signerOpts;\n    }\n    console.log('[C2PA] Signer created:', signer ? 'success' : 'failed');\n    // Ensure manifest has a TSA URL reachable from the browser.\n    // Prefer the app's proxy to avoid CORS issues with staging TSA.\n    let manifestForSign = manifestJson || {};\n    try {\n        const origin =  true ? window.location.origin : 0;\n        const proxyUrl = origin ? \"\".concat(origin, \"/api/tsa/timestamp\") : '/api/tsa/timestamp';\n        // If ta_url missing or points to external TSA, route through our proxy\n        const ta = manifestForSign === null || manifestForSign === void 0 ? void 0 : manifestForSign.ta_url;\n        const needsProxy = !ta || /^https?:\\/\\//i.test(ta);\n        manifestForSign = {\n            ...manifestForSign,\n            ta_url: proxyUrl\n        };\n    } catch (e) {\n    // ignore\n    }\n    // Sign\n    const attemptErrors = [];\n    function coerceToBlob(anyOut) {\n        if (!anyOut) return null;\n        if (anyOut instanceof Blob) return anyOut;\n        if (anyOut instanceof ArrayBuffer) return new Blob([\n            anyOut\n        ], {\n            type: image.type\n        });\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.buffer) instanceof ArrayBuffer) return new Blob([\n            anyOut.buffer\n        ], {\n            type: image.type\n        });\n        if (anyOut instanceof Uint8Array) return new Blob([\n            anyOut\n        ], {\n            type: image.type\n        });\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.blob) instanceof Blob) return anyOut.blob;\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.file) instanceof Blob) return anyOut.file;\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.signed) instanceof Blob) return anyOut.signed;\n        if ((anyOut === null || anyOut === void 0 ? void 0 : anyOut.data) instanceof ArrayBuffer) return new Blob([\n            anyOut.data\n        ], {\n            type: image.type\n        });\n        return null;\n    }\n    async function trySign(target) {\n        if (!target) return null;\n        // sign(file, { signer, manifest })\n        try {\n            if (typeof target.sign === 'function') {\n                const out1 = await target.sign(image, {\n                    signer,\n                    manifest: manifestForSign\n                });\n                const b1 = coerceToBlob(out1);\n                if (b1) return b1;\n                if (out1 === null || out1 === void 0 ? void 0 : out1.arrayBuffer) {\n                    const buf = await out1.arrayBuffer();\n                    return new Blob([\n                        buf\n                    ], {\n                        type: image.type\n                    });\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        // sign({ file, signer, manifest })\n        try {\n            if (typeof target.sign === 'function') {\n                const out2 = await target.sign({\n                    file: image,\n                    signer,\n                    manifest: manifestForSign\n                });\n                const b2 = coerceToBlob(out2);\n                if (b2) return b2;\n                if (out2 === null || out2 === void 0 ? void 0 : out2.arrayBuffer) {\n                    const buf = await out2.arrayBuffer();\n                    return new Blob([\n                        buf\n                    ], {\n                        type: image.type\n                    });\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        // sign(manifest, file, signer)\n        try {\n            if (typeof target.sign === 'function') {\n                const out3 = await target.sign(manifestForSign, image, signer);\n                const b3 = coerceToBlob(out3);\n                if (b3) return b3;\n                if (out3 === null || out3 === void 0 ? void 0 : out3.arrayBuffer) {\n                    const buf = await out3.arrayBuffer();\n                    return new Blob([\n                        buf\n                    ], {\n                        type: image.type\n                    });\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        return null;\n    }\n    // Try sign on created instance and on the module itself\n    console.log('[C2PA] Attempting to sign using c2pa instance...');\n    let blob = await trySign(c2pa);\n    if (!blob) {\n        console.log('[C2PA] c2pa instance sign failed, trying c2paMod...');\n        blob = await trySign(c2paMod);\n    }\n    // Try writer APIs\n    async function tryWriter(factoryOwner) {\n        try {\n            var _factoryOwner_Writer;\n            if (factoryOwner === null || factoryOwner === void 0 ? void 0 : (_factoryOwner_Writer = factoryOwner.Writer) === null || _factoryOwner_Writer === void 0 ? void 0 : _factoryOwner_Writer.create) {\n                const writer = await factoryOwner.Writer.create({\n                    signer\n                });\n                if (writer === null || writer === void 0 ? void 0 : writer.sign) {\n                    const out = await writer.sign(image, manifestForSign);\n                    const b = coerceToBlob(out);\n                    if (b) return b;\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        try {\n            if (typeof (factoryOwner === null || factoryOwner === void 0 ? void 0 : factoryOwner.createWriter) === 'function') {\n                const writer = await factoryOwner.createWriter({\n                    signer\n                });\n                if (writer === null || writer === void 0 ? void 0 : writer.sign) {\n                    const out = await writer.sign(image, manifestForSign);\n                    const b = coerceToBlob(out);\n                    if (b) return b;\n                }\n            }\n        } catch (e) {\n            attemptErrors.push((e === null || e === void 0 ? void 0 : e.message) || String(e));\n        }\n        return null;\n    }\n    if (!blob) {\n        console.log('[C2PA] Sign methods failed, trying writer API on c2paMod...');\n        blob = await tryWriter(c2paMod);\n    }\n    if (!blob) {\n        console.log('[C2PA] c2paMod writer failed, trying c2pa writer...');\n        blob = await tryWriter(c2pa);\n    }\n    if (blob) {\n        console.log('[C2PA] Successfully signed image, returning blob');\n        return blob;\n    }\n    // Fallback: return original image blob if no output recognized\n    console.warn('c2pa sign returned an unexpected result shape. Attempts:', attemptErrors);\n    const errorDetails = attemptErrors.length > 0 ? \"\\n\\nAttempt errors:\\n\".concat(attemptErrors.map((e, i)=>\"\".concat(i + 1, \". \").concat(e)).join('\\n')) : '';\n    throw new Error(\"C2PA sign did not return a Blob\".concat(errorDetails));\n}\nasync function verifyAsset(file) {\n    var _c2paMod_C2pa;\n    const c2paMod = await loadC2pa();\n    let c2pa = c2paMod;\n    if (typeof ((_c2paMod_C2pa = c2paMod.C2pa) === null || _c2paMod_C2pa === void 0 ? void 0 : _c2paMod_C2pa.create) === 'function') {\n        try {\n            c2pa = await c2paMod.C2pa.create({\n                wasmSrc: publicC2paAsset('toolkit_bg.wasm'),\n                workerSrc: publicC2paAsset('c2pa.worker.js')\n            });\n        } catch (e) {\n            // try using module directly\n            c2pa = c2paMod;\n        }\n    }\n    if (typeof c2pa.verify === 'function') {\n        return await c2pa.verify(file);\n    }\n    if (typeof c2pa.read === 'function') {\n        return await c2pa.read({\n            file\n        });\n    }\n    throw new Error('C2PA verify/read API not found');\n} /* eslint-disable @typescript-eslint/no-explicit-any */ \n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9jMnBhQ2xpZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseURBQXlEO0FBQ3pELCtGQUErRjtBQVUvRixlQUFlQTtJQUNiLHFDQUFxQztJQUNyQyxNQUFNQyxNQUFXLE1BQU0sME5BQWM7UUFDN0JBO0lBQVIsT0FBUUEsQ0FBQUEsZUFBQUEsZ0JBQUFBLDBCQUFBQSxJQUFLQyxPQUFPLGNBQVpELDBCQUFBQSxlQUFnQkE7QUFDMUI7QUFFQSxTQUFTRSxnQkFBZ0JDLElBQVk7SUFDbkMsOERBQThEO0lBQzlELE9BQU8sU0FBYyxPQUFMQTtBQUNsQjtBQUVPLGVBQWVDLHNCQUFzQkMsSUFBYztRQXNFN0NDO0lBckVYLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxZQUFZLEVBQUVDLGNBQWMsRUFBRUMsYUFBYSxFQUFFQyxNQUFNLEVBQUUsR0FBR047SUFDdkUsTUFBTUMsVUFBVSxNQUFNUDtJQUV0QiwwREFBMEQ7SUFDMUQsTUFBTWEsaUJBQWlCO1FBQ3JCO1FBQ0E7UUFDQTtLQUNEO0lBQ0QsTUFBTUMsbUJBQW1CO1FBQ3ZCO1FBQ0E7UUFDQTtLQUNEO0lBRUQsSUFBSUM7SUFDSixJQUFJQztJQUNKLEtBQUssTUFBTUMsUUFBUUosZUFBZ0I7UUFDakMsS0FBSyxNQUFNSyxVQUFVSixpQkFBa0I7WUFDckMsSUFBSTtvQkFFU1A7Z0JBRFhZLFFBQVFDLEdBQUcsQ0FBQywwQ0FBMkRGLE9BQWpCRCxNQUFLLGNBQW1CLE9BQVBDO2dCQUN2RSxJQUFJLFNBQU9YLGdCQUFBQSxRQUFRYyxJQUFJLGNBQVpkLG9DQUFBQSxjQUFjZSxNQUFNLE1BQUssWUFBWTtvQkFDOUNQLE9BQU8sTUFBTVIsUUFBUWMsSUFBSSxDQUFDQyxNQUFNLENBQUM7d0JBQy9CQyxTQUFTcEIsZ0JBQWdCYzt3QkFDekJPLFdBQVdyQixnQkFBZ0JlO29CQUM3QjtvQkFDQUMsUUFBUUMsR0FBRyxDQUFDO2dCQUNkLE9BQU8sSUFBSSxPQUFPYixRQUFRZSxNQUFNLEtBQUssWUFBWTtvQkFDL0NQLE9BQU8sTUFBTVIsUUFBUWUsTUFBTSxDQUFDO3dCQUMxQkMsU0FBU3BCLGdCQUFnQmM7d0JBQ3pCTyxXQUFXckIsZ0JBQWdCZTtvQkFDN0I7b0JBQ0FDLFFBQVFDLEdBQUcsQ0FBQztnQkFDZCxPQUFPO29CQUNMLCtDQUErQztvQkFDL0NMLE9BQU9SO29CQUNQWSxRQUFRQyxHQUFHLENBQUM7Z0JBQ2Q7Z0JBQ0FKLFVBQVU7Z0JBQ1Y7WUFDRixFQUFFLE9BQU9TLEdBQUc7Z0JBQ1ZOLFFBQVFPLElBQUksQ0FBQyxvQ0FBNENSLE9BQVJELE1BQUssS0FBVSxPQUFQQyxRQUFPLE1BQUlPO2dCQUNwRVQsVUFBVVM7WUFDWjtRQUNGO1FBQ0EsSUFBSVYsTUFBTTtJQUNaO0lBRUEsSUFBSSxDQUFDQSxRQUFRQyxTQUFTO1FBQ3BCLE1BQU0sSUFBSVcsTUFDUix5RkFDQTtJQUVKO0lBRUEsZ0VBQWdFO0lBQ2hFLE1BQU1DLGFBQWtCO1FBQ3RCakI7UUFDQWtCLFlBQVlsQjtRQUNaRDtRQUNBb0IsV0FBVztZQUFDcEI7U0FBZTtRQUMzQnFCLGtCQUFrQjtZQUFDckI7U0FBZTtRQUNsQ3NCLGtCQUFrQnBCO1FBQ2xCcUIsY0FBY3JCO1FBQ2RzQixjQUFjdEI7UUFDZHVCLE9BQU92QjtJQUNUO0lBRUEsSUFBSXdCO0lBQ0osSUFBSSxTQUFPN0Isa0JBQUFBLFFBQVE4QixNQUFNLGNBQWQ5QixzQ0FBQUEsZ0JBQWdCZSxNQUFNLE1BQUssWUFBWTtRQUNoREgsUUFBUUMsR0FBRyxDQUFDO1FBQ1pnQixTQUFTLE1BQU03QixRQUFROEIsTUFBTSxDQUFDZixNQUFNLENBQUNNO0lBQ3ZDLE9BQU8sSUFBSSxPQUFPckIsUUFBUStCLFlBQVksS0FBSyxZQUFZO1FBQ3JEbkIsUUFBUUMsR0FBRyxDQUFDO1FBQ1osSUFBSTtZQUNGZ0IsU0FBUyxNQUFNN0IsUUFBUStCLFlBQVksQ0FBQ1Y7UUFDdEMsRUFBRSxVQUFNO1lBQ05RLFNBQVMsTUFBTTdCLFFBQVErQixZQUFZLENBQUM7Z0JBQUVULFlBQVlsQjtnQkFBZW1CLFdBQVc7b0JBQUNwQjtpQkFBZTtnQkFBRXNCLGtCQUFrQnBCO1lBQU87UUFDekg7SUFDRixPQUFPO1FBQ0wsMEVBQTBFO1FBQzFFTyxRQUFRQyxHQUFHLENBQUM7UUFDWmdCLFNBQVNSO0lBQ1g7SUFDQVQsUUFBUUMsR0FBRyxDQUFDLDBCQUEwQmdCLFNBQVMsWUFBWTtJQUUzRCw0REFBNEQ7SUFDNUQsZ0VBQWdFO0lBQ2hFLElBQUlHLGtCQUFrQjlCLGdCQUFnQixDQUFDO0lBQ3ZDLElBQUk7UUFDRixNQUFNK0IsU0FBUyxLQUE2QixHQUFHQyxPQUFPQyxRQUFRLENBQUNGLE1BQU0sR0FBRyxDQUFFO1FBQzFFLE1BQU1HLFdBQVdILFNBQVMsR0FBVSxPQUFQQSxRQUFPLHdCQUFzQjtRQUMxRCx1RUFBdUU7UUFDdkUsTUFBTUksS0FBS0wsNEJBQUFBLHNDQUFBQSxnQkFBaUJNLE1BQU07UUFDbEMsTUFBTUMsYUFBYSxDQUFDRixNQUFNLGdCQUFnQkcsSUFBSSxDQUFDSDtRQUMvQ0wsa0JBQWtCO1lBQUUsR0FBR0EsZUFBZTtZQUFFTSxRQUFRRjtRQUFTO0lBQzNELEVBQUUsVUFBTTtJQUNOLFNBQVM7SUFDWDtJQUVBLE9BQU87SUFDUCxNQUFNSyxnQkFBMEIsRUFBRTtJQUNsQyxTQUFTQyxhQUFhQyxNQUFXO1FBQy9CLElBQUksQ0FBQ0EsUUFBUSxPQUFPO1FBQ3BCLElBQUlBLGtCQUFrQkMsTUFBTSxPQUFPRDtRQUNuQyxJQUFJQSxrQkFBa0JFLGFBQWEsT0FBTyxJQUFJRCxLQUFLO1lBQUNEO1NBQU8sRUFBRTtZQUFFRyxNQUFNN0MsTUFBTTZDLElBQUk7UUFBQztRQUNoRixJQUFJSCxDQUFBQSxtQkFBQUEsNkJBQUFBLE9BQVFJLE1BQU0sYUFBWUYsYUFBYSxPQUFPLElBQUlELEtBQUs7WUFBQ0QsT0FBT0ksTUFBTTtTQUFDLEVBQUU7WUFBRUQsTUFBTTdDLE1BQU02QyxJQUFJO1FBQUM7UUFDL0YsSUFBSUgsa0JBQWtCSyxZQUFZLE9BQU8sSUFBSUosS0FBSztZQUFDRDtTQUFrQyxFQUFFO1lBQUVHLE1BQU03QyxNQUFNNkMsSUFBSTtRQUFDO1FBQzFHLElBQUlILENBQUFBLG1CQUFBQSw2QkFBQUEsT0FBUU0sSUFBSSxhQUFZTCxNQUFNLE9BQU9ELE9BQU9NLElBQUk7UUFDcEQsSUFBSU4sQ0FBQUEsbUJBQUFBLDZCQUFBQSxPQUFROUMsSUFBSSxhQUFZK0MsTUFBTSxPQUFPRCxPQUFPOUMsSUFBSTtRQUNwRCxJQUFJOEMsQ0FBQUEsbUJBQUFBLDZCQUFBQSxPQUFRTyxNQUFNLGFBQVlOLE1BQU0sT0FBT0QsT0FBT08sTUFBTTtRQUN4RCxJQUFJUCxDQUFBQSxtQkFBQUEsNkJBQUFBLE9BQVFRLElBQUksYUFBWU4sYUFBYSxPQUFPLElBQUlELEtBQUs7WUFBQ0QsT0FBT1EsSUFBSTtTQUFDLEVBQUU7WUFBRUwsTUFBTTdDLE1BQU02QyxJQUFJO1FBQUM7UUFDM0YsT0FBTztJQUNUO0lBRUEsZUFBZU0sUUFBUUMsTUFBVztRQUNoQyxJQUFJLENBQUNBLFFBQVEsT0FBTztRQUNwQixtQ0FBbUM7UUFDbkMsSUFBSTtZQUNGLElBQUksT0FBT0EsT0FBT0MsSUFBSSxLQUFLLFlBQVk7Z0JBQ3JDLE1BQU1DLE9BQVksTUFBTUYsT0FBT0MsSUFBSSxDQUFDckQsT0FBTztvQkFBRTRCO29CQUFRMkIsVUFBVXhCO2dCQUFnQjtnQkFDL0UsTUFBTXlCLEtBQUtmLGFBQWFhO2dCQUN4QixJQUFJRSxJQUFJLE9BQU9BO2dCQUNmLElBQUlGLGlCQUFBQSwyQkFBQUEsS0FBTUcsV0FBVyxFQUFFO29CQUNyQixNQUFNQyxNQUFNLE1BQU1KLEtBQUtHLFdBQVc7b0JBQ2xDLE9BQU8sSUFBSWQsS0FBSzt3QkFBQ2U7cUJBQUksRUFBRTt3QkFBRWIsTUFBTTdDLE1BQU02QyxJQUFJO29CQUFDO2dCQUM1QztZQUNGO1FBQ0YsRUFBRSxPQUFPNUIsR0FBUTtZQUNmdUIsY0FBY21CLElBQUksQ0FBQzFDLENBQUFBLGNBQUFBLHdCQUFBQSxFQUFHMkMsT0FBTyxLQUFJQyxPQUFPNUM7UUFDMUM7UUFDQSxtQ0FBbUM7UUFDbkMsSUFBSTtZQUNGLElBQUksT0FBT21DLE9BQU9DLElBQUksS0FBSyxZQUFZO2dCQUNyQyxNQUFNUyxPQUFZLE1BQU1WLE9BQU9DLElBQUksQ0FBQztvQkFBRXpELE1BQU1JO29CQUFPNEI7b0JBQVEyQixVQUFVeEI7Z0JBQWdCO2dCQUNyRixNQUFNZ0MsS0FBS3RCLGFBQWFxQjtnQkFDeEIsSUFBSUMsSUFBSSxPQUFPQTtnQkFDZixJQUFJRCxpQkFBQUEsMkJBQUFBLEtBQU1MLFdBQVcsRUFBRTtvQkFDckIsTUFBTUMsTUFBTSxNQUFNSSxLQUFLTCxXQUFXO29CQUNsQyxPQUFPLElBQUlkLEtBQUs7d0JBQUNlO3FCQUFJLEVBQUU7d0JBQUViLE1BQU03QyxNQUFNNkMsSUFBSTtvQkFBQztnQkFDNUM7WUFDRjtRQUNGLEVBQUUsT0FBTzVCLEdBQVE7WUFDZnVCLGNBQWNtQixJQUFJLENBQUMxQyxDQUFBQSxjQUFBQSx3QkFBQUEsRUFBRzJDLE9BQU8sS0FBSUMsT0FBTzVDO1FBQzFDO1FBQ0EsK0JBQStCO1FBQy9CLElBQUk7WUFDRixJQUFJLE9BQU9tQyxPQUFPQyxJQUFJLEtBQUssWUFBWTtnQkFDckMsTUFBTVcsT0FBWSxNQUFNWixPQUFPQyxJQUFJLENBQUN0QixpQkFBaUIvQixPQUFPNEI7Z0JBQzVELE1BQU1xQyxLQUFLeEIsYUFBYXVCO2dCQUN4QixJQUFJQyxJQUFJLE9BQU9BO2dCQUNmLElBQUlELGlCQUFBQSwyQkFBQUEsS0FBTVAsV0FBVyxFQUFFO29CQUNyQixNQUFNQyxNQUFNLE1BQU1NLEtBQUtQLFdBQVc7b0JBQ2xDLE9BQU8sSUFBSWQsS0FBSzt3QkFBQ2U7cUJBQUksRUFBRTt3QkFBRWIsTUFBTTdDLE1BQU02QyxJQUFJO29CQUFDO2dCQUM1QztZQUNGO1FBQ0YsRUFBRSxPQUFPNUIsR0FBUTtZQUNmdUIsY0FBY21CLElBQUksQ0FBQzFDLENBQUFBLGNBQUFBLHdCQUFBQSxFQUFHMkMsT0FBTyxLQUFJQyxPQUFPNUM7UUFDMUM7UUFDQSxPQUFPO0lBQ1Q7SUFFQSx3REFBd0Q7SUFDeEROLFFBQVFDLEdBQUcsQ0FBQztJQUNaLElBQUlvQyxPQUFPLE1BQU1HLFFBQVE1QztJQUN6QixJQUFJLENBQUN5QyxNQUFNO1FBQ1RyQyxRQUFRQyxHQUFHLENBQUM7UUFDWm9DLE9BQU8sTUFBTUcsUUFBUXBEO0lBQ3ZCO0lBRUEsa0JBQWtCO0lBQ2xCLGVBQWVtRSxVQUFVQyxZQUFpQjtRQUN4QyxJQUFJO2dCQUNFQTtZQUFKLElBQUlBLHlCQUFBQSxvQ0FBQUEsdUJBQUFBLGFBQWNDLE1BQU0sY0FBcEJELDJDQUFBQSxxQkFBc0JyRCxNQUFNLEVBQUU7Z0JBQ2hDLE1BQU11RCxTQUFTLE1BQU1GLGFBQWFDLE1BQU0sQ0FBQ3RELE1BQU0sQ0FBQztvQkFBRWM7Z0JBQU87Z0JBQ3pELElBQUl5QyxtQkFBQUEsNkJBQUFBLE9BQVFoQixJQUFJLEVBQUU7b0JBQ2hCLE1BQU1pQixNQUFNLE1BQU1ELE9BQU9oQixJQUFJLENBQUNyRCxPQUFPK0I7b0JBQ3JDLE1BQU13QyxJQUFJOUIsYUFBYTZCO29CQUN2QixJQUFJQyxHQUFHLE9BQU9BO2dCQUNoQjtZQUNGO1FBQ0YsRUFBRSxPQUFPdEQsR0FBUTtZQUNmdUIsY0FBY21CLElBQUksQ0FBQzFDLENBQUFBLGNBQUFBLHdCQUFBQSxFQUFHMkMsT0FBTyxLQUFJQyxPQUFPNUM7UUFDMUM7UUFDQSxJQUFJO1lBQ0YsSUFBSSxRQUFPa0QseUJBQUFBLG1DQUFBQSxhQUFjSyxZQUFZLE1BQUssWUFBWTtnQkFDcEQsTUFBTUgsU0FBUyxNQUFNRixhQUFhSyxZQUFZLENBQUM7b0JBQUU1QztnQkFBTztnQkFDeEQsSUFBSXlDLG1CQUFBQSw2QkFBQUEsT0FBUWhCLElBQUksRUFBRTtvQkFDaEIsTUFBTWlCLE1BQU0sTUFBTUQsT0FBT2hCLElBQUksQ0FBQ3JELE9BQU8rQjtvQkFDckMsTUFBTXdDLElBQUk5QixhQUFhNkI7b0JBQ3ZCLElBQUlDLEdBQUcsT0FBT0E7Z0JBQ2hCO1lBQ0Y7UUFDRixFQUFFLE9BQU90RCxHQUFRO1lBQ2Z1QixjQUFjbUIsSUFBSSxDQUFDMUMsQ0FBQUEsY0FBQUEsd0JBQUFBLEVBQUcyQyxPQUFPLEtBQUlDLE9BQU81QztRQUMxQztRQUNBLE9BQU87SUFDVDtJQUVBLElBQUksQ0FBQytCLE1BQU07UUFDVHJDLFFBQVFDLEdBQUcsQ0FBQztRQUNab0MsT0FBTyxNQUFNa0IsVUFBVW5FO0lBQ3pCO0lBQ0EsSUFBSSxDQUFDaUQsTUFBTTtRQUNUckMsUUFBUUMsR0FBRyxDQUFDO1FBQ1pvQyxPQUFPLE1BQU1rQixVQUFVM0Q7SUFDekI7SUFDQSxJQUFJeUMsTUFBTTtRQUNSckMsUUFBUUMsR0FBRyxDQUFDO1FBQ1osT0FBT29DO0lBQ1Q7SUFFQSwrREFBK0Q7SUFDL0RyQyxRQUFRTyxJQUFJLENBQUMsNERBQTREc0I7SUFDekUsTUFBTWlDLGVBQWVqQyxjQUFja0MsTUFBTSxHQUFHLElBQ3hDLHdCQUFpRixPQUF6RGxDLGNBQWNtQyxHQUFHLENBQUMsQ0FBQzFELEdBQUcyRCxJQUFNLEdBQWEzRCxPQUFWMkQsSUFBSSxHQUFFLE1BQU0sT0FBRjNELElBQUs0RCxJQUFJLENBQUMsU0FDM0U7SUFDSixNQUFNLElBQUkxRCxNQUFNLGtDQUErQyxPQUFic0Q7QUFDcEQ7QUFFTyxlQUFlSyxZQUFZbEYsSUFBaUI7UUFHdENHO0lBRlgsTUFBTUEsVUFBVSxNQUFNUDtJQUN0QixJQUFJZSxPQUFZUjtJQUNoQixJQUFJLFNBQU9BLGdCQUFBQSxRQUFRYyxJQUFJLGNBQVpkLG9DQUFBQSxjQUFjZSxNQUFNLE1BQUssWUFBWTtRQUM5QyxJQUFJO1lBQ0ZQLE9BQU8sTUFBTVIsUUFBUWMsSUFBSSxDQUFDQyxNQUFNLENBQUM7Z0JBQUVDLFNBQVNwQixnQkFBZ0I7Z0JBQW9CcUIsV0FBV3JCLGdCQUFnQjtZQUFrQjtRQUMvSCxFQUFFLFVBQU07WUFDTiw0QkFBNEI7WUFDNUJZLE9BQU9SO1FBQ1Q7SUFDRjtJQUVBLElBQUksT0FBT1EsS0FBS3dFLE1BQU0sS0FBSyxZQUFZO1FBQ3JDLE9BQU8sTUFBTXhFLEtBQUt3RSxNQUFNLENBQUNuRjtJQUMzQjtJQUNBLElBQUksT0FBT1csS0FBS3lFLElBQUksS0FBSyxZQUFZO1FBQ25DLE9BQU8sTUFBTXpFLEtBQUt5RSxJQUFJLENBQUM7WUFBRXBGO1FBQUs7SUFDaEM7SUFDQSxNQUFNLElBQUl1QixNQUFNO0FBQ2xCLEVBQ0EscURBQXFEIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRGVza3RvcC9jMnBhIHRvb2wvbGliL2MycGFDbGllbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQzJQQSBoZWxwZXJzIGJhY2tlZCBieSB0aGUgYGMycGFgIFdlYkFzc2VtYmx5IGxpYnJhcnkuXG4vLyBXZSB1c2UgZHluYW1pYyBpbXBvcnRzIGFuZCBsb29zZSB0eXBpbmcgdG8ga2VlcCBpbnRlZ3JhdGlvbiByZXNpbGllbnQgYWNyb3NzIG1pbm9yIHZlcnNpb25zLlxuXG50eXBlIFNpZ25PcHRzID0ge1xuICBpbWFnZTogRmlsZTtcbiAgbWFuaWZlc3RKc29uOiBhbnk7XG4gIGNlcnRpZmljYXRlUGVtOiBzdHJpbmc7XG4gIHByaXZhdGVLZXlQZW06IHN0cmluZzsgLy8gUEtDUyM4IGluIFBFTVxuICB0c2FVcmw/OiBzdHJpbmc7XG59O1xuXG5hc3luYyBmdW5jdGlvbiBsb2FkQzJwYSgpIHtcbiAgLy8gRHluYW1pYyBpbXBvcnQgdG8gYXZvaWQgU1NSIGlzc3Vlc1xuICBjb25zdCBtb2Q6IGFueSA9IGF3YWl0IGltcG9ydCgnYzJwYScpO1xuICByZXR1cm4gKG1vZD8uZGVmYXVsdCA/PyBtb2QpO1xufVxuXG5mdW5jdGlvbiBwdWJsaWNDMnBhQXNzZXQoZmlsZTogc3RyaW5nKSB7XG4gIC8vIFdlIGV4cGVjdCBXQVNNL3dvcmtlciBhc3NldHMgdG8gYmUgY29waWVkIGludG8gL3B1YmxpYy9jMnBhXG4gIHJldHVybiBgL2MycGEvJHtmaWxlfWA7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaWduSW1hZ2VXaXRoTWFuaWZlc3Qob3B0czogU2lnbk9wdHMpOiBQcm9taXNlPEJsb2I+IHtcbiAgY29uc3QgeyBpbWFnZSwgbWFuaWZlc3RKc29uLCBjZXJ0aWZpY2F0ZVBlbSwgcHJpdmF0ZUtleVBlbSwgdHNhVXJsIH0gPSBvcHRzO1xuICBjb25zdCBjMnBhTW9kID0gYXdhaXQgbG9hZEMycGEoKTtcblxuICAvLyBUcnkgY29tbW9uIGluaXRpYWxpemF0aW9uIHBhdHRlcm5zIGFjcm9zcyBjMnBhIHZlcnNpb25zXG4gIGNvbnN0IHdhc21DYW5kaWRhdGVzID0gW1xuICAgICd0b29sa2l0X2JnLndhc20nLFxuICAgICdjMnBhX3dhc21fYmcud2FzbScsXG4gICAgJ2MycGFfd2FzbS53YXNtJyxcbiAgXTtcbiAgY29uc3Qgd29ya2VyQ2FuZGlkYXRlcyA9IFtcbiAgICAnYzJwYS53b3JrZXIuanMnLFxuICAgICdjMnBhX3dvcmtlci5qcycsXG4gICAgJ3dvcmtlci5qcycsXG4gIF07XG5cbiAgbGV0IGMycGE6IGFueTtcbiAgbGV0IGxhc3RFcnI6IGFueTtcbiAgZm9yIChjb25zdCB3YXNtIG9mIHdhc21DYW5kaWRhdGVzKSB7XG4gICAgZm9yIChjb25zdCB3b3JrZXIgb2Ygd29ya2VyQ2FuZGlkYXRlcykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc29sZS5sb2coYFtDMlBBXSBUcnlpbmcgdG8gaW5pdGlhbGl6ZSB3aXRoIFdBU006ICR7d2FzbX0sIFdvcmtlcjogJHt3b3JrZXJ9YCk7XG4gICAgICAgIGlmICh0eXBlb2YgYzJwYU1vZC5DMnBhPy5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjMnBhID0gYXdhaXQgYzJwYU1vZC5DMnBhLmNyZWF0ZSh7XG4gICAgICAgICAgICB3YXNtU3JjOiBwdWJsaWNDMnBhQXNzZXQod2FzbSksXG4gICAgICAgICAgICB3b3JrZXJTcmM6IHB1YmxpY0MycGFBc3NldCh3b3JrZXIpLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdbQzJQQV0gU3VjY2Vzc2Z1bGx5IGluaXRpYWxpemVkIHVzaW5nIEMycGEuY3JlYXRlJyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGMycGFNb2QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgYzJwYSA9IGF3YWl0IGMycGFNb2QuY3JlYXRlKHtcbiAgICAgICAgICAgIHdhc21TcmM6IHB1YmxpY0MycGFBc3NldCh3YXNtKSxcbiAgICAgICAgICAgIHdvcmtlclNyYzogcHVibGljQzJwYUFzc2V0KHdvcmtlciksXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1tDMlBBXSBTdWNjZXNzZnVsbHkgaW5pdGlhbGl6ZWQgdXNpbmcgY3JlYXRlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBtYXkgd29yayB3aXRob3V0IGV4cGxpY2l0IGluaXRcbiAgICAgICAgICBjMnBhID0gYzJwYU1vZDtcbiAgICAgICAgICBjb25zb2xlLmxvZygnW0MyUEFdIFVzaW5nIG1vZHVsZSBkaXJlY3RseSAobm8gZXhwbGljaXQgaW5pdCknKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0RXJyID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgW0MyUEFdIEZhaWxlZCB0byBpbml0aWFsaXplIHdpdGggJHt3YXNtfS8ke3dvcmtlcn06YCwgZSk7XG4gICAgICAgIGxhc3RFcnIgPSBlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYzJwYSkgYnJlYWs7XG4gIH1cblxuICBpZiAoIWMycGEgJiYgbGFzdEVycikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBDMlBBLiBFbnN1cmUgV0FTTS93b3JrZXIgYXNzZXRzIGFyZSBzZXJ2ZWQgdW5kZXIgL3B1YmxpYy9jMnBhLiAnICtcbiAgICAgICdSdW46IG5wbSBydW4gY29weTpjMnBhJ1xuICAgICk7XG4gIH1cblxuICAvLyBCdWlsZCBhIHNpZ25lcjsgZGlmZmVyZW50IHZlcnNpb25zIGV4cG9zZSBkaWZmZXJlbnQgZmFjdG9yaWVzXG4gIGNvbnN0IHNpZ25lck9wdHM6IGFueSA9IHtcbiAgICBwcml2YXRlS2V5UGVtLFxuICAgIHByaXZhdGVLZXk6IHByaXZhdGVLZXlQZW0sXG4gICAgY2VydGlmaWNhdGVQZW0sXG4gICAgY2VydENoYWluOiBbY2VydGlmaWNhdGVQZW1dLFxuICAgIGNlcnRpZmljYXRlQ2hhaW46IFtjZXJ0aWZpY2F0ZVBlbV0sXG4gICAgdGltZUF1dGhvcml0eVVybDogdHNhVXJsLFxuICAgIHRpbWVTdGFtcFVybDogdHNhVXJsLFxuICAgIHRpbWVzdGFtcFVybDogdHNhVXJsLFxuICAgIHRhVXJsOiB0c2FVcmwsXG4gIH07XG5cbiAgbGV0IHNpZ25lcjogYW55O1xuICBpZiAodHlwZW9mIGMycGFNb2QuU2lnbmVyPy5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmxvZygnW0MyUEFdIENyZWF0aW5nIHNpZ25lciB1c2luZyBTaWduZXIuY3JlYXRlJyk7XG4gICAgc2lnbmVyID0gYXdhaXQgYzJwYU1vZC5TaWduZXIuY3JlYXRlKHNpZ25lck9wdHMpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjMnBhTW9kLmNyZWF0ZVNpZ25lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUubG9nKCdbQzJQQV0gQ3JlYXRpbmcgc2lnbmVyIHVzaW5nIGNyZWF0ZVNpZ25lcicpO1xuICAgIHRyeSB7XG4gICAgICBzaWduZXIgPSBhd2FpdCBjMnBhTW9kLmNyZWF0ZVNpZ25lcihzaWduZXJPcHRzKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHNpZ25lciA9IGF3YWl0IGMycGFNb2QuY3JlYXRlU2lnbmVyKHsgcHJpdmF0ZUtleTogcHJpdmF0ZUtleVBlbSwgY2VydENoYWluOiBbY2VydGlmaWNhdGVQZW1dLCB0aW1lQXV0aG9yaXR5VXJsOiB0c2FVcmwgfSBhcyBhbnkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogcGFzcyBzaWduZXIgYXMgYSBwbGFpbiBvYmplY3Q7IGMycGEuc2lnbiBtYXkgYnVpbGQgaW50ZXJuYWxseVxuICAgIGNvbnNvbGUubG9nKCdbQzJQQV0gVXNpbmcgcGxhaW4gc2lnbmVyIG9iamVjdCAobm8gZmFjdG9yeSBtZXRob2QgZm91bmQpJyk7XG4gICAgc2lnbmVyID0gc2lnbmVyT3B0cztcbiAgfVxuICBjb25zb2xlLmxvZygnW0MyUEFdIFNpZ25lciBjcmVhdGVkOicsIHNpZ25lciA/ICdzdWNjZXNzJyA6ICdmYWlsZWQnKTtcblxuICAvLyBFbnN1cmUgbWFuaWZlc3QgaGFzIGEgVFNBIFVSTCByZWFjaGFibGUgZnJvbSB0aGUgYnJvd3Nlci5cbiAgLy8gUHJlZmVyIHRoZSBhcHAncyBwcm94eSB0byBhdm9pZCBDT1JTIGlzc3VlcyB3aXRoIHN0YWdpbmcgVFNBLlxuICBsZXQgbWFuaWZlc3RGb3JTaWduID0gbWFuaWZlc3RKc29uIHx8IHt9O1xuICB0cnkge1xuICAgIGNvbnN0IG9yaWdpbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93LmxvY2F0aW9uLm9yaWdpbiA6ICcnO1xuICAgIGNvbnN0IHByb3h5VXJsID0gb3JpZ2luID8gYCR7b3JpZ2lufS9hcGkvdHNhL3RpbWVzdGFtcGAgOiAnL2FwaS90c2EvdGltZXN0YW1wJztcbiAgICAvLyBJZiB0YV91cmwgbWlzc2luZyBvciBwb2ludHMgdG8gZXh0ZXJuYWwgVFNBLCByb3V0ZSB0aHJvdWdoIG91ciBwcm94eVxuICAgIGNvbnN0IHRhID0gbWFuaWZlc3RGb3JTaWduPy50YV91cmwgYXMgc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIGNvbnN0IG5lZWRzUHJveHkgPSAhdGEgfHwgL15odHRwcz86XFwvXFwvL2kudGVzdCh0YSk7XG4gICAgbWFuaWZlc3RGb3JTaWduID0geyAuLi5tYW5pZmVzdEZvclNpZ24sIHRhX3VybDogcHJveHlVcmwgfTtcbiAgfSBjYXRjaCB7XG4gICAgLy8gaWdub3JlXG4gIH1cblxuICAvLyBTaWduXG4gIGNvbnN0IGF0dGVtcHRFcnJvcnM6IHN0cmluZ1tdID0gW107XG4gIGZ1bmN0aW9uIGNvZXJjZVRvQmxvYihhbnlPdXQ6IGFueSk6IEJsb2IgfCBudWxsIHtcbiAgICBpZiAoIWFueU91dCkgcmV0dXJuIG51bGw7XG4gICAgaWYgKGFueU91dCBpbnN0YW5jZW9mIEJsb2IpIHJldHVybiBhbnlPdXQ7XG4gICAgaWYgKGFueU91dCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSByZXR1cm4gbmV3IEJsb2IoW2FueU91dF0sIHsgdHlwZTogaW1hZ2UudHlwZSB9KTtcbiAgICBpZiAoYW55T3V0Py5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgcmV0dXJuIG5ldyBCbG9iKFthbnlPdXQuYnVmZmVyXSwgeyB0eXBlOiBpbWFnZS50eXBlIH0pO1xuICAgIGlmIChhbnlPdXQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSByZXR1cm4gbmV3IEJsb2IoW2FueU91dCBhcyBVaW50OEFycmF5PEFycmF5QnVmZmVyPl0sIHsgdHlwZTogaW1hZ2UudHlwZSB9KTtcbiAgICBpZiAoYW55T3V0Py5ibG9iIGluc3RhbmNlb2YgQmxvYikgcmV0dXJuIGFueU91dC5ibG9iO1xuICAgIGlmIChhbnlPdXQ/LmZpbGUgaW5zdGFuY2VvZiBCbG9iKSByZXR1cm4gYW55T3V0LmZpbGU7XG4gICAgaWYgKGFueU91dD8uc2lnbmVkIGluc3RhbmNlb2YgQmxvYikgcmV0dXJuIGFueU91dC5zaWduZWQ7XG4gICAgaWYgKGFueU91dD8uZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSByZXR1cm4gbmV3IEJsb2IoW2FueU91dC5kYXRhXSwgeyB0eXBlOiBpbWFnZS50eXBlIH0pO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gdHJ5U2lnbih0YXJnZXQ6IGFueSk6IFByb21pc2U8QmxvYiB8IG51bGw+IHtcbiAgICBpZiAoIXRhcmdldCkgcmV0dXJuIG51bGw7XG4gICAgLy8gc2lnbihmaWxlLCB7IHNpZ25lciwgbWFuaWZlc3QgfSlcbiAgICB0cnkge1xuICAgICAgaWYgKHR5cGVvZiB0YXJnZXQuc2lnbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjb25zdCBvdXQxOiBhbnkgPSBhd2FpdCB0YXJnZXQuc2lnbihpbWFnZSwgeyBzaWduZXIsIG1hbmlmZXN0OiBtYW5pZmVzdEZvclNpZ24gfSk7XG4gICAgICAgIGNvbnN0IGIxID0gY29lcmNlVG9CbG9iKG91dDEpO1xuICAgICAgICBpZiAoYjEpIHJldHVybiBiMTtcbiAgICAgICAgaWYgKG91dDE/LmFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgY29uc3QgYnVmID0gYXdhaXQgb3V0MS5hcnJheUJ1ZmZlcigpO1xuICAgICAgICAgIHJldHVybiBuZXcgQmxvYihbYnVmXSwgeyB0eXBlOiBpbWFnZS50eXBlIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgICBhdHRlbXB0RXJyb3JzLnB1c2goZT8ubWVzc2FnZSB8fCBTdHJpbmcoZSkpO1xuICAgIH1cbiAgICAvLyBzaWduKHsgZmlsZSwgc2lnbmVyLCBtYW5pZmVzdCB9KVxuICAgIHRyeSB7XG4gICAgICBpZiAodHlwZW9mIHRhcmdldC5zaWduID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IG91dDI6IGFueSA9IGF3YWl0IHRhcmdldC5zaWduKHsgZmlsZTogaW1hZ2UsIHNpZ25lciwgbWFuaWZlc3Q6IG1hbmlmZXN0Rm9yU2lnbiB9KTtcbiAgICAgICAgY29uc3QgYjIgPSBjb2VyY2VUb0Jsb2Iob3V0Mik7XG4gICAgICAgIGlmIChiMikgcmV0dXJuIGIyO1xuICAgICAgICBpZiAob3V0Mj8uYXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICBjb25zdCBidWYgPSBhd2FpdCBvdXQyLmFycmF5QnVmZmVyKCk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBCbG9iKFtidWZdLCB7IHR5cGU6IGltYWdlLnR5cGUgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICAgIGF0dGVtcHRFcnJvcnMucHVzaChlPy5tZXNzYWdlIHx8IFN0cmluZyhlKSk7XG4gICAgfVxuICAgIC8vIHNpZ24obWFuaWZlc3QsIGZpbGUsIHNpZ25lcilcbiAgICB0cnkge1xuICAgICAgaWYgKHR5cGVvZiB0YXJnZXQuc2lnbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjb25zdCBvdXQzOiBhbnkgPSBhd2FpdCB0YXJnZXQuc2lnbihtYW5pZmVzdEZvclNpZ24sIGltYWdlLCBzaWduZXIpO1xuICAgICAgICBjb25zdCBiMyA9IGNvZXJjZVRvQmxvYihvdXQzKTtcbiAgICAgICAgaWYgKGIzKSByZXR1cm4gYjM7XG4gICAgICAgIGlmIChvdXQzPy5hcnJheUJ1ZmZlcikge1xuICAgICAgICAgIGNvbnN0IGJ1ZiA9IGF3YWl0IG91dDMuYXJyYXlCdWZmZXIoKTtcbiAgICAgICAgICByZXR1cm4gbmV3IEJsb2IoW2J1Zl0sIHsgdHlwZTogaW1hZ2UudHlwZSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgYXR0ZW1wdEVycm9ycy5wdXNoKGU/Lm1lc3NhZ2UgfHwgU3RyaW5nKGUpKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBUcnkgc2lnbiBvbiBjcmVhdGVkIGluc3RhbmNlIGFuZCBvbiB0aGUgbW9kdWxlIGl0c2VsZlxuICBjb25zb2xlLmxvZygnW0MyUEFdIEF0dGVtcHRpbmcgdG8gc2lnbiB1c2luZyBjMnBhIGluc3RhbmNlLi4uJyk7XG4gIGxldCBibG9iID0gYXdhaXQgdHJ5U2lnbihjMnBhKTtcbiAgaWYgKCFibG9iKSB7XG4gICAgY29uc29sZS5sb2coJ1tDMlBBXSBjMnBhIGluc3RhbmNlIHNpZ24gZmFpbGVkLCB0cnlpbmcgYzJwYU1vZC4uLicpO1xuICAgIGJsb2IgPSBhd2FpdCB0cnlTaWduKGMycGFNb2QpO1xuICB9XG5cbiAgLy8gVHJ5IHdyaXRlciBBUElzXG4gIGFzeW5jIGZ1bmN0aW9uIHRyeVdyaXRlcihmYWN0b3J5T3duZXI6IGFueSk6IFByb21pc2U8QmxvYiB8IG51bGw+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKGZhY3RvcnlPd25lcj8uV3JpdGVyPy5jcmVhdGUpIHtcbiAgICAgICAgY29uc3Qgd3JpdGVyID0gYXdhaXQgZmFjdG9yeU93bmVyLldyaXRlci5jcmVhdGUoeyBzaWduZXIgfSk7XG4gICAgICAgIGlmICh3cml0ZXI/LnNpZ24pIHtcbiAgICAgICAgICBjb25zdCBvdXQgPSBhd2FpdCB3cml0ZXIuc2lnbihpbWFnZSwgbWFuaWZlc3RGb3JTaWduKTtcbiAgICAgICAgICBjb25zdCBiID0gY29lcmNlVG9CbG9iKG91dCk7XG4gICAgICAgICAgaWYgKGIpIHJldHVybiBiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgICBhdHRlbXB0RXJyb3JzLnB1c2goZT8ubWVzc2FnZSB8fCBTdHJpbmcoZSkpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgaWYgKHR5cGVvZiBmYWN0b3J5T3duZXI/LmNyZWF0ZVdyaXRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBhd2FpdCBmYWN0b3J5T3duZXIuY3JlYXRlV3JpdGVyKHsgc2lnbmVyIH0pO1xuICAgICAgICBpZiAod3JpdGVyPy5zaWduKSB7XG4gICAgICAgICAgY29uc3Qgb3V0ID0gYXdhaXQgd3JpdGVyLnNpZ24oaW1hZ2UsIG1hbmlmZXN0Rm9yU2lnbik7XG4gICAgICAgICAgY29uc3QgYiA9IGNvZXJjZVRvQmxvYihvdXQpO1xuICAgICAgICAgIGlmIChiKSByZXR1cm4gYjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGU6IGFueSkge1xuICAgICAgYXR0ZW1wdEVycm9ycy5wdXNoKGU/Lm1lc3NhZ2UgfHwgU3RyaW5nKGUpKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoIWJsb2IpIHtcbiAgICBjb25zb2xlLmxvZygnW0MyUEFdIFNpZ24gbWV0aG9kcyBmYWlsZWQsIHRyeWluZyB3cml0ZXIgQVBJIG9uIGMycGFNb2QuLi4nKTtcbiAgICBibG9iID0gYXdhaXQgdHJ5V3JpdGVyKGMycGFNb2QpO1xuICB9XG4gIGlmICghYmxvYikge1xuICAgIGNvbnNvbGUubG9nKCdbQzJQQV0gYzJwYU1vZCB3cml0ZXIgZmFpbGVkLCB0cnlpbmcgYzJwYSB3cml0ZXIuLi4nKTtcbiAgICBibG9iID0gYXdhaXQgdHJ5V3JpdGVyKGMycGEpO1xuICB9XG4gIGlmIChibG9iKSB7XG4gICAgY29uc29sZS5sb2coJ1tDMlBBXSBTdWNjZXNzZnVsbHkgc2lnbmVkIGltYWdlLCByZXR1cm5pbmcgYmxvYicpO1xuICAgIHJldHVybiBibG9iO1xuICB9XG5cbiAgLy8gRmFsbGJhY2s6IHJldHVybiBvcmlnaW5hbCBpbWFnZSBibG9iIGlmIG5vIG91dHB1dCByZWNvZ25pemVkXG4gIGNvbnNvbGUud2FybignYzJwYSBzaWduIHJldHVybmVkIGFuIHVuZXhwZWN0ZWQgcmVzdWx0IHNoYXBlLiBBdHRlbXB0czonLCBhdHRlbXB0RXJyb3JzKTtcbiAgY29uc3QgZXJyb3JEZXRhaWxzID0gYXR0ZW1wdEVycm9ycy5sZW5ndGggPiAwXG4gICAgPyBgXFxuXFxuQXR0ZW1wdCBlcnJvcnM6XFxuJHthdHRlbXB0RXJyb3JzLm1hcCgoZSwgaSkgPT4gYCR7aSArIDF9LiAke2V9YCkuam9pbignXFxuJyl9YFxuICAgIDogJyc7XG4gIHRocm93IG5ldyBFcnJvcihgQzJQQSBzaWduIGRpZCBub3QgcmV0dXJuIGEgQmxvYiR7ZXJyb3JEZXRhaWxzfWApO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdmVyaWZ5QXNzZXQoZmlsZTogRmlsZSB8IEJsb2IpOiBQcm9taXNlPHVua25vd24+IHtcbiAgY29uc3QgYzJwYU1vZCA9IGF3YWl0IGxvYWRDMnBhKCk7XG4gIGxldCBjMnBhOiBhbnkgPSBjMnBhTW9kO1xuICBpZiAodHlwZW9mIGMycGFNb2QuQzJwYT8uY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIGMycGEgPSBhd2FpdCBjMnBhTW9kLkMycGEuY3JlYXRlKHsgd2FzbVNyYzogcHVibGljQzJwYUFzc2V0KCd0b29sa2l0X2JnLndhc20nKSwgd29ya2VyU3JjOiBwdWJsaWNDMnBhQXNzZXQoJ2MycGEud29ya2VyLmpzJykgfSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyB0cnkgdXNpbmcgbW9kdWxlIGRpcmVjdGx5XG4gICAgICBjMnBhID0gYzJwYU1vZDtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIGMycGEudmVyaWZ5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGF3YWl0IGMycGEudmVyaWZ5KGZpbGUpO1xuICB9XG4gIGlmICh0eXBlb2YgYzJwYS5yZWFkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGF3YWl0IGMycGEucmVhZCh7IGZpbGUgfSk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdDMlBBIHZlcmlmeS9yZWFkIEFQSSBub3QgZm91bmQnKTtcbn1cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbiJdLCJuYW1lcyI6WyJsb2FkQzJwYSIsIm1vZCIsImRlZmF1bHQiLCJwdWJsaWNDMnBhQXNzZXQiLCJmaWxlIiwic2lnbkltYWdlV2l0aE1hbmlmZXN0Iiwib3B0cyIsImMycGFNb2QiLCJpbWFnZSIsIm1hbmlmZXN0SnNvbiIsImNlcnRpZmljYXRlUGVtIiwicHJpdmF0ZUtleVBlbSIsInRzYVVybCIsIndhc21DYW5kaWRhdGVzIiwid29ya2VyQ2FuZGlkYXRlcyIsImMycGEiLCJsYXN0RXJyIiwid2FzbSIsIndvcmtlciIsImNvbnNvbGUiLCJsb2ciLCJDMnBhIiwiY3JlYXRlIiwid2FzbVNyYyIsIndvcmtlclNyYyIsImUiLCJ3YXJuIiwiRXJyb3IiLCJzaWduZXJPcHRzIiwicHJpdmF0ZUtleSIsImNlcnRDaGFpbiIsImNlcnRpZmljYXRlQ2hhaW4iLCJ0aW1lQXV0aG9yaXR5VXJsIiwidGltZVN0YW1wVXJsIiwidGltZXN0YW1wVXJsIiwidGFVcmwiLCJzaWduZXIiLCJTaWduZXIiLCJjcmVhdGVTaWduZXIiLCJtYW5pZmVzdEZvclNpZ24iLCJvcmlnaW4iLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInByb3h5VXJsIiwidGEiLCJ0YV91cmwiLCJuZWVkc1Byb3h5IiwidGVzdCIsImF0dGVtcHRFcnJvcnMiLCJjb2VyY2VUb0Jsb2IiLCJhbnlPdXQiLCJCbG9iIiwiQXJyYXlCdWZmZXIiLCJ0eXBlIiwiYnVmZmVyIiwiVWludDhBcnJheSIsImJsb2IiLCJzaWduZWQiLCJkYXRhIiwidHJ5U2lnbiIsInRhcmdldCIsInNpZ24iLCJvdXQxIiwibWFuaWZlc3QiLCJiMSIsImFycmF5QnVmZmVyIiwiYnVmIiwicHVzaCIsIm1lc3NhZ2UiLCJTdHJpbmciLCJvdXQyIiwiYjIiLCJvdXQzIiwiYjMiLCJ0cnlXcml0ZXIiLCJmYWN0b3J5T3duZXIiLCJXcml0ZXIiLCJ3cml0ZXIiLCJvdXQiLCJiIiwiY3JlYXRlV3JpdGVyIiwiZXJyb3JEZXRhaWxzIiwibGVuZ3RoIiwibWFwIiwiaSIsImpvaW4iLCJ2ZXJpZnlBc3NldCIsInZlcmlmeSIsInJlYWQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/c2paClient.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/csr.ts":
/*!********************!*\
  !*** ./lib/csr.ts ***!
  \********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateCsrPem: () => (/* binding */ generateCsrPem)\n/* harmony export */ });\n/* harmony import */ var asn1js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! asn1js */ \"(app-pages-browser)/./node_modules/asn1js/build/index.es.js\");\n/* harmony import */ var pkijs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pkijs */ \"(app-pages-browser)/./node_modules/pkijs/build/index.es.js\");\n\n\nfunction abToB64(buf) {\n    const bytes = new Uint8Array(buf);\n    let bin = '';\n    for(let i = 0; i < bytes.length; i++)bin += String.fromCharCode(bytes[i]);\n    return btoa(bin);\n}\nfunction wrapPem(label, b64) {\n    const wrapped = b64.replace(/(.{64})/g, '$1\\n');\n    return \"-----BEGIN \".concat(label, \"-----\\n\").concat(wrapped, \"\\n-----END \").concat(label, \"-----\");\n}\nasync function generateCsrPem(opts) {\n    const rdn = new pkijs__WEBPACK_IMPORTED_MODULE_1__.RelativeDistinguishedNames({\n        typesAndValues: []\n    });\n    const { subject } = opts;\n    // CountryName must be exactly two letters. If not, skip to avoid malformed CSRs.\n    if ((subject === null || subject === void 0 ? void 0 : subject.C) && /^[A-Za-z]{2}$/.test(subject.C)) {\n        rdn.typesAndValues.push(new pkijs__WEBPACK_IMPORTED_MODULE_1__.AttributeTypeAndValue({\n            type: '2.5.4.6',\n            value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString({\n                value: subject.C.toUpperCase()\n            })\n        }));\n    }\n    if (subject === null || subject === void 0 ? void 0 : subject.O) {\n        rdn.typesAndValues.push(new pkijs__WEBPACK_IMPORTED_MODULE_1__.AttributeTypeAndValue({\n            type: '2.5.4.10',\n            value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Utf8String({\n                value: subject.O\n            })\n        }));\n    }\n    if (subject === null || subject === void 0 ? void 0 : subject.CN) {\n        rdn.typesAndValues.push(new pkijs__WEBPACK_IMPORTED_MODULE_1__.AttributeTypeAndValue({\n            type: '2.5.4.3',\n            value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Utf8String({\n                value: subject.CN\n            })\n        }));\n    }\n    const csr = new pkijs__WEBPACK_IMPORTED_MODULE_1__.CertificationRequest({\n        subject: rdn\n    });\n    await csr.subjectPublicKeyInfo.importKey(opts.publicKey);\n    await csr.sign(opts.privateKey, 'SHA-256');\n    const b64 = abToB64(csr.toSchema(true).toBER(false));\n    return wrapPem('CERTIFICATE REQUEST', b64);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9jc3IudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBS2xCO0FBRWYsU0FBU0ksUUFBUUMsR0FBZ0I7SUFDL0IsTUFBTUMsUUFBUSxJQUFJQyxXQUFXRjtJQUM3QixJQUFJRyxNQUFNO0lBQ1YsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILE1BQU1JLE1BQU0sRUFBRUQsSUFBS0QsT0FBT0csT0FBT0MsWUFBWSxDQUFDTixLQUFLLENBQUNHLEVBQUU7SUFDMUUsT0FBT0ksS0FBS0w7QUFDZDtBQUVBLFNBQVNNLFFBQVFDLEtBQWEsRUFBRUMsR0FBVztJQUN6QyxNQUFNQyxVQUFVRCxJQUFJRSxPQUFPLENBQUMsWUFBWTtJQUN4QyxPQUFPLGNBQTZCRCxPQUFmRixPQUFNLFdBQThCQSxPQUFyQkUsU0FBUSxlQUFtQixPQUFORixPQUFNO0FBQ2pFO0FBRU8sZUFBZUksZUFBZUMsSUFJcEM7SUFDQyxNQUFNQyxNQUFNLElBQUlsQiw2REFBMEJBLENBQUM7UUFBRW1CLGdCQUFnQixFQUFFO0lBQUM7SUFDaEUsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBR0g7SUFDcEIsaUZBQWlGO0lBQ2pGLElBQUlHLENBQUFBLG9CQUFBQSw4QkFBQUEsUUFBU0MsQ0FBQyxLQUFJLGdCQUFnQkMsSUFBSSxDQUFDRixRQUFRQyxDQUFDLEdBQUc7UUFDakRILElBQUlDLGNBQWMsQ0FBQ0ksSUFBSSxDQUNyQixJQUFJeEIsd0RBQXFCQSxDQUFDO1lBQUV5QixNQUFNO1lBQVdDLE9BQU8sSUFBSTVCLG1EQUFzQixDQUFDO2dCQUFFNEIsT0FBT0wsUUFBUUMsQ0FBQyxDQUFDTSxXQUFXO1lBQUc7UUFBRztJQUV2SDtJQUNBLElBQUlQLG9CQUFBQSw4QkFBQUEsUUFBU1EsQ0FBQyxFQUFFO1FBQ2RWLElBQUlDLGNBQWMsQ0FBQ0ksSUFBSSxDQUNyQixJQUFJeEIsd0RBQXFCQSxDQUFDO1lBQUV5QixNQUFNO1lBQVlDLE9BQU8sSUFBSTVCLDhDQUFpQixDQUFDO2dCQUFFNEIsT0FBT0wsUUFBUVEsQ0FBQztZQUFDO1FBQUc7SUFFckc7SUFDQSxJQUFJUixvQkFBQUEsOEJBQUFBLFFBQVNVLEVBQUUsRUFBRTtRQUNmWixJQUFJQyxjQUFjLENBQUNJLElBQUksQ0FDckIsSUFBSXhCLHdEQUFxQkEsQ0FBQztZQUFFeUIsTUFBTTtZQUFXQyxPQUFPLElBQUk1Qiw4Q0FBaUIsQ0FBQztnQkFBRTRCLE9BQU9MLFFBQVFVLEVBQUU7WUFBQztRQUFHO0lBRXJHO0lBRUEsTUFBTUMsTUFBTSxJQUFJakMsdURBQW9CQSxDQUFDO1FBQUVzQixTQUFTRjtJQUFJO0lBQ3BELE1BQU1hLElBQUlDLG9CQUFvQixDQUFDQyxTQUFTLENBQUNoQixLQUFLaUIsU0FBUztJQUN2RCxNQUFNSCxJQUFJSSxJQUFJLENBQUNsQixLQUFLbUIsVUFBVSxFQUFFO0lBQ2hDLE1BQU12QixNQUFNWixRQUFROEIsSUFBSU0sUUFBUSxDQUFDLE1BQU1DLEtBQUssQ0FBQztJQUM3QyxPQUFPM0IsUUFBUSx1QkFBdUJFO0FBQ3hDIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRGVza3RvcC9jMnBhIHRvb2wvbGliL2Nzci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhc24xanMgZnJvbSAnYXNuMWpzJztcbmltcG9ydCB7XG4gIENlcnRpZmljYXRpb25SZXF1ZXN0LFxuICBBdHRyaWJ1dGVUeXBlQW5kVmFsdWUsXG4gIFJlbGF0aXZlRGlzdGluZ3Vpc2hlZE5hbWVzLFxufSBmcm9tICdwa2lqcyc7XG5cbmZ1bmN0aW9uIGFiVG9CNjQoYnVmOiBBcnJheUJ1ZmZlcikge1xuICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJ1Zik7XG4gIGxldCBiaW4gPSAnJztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykgYmluICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0pO1xuICByZXR1cm4gYnRvYShiaW4pO1xufVxuXG5mdW5jdGlvbiB3cmFwUGVtKGxhYmVsOiBzdHJpbmcsIGI2NDogc3RyaW5nKSB7XG4gIGNvbnN0IHdyYXBwZWQgPSBiNjQucmVwbGFjZSgvKC57NjR9KS9nLCAnJDFcXG4nKTtcbiAgcmV0dXJuIGAtLS0tLUJFR0lOICR7bGFiZWx9LS0tLS1cXG4ke3dyYXBwZWR9XFxuLS0tLS1FTkQgJHtsYWJlbH0tLS0tLWA7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUNzclBlbShvcHRzOiB7XG4gIHN1YmplY3Q/OiB7IENOPzogc3RyaW5nOyBPPzogc3RyaW5nOyBDPzogc3RyaW5nIH07XG4gIHB1YmxpY0tleTogQ3J5cHRvS2V5O1xuICBwcml2YXRlS2V5OiBDcnlwdG9LZXk7XG59KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgcmRuID0gbmV3IFJlbGF0aXZlRGlzdGluZ3Vpc2hlZE5hbWVzKHsgdHlwZXNBbmRWYWx1ZXM6IFtdIH0pO1xuICBjb25zdCB7IHN1YmplY3QgfSA9IG9wdHM7XG4gIC8vIENvdW50cnlOYW1lIG11c3QgYmUgZXhhY3RseSB0d28gbGV0dGVycy4gSWYgbm90LCBza2lwIHRvIGF2b2lkIG1hbGZvcm1lZCBDU1JzLlxuICBpZiAoc3ViamVjdD8uQyAmJiAvXltBLVphLXpdezJ9JC8udGVzdChzdWJqZWN0LkMpKSB7XG4gICAgcmRuLnR5cGVzQW5kVmFsdWVzLnB1c2goXG4gICAgICBuZXcgQXR0cmlidXRlVHlwZUFuZFZhbHVlKHsgdHlwZTogJzIuNS40LjYnLCB2YWx1ZTogbmV3IGFzbjFqcy5QcmludGFibGVTdHJpbmcoeyB2YWx1ZTogc3ViamVjdC5DLnRvVXBwZXJDYXNlKCkgfSkgfSlcbiAgICApO1xuICB9XG4gIGlmIChzdWJqZWN0Py5PKSB7XG4gICAgcmRuLnR5cGVzQW5kVmFsdWVzLnB1c2goXG4gICAgICBuZXcgQXR0cmlidXRlVHlwZUFuZFZhbHVlKHsgdHlwZTogJzIuNS40LjEwJywgdmFsdWU6IG5ldyBhc24xanMuVXRmOFN0cmluZyh7IHZhbHVlOiBzdWJqZWN0Lk8gfSkgfSlcbiAgICApO1xuICB9XG4gIGlmIChzdWJqZWN0Py5DTikge1xuICAgIHJkbi50eXBlc0FuZFZhbHVlcy5wdXNoKFxuICAgICAgbmV3IEF0dHJpYnV0ZVR5cGVBbmRWYWx1ZSh7IHR5cGU6ICcyLjUuNC4zJywgdmFsdWU6IG5ldyBhc24xanMuVXRmOFN0cmluZyh7IHZhbHVlOiBzdWJqZWN0LkNOIH0pIH0pXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IGNzciA9IG5ldyBDZXJ0aWZpY2F0aW9uUmVxdWVzdCh7IHN1YmplY3Q6IHJkbiB9KTtcbiAgYXdhaXQgY3NyLnN1YmplY3RQdWJsaWNLZXlJbmZvLmltcG9ydEtleShvcHRzLnB1YmxpY0tleSk7XG4gIGF3YWl0IGNzci5zaWduKG9wdHMucHJpdmF0ZUtleSwgJ1NIQS0yNTYnKTtcbiAgY29uc3QgYjY0ID0gYWJUb0I2NChjc3IudG9TY2hlbWEodHJ1ZSkudG9CRVIoZmFsc2UpKTtcbiAgcmV0dXJuIHdyYXBQZW0oJ0NFUlRJRklDQVRFIFJFUVVFU1QnLCBiNjQpO1xufVxuIl0sIm5hbWVzIjpbImFzbjFqcyIsIkNlcnRpZmljYXRpb25SZXF1ZXN0IiwiQXR0cmlidXRlVHlwZUFuZFZhbHVlIiwiUmVsYXRpdmVEaXN0aW5ndWlzaGVkTmFtZXMiLCJhYlRvQjY0IiwiYnVmIiwiYnl0ZXMiLCJVaW50OEFycmF5IiwiYmluIiwiaSIsImxlbmd0aCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImJ0b2EiLCJ3cmFwUGVtIiwibGFiZWwiLCJiNjQiLCJ3cmFwcGVkIiwicmVwbGFjZSIsImdlbmVyYXRlQ3NyUGVtIiwib3B0cyIsInJkbiIsInR5cGVzQW5kVmFsdWVzIiwic3ViamVjdCIsIkMiLCJ0ZXN0IiwicHVzaCIsInR5cGUiLCJ2YWx1ZSIsIlByaW50YWJsZVN0cmluZyIsInRvVXBwZXJDYXNlIiwiTyIsIlV0ZjhTdHJpbmciLCJDTiIsImNzciIsInN1YmplY3RQdWJsaWNLZXlJbmZvIiwiaW1wb3J0S2V5IiwicHVibGljS2V5Iiwic2lnbiIsInByaXZhdGVLZXkiLCJ0b1NjaGVtYSIsInRvQkVSIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/csr.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/manifest.ts":
/*!*************************!*\
  !*** ./lib/manifest.ts ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ManifestSchema: () => (/* binding */ ManifestSchema),\n/* harmony export */   Presets: () => (/* binding */ Presets)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(app-pages-browser)/./node_modules/zod/v3/types.js\");\n\n// Minimal, not full C2PA schema; just enough to validate fields in UI\nconst ManifestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    format: zod__WEBPACK_IMPORTED_MODULE_0__.string().default('image/jpeg'),\n    assertions: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.any())).default([]),\n    ta_url: zod__WEBPACK_IMPORTED_MODULE_0__.string().url().optional()\n}).strict();\nconst Presets = {\n    minimal: {\n        title: 'Signed image',\n        format: 'image/jpeg',\n        assertions: [\n            {\n                label: 'c2pa.actions',\n                data: {\n                    actions: [\n                        {\n                            action: 'c2pa.created'\n                        }\n                    ]\n                }\n            }\n        ],\n        ta_url: 'https://api.staging.c2pa.ssl.com/v1/timestamp'\n    },\n    editorial: {\n        title: 'Editorial image',\n        format: 'image/jpeg',\n        assertions: [\n            {\n                label: 'c2pa.actions',\n                data: {\n                    actions: [\n                        {\n                            action: 'c2pa.edited'\n                        }\n                    ]\n                }\n            },\n            {\n                label: 'org.iptc.ext',\n                data: {\n                    creditLine: 'SSL.com Preview'\n                }\n            }\n        ],\n        ta_url: 'https://api.staging.c2pa.ssl.com/v1/timestamp'\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9tYW5pZmVzdC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBd0I7QUFFeEIsc0VBQXNFO0FBQy9ELE1BQU1DLGlCQUFpQkQsdUNBQVEsQ0FBQztJQUNyQ0csT0FBT0gsdUNBQVEsR0FBR0ssUUFBUTtJQUMxQkMsUUFBUU4sdUNBQVEsR0FBR08sT0FBTyxDQUFDO0lBQzNCQyxZQUFZUixzQ0FBTyxDQUFDQSx1Q0FBUSxDQUFDQSxvQ0FBSyxLQUFLTyxPQUFPLENBQUMsRUFBRTtJQUNqREssUUFBUVosdUNBQVEsR0FBR2EsR0FBRyxHQUFHUixRQUFRO0FBQ25DLEdBQUdTLE1BQU0sR0FBRztBQUlMLE1BQU1DLFVBQW9DO0lBQy9DQyxTQUFTO1FBQ1BiLE9BQU87UUFDUEcsUUFBUTtRQUNSRSxZQUFZO1lBQ1Y7Z0JBQUVTLE9BQU87Z0JBQWdCQyxNQUFNO29CQUFFQyxTQUFTO3dCQUFDOzRCQUFFQyxRQUFRO3dCQUFlO3FCQUFFO2dCQUFDO1lBQUU7U0FDMUU7UUFDRFIsUUFBUTtJQUNWO0lBQ0FTLFdBQVc7UUFDVGxCLE9BQU87UUFDUEcsUUFBUTtRQUNSRSxZQUFZO1lBQ1Y7Z0JBQUVTLE9BQU87Z0JBQWdCQyxNQUFNO29CQUFFQyxTQUFTO3dCQUFDOzRCQUFFQyxRQUFRO3dCQUFjO3FCQUFFO2dCQUFDO1lBQUU7WUFDeEU7Z0JBQUVILE9BQU87Z0JBQWdCQyxNQUFNO29CQUFFSSxZQUFZO2dCQUFrQjtZQUFFO1NBQ2xFO1FBQ0RWLFFBQVE7SUFDVjtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9EZXNrdG9wL2MycGEgdG9vbC9saWIvbWFuaWZlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5cbi8vIE1pbmltYWwsIG5vdCBmdWxsIEMyUEEgc2NoZW1hOyBqdXN0IGVub3VnaCB0byB2YWxpZGF0ZSBmaWVsZHMgaW4gVUlcbmV4cG9ydCBjb25zdCBNYW5pZmVzdFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgdGl0bGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgZm9ybWF0OiB6LnN0cmluZygpLmRlZmF1bHQoJ2ltYWdlL2pwZWcnKSxcbiAgYXNzZXJ0aW9uczogei5hcnJheSh6LnJlY29yZCh6LmFueSgpKSkuZGVmYXVsdChbXSksXG4gIHRhX3VybDogei5zdHJpbmcoKS51cmwoKS5vcHRpb25hbCgpLFxufSkuc3RyaWN0KCk7XG5cbmV4cG9ydCB0eXBlIE1hbmlmZXN0ID0gei5pbmZlcjx0eXBlb2YgTWFuaWZlc3RTY2hlbWE+O1xuXG5leHBvcnQgY29uc3QgUHJlc2V0czogUmVjb3JkPHN0cmluZywgTWFuaWZlc3Q+ID0ge1xuICBtaW5pbWFsOiB7XG4gICAgdGl0bGU6ICdTaWduZWQgaW1hZ2UnLFxuICAgIGZvcm1hdDogJ2ltYWdlL2pwZWcnLFxuICAgIGFzc2VydGlvbnM6IFtcbiAgICAgIHsgbGFiZWw6ICdjMnBhLmFjdGlvbnMnLCBkYXRhOiB7IGFjdGlvbnM6IFt7IGFjdGlvbjogJ2MycGEuY3JlYXRlZCcgfV0gfSB9LFxuICAgIF0sXG4gICAgdGFfdXJsOiAnaHR0cHM6Ly9hcGkuc3RhZ2luZy5jMnBhLnNzbC5jb20vdjEvdGltZXN0YW1wJyxcbiAgfSxcbiAgZWRpdG9yaWFsOiB7XG4gICAgdGl0bGU6ICdFZGl0b3JpYWwgaW1hZ2UnLFxuICAgIGZvcm1hdDogJ2ltYWdlL2pwZWcnLFxuICAgIGFzc2VydGlvbnM6IFtcbiAgICAgIHsgbGFiZWw6ICdjMnBhLmFjdGlvbnMnLCBkYXRhOiB7IGFjdGlvbnM6IFt7IGFjdGlvbjogJ2MycGEuZWRpdGVkJyB9XSB9IH0sXG4gICAgICB7IGxhYmVsOiAnb3JnLmlwdGMuZXh0JywgZGF0YTogeyBjcmVkaXRMaW5lOiAnU1NMLmNvbSBQcmV2aWV3JyB9IH0sXG4gICAgXSxcbiAgICB0YV91cmw6ICdodHRwczovL2FwaS5zdGFnaW5nLmMycGEuc3NsLmNvbS92MS90aW1lc3RhbXAnLFxuICB9LFxufTtcbiJdLCJuYW1lcyI6WyJ6IiwiTWFuaWZlc3RTY2hlbWEiLCJvYmplY3QiLCJ0aXRsZSIsInN0cmluZyIsIm9wdGlvbmFsIiwiZm9ybWF0IiwiZGVmYXVsdCIsImFzc2VydGlvbnMiLCJhcnJheSIsInJlY29yZCIsImFueSIsInRhX3VybCIsInVybCIsInN0cmljdCIsIlByZXNldHMiLCJtaW5pbWFsIiwibGFiZWwiLCJkYXRhIiwiYWN0aW9ucyIsImFjdGlvbiIsImVkaXRvcmlhbCIsImNyZWRpdExpbmUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/manifest.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@noble/hashes/esm/_md.js":
/*!***********************************************!*\
  !*** ./node_modules/@noble/hashes/esm/_md.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chi: () => (/* binding */ Chi),\n/* harmony export */   HashMD: () => (/* binding */ HashMD),\n/* harmony export */   Maj: () => (/* binding */ Maj),\n/* harmony export */   SHA224_IV: () => (/* binding */ SHA224_IV),\n/* harmony export */   SHA256_IV: () => (/* binding */ SHA256_IV),\n/* harmony export */   SHA384_IV: () => (/* binding */ SHA384_IV),\n/* harmony export */   SHA512_IV: () => (/* binding */ SHA512_IV),\n/* harmony export */   setBigUint64: () => (/* binding */ setBigUint64)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\n\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */\nfunction Chi(a, b, c) {\n    return (a & b) ^ (~a & c);\n}\n/** Majority function, true if any two inputs is true. */\nfunction Maj(a, b, c) {\n    return (a & b) ^ (a & c) ^ (b & c);\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nclass HashMD extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(this.buffer);\n    }\n    update(data) {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(data);\n        const { view, buffer, blockLen } = this;\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aoutput)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(this.buffer.subarray(pos));\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.destroyed = destroyed;\n        to.finished = finished;\n        to.length = length;\n        to.pos = pos;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n}\n/**\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\n */\n/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */\nconst SHA256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\n]);\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */\nconst SHA224_IV = /* @__PURE__ */ Uint32Array.from([\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,\n]);\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */\nconst SHA384_IV = /* @__PURE__ */ Uint32Array.from([\n    0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,\n]);\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */\nconst SHA512_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,\n]);\n//# sourceMappingURL=_md.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@noble/hashes/esm/_md.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@noble/hashes/esm/_u64.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/_u64.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   add3H: () => (/* binding */ add3H),\n/* harmony export */   add3L: () => (/* binding */ add3L),\n/* harmony export */   add4H: () => (/* binding */ add4H),\n/* harmony export */   add4L: () => (/* binding */ add4L),\n/* harmony export */   add5H: () => (/* binding */ add5H),\n/* harmony export */   add5L: () => (/* binding */ add5L),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fromBig: () => (/* binding */ fromBig),\n/* harmony export */   rotlBH: () => (/* binding */ rotlBH),\n/* harmony export */   rotlBL: () => (/* binding */ rotlBL),\n/* harmony export */   rotlSH: () => (/* binding */ rotlSH),\n/* harmony export */   rotlSL: () => (/* binding */ rotlSL),\n/* harmony export */   rotr32H: () => (/* binding */ rotr32H),\n/* harmony export */   rotr32L: () => (/* binding */ rotr32L),\n/* harmony export */   rotrBH: () => (/* binding */ rotrBH),\n/* harmony export */   rotrBL: () => (/* binding */ rotrBL),\n/* harmony export */   rotrSH: () => (/* binding */ rotrSH),\n/* harmony export */   rotrSL: () => (/* binding */ rotrSL),\n/* harmony export */   shrSH: () => (/* binding */ shrSH),\n/* harmony export */   shrSL: () => (/* binding */ shrSL),\n/* harmony export */   split: () => (/* binding */ split),\n/* harmony export */   toBig: () => (/* binding */ toBig)\n/* harmony export */ });\n/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    const len = lst.length;\n    let Ah = new Uint32Array(len);\n    let Al = new Uint32Array(len);\n    for (let i = 0; i < len; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\n\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (u64);\n//# sourceMappingURL=_u64.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fdTY0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0IsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNnTDtBQUNoTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSxHQUFHLEVBQUM7QUFDbkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9EZXNrdG9wL2MycGEgdG9vbC9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX3U2NC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEludGVybmFsIGhlbHBlcnMgZm9yIHU2NC4gQmlnVWludDY0QXJyYXkgaXMgdG9vIHNsb3cgYXMgcGVyIDIwMjUsIHNvIHdlIGltcGxlbWVudCBpdCB1c2luZyBVaW50MzJBcnJheS5cbiAqIEB0b2RvIHJlLWNoZWNrIGh0dHBzOi8vaXNzdWVzLmNocm9taXVtLm9yZy9pc3N1ZXMvNDIyMTI1ODhcbiAqIEBtb2R1bGVcbiAqL1xuY29uc3QgVTMyX01BU0s2NCA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMiAqKiAzMiAtIDEpO1xuY29uc3QgXzMybiA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMzIpO1xuZnVuY3Rpb24gZnJvbUJpZyhuLCBsZSA9IGZhbHNlKSB7XG4gICAgaWYgKGxlKVxuICAgICAgICByZXR1cm4geyBoOiBOdW1iZXIobiAmIFUzMl9NQVNLNjQpLCBsOiBOdW1iZXIoKG4gPj4gXzMybikgJiBVMzJfTUFTSzY0KSB9O1xuICAgIHJldHVybiB7IGg6IE51bWJlcigobiA+PiBfMzJuKSAmIFUzMl9NQVNLNjQpIHwgMCwgbDogTnVtYmVyKG4gJiBVMzJfTUFTSzY0KSB8IDAgfTtcbn1cbmZ1bmN0aW9uIHNwbGl0KGxzdCwgbGUgPSBmYWxzZSkge1xuICAgIGNvbnN0IGxlbiA9IGxzdC5sZW5ndGg7XG4gICAgbGV0IEFoID0gbmV3IFVpbnQzMkFycmF5KGxlbik7XG4gICAgbGV0IEFsID0gbmV3IFVpbnQzMkFycmF5KGxlbik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjb25zdCB7IGgsIGwgfSA9IGZyb21CaWcobHN0W2ldLCBsZSk7XG4gICAgICAgIFtBaFtpXSwgQWxbaV1dID0gW2gsIGxdO1xuICAgIH1cbiAgICByZXR1cm4gW0FoLCBBbF07XG59XG5jb25zdCB0b0JpZyA9IChoLCBsKSA9PiAoQmlnSW50KGggPj4+IDApIDw8IF8zMm4pIHwgQmlnSW50KGwgPj4+IDApO1xuLy8gZm9yIFNoaWZ0IGluIFswLCAzMilcbmNvbnN0IHNoclNIID0gKGgsIF9sLCBzKSA9PiBoID4+PiBzO1xuY29uc3Qgc2hyU0wgPSAoaCwgbCwgcykgPT4gKGggPDwgKDMyIC0gcykpIHwgKGwgPj4+IHMpO1xuLy8gUmlnaHQgcm90YXRlIGZvciBTaGlmdCBpbiBbMSwgMzIpXG5jb25zdCByb3RyU0ggPSAoaCwgbCwgcykgPT4gKGggPj4+IHMpIHwgKGwgPDwgKDMyIC0gcykpO1xuY29uc3Qgcm90clNMID0gKGgsIGwsIHMpID0+IChoIDw8ICgzMiAtIHMpKSB8IChsID4+PiBzKTtcbi8vIFJpZ2h0IHJvdGF0ZSBmb3IgU2hpZnQgaW4gKDMyLCA2NCksIE5PVEU6IDMyIGlzIHNwZWNpYWwgY2FzZS5cbmNvbnN0IHJvdHJCSCA9IChoLCBsLCBzKSA9PiAoaCA8PCAoNjQgLSBzKSkgfCAobCA+Pj4gKHMgLSAzMikpO1xuY29uc3Qgcm90ckJMID0gKGgsIGwsIHMpID0+IChoID4+PiAocyAtIDMyKSkgfCAobCA8PCAoNjQgLSBzKSk7XG4vLyBSaWdodCByb3RhdGUgZm9yIHNoaWZ0PT09MzIgKGp1c3Qgc3dhcHMgbCZoKVxuY29uc3Qgcm90cjMySCA9IChfaCwgbCkgPT4gbDtcbmNvbnN0IHJvdHIzMkwgPSAoaCwgX2wpID0+IGg7XG4vLyBMZWZ0IHJvdGF0ZSBmb3IgU2hpZnQgaW4gWzEsIDMyKVxuY29uc3Qgcm90bFNIID0gKGgsIGwsIHMpID0+IChoIDw8IHMpIHwgKGwgPj4+ICgzMiAtIHMpKTtcbmNvbnN0IHJvdGxTTCA9IChoLCBsLCBzKSA9PiAobCA8PCBzKSB8IChoID4+PiAoMzIgLSBzKSk7XG4vLyBMZWZ0IHJvdGF0ZSBmb3IgU2hpZnQgaW4gKDMyLCA2NCksIE5PVEU6IDMyIGlzIHNwZWNpYWwgY2FzZS5cbmNvbnN0IHJvdGxCSCA9IChoLCBsLCBzKSA9PiAobCA8PCAocyAtIDMyKSkgfCAoaCA+Pj4gKDY0IC0gcykpO1xuY29uc3Qgcm90bEJMID0gKGgsIGwsIHMpID0+IChoIDw8IChzIC0gMzIpKSB8IChsID4+PiAoNjQgLSBzKSk7XG4vLyBKUyB1c2VzIDMyLWJpdCBzaWduZWQgaW50ZWdlcnMgZm9yIGJpdHdpc2Ugb3BlcmF0aW9ucyB3aGljaCBtZWFucyB3ZSBjYW5ub3Rcbi8vIHNpbXBsZSB0YWtlIGNhcnJ5IG91dCBvZiBsb3cgYml0IHN1bSBieSBzaGlmdCwgd2UgbmVlZCB0byB1c2UgZGl2aXNpb24uXG5mdW5jdGlvbiBhZGQoQWgsIEFsLCBCaCwgQmwpIHtcbiAgICBjb25zdCBsID0gKEFsID4+PiAwKSArIChCbCA+Pj4gMCk7XG4gICAgcmV0dXJuIHsgaDogKEFoICsgQmggKyAoKGwgLyAyICoqIDMyKSB8IDApKSB8IDAsIGw6IGwgfCAwIH07XG59XG4vLyBBZGRpdGlvbiB3aXRoIG1vcmUgdGhhbiAyIGVsZW1lbnRzXG5jb25zdCBhZGQzTCA9IChBbCwgQmwsIENsKSA9PiAoQWwgPj4+IDApICsgKEJsID4+PiAwKSArIChDbCA+Pj4gMCk7XG5jb25zdCBhZGQzSCA9IChsb3csIEFoLCBCaCwgQ2gpID0+IChBaCArIEJoICsgQ2ggKyAoKGxvdyAvIDIgKiogMzIpIHwgMCkpIHwgMDtcbmNvbnN0IGFkZDRMID0gKEFsLCBCbCwgQ2wsIERsKSA9PiAoQWwgPj4+IDApICsgKEJsID4+PiAwKSArIChDbCA+Pj4gMCkgKyAoRGwgPj4+IDApO1xuY29uc3QgYWRkNEggPSAobG93LCBBaCwgQmgsIENoLCBEaCkgPT4gKEFoICsgQmggKyBDaCArIERoICsgKChsb3cgLyAyICoqIDMyKSB8IDApKSB8IDA7XG5jb25zdCBhZGQ1TCA9IChBbCwgQmwsIENsLCBEbCwgRWwpID0+IChBbCA+Pj4gMCkgKyAoQmwgPj4+IDApICsgKENsID4+PiAwKSArIChEbCA+Pj4gMCkgKyAoRWwgPj4+IDApO1xuY29uc3QgYWRkNUggPSAobG93LCBBaCwgQmgsIENoLCBEaCwgRWgpID0+IChBaCArIEJoICsgQ2ggKyBEaCArIEVoICsgKChsb3cgLyAyICoqIDMyKSB8IDApKSB8IDA7XG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCB7IGFkZCwgYWRkM0gsIGFkZDNMLCBhZGQ0SCwgYWRkNEwsIGFkZDVILCBhZGQ1TCwgZnJvbUJpZywgcm90bEJILCByb3RsQkwsIHJvdGxTSCwgcm90bFNMLCByb3RyMzJILCByb3RyMzJMLCByb3RyQkgsIHJvdHJCTCwgcm90clNILCByb3RyU0wsIHNoclNILCBzaHJTTCwgc3BsaXQsIHRvQmlnIH07XG4vLyBwcmV0dGllci1pZ25vcmVcbmNvbnN0IHU2NCA9IHtcbiAgICBmcm9tQmlnLCBzcGxpdCwgdG9CaWcsXG4gICAgc2hyU0gsIHNoclNMLFxuICAgIHJvdHJTSCwgcm90clNMLCByb3RyQkgsIHJvdHJCTCxcbiAgICByb3RyMzJILCByb3RyMzJMLFxuICAgIHJvdGxTSCwgcm90bFNMLCByb3RsQkgsIHJvdGxCTCxcbiAgICBhZGQsIGFkZDNMLCBhZGQzSCwgYWRkNEwsIGFkZDRILCBhZGQ1SCwgYWRkNUwsXG59O1xuZXhwb3J0IGRlZmF1bHQgdTY0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X3U2NC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@noble/hashes/esm/_u64.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@noble/hashes/esm/crypto.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/crypto.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crypto: () => (/* binding */ crypto)\n/* harmony export */ });\nconst crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9jcnlwdG8uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1AiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9EZXNrdG9wL2MycGEgdG9vbC9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vY3J5cHRvLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBjcnlwdG8gPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcgJiYgJ2NyeXB0bycgaW4gZ2xvYmFsVGhpcyA/IGdsb2JhbFRoaXMuY3J5cHRvIDogdW5kZWZpbmVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3J5cHRvLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@noble/hashes/esm/crypto.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@noble/hashes/esm/legacy.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/legacy.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MD5: () => (/* binding */ MD5),\n/* harmony export */   RIPEMD160: () => (/* binding */ RIPEMD160),\n/* harmony export */   SHA1: () => (/* binding */ SHA1),\n/* harmony export */   md5: () => (/* binding */ md5),\n/* harmony export */   ripemd160: () => (/* binding */ ripemd160),\n/* harmony export */   sha1: () => (/* binding */ sha1)\n/* harmony export */ });\n/* harmony import */ var _md_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_md.js */ \"(app-pages-browser)/./node_modules/@noble/hashes/esm/_md.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n/**\n\nSHA1 (RFC 3174), MD5 (RFC 1321) and RIPEMD160 (RFC 2286) legacy, weak hash functions.\nDon't use them in a new protocol. What \"weak\" means:\n\n- Collisions can be made with 2^18 effort in MD5, 2^60 in SHA1, 2^80 in RIPEMD160.\n- No practical pre-image attacks (only theoretical, 2^123.4)\n- HMAC seems kinda ok: https://datatracker.ietf.org/doc/html/rfc6151\n * @module\n */\n\n\n/** Initial SHA1 state */\nconst SHA1_IV = /* @__PURE__ */ Uint32Array.from([\n    0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0,\n]);\n// Reusable temporary buffer\nconst SHA1_W = /* @__PURE__ */ new Uint32Array(80);\n/** SHA1 legacy hash class. */\nclass SHA1 extends _md_js__WEBPACK_IMPORTED_MODULE_0__.HashMD {\n    constructor() {\n        super(64, 20, 8, false);\n        this.A = SHA1_IV[0] | 0;\n        this.B = SHA1_IV[1] | 0;\n        this.C = SHA1_IV[2] | 0;\n        this.D = SHA1_IV[3] | 0;\n        this.E = SHA1_IV[4] | 0;\n    }\n    get() {\n        const { A, B, C, D, E } = this;\n        return [A, B, C, D, E];\n    }\n    set(A, B, C, D, E) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA1_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 80; i++)\n            SHA1_W[i] = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotl)(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);\n        // Compression function main loop, 80 rounds\n        let { A, B, C, D, E } = this;\n        for (let i = 0; i < 80; i++) {\n            let F, K;\n            if (i < 20) {\n                F = (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Chi)(B, C, D);\n                K = 0x5a827999;\n            }\n            else if (i < 40) {\n                F = B ^ C ^ D;\n                K = 0x6ed9eba1;\n            }\n            else if (i < 60) {\n                F = (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Maj)(B, C, D);\n                K = 0x8f1bbcdc;\n            }\n            else {\n                F = B ^ C ^ D;\n                K = 0xca62c1d6;\n            }\n            const T = ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotl)(A, 5) + F + E + K + SHA1_W[i]) | 0;\n            E = D;\n            D = C;\n            C = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotl)(B, 30);\n            B = A;\n            A = T;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        this.set(A, B, C, D, E);\n    }\n    roundClean() {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(SHA1_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(this.buffer);\n    }\n}\n/** SHA1 (RFC 3174) legacy hash function. It was cryptographically broken. */\nconst sha1 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createHasher)(() => new SHA1());\n/** Per-round constants */\nconst p32 = /* @__PURE__ */ Math.pow(2, 32);\nconst K = /* @__PURE__ */ Array.from({ length: 64 }, (_, i) => Math.floor(p32 * Math.abs(Math.sin(i + 1))));\n/** md5 initial state: same as sha1, but 4 u32 instead of 5. */\nconst MD5_IV = /* @__PURE__ */ SHA1_IV.slice(0, 4);\n// Reusable temporary buffer\nconst MD5_W = /* @__PURE__ */ new Uint32Array(16);\n/** MD5 legacy hash class. */\nclass MD5 extends _md_js__WEBPACK_IMPORTED_MODULE_0__.HashMD {\n    constructor() {\n        super(64, 16, 8, true);\n        this.A = MD5_IV[0] | 0;\n        this.B = MD5_IV[1] | 0;\n        this.C = MD5_IV[2] | 0;\n        this.D = MD5_IV[3] | 0;\n    }\n    get() {\n        const { A, B, C, D } = this;\n        return [A, B, C, D];\n    }\n    set(A, B, C, D) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            MD5_W[i] = view.getUint32(offset, true);\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D } = this;\n        for (let i = 0; i < 64; i++) {\n            let F, g, s;\n            if (i < 16) {\n                F = (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Chi)(B, C, D);\n                g = i;\n                s = [7, 12, 17, 22];\n            }\n            else if (i < 32) {\n                F = (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Chi)(D, B, C);\n                g = (5 * i + 1) % 16;\n                s = [5, 9, 14, 20];\n            }\n            else if (i < 48) {\n                F = B ^ C ^ D;\n                g = (3 * i + 5) % 16;\n                s = [4, 11, 16, 23];\n            }\n            else {\n                F = C ^ (B | ~D);\n                g = (7 * i) % 16;\n                s = [6, 10, 15, 21];\n            }\n            F = F + A + K[i] + MD5_W[g];\n            A = D;\n            D = C;\n            C = B;\n            B = B + (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotl)(F, s[i % 4]);\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        this.set(A, B, C, D);\n    }\n    roundClean() {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(MD5_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(this.buffer);\n    }\n}\n/**\n * MD5 (RFC 1321) legacy hash function. It was cryptographically broken.\n * MD5 architecture is similar to SHA1, with some differences:\n * - Reduced output length: 16 bytes (128 bit) instead of 20\n * - 64 rounds, instead of 80\n * - Little-endian: could be faster, but will require more code\n * - Non-linear index selection: huge speed-up for unroll\n * - Per round constants: more memory accesses, additional speed-up for unroll\n */\nconst md5 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createHasher)(() => new MD5());\n// RIPEMD-160\nconst Rho160 = /* @__PURE__ */ Uint8Array.from([\n    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n]);\nconst Id160 = /* @__PURE__ */ (() => Uint8Array.from(new Array(16).fill(0).map((_, i) => i)))();\nconst Pi160 = /* @__PURE__ */ (() => Id160.map((i) => (9 * i + 5) % 16))();\nconst idxLR = /* @__PURE__ */ (() => {\n    const L = [Id160];\n    const R = [Pi160];\n    const res = [L, R];\n    for (let i = 0; i < 4; i++)\n        for (let j of res)\n            j.push(j[i].map((k) => Rho160[k]));\n    return res;\n})();\nconst idxL = /* @__PURE__ */ (() => idxLR[0])();\nconst idxR = /* @__PURE__ */ (() => idxLR[1])();\n// const [idxL, idxR] = idxLR;\nconst shifts160 = /* @__PURE__ */ [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => Uint8Array.from(i));\nconst shiftsL160 = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts160[i][j]));\nconst shiftsR160 = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts160[i][j]));\nconst Kl160 = /* @__PURE__ */ Uint32Array.from([\n    0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr160 = /* @__PURE__ */ Uint32Array.from([\n    0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// It's called f() in spec.\nfunction ripemd_f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    if (group === 1)\n        return (x & y) | (~x & z);\n    if (group === 2)\n        return (x | ~y) ^ z;\n    if (group === 3)\n        return (x & z) | (y & ~z);\n    return x ^ (y | ~z);\n}\n// Reusable temporary buffer\nconst BUF_160 = /* @__PURE__ */ new Uint32Array(16);\nclass RIPEMD160 extends _md_js__WEBPACK_IMPORTED_MODULE_0__.HashMD {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF_160[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl160[group], hbr = Kr160[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL160[group], sr = shiftsR160[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotl)(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotl)(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotl)(ar + ripemd_f(rGroup, br, cr, dr) + BUF_160[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotl)(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(BUF_160);\n    }\n    destroy() {\n        this.destroyed = true;\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(this.buffer);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\n/**\n * RIPEMD-160 - a legacy hash function from 1990s.\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\n */\nconst ripemd160 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createHasher)(() => new RIPEMD160());\n//# sourceMappingURL=legacy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@noble/hashes/esm/legacy.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@noble/hashes/esm/sha1.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/sha1.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SHA1: () => (/* binding */ SHA1),\n/* harmony export */   sha1: () => (/* binding */ sha1)\n/* harmony export */ });\n/* harmony import */ var _legacy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./legacy.js */ \"(app-pages-browser)/./node_modules/@noble/hashes/esm/legacy.js\");\n/**\n * SHA1 (RFC 3174) legacy hash function.\n * @module\n * @deprecated\n */\n\n/** @deprecated Use import from `noble/hashes/legacy` module */\nconst SHA1 = _legacy_js__WEBPACK_IMPORTED_MODULE_0__.SHA1;\n/** @deprecated Use import from `noble/hashes/legacy` module */\nconst sha1 = _legacy_js__WEBPACK_IMPORTED_MODULE_0__.sha1;\n//# sourceMappingURL=sha1.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9zaGExLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMkQ7QUFDM0Q7QUFDTyxhQUFhLDRDQUFLO0FBQ3pCO0FBQ08sYUFBYSw0Q0FBSztBQUN6QiIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0Rlc2t0b3AvYzJwYSB0b29sL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9zaGExLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU0hBMSAoUkZDIDMxNzQpIGxlZ2FjeSBoYXNoIGZ1bmN0aW9uLlxuICogQG1vZHVsZVxuICogQGRlcHJlY2F0ZWRcbiAqL1xuaW1wb3J0IHsgU0hBMSBhcyBTSEExbiwgc2hhMSBhcyBzaGExbiB9IGZyb20gXCIuL2xlZ2FjeS5qc1wiO1xuLyoqIEBkZXByZWNhdGVkIFVzZSBpbXBvcnQgZnJvbSBgbm9ibGUvaGFzaGVzL2xlZ2FjeWAgbW9kdWxlICovXG5leHBvcnQgY29uc3QgU0hBMSA9IFNIQTFuO1xuLyoqIEBkZXByZWNhdGVkIFVzZSBpbXBvcnQgZnJvbSBgbm9ibGUvaGFzaGVzL2xlZ2FjeWAgbW9kdWxlICovXG5leHBvcnQgY29uc3Qgc2hhMSA9IHNoYTFuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhMS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@noble/hashes/esm/sha1.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@noble/hashes/esm/sha2.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/sha2.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SHA224: () => (/* binding */ SHA224),\n/* harmony export */   SHA256: () => (/* binding */ SHA256),\n/* harmony export */   SHA384: () => (/* binding */ SHA384),\n/* harmony export */   SHA512: () => (/* binding */ SHA512),\n/* harmony export */   SHA512_224: () => (/* binding */ SHA512_224),\n/* harmony export */   SHA512_256: () => (/* binding */ SHA512_256),\n/* harmony export */   sha224: () => (/* binding */ sha224),\n/* harmony export */   sha256: () => (/* binding */ sha256),\n/* harmony export */   sha384: () => (/* binding */ sha384),\n/* harmony export */   sha512: () => (/* binding */ sha512),\n/* harmony export */   sha512_224: () => (/* binding */ sha512_224),\n/* harmony export */   sha512_256: () => (/* binding */ sha512_256)\n/* harmony export */ });\n/* harmony import */ var _md_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_md.js */ \"(app-pages-browser)/./node_modules/@noble/hashes/esm/_md.js\");\n/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_u64.js */ \"(app-pages-browser)/./node_modules/@noble/hashes/esm/_u64.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n/**\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\n\n\n\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _md_js__WEBPACK_IMPORTED_MODULE_0__.HashMD {\n    constructor(outputLen = 32) {\n        super(64, outputLen, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[0] | 0;\n        this.B = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[1] | 0;\n        this.C = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[2] | 0;\n        this.D = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[3] | 0;\n        this.E = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[4] | 0;\n        this.F = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[5] | 0;\n        this.G = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[6] | 0;\n        this.H = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 7) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 17) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 6) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 11) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 25);\n            const T1 = (H + sigma1 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 2) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 13) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 22);\n            const T2 = (sigma0 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Maj)(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(SHA256_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(this.buffer);\n    }\n}\nclass SHA224 extends SHA256 {\n    constructor() {\n        super(28);\n        this.A = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA224_IV[0] | 0;\n        this.B = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA224_IV[1] | 0;\n        this.C = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA224_IV[2] | 0;\n        this.D = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA224_IV[3] | 0;\n        this.E = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA224_IV[4] | 0;\n        this.F = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA224_IV[5] | 0;\n        this.G = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA224_IV[6] | 0;\n        this.H = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA224_IV[7] | 0;\n    }\n}\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */ (() => _u64_js__WEBPACK_IMPORTED_MODULE_2__.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nclass SHA512 extends _md_js__WEBPACK_IMPORTED_MODULE_0__.HashMD {\n    constructor(outputLen = 64) {\n        super(128, outputLen, 16, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[0] | 0;\n        this.Al = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[1] | 0;\n        this.Bh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[2] | 0;\n        this.Bl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[3] | 0;\n        this.Ch = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[4] | 0;\n        this.Cl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[5] | 0;\n        this.Dh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[6] | 0;\n        this.Dl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[7] | 0;\n        this.Eh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[8] | 0;\n        this.El = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[9] | 0;\n        this.Fh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[10] | 0;\n        this.Fl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[11] | 0;\n        this.Gh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[12] | 0;\n        this.Gl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[13] | 0;\n        this.Hh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[14] | 0;\n        this.Hl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_IV[15] | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrSH(W15h, W15l, 1) ^ _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrSH(W15h, W15l, 8) ^ _u64_js__WEBPACK_IMPORTED_MODULE_2__.shrSH(W15h, W15l, 7);\n            const s0l = _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrSL(W15h, W15l, 1) ^ _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrSL(W15h, W15l, 8) ^ _u64_js__WEBPACK_IMPORTED_MODULE_2__.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrSH(W2h, W2l, 19) ^ _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrBH(W2h, W2l, 61) ^ _u64_js__WEBPACK_IMPORTED_MODULE_2__.shrSH(W2h, W2l, 6);\n            const s1l = _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrSL(W2h, W2l, 19) ^ _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrBL(W2h, W2l, 61) ^ _u64_js__WEBPACK_IMPORTED_MODULE_2__.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = _u64_js__WEBPACK_IMPORTED_MODULE_2__.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = _u64_js__WEBPACK_IMPORTED_MODULE_2__.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrSH(Eh, El, 14) ^ _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrSH(Eh, El, 18) ^ _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrBH(Eh, El, 41);\n            const sigma1l = _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrSL(Eh, El, 14) ^ _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrSL(Eh, El, 18) ^ _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = _u64_js__WEBPACK_IMPORTED_MODULE_2__.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = _u64_js__WEBPACK_IMPORTED_MODULE_2__.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrSH(Ah, Al, 28) ^ _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrBH(Ah, Al, 34) ^ _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrBH(Ah, Al, 39);\n            const sigma0l = _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrSL(Ah, Al, 28) ^ _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrBL(Ah, Al, 34) ^ _u64_js__WEBPACK_IMPORTED_MODULE_2__.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = _u64_js__WEBPACK_IMPORTED_MODULE_2__.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = _u64_js__WEBPACK_IMPORTED_MODULE_2__.add3L(T1l, sigma0l, MAJl);\n            Ah = _u64_js__WEBPACK_IMPORTED_MODULE_2__.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = _u64_js__WEBPACK_IMPORTED_MODULE_2__.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = _u64_js__WEBPACK_IMPORTED_MODULE_2__.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = _u64_js__WEBPACK_IMPORTED_MODULE_2__.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = _u64_js__WEBPACK_IMPORTED_MODULE_2__.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = _u64_js__WEBPACK_IMPORTED_MODULE_2__.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = _u64_js__WEBPACK_IMPORTED_MODULE_2__.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = _u64_js__WEBPACK_IMPORTED_MODULE_2__.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = _u64_js__WEBPACK_IMPORTED_MODULE_2__.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(SHA512_W_H, SHA512_W_L);\n    }\n    destroy() {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(this.buffer);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super(48);\n        this.Ah = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[0] | 0;\n        this.Al = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[1] | 0;\n        this.Bh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[2] | 0;\n        this.Bl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[3] | 0;\n        this.Ch = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[4] | 0;\n        this.Cl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[5] | 0;\n        this.Dh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[6] | 0;\n        this.Dl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[7] | 0;\n        this.Eh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[8] | 0;\n        this.El = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[9] | 0;\n        this.Fh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[10] | 0;\n        this.Fl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[11] | 0;\n        this.Gh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[12] | 0;\n        this.Gl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[13] | 0;\n        this.Hh = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[14] | 0;\n        this.Hl = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA384_IV[15] | 0;\n    }\n}\n/**\n * Truncated SHA512/256 and SHA512/224.\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\n * Then t hashes string to produce result IV.\n * See `test/misc/sha2-gen-iv.js`.\n */\n/** SHA512/224 IV */\nconst T224_IV = /* @__PURE__ */ Uint32Array.from([\n    0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,\n    0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,\n]);\n/** SHA512/256 IV */\nconst T256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,\n    0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,\n]);\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super(28);\n        this.Ah = T224_IV[0] | 0;\n        this.Al = T224_IV[1] | 0;\n        this.Bh = T224_IV[2] | 0;\n        this.Bl = T224_IV[3] | 0;\n        this.Ch = T224_IV[4] | 0;\n        this.Cl = T224_IV[5] | 0;\n        this.Dh = T224_IV[6] | 0;\n        this.Dl = T224_IV[7] | 0;\n        this.Eh = T224_IV[8] | 0;\n        this.El = T224_IV[9] | 0;\n        this.Fh = T224_IV[10] | 0;\n        this.Fl = T224_IV[11] | 0;\n        this.Gh = T224_IV[12] | 0;\n        this.Gl = T224_IV[13] | 0;\n        this.Hh = T224_IV[14] | 0;\n        this.Hl = T224_IV[15] | 0;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super(32);\n        this.Ah = T256_IV[0] | 0;\n        this.Al = T256_IV[1] | 0;\n        this.Bh = T256_IV[2] | 0;\n        this.Bl = T256_IV[3] | 0;\n        this.Ch = T256_IV[4] | 0;\n        this.Cl = T256_IV[5] | 0;\n        this.Dh = T256_IV[6] | 0;\n        this.Dl = T256_IV[7] | 0;\n        this.Eh = T256_IV[8] | 0;\n        this.El = T256_IV[9] | 0;\n        this.Fh = T256_IV[10] | 0;\n        this.Fl = T256_IV[11] | 0;\n        this.Gh = T256_IV[12] | 0;\n        this.Gl = T256_IV[13] | 0;\n        this.Hh = T256_IV[14] | 0;\n        this.Hl = T256_IV[15] | 0;\n    }\n}\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */\nconst sha256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createHasher)(() => new SHA256());\n/** SHA2-224 hash function from RFC 4634 */\nconst sha224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createHasher)(() => new SHA224());\n/** SHA2-512 hash function from RFC 4634. */\nconst sha512 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createHasher)(() => new SHA512());\n/** SHA2-384 hash function from RFC 4634. */\nconst sha384 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createHasher)(() => new SHA384());\n/**\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nconst sha512_256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createHasher)(() => new SHA512_256());\n/**\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nconst sha512_224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createHasher)(() => new SHA512_224());\n//# sourceMappingURL=sha2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@noble/hashes/esm/sha2.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@noble/hashes/esm/sha256.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/sha256.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SHA224: () => (/* binding */ SHA224),\n/* harmony export */   SHA256: () => (/* binding */ SHA256),\n/* harmony export */   sha224: () => (/* binding */ sha224),\n/* harmony export */   sha256: () => (/* binding */ sha256)\n/* harmony export */ });\n/* harmony import */ var _sha2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sha2.js */ \"(app-pages-browser)/./node_modules/@noble/hashes/esm/sha2.js\");\n/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n * @deprecated\n */\n\n/** @deprecated Use import from `noble/hashes/sha2` module */\nconst SHA256 = _sha2_js__WEBPACK_IMPORTED_MODULE_0__.SHA256;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nconst sha256 = _sha2_js__WEBPACK_IMPORTED_MODULE_0__.sha256;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nconst SHA224 = _sha2_js__WEBPACK_IMPORTED_MODULE_0__.SHA224;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nconst sha224 = _sha2_js__WEBPACK_IMPORTED_MODULE_0__.sha224;\n//# sourceMappingURL=sha256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9zaGEyNTYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3RztBQUN4RztBQUNPLGVBQWUsNENBQU87QUFDN0I7QUFDTyxlQUFlLDRDQUFPO0FBQzdCO0FBQ08sZUFBZSw0Q0FBTztBQUM3QjtBQUNPLGVBQWUsNENBQU87QUFDN0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9EZXNrdG9wL2MycGEgdG9vbC9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vc2hhMjU2LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU0hBMi0yNTYgYS5rLmEuIHNoYTI1Ni4gSW4gSlMsIGl0IGlzIHRoZSBmYXN0ZXN0IGhhc2gsIGV2ZW4gZmFzdGVyIHRoYW4gQmxha2UzLlxuICpcbiAqIFRvIGJyZWFrIHNoYTI1NiB1c2luZyBiaXJ0aGRheSBhdHRhY2ssIGF0dGFja2VycyBuZWVkIHRvIHRyeSAyXjEyOCBoYXNoZXMuXG4gKiBCVEMgbmV0d29yayBpcyBkb2luZyAyXjcwIGhhc2hlcy9zZWMgKDJeOTUgaGFzaGVzL3llYXIpIGFzIHBlciAyMDI1LlxuICpcbiAqIENoZWNrIG91dCBbRklQUyAxODAtNF0oaHR0cHM6Ly9udmxwdWJzLm5pc3QuZ292L25pc3RwdWJzL0ZJUFMvTklTVC5GSVBTLjE4MC00LnBkZikuXG4gKiBAbW9kdWxlXG4gKiBAZGVwcmVjYXRlZFxuICovXG5pbXBvcnQgeyBTSEEyMjQgYXMgU0hBMjI0biwgc2hhMjI0IGFzIHNoYTIyNG4sIFNIQTI1NiBhcyBTSEEyNTZuLCBzaGEyNTYgYXMgc2hhMjU2biwgfSBmcm9tIFwiLi9zaGEyLmpzXCI7XG4vKiogQGRlcHJlY2F0ZWQgVXNlIGltcG9ydCBmcm9tIGBub2JsZS9oYXNoZXMvc2hhMmAgbW9kdWxlICovXG5leHBvcnQgY29uc3QgU0hBMjU2ID0gU0hBMjU2bjtcbi8qKiBAZGVwcmVjYXRlZCBVc2UgaW1wb3J0IGZyb20gYG5vYmxlL2hhc2hlcy9zaGEyYCBtb2R1bGUgKi9cbmV4cG9ydCBjb25zdCBzaGEyNTYgPSBzaGEyNTZuO1xuLyoqIEBkZXByZWNhdGVkIFVzZSBpbXBvcnQgZnJvbSBgbm9ibGUvaGFzaGVzL3NoYTJgIG1vZHVsZSAqL1xuZXhwb3J0IGNvbnN0IFNIQTIyNCA9IFNIQTIyNG47XG4vKiogQGRlcHJlY2F0ZWQgVXNlIGltcG9ydCBmcm9tIGBub2JsZS9oYXNoZXMvc2hhMmAgbW9kdWxlICovXG5leHBvcnQgY29uc3Qgc2hhMjI0ID0gc2hhMjI0bjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYTI1Ni5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@noble/hashes/esm/sha256.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@noble/hashes/esm/sha512.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/sha512.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SHA384: () => (/* binding */ SHA384),\n/* harmony export */   SHA512: () => (/* binding */ SHA512),\n/* harmony export */   SHA512_224: () => (/* binding */ SHA512_224),\n/* harmony export */   SHA512_256: () => (/* binding */ SHA512_256),\n/* harmony export */   sha384: () => (/* binding */ sha384),\n/* harmony export */   sha512: () => (/* binding */ sha512),\n/* harmony export */   sha512_224: () => (/* binding */ sha512_224),\n/* harmony export */   sha512_256: () => (/* binding */ sha512_256)\n/* harmony export */ });\n/* harmony import */ var _sha2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sha2.js */ \"(app-pages-browser)/./node_modules/@noble/hashes/esm/sha2.js\");\n/**\n * SHA2-512 a.k.a. sha512 and sha384. It is slower than sha256 in js because u64 operations are slow.\n *\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [the paper on truncated SHA512/256](https://eprint.iacr.org/2010/548.pdf).\n * @module\n * @deprecated\n */\n\n/** @deprecated Use import from `noble/hashes/sha2` module */\nconst SHA512 = _sha2_js__WEBPACK_IMPORTED_MODULE_0__.SHA512;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nconst sha512 = _sha2_js__WEBPACK_IMPORTED_MODULE_0__.sha512;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nconst SHA384 = _sha2_js__WEBPACK_IMPORTED_MODULE_0__.SHA384;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nconst sha384 = _sha2_js__WEBPACK_IMPORTED_MODULE_0__.sha384;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nconst SHA512_224 = _sha2_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_224;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nconst sha512_224 = _sha2_js__WEBPACK_IMPORTED_MODULE_0__.sha512_224;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nconst SHA512_256 = _sha2_js__WEBPACK_IMPORTED_MODULE_0__.SHA512_256;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nconst sha512_256 = _sha2_js__WEBPACK_IMPORTED_MODULE_0__.sha512_256;\n//# sourceMappingURL=sha512.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9zaGE1MTIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNvTjtBQUNwTjtBQUNPLGVBQWUsNENBQU87QUFDN0I7QUFDTyxlQUFlLDRDQUFPO0FBQzdCO0FBQ08sZUFBZSw0Q0FBTztBQUM3QjtBQUNPLGVBQWUsNENBQU87QUFDN0I7QUFDTyxtQkFBbUIsZ0RBQVc7QUFDckM7QUFDTyxtQkFBbUIsZ0RBQVc7QUFDckM7QUFDTyxtQkFBbUIsZ0RBQVc7QUFDckM7QUFDTyxtQkFBbUIsZ0RBQVc7QUFDckMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9EZXNrdG9wL2MycGEgdG9vbC9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vc2hhNTEyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU0hBMi01MTIgYS5rLmEuIHNoYTUxMiBhbmQgc2hhMzg0LiBJdCBpcyBzbG93ZXIgdGhhbiBzaGEyNTYgaW4ganMgYmVjYXVzZSB1NjQgb3BlcmF0aW9ucyBhcmUgc2xvdy5cbiAqXG4gKiBDaGVjayBvdXQgW1JGQyA0NjM0XShodHRwczovL2RhdGF0cmFja2VyLmlldGYub3JnL2RvYy9odG1sL3JmYzQ2MzQpIGFuZFxuICogW3RoZSBwYXBlciBvbiB0cnVuY2F0ZWQgU0hBNTEyLzI1Nl0oaHR0cHM6Ly9lcHJpbnQuaWFjci5vcmcvMjAxMC81NDgucGRmKS5cbiAqIEBtb2R1bGVcbiAqIEBkZXByZWNhdGVkXG4gKi9cbmltcG9ydCB7IFNIQTM4NCBhcyBTSEEzODRuLCBzaGEzODQgYXMgc2hhMzg0biwgc2hhNTEyXzIyNCBhcyBzaGE1MTJfMjI0biwgU0hBNTEyXzIyNCBhcyBTSEE1MTJfMjI0biwgc2hhNTEyXzI1NiBhcyBzaGE1MTJfMjU2biwgU0hBNTEyXzI1NiBhcyBTSEE1MTJfMjU2biwgU0hBNTEyIGFzIFNIQTUxMm4sIHNoYTUxMiBhcyBzaGE1MTJuLCB9IGZyb20gXCIuL3NoYTIuanNcIjtcbi8qKiBAZGVwcmVjYXRlZCBVc2UgaW1wb3J0IGZyb20gYG5vYmxlL2hhc2hlcy9zaGEyYCBtb2R1bGUgKi9cbmV4cG9ydCBjb25zdCBTSEE1MTIgPSBTSEE1MTJuO1xuLyoqIEBkZXByZWNhdGVkIFVzZSBpbXBvcnQgZnJvbSBgbm9ibGUvaGFzaGVzL3NoYTJgIG1vZHVsZSAqL1xuZXhwb3J0IGNvbnN0IHNoYTUxMiA9IHNoYTUxMm47XG4vKiogQGRlcHJlY2F0ZWQgVXNlIGltcG9ydCBmcm9tIGBub2JsZS9oYXNoZXMvc2hhMmAgbW9kdWxlICovXG5leHBvcnQgY29uc3QgU0hBMzg0ID0gU0hBMzg0bjtcbi8qKiBAZGVwcmVjYXRlZCBVc2UgaW1wb3J0IGZyb20gYG5vYmxlL2hhc2hlcy9zaGEyYCBtb2R1bGUgKi9cbmV4cG9ydCBjb25zdCBzaGEzODQgPSBzaGEzODRuO1xuLyoqIEBkZXByZWNhdGVkIFVzZSBpbXBvcnQgZnJvbSBgbm9ibGUvaGFzaGVzL3NoYTJgIG1vZHVsZSAqL1xuZXhwb3J0IGNvbnN0IFNIQTUxMl8yMjQgPSBTSEE1MTJfMjI0bjtcbi8qKiBAZGVwcmVjYXRlZCBVc2UgaW1wb3J0IGZyb20gYG5vYmxlL2hhc2hlcy9zaGEyYCBtb2R1bGUgKi9cbmV4cG9ydCBjb25zdCBzaGE1MTJfMjI0ID0gc2hhNTEyXzIyNG47XG4vKiogQGRlcHJlY2F0ZWQgVXNlIGltcG9ydCBmcm9tIGBub2JsZS9oYXNoZXMvc2hhMmAgbW9kdWxlICovXG5leHBvcnQgY29uc3QgU0hBNTEyXzI1NiA9IFNIQTUxMl8yNTZuO1xuLyoqIEBkZXByZWNhdGVkIFVzZSBpbXBvcnQgZnJvbSBgbm9ibGUvaGFzaGVzL3NoYTJgIG1vZHVsZSAqL1xuZXhwb3J0IGNvbnN0IHNoYTUxMl8yNTYgPSBzaGE1MTJfMjU2bjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYTUxMi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@noble/hashes/esm/sha512.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@noble/hashes/esm/utils.js":
/*!*************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/utils.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hash: () => (/* binding */ Hash),\n/* harmony export */   abytes: () => (/* binding */ abytes),\n/* harmony export */   aexists: () => (/* binding */ aexists),\n/* harmony export */   ahash: () => (/* binding */ ahash),\n/* harmony export */   anumber: () => (/* binding */ anumber),\n/* harmony export */   aoutput: () => (/* binding */ aoutput),\n/* harmony export */   asyncLoop: () => (/* binding */ asyncLoop),\n/* harmony export */   byteSwap: () => (/* binding */ byteSwap),\n/* harmony export */   byteSwap32: () => (/* binding */ byteSwap32),\n/* harmony export */   byteSwapIfBE: () => (/* binding */ byteSwapIfBE),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToUtf8: () => (/* binding */ bytesToUtf8),\n/* harmony export */   checkOpts: () => (/* binding */ checkOpts),\n/* harmony export */   clean: () => (/* binding */ clean),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createHasher: () => (/* binding */ createHasher),\n/* harmony export */   createOptHasher: () => (/* binding */ createOptHasher),\n/* harmony export */   createView: () => (/* binding */ createView),\n/* harmony export */   createXOFer: () => (/* binding */ createXOFer),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   isLE: () => (/* binding */ isLE),\n/* harmony export */   kdfInputToBytes: () => (/* binding */ kdfInputToBytes),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   rotl: () => (/* binding */ rotl),\n/* harmony export */   rotr: () => (/* binding */ rotr),\n/* harmony export */   swap32IfBE: () => (/* binding */ swap32IfBE),\n/* harmony export */   swap8IfBE: () => (/* binding */ swap8IfBE),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   u32: () => (/* binding */ u32),\n/* harmony export */   u8: () => (/* binding */ u8),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   wrapConstructor: () => (/* binding */ wrapConstructor),\n/* harmony export */   wrapConstructorWithOpts: () => (/* binding */ wrapConstructorWithOpts),\n/* harmony export */   wrapXOFConstructorWithOpts: () => (/* binding */ wrapXOFConstructorWithOpts)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/crypto */ \"(app-pages-browser)/./node_modules/@noble/hashes/esm/crypto.js\");\n/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\n\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nfunction isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is positive integer. */\nfunction anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n/** Asserts something is Uint8Array. */\nfunction abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n/** Asserts something is hash */\nfunction ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.createHasher');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */\nfunction aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */\nfunction aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\n/** Cast u8 / u16 / u32 to u8. */\nfunction u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** Cast u8 / u16 / u32 to u32. */\nfunction u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nfunction clean(...arrays) {\n    for (let i = 0; i < arrays.length; i++) {\n        arrays[i].fill(0);\n    }\n}\n/** Create DataView of an array for easy byte-level manipulation. */\nfunction createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** The rotate right (circular right shift) operation for uint32 */\nfunction rotr(word, shift) {\n    return (word << (32 - shift)) | (word >>> shift);\n}\n/** The rotate left (circular left shift) operation for uint32 */\nfunction rotl(word, shift) {\n    return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nconst isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n/** The byte swap operation for uint32 */\nfunction byteSwap(word) {\n    return (((word << 24) & 0xff000000) |\n        ((word << 8) & 0xff0000) |\n        ((word >>> 8) & 0xff00) |\n        ((word >>> 24) & 0xff));\n}\n/** Conditionally byte swap if on a big-endian platform */\nconst swap8IfBE = isLE\n    ? (n) => n\n    : (n) => byteSwap(n);\n/** @deprecated */\nconst byteSwapIfBE = swap8IfBE;\n/** In place byte swap for Uint32Array */\nfunction byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n    return arr;\n}\nconst swap32IfBE = isLE\n    ? (u) => u\n    : byteSwap32;\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin = /* @__PURE__ */ (() => \n// @ts-ignore\ntypeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    abytes(bytes);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return bytes.toHex();\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return Uint8Array.fromHex(hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nconst nextTick = async () => { };\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\nfunction bytesToUtf8(bytes) {\n    return new TextDecoder().decode(bytes);\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Helper for KDFs: consumes uint8array or string.\n * When string is passed, does utf8 decoding, using TextDecoder.\n */\nfunction kdfInputToBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/** Copies several Uint8Arrays into one. */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n        throw new Error('options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** For runtime check if class implements interface */\nclass Hash {\n}\n/** Wraps hash function, creating an interface on top of it */\nfunction createHasher(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nfunction createOptHasher(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nfunction createXOFer(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nconst wrapConstructor = createHasher;\nconst wrapConstructorWithOpts = createOptHasher;\nconst wrapXOFConstructorWithOpts = createXOFer;\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nfunction randomBytes(bytesLength = 32) {\n    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues === 'function') {\n        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.randomBytes === 'function') {\n        return Uint8Array.from(_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_0__.crypto.randomBytes(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@noble/hashes/esm/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@swc/helpers/esm/_tagged_template_literal.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@swc/helpers/esm/_tagged_template_literal.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: () => (/* binding */ _tagged_template_literal)\n/* harmony export */ });\nfunction _tagged_template_literal(strings, raw) {\n    if (!raw) raw = strings.slice(0);\n\n    return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvZXNtL190YWdnZWRfdGVtcGxhdGVfbGl0ZXJhbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTs7QUFFQSw0REFBNEQsT0FBTyw2QkFBNkI7QUFDaEc7QUFDeUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9EZXNrdG9wL2MycGEgdG9vbC9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2VzbS9fdGFnZ2VkX3RlbXBsYXRlX2xpdGVyYWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX3RhZ2dlZF90ZW1wbGF0ZV9saXRlcmFsKHN0cmluZ3MsIHJhdykge1xuICAgIGlmICghcmF3KSByYXcgPSBzdHJpbmdzLnNsaWNlKDApO1xuXG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc3RyaW5ncywgeyByYXc6IHsgdmFsdWU6IE9iamVjdC5mcmVlemUocmF3KSB9IH0pKTtcbn1cbmV4cG9ydCB7IF90YWdnZWRfdGVtcGxhdGVfbGl0ZXJhbCBhcyBfIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@swc/helpers/esm/_tagged_template_literal.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/asn1js/build/index.es.js":
/*!***********************************************!*\
  !*** ./node_modules/asn1js/build/index.es.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Any: () => (/* binding */ Any),\n/* harmony export */   BaseBlock: () => (/* binding */ BaseBlock),\n/* harmony export */   BaseStringBlock: () => (/* binding */ BaseStringBlock),\n/* harmony export */   BitString: () => (/* binding */ BitString),\n/* harmony export */   BmpString: () => (/* binding */ BmpString),\n/* harmony export */   Boolean: () => (/* binding */ Boolean),\n/* harmony export */   CharacterString: () => (/* binding */ CharacterString),\n/* harmony export */   Choice: () => (/* binding */ Choice),\n/* harmony export */   Constructed: () => (/* binding */ Constructed),\n/* harmony export */   DATE: () => (/* binding */ DATE),\n/* harmony export */   DateTime: () => (/* binding */ DateTime),\n/* harmony export */   Duration: () => (/* binding */ Duration),\n/* harmony export */   EndOfContent: () => (/* binding */ EndOfContent),\n/* harmony export */   Enumerated: () => (/* binding */ Enumerated),\n/* harmony export */   GeneralString: () => (/* binding */ GeneralString),\n/* harmony export */   GeneralizedTime: () => (/* binding */ GeneralizedTime),\n/* harmony export */   GraphicString: () => (/* binding */ GraphicString),\n/* harmony export */   HexBlock: () => (/* binding */ HexBlock),\n/* harmony export */   IA5String: () => (/* binding */ IA5String),\n/* harmony export */   Integer: () => (/* binding */ Integer),\n/* harmony export */   Null: () => (/* binding */ Null),\n/* harmony export */   NumericString: () => (/* binding */ NumericString),\n/* harmony export */   ObjectIdentifier: () => (/* binding */ ObjectIdentifier),\n/* harmony export */   OctetString: () => (/* binding */ OctetString),\n/* harmony export */   Primitive: () => (/* binding */ Primitive),\n/* harmony export */   PrintableString: () => (/* binding */ PrintableString),\n/* harmony export */   RawData: () => (/* binding */ RawData),\n/* harmony export */   RelativeObjectIdentifier: () => (/* binding */ RelativeObjectIdentifier),\n/* harmony export */   Repeated: () => (/* binding */ Repeated),\n/* harmony export */   Sequence: () => (/* binding */ Sequence),\n/* harmony export */   Set: () => (/* binding */ Set),\n/* harmony export */   TIME: () => (/* binding */ TIME),\n/* harmony export */   TeletexString: () => (/* binding */ TeletexString),\n/* harmony export */   TimeOfDay: () => (/* binding */ TimeOfDay),\n/* harmony export */   UTCTime: () => (/* binding */ UTCTime),\n/* harmony export */   UniversalString: () => (/* binding */ UniversalString),\n/* harmony export */   Utf8String: () => (/* binding */ Utf8String),\n/* harmony export */   ValueBlock: () => (/* binding */ ValueBlock),\n/* harmony export */   VideotexString: () => (/* binding */ VideotexString),\n/* harmony export */   ViewWriter: () => (/* binding */ ViewWriter),\n/* harmony export */   VisibleString: () => (/* binding */ VisibleString),\n/* harmony export */   compareSchema: () => (/* binding */ compareSchema),\n/* harmony export */   fromBER: () => (/* binding */ fromBER),\n/* harmony export */   verifySchema: () => (/* binding */ verifySchema)\n/* harmony export */ });\n/* harmony import */ var pvtsutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pvtsutils */ \"(app-pages-browser)/./node_modules/pvtsutils/build/index.js\");\n/* harmony import */ var pvutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pvutils */ \"(app-pages-browser)/./node_modules/pvutils/build/utils.es.js\");\n/*!\n * Copyright (c) 2014, GMO GlobalSign\n * Copyright (c) 2015-2022, Peculiar Ventures\n * All rights reserved.\n * \n * Author 2014-2019, Yury Strozhevsky\n * \n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * \n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n * \n * * Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n * \n * * Neither the name of the copyright holder nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n * \n */\n\n\n\n\nfunction assertBigInt() {\n    if (typeof BigInt === \"undefined\") {\n        throw new Error(\"BigInt is not defined. Your environment doesn't implement BigInt.\");\n    }\n}\nfunction concat(buffers) {\n    let outputLength = 0;\n    let prevLength = 0;\n    for (let i = 0; i < buffers.length; i++) {\n        const buffer = buffers[i];\n        outputLength += buffer.byteLength;\n    }\n    const retView = new Uint8Array(outputLength);\n    for (let i = 0; i < buffers.length; i++) {\n        const buffer = buffers[i];\n        retView.set(new Uint8Array(buffer), prevLength);\n        prevLength += buffer.byteLength;\n    }\n    return retView.buffer;\n}\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\n    if (!(inputBuffer instanceof Uint8Array)) {\n        baseBlock.error = \"Wrong parameter: inputBuffer must be 'Uint8Array'\";\n        return false;\n    }\n    if (!inputBuffer.byteLength) {\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\n        return false;\n    }\n    if (inputOffset < 0) {\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\n        return false;\n    }\n    if (inputLength < 0) {\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\n        return false;\n    }\n    if ((inputBuffer.byteLength - inputOffset - inputLength) < 0) {\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\n        return false;\n    }\n    return true;\n}\n\nclass ViewWriter {\n    constructor() {\n        this.items = [];\n    }\n    write(buf) {\n        this.items.push(buf);\n    }\n    final() {\n        return concat(this.items);\n    }\n}\n\nconst powers2 = [new Uint8Array([1])];\nconst digitsString = \"0123456789\";\nconst NAME = \"name\";\nconst VALUE_HEX_VIEW = \"valueHexView\";\nconst IS_HEX_ONLY = \"isHexOnly\";\nconst ID_BLOCK = \"idBlock\";\nconst TAG_CLASS = \"tagClass\";\nconst TAG_NUMBER = \"tagNumber\";\nconst IS_CONSTRUCTED = \"isConstructed\";\nconst FROM_BER = \"fromBER\";\nconst TO_BER = \"toBER\";\nconst LOCAL = \"local\";\nconst EMPTY_STRING = \"\";\nconst EMPTY_BUFFER = new ArrayBuffer(0);\nconst EMPTY_VIEW = new Uint8Array(0);\nconst END_OF_CONTENT_NAME = \"EndOfContent\";\nconst OCTET_STRING_NAME = \"OCTET STRING\";\nconst BIT_STRING_NAME = \"BIT STRING\";\n\nfunction HexBlock(BaseClass) {\n    var _a;\n    return _a = class Some extends BaseClass {\n            get valueHex() {\n                return this.valueHexView.slice().buffer;\n            }\n            set valueHex(value) {\n                this.valueHexView = new Uint8Array(value);\n            }\n            constructor(...args) {\n                var _b;\n                super(...args);\n                const params = args[0] || {};\n                this.isHexOnly = (_b = params.isHexOnly) !== null && _b !== void 0 ? _b : false;\n                this.valueHexView = params.valueHex ? pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(params.valueHex) : EMPTY_VIEW;\n            }\n            fromBER(inputBuffer, inputOffset, inputLength) {\n                const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\n                if (!checkBufferParams(this, view, inputOffset, inputLength)) {\n                    return -1;\n                }\n                const endLength = inputOffset + inputLength;\n                this.valueHexView = view.subarray(inputOffset, endLength);\n                if (!this.valueHexView.length) {\n                    this.warnings.push(\"Zero buffer length\");\n                    return inputOffset;\n                }\n                this.blockLength = inputLength;\n                return endLength;\n            }\n            toBER(sizeOnly = false) {\n                if (!this.isHexOnly) {\n                    this.error = \"Flag 'isHexOnly' is not set, abort\";\n                    return EMPTY_BUFFER;\n                }\n                if (sizeOnly) {\n                    return new ArrayBuffer(this.valueHexView.byteLength);\n                }\n                return (this.valueHexView.byteLength === this.valueHexView.buffer.byteLength)\n                    ? this.valueHexView.buffer\n                    : this.valueHexView.slice().buffer;\n            }\n            toJSON() {\n                return {\n                    ...super.toJSON(),\n                    isHexOnly: this.isHexOnly,\n                    valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.valueHexView),\n                };\n            }\n        },\n        _a.NAME = \"hexBlock\",\n        _a;\n}\n\nclass LocalBaseBlock {\n    static blockName() {\n        return this.NAME;\n    }\n    get valueBeforeDecode() {\n        return this.valueBeforeDecodeView.slice().buffer;\n    }\n    set valueBeforeDecode(value) {\n        this.valueBeforeDecodeView = new Uint8Array(value);\n    }\n    constructor({ blockLength = 0, error = EMPTY_STRING, warnings = [], valueBeforeDecode = EMPTY_VIEW, } = {}) {\n        this.blockLength = blockLength;\n        this.error = error;\n        this.warnings = warnings;\n        this.valueBeforeDecodeView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(valueBeforeDecode);\n    }\n    toJSON() {\n        return {\n            blockName: this.constructor.NAME,\n            blockLength: this.blockLength,\n            error: this.error,\n            warnings: this.warnings,\n            valueBeforeDecode: pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.valueBeforeDecodeView),\n        };\n    }\n}\nLocalBaseBlock.NAME = \"baseBlock\";\n\nclass ValueBlock extends LocalBaseBlock {\n    fromBER(_inputBuffer, _inputOffset, _inputLength) {\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\n    }\n    toBER(_sizeOnly, _writer) {\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\n    }\n}\nValueBlock.NAME = \"valueBlock\";\n\nclass LocalIdentificationBlock extends HexBlock(LocalBaseBlock) {\n    constructor({ idBlock = {} } = {}) {\n        var _a, _b, _c, _d;\n        super();\n        if (idBlock) {\n            this.isHexOnly = (_a = idBlock.isHexOnly) !== null && _a !== void 0 ? _a : false;\n            this.valueHexView = idBlock.valueHex\n                ? pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(idBlock.valueHex)\n                : EMPTY_VIEW;\n            this.tagClass = (_b = idBlock.tagClass) !== null && _b !== void 0 ? _b : -1;\n            this.tagNumber = (_c = idBlock.tagNumber) !== null && _c !== void 0 ? _c : -1;\n            this.isConstructed = (_d = idBlock.isConstructed) !== null && _d !== void 0 ? _d : false;\n        }\n        else {\n            this.tagClass = -1;\n            this.tagNumber = -1;\n            this.isConstructed = false;\n        }\n    }\n    toBER(sizeOnly = false) {\n        let firstOctet = 0;\n        switch (this.tagClass) {\n            case 1:\n                firstOctet |= 0x00;\n                break;\n            case 2:\n                firstOctet |= 0x40;\n                break;\n            case 3:\n                firstOctet |= 0x80;\n                break;\n            case 4:\n                firstOctet |= 0xC0;\n                break;\n            default:\n                this.error = \"Unknown tag class\";\n                return EMPTY_BUFFER;\n        }\n        if (this.isConstructed)\n            firstOctet |= 0x20;\n        if (this.tagNumber < 31 && !this.isHexOnly) {\n            const retView = new Uint8Array(1);\n            if (!sizeOnly) {\n                let number = this.tagNumber;\n                number &= 0x1F;\n                firstOctet |= number;\n                retView[0] = firstOctet;\n            }\n            return retView.buffer;\n        }\n        if (!this.isHexOnly) {\n            const encodedBuf = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilToBase(this.tagNumber, 7);\n            const encodedView = new Uint8Array(encodedBuf);\n            const size = encodedBuf.byteLength;\n            const retView = new Uint8Array(size + 1);\n            retView[0] = (firstOctet | 0x1F);\n            if (!sizeOnly) {\n                for (let i = 0; i < (size - 1); i++)\n                    retView[i + 1] = encodedView[i] | 0x80;\n                retView[size] = encodedView[size - 1];\n            }\n            return retView.buffer;\n        }\n        const retView = new Uint8Array(this.valueHexView.byteLength + 1);\n        retView[0] = (firstOctet | 0x1F);\n        if (!sizeOnly) {\n            const curView = this.valueHexView;\n            for (let i = 0; i < (curView.length - 1); i++)\n                retView[i + 1] = curView[i] | 0x80;\n            retView[this.valueHexView.byteLength] = curView[curView.length - 1];\n        }\n        return retView.buffer;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const inputView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        if (intBuffer.length === 0) {\n            this.error = \"Zero buffer length\";\n            return -1;\n        }\n        const tagClassMask = intBuffer[0] & 0xC0;\n        switch (tagClassMask) {\n            case 0x00:\n                this.tagClass = (1);\n                break;\n            case 0x40:\n                this.tagClass = (2);\n                break;\n            case 0x80:\n                this.tagClass = (3);\n                break;\n            case 0xC0:\n                this.tagClass = (4);\n                break;\n            default:\n                this.error = \"Unknown tag class\";\n                return -1;\n        }\n        this.isConstructed = (intBuffer[0] & 0x20) === 0x20;\n        this.isHexOnly = false;\n        const tagNumberMask = intBuffer[0] & 0x1F;\n        if (tagNumberMask !== 0x1F) {\n            this.tagNumber = (tagNumberMask);\n            this.blockLength = 1;\n        }\n        else {\n            let count = 1;\n            let intTagNumberBuffer = this.valueHexView = new Uint8Array(255);\n            let tagNumberBufferMaxLength = 255;\n            while (intBuffer[count] & 0x80) {\n                intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\n                count++;\n                if (count >= intBuffer.length) {\n                    this.error = \"End of input reached before message was fully decoded\";\n                    return -1;\n                }\n                if (count === tagNumberBufferMaxLength) {\n                    tagNumberBufferMaxLength += 255;\n                    const tempBufferView = new Uint8Array(tagNumberBufferMaxLength);\n                    for (let i = 0; i < intTagNumberBuffer.length; i++)\n                        tempBufferView[i] = intTagNumberBuffer[i];\n                    intTagNumberBuffer = this.valueHexView = new Uint8Array(tagNumberBufferMaxLength);\n                }\n            }\n            this.blockLength = (count + 1);\n            intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\n            const tempBufferView = new Uint8Array(count);\n            for (let i = 0; i < count; i++)\n                tempBufferView[i] = intTagNumberBuffer[i];\n            intTagNumberBuffer = this.valueHexView = new Uint8Array(count);\n            intTagNumberBuffer.set(tempBufferView);\n            if (this.blockLength <= 9)\n                this.tagNumber = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilFromBase(intTagNumberBuffer, 7);\n            else {\n                this.isHexOnly = true;\n                this.warnings.push(\"Tag too long, represented as hex-coded\");\n            }\n        }\n        if (((this.tagClass === 1))\n            && (this.isConstructed)) {\n            switch (this.tagNumber) {\n                case 1:\n                case 2:\n                case 5:\n                case 6:\n                case 9:\n                case 13:\n                case 14:\n                case 23:\n                case 24:\n                case 31:\n                case 32:\n                case 33:\n                case 34:\n                    this.error = \"Constructed encoding used for primitive type\";\n                    return -1;\n            }\n        }\n        return (inputOffset + this.blockLength);\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            tagClass: this.tagClass,\n            tagNumber: this.tagNumber,\n            isConstructed: this.isConstructed,\n        };\n    }\n}\nLocalIdentificationBlock.NAME = \"identificationBlock\";\n\nclass LocalLengthBlock extends LocalBaseBlock {\n    constructor({ lenBlock = {} } = {}) {\n        var _a, _b, _c;\n        super();\n        this.isIndefiniteForm = (_a = lenBlock.isIndefiniteForm) !== null && _a !== void 0 ? _a : false;\n        this.longFormUsed = (_b = lenBlock.longFormUsed) !== null && _b !== void 0 ? _b : false;\n        this.length = (_c = lenBlock.length) !== null && _c !== void 0 ? _c : 0;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const view = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = view.subarray(inputOffset, inputOffset + inputLength);\n        if (intBuffer.length === 0) {\n            this.error = \"Zero buffer length\";\n            return -1;\n        }\n        if (intBuffer[0] === 0xFF) {\n            this.error = \"Length block 0xFF is reserved by standard\";\n            return -1;\n        }\n        this.isIndefiniteForm = intBuffer[0] === 0x80;\n        if (this.isIndefiniteForm) {\n            this.blockLength = 1;\n            return (inputOffset + this.blockLength);\n        }\n        this.longFormUsed = !!(intBuffer[0] & 0x80);\n        if (this.longFormUsed === false) {\n            this.length = (intBuffer[0]);\n            this.blockLength = 1;\n            return (inputOffset + this.blockLength);\n        }\n        const count = intBuffer[0] & 0x7F;\n        if (count > 8) {\n            this.error = \"Too big integer\";\n            return -1;\n        }\n        if ((count + 1) > intBuffer.length) {\n            this.error = \"End of input reached before message was fully decoded\";\n            return -1;\n        }\n        const lenOffset = inputOffset + 1;\n        const lengthBufferView = view.subarray(lenOffset, lenOffset + count);\n        if (lengthBufferView[count - 1] === 0x00)\n            this.warnings.push(\"Needlessly long encoded length\");\n        this.length = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilFromBase(lengthBufferView, 8);\n        if (this.longFormUsed && (this.length <= 127))\n            this.warnings.push(\"Unnecessary usage of long length form\");\n        this.blockLength = count + 1;\n        return (inputOffset + this.blockLength);\n    }\n    toBER(sizeOnly = false) {\n        let retBuf;\n        let retView;\n        if (this.length > 127)\n            this.longFormUsed = true;\n        if (this.isIndefiniteForm) {\n            retBuf = new ArrayBuffer(1);\n            if (sizeOnly === false) {\n                retView = new Uint8Array(retBuf);\n                retView[0] = 0x80;\n            }\n            return retBuf;\n        }\n        if (this.longFormUsed) {\n            const encodedBuf = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilToBase(this.length, 8);\n            if (encodedBuf.byteLength > 127) {\n                this.error = \"Too big length\";\n                return (EMPTY_BUFFER);\n            }\n            retBuf = new ArrayBuffer(encodedBuf.byteLength + 1);\n            if (sizeOnly)\n                return retBuf;\n            const encodedView = new Uint8Array(encodedBuf);\n            retView = new Uint8Array(retBuf);\n            retView[0] = encodedBuf.byteLength | 0x80;\n            for (let i = 0; i < encodedBuf.byteLength; i++)\n                retView[i + 1] = encodedView[i];\n            return retBuf;\n        }\n        retBuf = new ArrayBuffer(1);\n        if (sizeOnly === false) {\n            retView = new Uint8Array(retBuf);\n            retView[0] = this.length;\n        }\n        return retBuf;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            isIndefiniteForm: this.isIndefiniteForm,\n            longFormUsed: this.longFormUsed,\n            length: this.length,\n        };\n    }\n}\nLocalLengthBlock.NAME = \"lengthBlock\";\n\nconst typeStore = {};\n\nclass BaseBlock extends LocalBaseBlock {\n    constructor({ name = EMPTY_STRING, optional = false, primitiveSchema, ...parameters } = {}, valueBlockType) {\n        super(parameters);\n        this.name = name;\n        this.optional = optional;\n        if (primitiveSchema) {\n            this.primitiveSchema = primitiveSchema;\n        }\n        this.idBlock = new LocalIdentificationBlock(parameters);\n        this.lenBlock = new LocalLengthBlock(parameters);\n        this.valueBlock = valueBlockType ? new valueBlockType(parameters) : new ValueBlock(parameters);\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm)\n            ? inputLength\n            : this.lenBlock.length);\n        if (resultOffset === -1) {\n            this.error = this.valueBlock.error;\n            return resultOffset;\n        }\n        if (!this.idBlock.error.length)\n            this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length)\n            this.blockLength += this.lenBlock.blockLength;\n        if (!this.valueBlock.error.length)\n            this.blockLength += this.valueBlock.blockLength;\n        return resultOffset;\n    }\n    toBER(sizeOnly, writer) {\n        const _writer = writer || new ViewWriter();\n        if (!writer) {\n            prepareIndefiniteForm(this);\n        }\n        const idBlockBuf = this.idBlock.toBER(sizeOnly);\n        _writer.write(idBlockBuf);\n        if (this.lenBlock.isIndefiniteForm) {\n            _writer.write(new Uint8Array([0x80]).buffer);\n            this.valueBlock.toBER(sizeOnly, _writer);\n            _writer.write(new ArrayBuffer(2));\n        }\n        else {\n            const valueBlockBuf = this.valueBlock.toBER(sizeOnly);\n            this.lenBlock.length = valueBlockBuf.byteLength;\n            const lenBlockBuf = this.lenBlock.toBER(sizeOnly);\n            _writer.write(lenBlockBuf);\n            _writer.write(valueBlockBuf);\n        }\n        if (!writer) {\n            return _writer.final();\n        }\n        return EMPTY_BUFFER;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            idBlock: this.idBlock.toJSON(),\n            lenBlock: this.lenBlock.toJSON(),\n            valueBlock: this.valueBlock.toJSON(),\n            name: this.name,\n            optional: this.optional,\n        };\n        if (this.primitiveSchema)\n            object.primitiveSchema = this.primitiveSchema.toJSON();\n        return object;\n    }\n    toString(encoding = \"ascii\") {\n        if (encoding === \"ascii\") {\n            return this.onAsciiEncoding();\n        }\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.toBER());\n    }\n    onAsciiEncoding() {\n        const name = this.constructor.NAME;\n        const value = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.valueBlock.valueBeforeDecodeView);\n        return `${name} : ${value}`;\n    }\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof this.constructor)) {\n            return false;\n        }\n        const thisRaw = this.toBER();\n        const otherRaw = other.toBER();\n        return pvutils__WEBPACK_IMPORTED_MODULE_1__.isEqualBuffer(thisRaw, otherRaw);\n    }\n}\nBaseBlock.NAME = \"BaseBlock\";\nfunction prepareIndefiniteForm(baseBlock) {\n    var _a;\n    if (baseBlock instanceof typeStore.Constructed) {\n        for (const value of baseBlock.valueBlock.value) {\n            if (prepareIndefiniteForm(value)) {\n                baseBlock.lenBlock.isIndefiniteForm = true;\n            }\n        }\n    }\n    return !!((_a = baseBlock.lenBlock) === null || _a === void 0 ? void 0 : _a.isIndefiniteForm);\n}\n\nclass BaseStringBlock extends BaseBlock {\n    getValue() {\n        return this.valueBlock.value;\n    }\n    setValue(value) {\n        this.valueBlock.value = value;\n    }\n    constructor({ value = EMPTY_STRING, ...parameters } = {}, stringValueBlockType) {\n        super(parameters, stringValueBlockType);\n        if (value) {\n            this.fromString(value);\n        }\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm)\n            ? inputLength\n            : this.lenBlock.length);\n        if (resultOffset === -1) {\n            this.error = this.valueBlock.error;\n            return resultOffset;\n        }\n        this.fromBuffer(this.valueBlock.valueHexView);\n        if (!this.idBlock.error.length)\n            this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length)\n            this.blockLength += this.lenBlock.blockLength;\n        if (!this.valueBlock.error.length)\n            this.blockLength += this.valueBlock.blockLength;\n        return resultOffset;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : '${this.valueBlock.value}'`;\n    }\n}\nBaseStringBlock.NAME = \"BaseStringBlock\";\n\nclass LocalPrimitiveValueBlock extends HexBlock(ValueBlock) {\n    constructor({ isHexOnly = true, ...parameters } = {}) {\n        super(parameters);\n        this.isHexOnly = isHexOnly;\n    }\n}\nLocalPrimitiveValueBlock.NAME = \"PrimitiveValueBlock\";\n\nvar _a$w;\nclass Primitive extends BaseBlock {\n    constructor(parameters = {}) {\n        super(parameters, LocalPrimitiveValueBlock);\n        this.idBlock.isConstructed = false;\n    }\n}\n_a$w = Primitive;\n(() => {\n    typeStore.Primitive = _a$w;\n})();\nPrimitive.NAME = \"PRIMITIVE\";\n\nfunction localChangeType(inputObject, newType) {\n    if (inputObject instanceof newType) {\n        return inputObject;\n    }\n    const newObject = new newType();\n    newObject.idBlock = inputObject.idBlock;\n    newObject.lenBlock = inputObject.lenBlock;\n    newObject.warnings = inputObject.warnings;\n    newObject.valueBeforeDecodeView = inputObject.valueBeforeDecodeView;\n    return newObject;\n}\nfunction localFromBER(inputBuffer, inputOffset = 0, inputLength = inputBuffer.length) {\n    const incomingOffset = inputOffset;\n    let returnObject = new BaseBlock({}, ValueBlock);\n    const baseBlock = new LocalBaseBlock();\n    if (!checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength)) {\n        returnObject.error = baseBlock.error;\n        return {\n            offset: -1,\n            result: returnObject,\n        };\n    }\n    const intBuffer = inputBuffer.subarray(inputOffset, inputOffset + inputLength);\n    if (!intBuffer.length) {\n        returnObject.error = \"Zero buffer length\";\n        return {\n            offset: -1,\n            result: returnObject,\n        };\n    }\n    let resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);\n    if (returnObject.idBlock.warnings.length) {\n        returnObject.warnings.concat(returnObject.idBlock.warnings);\n    }\n    if (resultOffset === -1) {\n        returnObject.error = returnObject.idBlock.error;\n        return {\n            offset: -1,\n            result: returnObject,\n        };\n    }\n    inputOffset = resultOffset;\n    inputLength -= returnObject.idBlock.blockLength;\n    resultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);\n    if (returnObject.lenBlock.warnings.length) {\n        returnObject.warnings.concat(returnObject.lenBlock.warnings);\n    }\n    if (resultOffset === -1) {\n        returnObject.error = returnObject.lenBlock.error;\n        return {\n            offset: -1,\n            result: returnObject,\n        };\n    }\n    inputOffset = resultOffset;\n    inputLength -= returnObject.lenBlock.blockLength;\n    if (!returnObject.idBlock.isConstructed\n        && returnObject.lenBlock.isIndefiniteForm) {\n        returnObject.error = \"Indefinite length form used for primitive encoding form\";\n        return {\n            offset: -1,\n            result: returnObject,\n        };\n    }\n    let newASN1Type = BaseBlock;\n    switch (returnObject.idBlock.tagClass) {\n        case 1:\n            if ((returnObject.idBlock.tagNumber >= 37)\n                && (returnObject.idBlock.isHexOnly === false)) {\n                returnObject.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\n                return {\n                    offset: -1,\n                    result: returnObject,\n                };\n            }\n            switch (returnObject.idBlock.tagNumber) {\n                case 0:\n                    if ((returnObject.idBlock.isConstructed)\n                        && (returnObject.lenBlock.length > 0)) {\n                        returnObject.error = \"Type [UNIVERSAL 0] is reserved\";\n                        return {\n                            offset: -1,\n                            result: returnObject,\n                        };\n                    }\n                    newASN1Type = typeStore.EndOfContent;\n                    break;\n                case 1:\n                    newASN1Type = typeStore.Boolean;\n                    break;\n                case 2:\n                    newASN1Type = typeStore.Integer;\n                    break;\n                case 3:\n                    newASN1Type = typeStore.BitString;\n                    break;\n                case 4:\n                    newASN1Type = typeStore.OctetString;\n                    break;\n                case 5:\n                    newASN1Type = typeStore.Null;\n                    break;\n                case 6:\n                    newASN1Type = typeStore.ObjectIdentifier;\n                    break;\n                case 10:\n                    newASN1Type = typeStore.Enumerated;\n                    break;\n                case 12:\n                    newASN1Type = typeStore.Utf8String;\n                    break;\n                case 13:\n                    newASN1Type = typeStore.RelativeObjectIdentifier;\n                    break;\n                case 14:\n                    newASN1Type = typeStore.TIME;\n                    break;\n                case 15:\n                    returnObject.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\n                    return {\n                        offset: -1,\n                        result: returnObject,\n                    };\n                case 16:\n                    newASN1Type = typeStore.Sequence;\n                    break;\n                case 17:\n                    newASN1Type = typeStore.Set;\n                    break;\n                case 18:\n                    newASN1Type = typeStore.NumericString;\n                    break;\n                case 19:\n                    newASN1Type = typeStore.PrintableString;\n                    break;\n                case 20:\n                    newASN1Type = typeStore.TeletexString;\n                    break;\n                case 21:\n                    newASN1Type = typeStore.VideotexString;\n                    break;\n                case 22:\n                    newASN1Type = typeStore.IA5String;\n                    break;\n                case 23:\n                    newASN1Type = typeStore.UTCTime;\n                    break;\n                case 24:\n                    newASN1Type = typeStore.GeneralizedTime;\n                    break;\n                case 25:\n                    newASN1Type = typeStore.GraphicString;\n                    break;\n                case 26:\n                    newASN1Type = typeStore.VisibleString;\n                    break;\n                case 27:\n                    newASN1Type = typeStore.GeneralString;\n                    break;\n                case 28:\n                    newASN1Type = typeStore.UniversalString;\n                    break;\n                case 29:\n                    newASN1Type = typeStore.CharacterString;\n                    break;\n                case 30:\n                    newASN1Type = typeStore.BmpString;\n                    break;\n                case 31:\n                    newASN1Type = typeStore.DATE;\n                    break;\n                case 32:\n                    newASN1Type = typeStore.TimeOfDay;\n                    break;\n                case 33:\n                    newASN1Type = typeStore.DateTime;\n                    break;\n                case 34:\n                    newASN1Type = typeStore.Duration;\n                    break;\n                default: {\n                    const newObject = returnObject.idBlock.isConstructed\n                        ? new typeStore.Constructed()\n                        : new typeStore.Primitive();\n                    newObject.idBlock = returnObject.idBlock;\n                    newObject.lenBlock = returnObject.lenBlock;\n                    newObject.warnings = returnObject.warnings;\n                    returnObject = newObject;\n                }\n            }\n            break;\n        case 2:\n        case 3:\n        case 4:\n        default: {\n            newASN1Type = returnObject.idBlock.isConstructed\n                ? typeStore.Constructed\n                : typeStore.Primitive;\n        }\n    }\n    returnObject = localChangeType(returnObject, newASN1Type);\n    resultOffset = returnObject.fromBER(inputBuffer, inputOffset, returnObject.lenBlock.isIndefiniteForm ? inputLength : returnObject.lenBlock.length);\n    returnObject.valueBeforeDecodeView = inputBuffer.subarray(incomingOffset, incomingOffset + returnObject.blockLength);\n    return {\n        offset: resultOffset,\n        result: returnObject,\n    };\n}\nfunction fromBER(inputBuffer) {\n    if (!inputBuffer.byteLength) {\n        const result = new BaseBlock({}, ValueBlock);\n        result.error = \"Input buffer has zero length\";\n        return {\n            offset: -1,\n            result,\n        };\n    }\n    return localFromBER(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer).slice(), 0, inputBuffer.byteLength);\n}\n\nfunction checkLen(indefiniteLength, length) {\n    if (indefiniteLength) {\n        return 1;\n    }\n    return length;\n}\nclass LocalConstructedValueBlock extends ValueBlock {\n    constructor({ value = [], isIndefiniteForm = false, ...parameters } = {}) {\n        super(parameters);\n        this.value = value;\n        this.isIndefiniteForm = isIndefiniteForm;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const view = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\n            return -1;\n        }\n        this.valueBeforeDecodeView = view.subarray(inputOffset, inputOffset + inputLength);\n        if (this.valueBeforeDecodeView.length === 0) {\n            this.warnings.push(\"Zero buffer length\");\n            return inputOffset;\n        }\n        let currentOffset = inputOffset;\n        while (checkLen(this.isIndefiniteForm, inputLength) > 0) {\n            const returnObject = localFromBER(view, currentOffset, inputLength);\n            if (returnObject.offset === -1) {\n                this.error = returnObject.result.error;\n                this.warnings.concat(returnObject.result.warnings);\n                return -1;\n            }\n            currentOffset = returnObject.offset;\n            this.blockLength += returnObject.result.blockLength;\n            inputLength -= returnObject.result.blockLength;\n            this.value.push(returnObject.result);\n            if (this.isIndefiniteForm && returnObject.result.constructor.NAME === END_OF_CONTENT_NAME) {\n                break;\n            }\n        }\n        if (this.isIndefiniteForm) {\n            if (this.value[this.value.length - 1].constructor.NAME === END_OF_CONTENT_NAME) {\n                this.value.pop();\n            }\n            else {\n                this.warnings.push(\"No EndOfContent block encoded\");\n            }\n        }\n        return currentOffset;\n    }\n    toBER(sizeOnly, writer) {\n        const _writer = writer || new ViewWriter();\n        for (let i = 0; i < this.value.length; i++) {\n            this.value[i].toBER(sizeOnly, _writer);\n        }\n        if (!writer) {\n            return _writer.final();\n        }\n        return EMPTY_BUFFER;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            isIndefiniteForm: this.isIndefiniteForm,\n            value: [],\n        };\n        for (const value of this.value) {\n            object.value.push(value.toJSON());\n        }\n        return object;\n    }\n}\nLocalConstructedValueBlock.NAME = \"ConstructedValueBlock\";\n\nvar _a$v;\nclass Constructed extends BaseBlock {\n    constructor(parameters = {}) {\n        super(parameters, LocalConstructedValueBlock);\n        this.idBlock.isConstructed = true;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);\n        if (resultOffset === -1) {\n            this.error = this.valueBlock.error;\n            return resultOffset;\n        }\n        if (!this.idBlock.error.length)\n            this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length)\n            this.blockLength += this.lenBlock.blockLength;\n        if (!this.valueBlock.error.length)\n            this.blockLength += this.valueBlock.blockLength;\n        return resultOffset;\n    }\n    onAsciiEncoding() {\n        const values = [];\n        for (const value of this.valueBlock.value) {\n            values.push(value.toString(\"ascii\").split(\"\\n\").map((o) => `  ${o}`).join(\"\\n\"));\n        }\n        const blockName = this.idBlock.tagClass === 3\n            ? `[${this.idBlock.tagNumber}]`\n            : this.constructor.NAME;\n        return values.length\n            ? `${blockName} :\\n${values.join(\"\\n\")}`\n            : `${blockName} :`;\n    }\n}\n_a$v = Constructed;\n(() => {\n    typeStore.Constructed = _a$v;\n})();\nConstructed.NAME = \"CONSTRUCTED\";\n\nclass LocalEndOfContentValueBlock extends ValueBlock {\n    fromBER(inputBuffer, inputOffset, _inputLength) {\n        return inputOffset;\n    }\n    toBER(_sizeOnly) {\n        return EMPTY_BUFFER;\n    }\n}\nLocalEndOfContentValueBlock.override = \"EndOfContentValueBlock\";\n\nvar _a$u;\nclass EndOfContent extends BaseBlock {\n    constructor(parameters = {}) {\n        super(parameters, LocalEndOfContentValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 0;\n    }\n}\n_a$u = EndOfContent;\n(() => {\n    typeStore.EndOfContent = _a$u;\n})();\nEndOfContent.NAME = END_OF_CONTENT_NAME;\n\nvar _a$t;\nclass Null extends BaseBlock {\n    constructor(parameters = {}) {\n        super(parameters, ValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 5;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (this.lenBlock.length > 0)\n            this.warnings.push(\"Non-zero length of value block for Null type\");\n        if (!this.idBlock.error.length)\n            this.blockLength += this.idBlock.blockLength;\n        if (!this.lenBlock.error.length)\n            this.blockLength += this.lenBlock.blockLength;\n        this.blockLength += inputLength;\n        if ((inputOffset + inputLength) > inputBuffer.byteLength) {\n            this.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\n            return -1;\n        }\n        return (inputOffset + inputLength);\n    }\n    toBER(sizeOnly, writer) {\n        const retBuf = new ArrayBuffer(2);\n        if (!sizeOnly) {\n            const retView = new Uint8Array(retBuf);\n            retView[0] = 0x05;\n            retView[1] = 0x00;\n        }\n        if (writer) {\n            writer.write(retBuf);\n        }\n        return retBuf;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME}`;\n    }\n}\n_a$t = Null;\n(() => {\n    typeStore.Null = _a$t;\n})();\nNull.NAME = \"NULL\";\n\nclass LocalBooleanValueBlock extends HexBlock(ValueBlock) {\n    get value() {\n        for (const octet of this.valueHexView) {\n            if (octet > 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    set value(value) {\n        this.valueHexView[0] = value ? 0xFF : 0x00;\n    }\n    constructor({ value, ...parameters } = {}) {\n        super(parameters);\n        if (parameters.valueHex) {\n            this.valueHexView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(parameters.valueHex);\n        }\n        else {\n            this.valueHexView = new Uint8Array(1);\n        }\n        if (value) {\n            this.value = value;\n        }\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const inputView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        this.valueHexView = inputView.subarray(inputOffset, inputOffset + inputLength);\n        if (inputLength > 1)\n            this.warnings.push(\"Boolean value encoded in more then 1 octet\");\n        this.isHexOnly = true;\n        pvutils__WEBPACK_IMPORTED_MODULE_1__.utilDecodeTC.call(this);\n        this.blockLength = inputLength;\n        return (inputOffset + inputLength);\n    }\n    toBER() {\n        return this.valueHexView.slice();\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.value,\n        };\n    }\n}\nLocalBooleanValueBlock.NAME = \"BooleanValueBlock\";\n\nvar _a$s;\nclass Boolean extends BaseBlock {\n    getValue() {\n        return this.valueBlock.value;\n    }\n    setValue(value) {\n        this.valueBlock.value = value;\n    }\n    constructor(parameters = {}) {\n        super(parameters, LocalBooleanValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 1;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.getValue}`;\n    }\n}\n_a$s = Boolean;\n(() => {\n    typeStore.Boolean = _a$s;\n})();\nBoolean.NAME = \"BOOLEAN\";\n\nclass LocalOctetStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\n    constructor({ isConstructed = false, ...parameters } = {}) {\n        super(parameters);\n        this.isConstructed = isConstructed;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        let resultOffset = 0;\n        if (this.isConstructed) {\n            this.isHexOnly = false;\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n            if (resultOffset === -1)\n                return resultOffset;\n            for (let i = 0; i < this.value.length; i++) {\n                const currentBlockName = this.value[i].constructor.NAME;\n                if (currentBlockName === END_OF_CONTENT_NAME) {\n                    if (this.isIndefiniteForm)\n                        break;\n                    else {\n                        this.error = \"EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\n                        return -1;\n                    }\n                }\n                if (currentBlockName !== OCTET_STRING_NAME) {\n                    this.error = \"OCTET STRING may consists of OCTET STRINGs only\";\n                    return -1;\n                }\n            }\n        }\n        else {\n            this.isHexOnly = true;\n            resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n            this.blockLength = inputLength;\n        }\n        return resultOffset;\n    }\n    toBER(sizeOnly, writer) {\n        if (this.isConstructed)\n            return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\n        return sizeOnly\n            ? new ArrayBuffer(this.valueHexView.byteLength)\n            : this.valueHexView.slice().buffer;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            isConstructed: this.isConstructed,\n        };\n    }\n}\nLocalOctetStringValueBlock.NAME = \"OctetStringValueBlock\";\n\nvar _a$r;\nclass OctetString extends BaseBlock {\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {\n        var _b, _c;\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : (parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length));\n        super({\n            idBlock: {\n                isConstructed: parameters.isConstructed,\n                ...idBlock,\n            },\n            lenBlock: {\n                ...lenBlock,\n                isIndefiniteForm: !!parameters.isIndefiniteForm,\n            },\n            ...parameters,\n        }, LocalOctetStringValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 4;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n        if (inputLength === 0) {\n            if (this.idBlock.error.length === 0)\n                this.blockLength += this.idBlock.blockLength;\n            if (this.lenBlock.error.length === 0)\n                this.blockLength += this.lenBlock.blockLength;\n            return inputOffset;\n        }\n        if (!this.valueBlock.isConstructed) {\n            const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\n            const buf = view.subarray(inputOffset, inputOffset + inputLength);\n            try {\n                if (buf.byteLength) {\n                    const asn = localFromBER(buf, 0, buf.byteLength);\n                    if (asn.offset !== -1 && asn.offset === inputLength) {\n                        this.valueBlock.value = [asn.result];\n                    }\n                }\n            }\n            catch {\n            }\n        }\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\n    }\n    onAsciiEncoding() {\n        if (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {\n            return Constructed.prototype.onAsciiEncoding.call(this);\n        }\n        const name = this.constructor.NAME;\n        const value = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.valueBlock.valueHexView);\n        return `${name} : ${value}`;\n    }\n    getValue() {\n        if (!this.idBlock.isConstructed) {\n            return this.valueBlock.valueHexView.slice().buffer;\n        }\n        const array = [];\n        for (const content of this.valueBlock.value) {\n            if (content instanceof _a$r) {\n                array.push(content.valueBlock.valueHexView);\n            }\n        }\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.concat(array);\n    }\n}\n_a$r = OctetString;\n(() => {\n    typeStore.OctetString = _a$r;\n})();\nOctetString.NAME = OCTET_STRING_NAME;\n\nclass LocalBitStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\n    constructor({ unusedBits = 0, isConstructed = false, ...parameters } = {}) {\n        super(parameters);\n        this.unusedBits = unusedBits;\n        this.isConstructed = isConstructed;\n        this.blockLength = this.valueHexView.byteLength;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (!inputLength) {\n            return inputOffset;\n        }\n        let resultOffset = -1;\n        if (this.isConstructed) {\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\n            if (resultOffset === -1)\n                return resultOffset;\n            for (const value of this.value) {\n                const currentBlockName = value.constructor.NAME;\n                if (currentBlockName === END_OF_CONTENT_NAME) {\n                    if (this.isIndefiniteForm)\n                        break;\n                    else {\n                        this.error = \"EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only\";\n                        return -1;\n                    }\n                }\n                if (currentBlockName !== BIT_STRING_NAME) {\n                    this.error = \"BIT STRING may consists of BIT STRINGs only\";\n                    return -1;\n                }\n                const valueBlock = value.valueBlock;\n                if ((this.unusedBits > 0) && (valueBlock.unusedBits > 0)) {\n                    this.error = \"Using of \\\"unused bits\\\" inside constructive BIT STRING allowed for least one only\";\n                    return -1;\n                }\n                this.unusedBits = valueBlock.unusedBits;\n            }\n            return resultOffset;\n        }\n        const inputView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        this.unusedBits = intBuffer[0];\n        if (this.unusedBits > 7) {\n            this.error = \"Unused bits for BitString must be in range 0-7\";\n            return -1;\n        }\n        if (!this.unusedBits) {\n            const buf = intBuffer.subarray(1);\n            try {\n                if (buf.byteLength) {\n                    const asn = localFromBER(buf, 0, buf.byteLength);\n                    if (asn.offset !== -1 && asn.offset === (inputLength - 1)) {\n                        this.value = [asn.result];\n                    }\n                }\n            }\n            catch {\n            }\n        }\n        this.valueHexView = intBuffer.subarray(1);\n        this.blockLength = intBuffer.length;\n        return (inputOffset + inputLength);\n    }\n    toBER(sizeOnly, writer) {\n        if (this.isConstructed) {\n            return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\n        }\n        if (sizeOnly) {\n            return new ArrayBuffer(this.valueHexView.byteLength + 1);\n        }\n        if (!this.valueHexView.byteLength) {\n            return EMPTY_BUFFER;\n        }\n        const retView = new Uint8Array(this.valueHexView.length + 1);\n        retView[0] = this.unusedBits;\n        retView.set(this.valueHexView, 1);\n        return retView.buffer;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            unusedBits: this.unusedBits,\n            isConstructed: this.isConstructed,\n        };\n    }\n}\nLocalBitStringValueBlock.NAME = \"BitStringValueBlock\";\n\nvar _a$q;\nclass BitString extends BaseBlock {\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {\n        var _b, _c;\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : (parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length));\n        super({\n            idBlock: {\n                isConstructed: parameters.isConstructed,\n                ...idBlock,\n            },\n            lenBlock: {\n                ...lenBlock,\n                isIndefiniteForm: !!parameters.isIndefiniteForm,\n            },\n            ...parameters,\n        }, LocalBitStringValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 3;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\n    }\n    onAsciiEncoding() {\n        if (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {\n            return Constructed.prototype.onAsciiEncoding.call(this);\n        }\n        else {\n            const bits = [];\n            const valueHex = this.valueBlock.valueHexView;\n            for (const byte of valueHex) {\n                bits.push(byte.toString(2).padStart(8, \"0\"));\n            }\n            const bitsStr = bits.join(\"\");\n            const name = this.constructor.NAME;\n            const value = bitsStr.substring(0, bitsStr.length - this.valueBlock.unusedBits);\n            return `${name} : ${value}`;\n        }\n    }\n}\n_a$q = BitString;\n(() => {\n    typeStore.BitString = _a$q;\n})();\nBitString.NAME = BIT_STRING_NAME;\n\nvar _a$p;\nfunction viewAdd(first, second) {\n    const c = new Uint8Array([0]);\n    const firstView = new Uint8Array(first);\n    const secondView = new Uint8Array(second);\n    let firstViewCopy = firstView.slice(0);\n    const firstViewCopyLength = firstViewCopy.length - 1;\n    const secondViewCopy = secondView.slice(0);\n    const secondViewCopyLength = secondViewCopy.length - 1;\n    let value = 0;\n    const max = (secondViewCopyLength < firstViewCopyLength) ? firstViewCopyLength : secondViewCopyLength;\n    let counter = 0;\n    for (let i = max; i >= 0; i--, counter++) {\n        switch (true) {\n            case (counter < secondViewCopy.length):\n                value = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];\n                break;\n            default:\n                value = firstViewCopy[firstViewCopyLength - counter] + c[0];\n        }\n        c[0] = value / 10;\n        switch (true) {\n            case (counter >= firstViewCopy.length):\n                firstViewCopy = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilConcatView(new Uint8Array([value % 10]), firstViewCopy);\n                break;\n            default:\n                firstViewCopy[firstViewCopyLength - counter] = value % 10;\n        }\n    }\n    if (c[0] > 0)\n        firstViewCopy = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilConcatView(c, firstViewCopy);\n    return firstViewCopy;\n}\nfunction power2(n) {\n    if (n >= powers2.length) {\n        for (let p = powers2.length; p <= n; p++) {\n            const c = new Uint8Array([0]);\n            let digits = (powers2[p - 1]).slice(0);\n            for (let i = (digits.length - 1); i >= 0; i--) {\n                const newValue = new Uint8Array([(digits[i] << 1) + c[0]]);\n                c[0] = newValue[0] / 10;\n                digits[i] = newValue[0] % 10;\n            }\n            if (c[0] > 0)\n                digits = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilConcatView(c, digits);\n            powers2.push(digits);\n        }\n    }\n    return powers2[n];\n}\nfunction viewSub(first, second) {\n    let b = 0;\n    const firstView = new Uint8Array(first);\n    const secondView = new Uint8Array(second);\n    const firstViewCopy = firstView.slice(0);\n    const firstViewCopyLength = firstViewCopy.length - 1;\n    const secondViewCopy = secondView.slice(0);\n    const secondViewCopyLength = secondViewCopy.length - 1;\n    let value;\n    let counter = 0;\n    for (let i = secondViewCopyLength; i >= 0; i--, counter++) {\n        value = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;\n        switch (true) {\n            case (value < 0):\n                b = 1;\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\n                break;\n            default:\n                b = 0;\n                firstViewCopy[firstViewCopyLength - counter] = value;\n        }\n    }\n    if (b > 0) {\n        for (let i = (firstViewCopyLength - secondViewCopyLength + 1); i >= 0; i--, counter++) {\n            value = firstViewCopy[firstViewCopyLength - counter] - b;\n            if (value < 0) {\n                b = 1;\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\n            }\n            else {\n                b = 0;\n                firstViewCopy[firstViewCopyLength - counter] = value;\n                break;\n            }\n        }\n    }\n    return firstViewCopy.slice();\n}\nclass LocalIntegerValueBlock extends HexBlock(ValueBlock) {\n    setValueHex() {\n        if (this.valueHexView.length >= 4) {\n            this.warnings.push(\"Too big Integer for decoding, hex only\");\n            this.isHexOnly = true;\n            this._valueDec = 0;\n        }\n        else {\n            this.isHexOnly = false;\n            if (this.valueHexView.length > 0) {\n                this._valueDec = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilDecodeTC.call(this);\n            }\n        }\n    }\n    constructor({ value, ...parameters } = {}) {\n        super(parameters);\n        this._valueDec = 0;\n        if (parameters.valueHex) {\n            this.setValueHex();\n        }\n        if (value !== undefined) {\n            this.valueDec = value;\n        }\n    }\n    set valueDec(v) {\n        this._valueDec = v;\n        this.isHexOnly = false;\n        this.valueHexView = new Uint8Array(pvutils__WEBPACK_IMPORTED_MODULE_1__.utilEncodeTC(v));\n    }\n    get valueDec() {\n        return this._valueDec;\n    }\n    fromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0) {\n        const offset = this.fromBER(inputBuffer, inputOffset, inputLength);\n        if (offset === -1)\n            return offset;\n        const view = this.valueHexView;\n        if ((view[0] === 0x00) && ((view[1] & 0x80) !== 0)) {\n            this.valueHexView = view.subarray(1);\n        }\n        else {\n            if (expectedLength !== 0) {\n                if (view.length < expectedLength) {\n                    if ((expectedLength - view.length) > 1)\n                        expectedLength = view.length + 1;\n                    this.valueHexView = view.subarray(expectedLength - view.length);\n                }\n            }\n        }\n        return offset;\n    }\n    toDER(sizeOnly = false) {\n        const view = this.valueHexView;\n        switch (true) {\n            case ((view[0] & 0x80) !== 0):\n                {\n                    const updatedView = new Uint8Array(this.valueHexView.length + 1);\n                    updatedView[0] = 0x00;\n                    updatedView.set(view, 1);\n                    this.valueHexView = updatedView;\n                }\n                break;\n            case ((view[0] === 0x00) && ((view[1] & 0x80) === 0)):\n                {\n                    this.valueHexView = this.valueHexView.subarray(1);\n                }\n                break;\n        }\n        return this.toBER(sizeOnly);\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\n        if (resultOffset === -1) {\n            return resultOffset;\n        }\n        this.setValueHex();\n        return resultOffset;\n    }\n    toBER(sizeOnly) {\n        return sizeOnly\n            ? new ArrayBuffer(this.valueHexView.length)\n            : this.valueHexView.slice().buffer;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            valueDec: this.valueDec,\n        };\n    }\n    toString() {\n        const firstBit = (this.valueHexView.length * 8) - 1;\n        let digits = new Uint8Array((this.valueHexView.length * 8) / 3);\n        let bitNumber = 0;\n        let currentByte;\n        const asn1View = this.valueHexView;\n        let result = \"\";\n        let flag = false;\n        for (let byteNumber = (asn1View.byteLength - 1); byteNumber >= 0; byteNumber--) {\n            currentByte = asn1View[byteNumber];\n            for (let i = 0; i < 8; i++) {\n                if ((currentByte & 1) === 1) {\n                    switch (bitNumber) {\n                        case firstBit:\n                            digits = viewSub(power2(bitNumber), digits);\n                            result = \"-\";\n                            break;\n                        default:\n                            digits = viewAdd(digits, power2(bitNumber));\n                    }\n                }\n                bitNumber++;\n                currentByte >>= 1;\n            }\n        }\n        for (let i = 0; i < digits.length; i++) {\n            if (digits[i])\n                flag = true;\n            if (flag)\n                result += digitsString.charAt(digits[i]);\n        }\n        if (flag === false)\n            result += digitsString.charAt(0);\n        return result;\n    }\n}\n_a$p = LocalIntegerValueBlock;\nLocalIntegerValueBlock.NAME = \"IntegerValueBlock\";\n(() => {\n    Object.defineProperty(_a$p.prototype, \"valueHex\", {\n        set: function (v) {\n            this.valueHexView = new Uint8Array(v);\n            this.setValueHex();\n        },\n        get: function () {\n            return this.valueHexView.slice().buffer;\n        },\n    });\n})();\n\nvar _a$o;\nclass Integer extends BaseBlock {\n    constructor(parameters = {}) {\n        super(parameters, LocalIntegerValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 2;\n    }\n    toBigInt() {\n        assertBigInt();\n        return BigInt(this.valueBlock.toString());\n    }\n    static fromBigInt(value) {\n        assertBigInt();\n        const bigIntValue = BigInt(value);\n        const writer = new ViewWriter();\n        const hex = bigIntValue.toString(16).replace(/^-/, \"\");\n        const view = new Uint8Array(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromHex(hex));\n        if (bigIntValue < 0) {\n            const first = new Uint8Array(view.length + (view[0] & 0x80 ? 1 : 0));\n            first[0] |= 0x80;\n            const firstInt = BigInt(`0x${pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(first)}`);\n            const secondInt = firstInt + bigIntValue;\n            const second = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromHex(secondInt.toString(16)));\n            second[0] |= 0x80;\n            writer.write(second);\n        }\n        else {\n            if (view[0] & 0x80) {\n                writer.write(new Uint8Array([0]));\n            }\n            writer.write(view);\n        }\n        const res = new _a$o({ valueHex: writer.final() });\n        return res;\n    }\n    convertToDER() {\n        const integer = new _a$o({ valueHex: this.valueBlock.valueHexView });\n        integer.valueBlock.toDER();\n        return integer;\n    }\n    convertFromDER() {\n        return new _a$o({\n            valueHex: this.valueBlock.valueHexView[0] === 0\n                ? this.valueBlock.valueHexView.subarray(1)\n                : this.valueBlock.valueHexView,\n        });\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.valueBlock.toString()}`;\n    }\n}\n_a$o = Integer;\n(() => {\n    typeStore.Integer = _a$o;\n})();\nInteger.NAME = \"INTEGER\";\n\nvar _a$n;\nclass Enumerated extends Integer {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 10;\n    }\n}\n_a$n = Enumerated;\n(() => {\n    typeStore.Enumerated = _a$n;\n})();\nEnumerated.NAME = \"ENUMERATED\";\n\nclass LocalSidValueBlock extends HexBlock(ValueBlock) {\n    constructor({ valueDec = -1, isFirstSid = false, ...parameters } = {}) {\n        super(parameters);\n        this.valueDec = valueDec;\n        this.isFirstSid = isFirstSid;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (!inputLength) {\n            return inputOffset;\n        }\n        const inputView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\n            return -1;\n        }\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        this.valueHexView = new Uint8Array(inputLength);\n        for (let i = 0; i < inputLength; i++) {\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\n            this.blockLength++;\n            if ((intBuffer[i] & 0x80) === 0x00)\n                break;\n        }\n        const tempView = new Uint8Array(this.blockLength);\n        for (let i = 0; i < this.blockLength; i++) {\n            tempView[i] = this.valueHexView[i];\n        }\n        this.valueHexView = tempView;\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\n            this.error = \"End of input reached before message was fully decoded\";\n            return -1;\n        }\n        if (this.valueHexView[0] === 0x00)\n            this.warnings.push(\"Needlessly long format of SID encoding\");\n        if (this.blockLength <= 8)\n            this.valueDec = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilFromBase(this.valueHexView, 7);\n        else {\n            this.isHexOnly = true;\n            this.warnings.push(\"Too big SID for decoding, hex only\");\n        }\n        return (inputOffset + this.blockLength);\n    }\n    set valueBigInt(value) {\n        assertBigInt();\n        let bits = BigInt(value).toString(2);\n        while (bits.length % 7) {\n            bits = \"0\" + bits;\n        }\n        const bytes = new Uint8Array(bits.length / 7);\n        for (let i = 0; i < bytes.length; i++) {\n            bytes[i] = parseInt(bits.slice(i * 7, i * 7 + 7), 2) + (i + 1 < bytes.length ? 0x80 : 0);\n        }\n        this.fromBER(bytes.buffer, 0, bytes.length);\n    }\n    toBER(sizeOnly) {\n        if (this.isHexOnly) {\n            if (sizeOnly)\n                return (new ArrayBuffer(this.valueHexView.byteLength));\n            const curView = this.valueHexView;\n            const retView = new Uint8Array(this.blockLength);\n            for (let i = 0; i < (this.blockLength - 1); i++)\n                retView[i] = curView[i] | 0x80;\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\n            return retView.buffer;\n        }\n        const encodedBuf = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilToBase(this.valueDec, 7);\n        if (encodedBuf.byteLength === 0) {\n            this.error = \"Error during encoding SID value\";\n            return EMPTY_BUFFER;\n        }\n        const retView = new Uint8Array(encodedBuf.byteLength);\n        if (!sizeOnly) {\n            const encodedView = new Uint8Array(encodedBuf);\n            const len = encodedBuf.byteLength - 1;\n            for (let i = 0; i < len; i++)\n                retView[i] = encodedView[i] | 0x80;\n            retView[len] = encodedView[len];\n        }\n        return retView;\n    }\n    toString() {\n        let result = \"\";\n        if (this.isHexOnly)\n            result = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.valueHexView);\n        else {\n            if (this.isFirstSid) {\n                let sidValue = this.valueDec;\n                if (this.valueDec <= 39)\n                    result = \"0.\";\n                else {\n                    if (this.valueDec <= 79) {\n                        result = \"1.\";\n                        sidValue -= 40;\n                    }\n                    else {\n                        result = \"2.\";\n                        sidValue -= 80;\n                    }\n                }\n                result += sidValue.toString();\n            }\n            else\n                result = this.valueDec.toString();\n        }\n        return result;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            valueDec: this.valueDec,\n            isFirstSid: this.isFirstSid,\n        };\n    }\n}\nLocalSidValueBlock.NAME = \"sidBlock\";\n\nclass LocalObjectIdentifierValueBlock extends ValueBlock {\n    constructor({ value = EMPTY_STRING, ...parameters } = {}) {\n        super(parameters);\n        this.value = [];\n        if (value) {\n            this.fromString(value);\n        }\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        let resultOffset = inputOffset;\n        while (inputLength > 0) {\n            const sidBlock = new LocalSidValueBlock();\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\n            if (resultOffset === -1) {\n                this.blockLength = 0;\n                this.error = sidBlock.error;\n                return resultOffset;\n            }\n            if (this.value.length === 0)\n                sidBlock.isFirstSid = true;\n            this.blockLength += sidBlock.blockLength;\n            inputLength -= sidBlock.blockLength;\n            this.value.push(sidBlock);\n        }\n        return resultOffset;\n    }\n    toBER(sizeOnly) {\n        const retBuffers = [];\n        for (let i = 0; i < this.value.length; i++) {\n            const valueBuf = this.value[i].toBER(sizeOnly);\n            if (valueBuf.byteLength === 0) {\n                this.error = this.value[i].error;\n                return EMPTY_BUFFER;\n            }\n            retBuffers.push(valueBuf);\n        }\n        return concat(retBuffers);\n    }\n    fromString(string) {\n        this.value = [];\n        let pos1 = 0;\n        let pos2 = 0;\n        let sid = \"\";\n        let flag = false;\n        do {\n            pos2 = string.indexOf(\".\", pos1);\n            if (pos2 === -1)\n                sid = string.substring(pos1);\n            else\n                sid = string.substring(pos1, pos2);\n            pos1 = pos2 + 1;\n            if (flag) {\n                const sidBlock = this.value[0];\n                let plus = 0;\n                switch (sidBlock.valueDec) {\n                    case 0:\n                        break;\n                    case 1:\n                        plus = 40;\n                        break;\n                    case 2:\n                        plus = 80;\n                        break;\n                    default:\n                        this.value = [];\n                        return;\n                }\n                const parsedSID = parseInt(sid, 10);\n                if (isNaN(parsedSID))\n                    return;\n                sidBlock.valueDec = parsedSID + plus;\n                flag = false;\n            }\n            else {\n                const sidBlock = new LocalSidValueBlock();\n                if (sid > Number.MAX_SAFE_INTEGER) {\n                    assertBigInt();\n                    const sidValue = BigInt(sid);\n                    sidBlock.valueBigInt = sidValue;\n                }\n                else {\n                    sidBlock.valueDec = parseInt(sid, 10);\n                    if (isNaN(sidBlock.valueDec))\n                        return;\n                }\n                if (!this.value.length) {\n                    sidBlock.isFirstSid = true;\n                    flag = true;\n                }\n                this.value.push(sidBlock);\n            }\n        } while (pos2 !== -1);\n    }\n    toString() {\n        let result = \"\";\n        let isHexOnly = false;\n        for (let i = 0; i < this.value.length; i++) {\n            isHexOnly = this.value[i].isHexOnly;\n            let sidStr = this.value[i].toString();\n            if (i !== 0)\n                result = `${result}.`;\n            if (isHexOnly) {\n                sidStr = `{${sidStr}}`;\n                if (this.value[i].isFirstSid)\n                    result = `2.{${sidStr} - 80}`;\n                else\n                    result += sidStr;\n            }\n            else\n                result += sidStr;\n        }\n        return result;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            value: this.toString(),\n            sidArray: [],\n        };\n        for (let i = 0; i < this.value.length; i++) {\n            object.sidArray.push(this.value[i].toJSON());\n        }\n        return object;\n    }\n}\nLocalObjectIdentifierValueBlock.NAME = \"ObjectIdentifierValueBlock\";\n\nvar _a$m;\nclass ObjectIdentifier extends BaseBlock {\n    getValue() {\n        return this.valueBlock.toString();\n    }\n    setValue(value) {\n        this.valueBlock.fromString(value);\n    }\n    constructor(parameters = {}) {\n        super(parameters, LocalObjectIdentifierValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 6;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.getValue(),\n        };\n    }\n}\n_a$m = ObjectIdentifier;\n(() => {\n    typeStore.ObjectIdentifier = _a$m;\n})();\nObjectIdentifier.NAME = \"OBJECT IDENTIFIER\";\n\nclass LocalRelativeSidValueBlock extends HexBlock(LocalBaseBlock) {\n    constructor({ valueDec = 0, ...parameters } = {}) {\n        super(parameters);\n        this.valueDec = valueDec;\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        if (inputLength === 0)\n            return inputOffset;\n        const inputView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength))\n            return -1;\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\n        this.valueHexView = new Uint8Array(inputLength);\n        for (let i = 0; i < inputLength; i++) {\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\n            this.blockLength++;\n            if ((intBuffer[i] & 0x80) === 0x00)\n                break;\n        }\n        const tempView = new Uint8Array(this.blockLength);\n        for (let i = 0; i < this.blockLength; i++)\n            tempView[i] = this.valueHexView[i];\n        this.valueHexView = tempView;\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\n            this.error = \"End of input reached before message was fully decoded\";\n            return -1;\n        }\n        if (this.valueHexView[0] === 0x00)\n            this.warnings.push(\"Needlessly long format of SID encoding\");\n        if (this.blockLength <= 8)\n            this.valueDec = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilFromBase(this.valueHexView, 7);\n        else {\n            this.isHexOnly = true;\n            this.warnings.push(\"Too big SID for decoding, hex only\");\n        }\n        return (inputOffset + this.blockLength);\n    }\n    toBER(sizeOnly) {\n        if (this.isHexOnly) {\n            if (sizeOnly)\n                return (new ArrayBuffer(this.valueHexView.byteLength));\n            const curView = this.valueHexView;\n            const retView = new Uint8Array(this.blockLength);\n            for (let i = 0; i < (this.blockLength - 1); i++)\n                retView[i] = curView[i] | 0x80;\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\n            return retView.buffer;\n        }\n        const encodedBuf = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilToBase(this.valueDec, 7);\n        if (encodedBuf.byteLength === 0) {\n            this.error = \"Error during encoding SID value\";\n            return EMPTY_BUFFER;\n        }\n        const retView = new Uint8Array(encodedBuf.byteLength);\n        if (!sizeOnly) {\n            const encodedView = new Uint8Array(encodedBuf);\n            const len = encodedBuf.byteLength - 1;\n            for (let i = 0; i < len; i++)\n                retView[i] = encodedView[i] | 0x80;\n            retView[len] = encodedView[len];\n        }\n        return retView.buffer;\n    }\n    toString() {\n        let result = \"\";\n        if (this.isHexOnly)\n            result = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToHex(this.valueHexView);\n        else {\n            result = this.valueDec.toString();\n        }\n        return result;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            valueDec: this.valueDec,\n        };\n    }\n}\nLocalRelativeSidValueBlock.NAME = \"relativeSidBlock\";\n\nclass LocalRelativeObjectIdentifierValueBlock extends ValueBlock {\n    constructor({ value = EMPTY_STRING, ...parameters } = {}) {\n        super(parameters);\n        this.value = [];\n        if (value) {\n            this.fromString(value);\n        }\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        let resultOffset = inputOffset;\n        while (inputLength > 0) {\n            const sidBlock = new LocalRelativeSidValueBlock();\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\n            if (resultOffset === -1) {\n                this.blockLength = 0;\n                this.error = sidBlock.error;\n                return resultOffset;\n            }\n            this.blockLength += sidBlock.blockLength;\n            inputLength -= sidBlock.blockLength;\n            this.value.push(sidBlock);\n        }\n        return resultOffset;\n    }\n    toBER(sizeOnly, _writer) {\n        const retBuffers = [];\n        for (let i = 0; i < this.value.length; i++) {\n            const valueBuf = this.value[i].toBER(sizeOnly);\n            if (valueBuf.byteLength === 0) {\n                this.error = this.value[i].error;\n                return EMPTY_BUFFER;\n            }\n            retBuffers.push(valueBuf);\n        }\n        return concat(retBuffers);\n    }\n    fromString(string) {\n        this.value = [];\n        let pos1 = 0;\n        let pos2 = 0;\n        let sid = \"\";\n        do {\n            pos2 = string.indexOf(\".\", pos1);\n            if (pos2 === -1)\n                sid = string.substring(pos1);\n            else\n                sid = string.substring(pos1, pos2);\n            pos1 = pos2 + 1;\n            const sidBlock = new LocalRelativeSidValueBlock();\n            sidBlock.valueDec = parseInt(sid, 10);\n            if (isNaN(sidBlock.valueDec))\n                return true;\n            this.value.push(sidBlock);\n        } while (pos2 !== -1);\n        return true;\n    }\n    toString() {\n        let result = \"\";\n        let isHexOnly = false;\n        for (let i = 0; i < this.value.length; i++) {\n            isHexOnly = this.value[i].isHexOnly;\n            let sidStr = this.value[i].toString();\n            if (i !== 0)\n                result = `${result}.`;\n            if (isHexOnly) {\n                sidStr = `{${sidStr}}`;\n                result += sidStr;\n            }\n            else\n                result += sidStr;\n        }\n        return result;\n    }\n    toJSON() {\n        const object = {\n            ...super.toJSON(),\n            value: this.toString(),\n            sidArray: [],\n        };\n        for (let i = 0; i < this.value.length; i++)\n            object.sidArray.push(this.value[i].toJSON());\n        return object;\n    }\n}\nLocalRelativeObjectIdentifierValueBlock.NAME = \"RelativeObjectIdentifierValueBlock\";\n\nvar _a$l;\nclass RelativeObjectIdentifier extends BaseBlock {\n    getValue() {\n        return this.valueBlock.toString();\n    }\n    setValue(value) {\n        this.valueBlock.fromString(value);\n    }\n    constructor(parameters = {}) {\n        super(parameters, LocalRelativeObjectIdentifierValueBlock);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 13;\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.getValue(),\n        };\n    }\n}\n_a$l = RelativeObjectIdentifier;\n(() => {\n    typeStore.RelativeObjectIdentifier = _a$l;\n})();\nRelativeObjectIdentifier.NAME = \"RelativeObjectIdentifier\";\n\nvar _a$k;\nclass Sequence extends Constructed {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 16;\n    }\n}\n_a$k = Sequence;\n(() => {\n    typeStore.Sequence = _a$k;\n})();\nSequence.NAME = \"SEQUENCE\";\n\nvar _a$j;\nclass Set extends Constructed {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 17;\n    }\n}\n_a$j = Set;\n(() => {\n    typeStore.Set = _a$j;\n})();\nSet.NAME = \"SET\";\n\nclass LocalStringValueBlock extends HexBlock(ValueBlock) {\n    constructor({ ...parameters } = {}) {\n        super(parameters);\n        this.isHexOnly = true;\n        this.value = EMPTY_STRING;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            value: this.value,\n        };\n    }\n}\nLocalStringValueBlock.NAME = \"StringValueBlock\";\n\nclass LocalSimpleStringValueBlock extends LocalStringValueBlock {\n}\nLocalSimpleStringValueBlock.NAME = \"SimpleStringValueBlock\";\n\nclass LocalSimpleStringBlock extends BaseStringBlock {\n    constructor({ ...parameters } = {}) {\n        super(parameters, LocalSimpleStringValueBlock);\n    }\n    fromBuffer(inputBuffer) {\n        this.valueBlock.value = String.fromCharCode.apply(null, pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer));\n    }\n    fromString(inputString) {\n        const strLen = inputString.length;\n        const view = this.valueBlock.valueHexView = new Uint8Array(strLen);\n        for (let i = 0; i < strLen; i++)\n            view[i] = inputString.charCodeAt(i);\n        this.valueBlock.value = inputString;\n    }\n}\nLocalSimpleStringBlock.NAME = \"SIMPLE STRING\";\n\nclass LocalUtf8StringValueBlock extends LocalSimpleStringBlock {\n    fromBuffer(inputBuffer) {\n        this.valueBlock.valueHexView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);\n        try {\n            this.valueBlock.value = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToUtf8String(inputBuffer);\n        }\n        catch (ex) {\n            this.warnings.push(`Error during \"decodeURIComponent\": ${ex}, using raw string`);\n            this.valueBlock.value = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToBinary(inputBuffer);\n        }\n    }\n    fromString(inputString) {\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromUtf8String(inputString));\n        this.valueBlock.value = inputString;\n    }\n}\nLocalUtf8StringValueBlock.NAME = \"Utf8StringValueBlock\";\n\nvar _a$i;\nclass Utf8String extends LocalUtf8StringValueBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 12;\n    }\n}\n_a$i = Utf8String;\n(() => {\n    typeStore.Utf8String = _a$i;\n})();\nUtf8String.NAME = \"UTF8String\";\n\nclass LocalBmpStringValueBlock extends LocalSimpleStringBlock {\n    fromBuffer(inputBuffer) {\n        this.valueBlock.value = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.ToUtf16String(inputBuffer);\n        this.valueBlock.valueHexView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer);\n    }\n    fromString(inputString) {\n        this.valueBlock.value = inputString;\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.Convert.FromUtf16String(inputString));\n    }\n}\nLocalBmpStringValueBlock.NAME = \"BmpStringValueBlock\";\n\nvar _a$h;\nclass BmpString extends LocalBmpStringValueBlock {\n    constructor({ ...parameters } = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 30;\n    }\n}\n_a$h = BmpString;\n(() => {\n    typeStore.BmpString = _a$h;\n})();\nBmpString.NAME = \"BMPString\";\n\nclass LocalUniversalStringValueBlock extends LocalSimpleStringBlock {\n    fromBuffer(inputBuffer) {\n        const copyBuffer = ArrayBuffer.isView(inputBuffer) ? inputBuffer.slice().buffer : inputBuffer.slice(0);\n        const valueView = new Uint8Array(copyBuffer);\n        for (let i = 0; i < valueView.length; i += 4) {\n            valueView[i] = valueView[i + 3];\n            valueView[i + 1] = valueView[i + 2];\n            valueView[i + 2] = 0x00;\n            valueView[i + 3] = 0x00;\n        }\n        this.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));\n    }\n    fromString(inputString) {\n        const strLength = inputString.length;\n        const valueHexView = this.valueBlock.valueHexView = new Uint8Array(strLength * 4);\n        for (let i = 0; i < strLength; i++) {\n            const codeBuf = pvutils__WEBPACK_IMPORTED_MODULE_1__.utilToBase(inputString.charCodeAt(i), 8);\n            const codeView = new Uint8Array(codeBuf);\n            if (codeView.length > 4)\n                continue;\n            const dif = 4 - codeView.length;\n            for (let j = (codeView.length - 1); j >= 0; j--)\n                valueHexView[i * 4 + j + dif] = codeView[j];\n        }\n        this.valueBlock.value = inputString;\n    }\n}\nLocalUniversalStringValueBlock.NAME = \"UniversalStringValueBlock\";\n\nvar _a$g;\nclass UniversalString extends LocalUniversalStringValueBlock {\n    constructor({ ...parameters } = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 28;\n    }\n}\n_a$g = UniversalString;\n(() => {\n    typeStore.UniversalString = _a$g;\n})();\nUniversalString.NAME = \"UniversalString\";\n\nvar _a$f;\nclass NumericString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 18;\n    }\n}\n_a$f = NumericString;\n(() => {\n    typeStore.NumericString = _a$f;\n})();\nNumericString.NAME = \"NumericString\";\n\nvar _a$e;\nclass PrintableString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 19;\n    }\n}\n_a$e = PrintableString;\n(() => {\n    typeStore.PrintableString = _a$e;\n})();\nPrintableString.NAME = \"PrintableString\";\n\nvar _a$d;\nclass TeletexString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 20;\n    }\n}\n_a$d = TeletexString;\n(() => {\n    typeStore.TeletexString = _a$d;\n})();\nTeletexString.NAME = \"TeletexString\";\n\nvar _a$c;\nclass VideotexString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 21;\n    }\n}\n_a$c = VideotexString;\n(() => {\n    typeStore.VideotexString = _a$c;\n})();\nVideotexString.NAME = \"VideotexString\";\n\nvar _a$b;\nclass IA5String extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 22;\n    }\n}\n_a$b = IA5String;\n(() => {\n    typeStore.IA5String = _a$b;\n})();\nIA5String.NAME = \"IA5String\";\n\nvar _a$a;\nclass GraphicString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 25;\n    }\n}\n_a$a = GraphicString;\n(() => {\n    typeStore.GraphicString = _a$a;\n})();\nGraphicString.NAME = \"GraphicString\";\n\nvar _a$9;\nclass VisibleString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 26;\n    }\n}\n_a$9 = VisibleString;\n(() => {\n    typeStore.VisibleString = _a$9;\n})();\nVisibleString.NAME = \"VisibleString\";\n\nvar _a$8;\nclass GeneralString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 27;\n    }\n}\n_a$8 = GeneralString;\n(() => {\n    typeStore.GeneralString = _a$8;\n})();\nGeneralString.NAME = \"GeneralString\";\n\nvar _a$7;\nclass CharacterString extends LocalSimpleStringBlock {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 29;\n    }\n}\n_a$7 = CharacterString;\n(() => {\n    typeStore.CharacterString = _a$7;\n})();\nCharacterString.NAME = \"CharacterString\";\n\nvar _a$6;\nclass UTCTime extends VisibleString {\n    constructor({ value, valueDate, ...parameters } = {}) {\n        super(parameters);\n        this.year = 0;\n        this.month = 0;\n        this.day = 0;\n        this.hour = 0;\n        this.minute = 0;\n        this.second = 0;\n        if (value) {\n            this.fromString(value);\n            this.valueBlock.valueHexView = new Uint8Array(value.length);\n            for (let i = 0; i < value.length; i++)\n                this.valueBlock.valueHexView[i] = value.charCodeAt(i);\n        }\n        if (valueDate) {\n            this.fromDate(valueDate);\n            this.valueBlock.valueHexView = new Uint8Array(this.toBuffer());\n        }\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 23;\n    }\n    fromBuffer(inputBuffer) {\n        this.fromString(String.fromCharCode.apply(null, pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer)));\n    }\n    toBuffer() {\n        const str = this.toString();\n        const buffer = new ArrayBuffer(str.length);\n        const view = new Uint8Array(buffer);\n        for (let i = 0; i < str.length; i++)\n            view[i] = str.charCodeAt(i);\n        return buffer;\n    }\n    fromDate(inputDate) {\n        this.year = inputDate.getUTCFullYear();\n        this.month = inputDate.getUTCMonth() + 1;\n        this.day = inputDate.getUTCDate();\n        this.hour = inputDate.getUTCHours();\n        this.minute = inputDate.getUTCMinutes();\n        this.second = inputDate.getUTCSeconds();\n    }\n    toDate() {\n        return (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second)));\n    }\n    fromString(inputString) {\n        const parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\n        const parserArray = parser.exec(inputString);\n        if (parserArray === null) {\n            this.error = \"Wrong input string for conversion\";\n            return;\n        }\n        const year = parseInt(parserArray[1], 10);\n        if (year >= 50)\n            this.year = 1900 + year;\n        else\n            this.year = 2000 + year;\n        this.month = parseInt(parserArray[2], 10);\n        this.day = parseInt(parserArray[3], 10);\n        this.hour = parseInt(parserArray[4], 10);\n        this.minute = parseInt(parserArray[5], 10);\n        this.second = parseInt(parserArray[6], 10);\n    }\n    toString(encoding = \"iso\") {\n        if (encoding === \"iso\") {\n            const outputArray = new Array(7);\n            outputArray[0] = pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(((this.year < 2000) ? (this.year - 1900) : (this.year - 2000)), 2);\n            outputArray[1] = pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.month, 2);\n            outputArray[2] = pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.day, 2);\n            outputArray[3] = pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.hour, 2);\n            outputArray[4] = pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.minute, 2);\n            outputArray[5] = pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.second, 2);\n            outputArray[6] = \"Z\";\n            return outputArray.join(\"\");\n        }\n        return super.toString(encoding);\n    }\n    onAsciiEncoding() {\n        return `${this.constructor.NAME} : ${this.toDate().toISOString()}`;\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            year: this.year,\n            month: this.month,\n            day: this.day,\n            hour: this.hour,\n            minute: this.minute,\n            second: this.second,\n        };\n    }\n}\n_a$6 = UTCTime;\n(() => {\n    typeStore.UTCTime = _a$6;\n})();\nUTCTime.NAME = \"UTCTime\";\n\nvar _a$5;\nclass GeneralizedTime extends UTCTime {\n    constructor(parameters = {}) {\n        var _b;\n        super(parameters);\n        (_b = this.millisecond) !== null && _b !== void 0 ? _b : (this.millisecond = 0);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 24;\n    }\n    fromDate(inputDate) {\n        super.fromDate(inputDate);\n        this.millisecond = inputDate.getUTCMilliseconds();\n    }\n    toDate() {\n        const utcDate = Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond);\n        return (new Date(utcDate));\n    }\n    fromString(inputString) {\n        let isUTC = false;\n        let timeString = \"\";\n        let dateTimeString = \"\";\n        let fractionPart = 0;\n        let parser;\n        let hourDifference = 0;\n        let minuteDifference = 0;\n        if (inputString[inputString.length - 1] === \"Z\") {\n            timeString = inputString.substring(0, inputString.length - 1);\n            isUTC = true;\n        }\n        else {\n            const number = new Number(inputString[inputString.length - 1]);\n            if (isNaN(number.valueOf()))\n                throw new Error(\"Wrong input string for conversion\");\n            timeString = inputString;\n        }\n        if (isUTC) {\n            if (timeString.indexOf(\"+\") !== -1)\n                throw new Error(\"Wrong input string for conversion\");\n            if (timeString.indexOf(\"-\") !== -1)\n                throw new Error(\"Wrong input string for conversion\");\n        }\n        else {\n            let multiplier = 1;\n            let differencePosition = timeString.indexOf(\"+\");\n            let differenceString = \"\";\n            if (differencePosition === -1) {\n                differencePosition = timeString.indexOf(\"-\");\n                multiplier = -1;\n            }\n            if (differencePosition !== -1) {\n                differenceString = timeString.substring(differencePosition + 1);\n                timeString = timeString.substring(0, differencePosition);\n                if ((differenceString.length !== 2) && (differenceString.length !== 4))\n                    throw new Error(\"Wrong input string for conversion\");\n                let number = parseInt(differenceString.substring(0, 2), 10);\n                if (isNaN(number.valueOf()))\n                    throw new Error(\"Wrong input string for conversion\");\n                hourDifference = multiplier * number;\n                if (differenceString.length === 4) {\n                    number = parseInt(differenceString.substring(2, 4), 10);\n                    if (isNaN(number.valueOf()))\n                        throw new Error(\"Wrong input string for conversion\");\n                    minuteDifference = multiplier * number;\n                }\n            }\n        }\n        let fractionPointPosition = timeString.indexOf(\".\");\n        if (fractionPointPosition === -1)\n            fractionPointPosition = timeString.indexOf(\",\");\n        if (fractionPointPosition !== -1) {\n            const fractionPartCheck = new Number(`0${timeString.substring(fractionPointPosition)}`);\n            if (isNaN(fractionPartCheck.valueOf()))\n                throw new Error(\"Wrong input string for conversion\");\n            fractionPart = fractionPartCheck.valueOf();\n            dateTimeString = timeString.substring(0, fractionPointPosition);\n        }\n        else\n            dateTimeString = timeString;\n        switch (true) {\n            case (dateTimeString.length === 8):\n                parser = /(\\d{4})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1)\n                    throw new Error(\"Wrong input string for conversion\");\n                break;\n            case (dateTimeString.length === 10):\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1) {\n                    let fractionResult = 60 * fractionPart;\n                    this.minute = Math.floor(fractionResult);\n                    fractionResult = 60 * (fractionResult - this.minute);\n                    this.second = Math.floor(fractionResult);\n                    fractionResult = 1000 * (fractionResult - this.second);\n                    this.millisecond = Math.floor(fractionResult);\n                }\n                break;\n            case (dateTimeString.length === 12):\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1) {\n                    let fractionResult = 60 * fractionPart;\n                    this.second = Math.floor(fractionResult);\n                    fractionResult = 1000 * (fractionResult - this.second);\n                    this.millisecond = Math.floor(fractionResult);\n                }\n                break;\n            case (dateTimeString.length === 14):\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\n                if (fractionPointPosition !== -1) {\n                    const fractionResult = 1000 * fractionPart;\n                    this.millisecond = Math.floor(fractionResult);\n                }\n                break;\n            default:\n                throw new Error(\"Wrong input string for conversion\");\n        }\n        const parserArray = parser.exec(dateTimeString);\n        if (parserArray === null)\n            throw new Error(\"Wrong input string for conversion\");\n        for (let j = 1; j < parserArray.length; j++) {\n            switch (j) {\n                case 1:\n                    this.year = parseInt(parserArray[j], 10);\n                    break;\n                case 2:\n                    this.month = parseInt(parserArray[j], 10);\n                    break;\n                case 3:\n                    this.day = parseInt(parserArray[j], 10);\n                    break;\n                case 4:\n                    this.hour = parseInt(parserArray[j], 10) + hourDifference;\n                    break;\n                case 5:\n                    this.minute = parseInt(parserArray[j], 10) + minuteDifference;\n                    break;\n                case 6:\n                    this.second = parseInt(parserArray[j], 10);\n                    break;\n                default:\n                    throw new Error(\"Wrong input string for conversion\");\n            }\n        }\n        if (isUTC === false) {\n            const tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n            this.year = tempDate.getUTCFullYear();\n            this.month = tempDate.getUTCMonth();\n            this.day = tempDate.getUTCDay();\n            this.hour = tempDate.getUTCHours();\n            this.minute = tempDate.getUTCMinutes();\n            this.second = tempDate.getUTCSeconds();\n            this.millisecond = tempDate.getUTCMilliseconds();\n        }\n    }\n    toString(encoding = \"iso\") {\n        if (encoding === \"iso\") {\n            const outputArray = [];\n            outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.year, 4));\n            outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.month, 2));\n            outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.day, 2));\n            outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.hour, 2));\n            outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.minute, 2));\n            outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.second, 2));\n            if (this.millisecond !== 0) {\n                outputArray.push(\".\");\n                outputArray.push(pvutils__WEBPACK_IMPORTED_MODULE_1__.padNumber(this.millisecond, 3));\n            }\n            outputArray.push(\"Z\");\n            return outputArray.join(\"\");\n        }\n        return super.toString(encoding);\n    }\n    toJSON() {\n        return {\n            ...super.toJSON(),\n            millisecond: this.millisecond,\n        };\n    }\n}\n_a$5 = GeneralizedTime;\n(() => {\n    typeStore.GeneralizedTime = _a$5;\n})();\nGeneralizedTime.NAME = \"GeneralizedTime\";\n\nvar _a$4;\nclass DATE extends Utf8String {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 31;\n    }\n}\n_a$4 = DATE;\n(() => {\n    typeStore.DATE = _a$4;\n})();\nDATE.NAME = \"DATE\";\n\nvar _a$3;\nclass TimeOfDay extends Utf8String {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 32;\n    }\n}\n_a$3 = TimeOfDay;\n(() => {\n    typeStore.TimeOfDay = _a$3;\n})();\nTimeOfDay.NAME = \"TimeOfDay\";\n\nvar _a$2;\nclass DateTime extends Utf8String {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 33;\n    }\n}\n_a$2 = DateTime;\n(() => {\n    typeStore.DateTime = _a$2;\n})();\nDateTime.NAME = \"DateTime\";\n\nvar _a$1;\nclass Duration extends Utf8String {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 34;\n    }\n}\n_a$1 = Duration;\n(() => {\n    typeStore.Duration = _a$1;\n})();\nDuration.NAME = \"Duration\";\n\nvar _a;\nclass TIME extends Utf8String {\n    constructor(parameters = {}) {\n        super(parameters);\n        this.idBlock.tagClass = 1;\n        this.idBlock.tagNumber = 14;\n    }\n}\n_a = TIME;\n(() => {\n    typeStore.TIME = _a;\n})();\nTIME.NAME = \"TIME\";\n\nclass Any {\n    constructor({ name = EMPTY_STRING, optional = false } = {}) {\n        this.name = name;\n        this.optional = optional;\n    }\n}\n\nclass Choice extends Any {\n    constructor({ value = [], ...parameters } = {}) {\n        super(parameters);\n        this.value = value;\n    }\n}\n\nclass Repeated extends Any {\n    constructor({ value = new Any(), local = false, ...parameters } = {}) {\n        super(parameters);\n        this.value = value;\n        this.local = local;\n    }\n}\n\nclass RawData {\n    get data() {\n        return this.dataView.slice().buffer;\n    }\n    set data(value) {\n        this.dataView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(value);\n    }\n    constructor({ data = EMPTY_VIEW } = {}) {\n        this.dataView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(data);\n    }\n    fromBER(inputBuffer, inputOffset, inputLength) {\n        const endLength = inputOffset + inputLength;\n        this.dataView = pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer).subarray(inputOffset, endLength);\n        return endLength;\n    }\n    toBER(_sizeOnly) {\n        return this.dataView.slice().buffer;\n    }\n}\n\nfunction compareSchema(root, inputData, inputSchema) {\n    if (inputSchema instanceof Choice) {\n        for (const element of inputSchema.value) {\n            const result = compareSchema(root, inputData, element);\n            if (result.verified) {\n                return {\n                    verified: true,\n                    result: root,\n                };\n            }\n        }\n        {\n            const _result = {\n                verified: false,\n                result: { error: \"Wrong values for Choice type\" },\n            };\n            if (inputSchema.hasOwnProperty(NAME))\n                _result.name = inputSchema.name;\n            return _result;\n        }\n    }\n    if (inputSchema instanceof Any) {\n        if (inputSchema.hasOwnProperty(NAME))\n            root[inputSchema.name] = inputData;\n        return {\n            verified: true,\n            result: root,\n        };\n    }\n    if ((root instanceof Object) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong root object\" },\n        };\n    }\n    if ((inputData instanceof Object) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 data\" },\n        };\n    }\n    if ((inputSchema instanceof Object) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if ((ID_BLOCK in inputSchema) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if ((FROM_BER in inputSchema.idBlock) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if ((TO_BER in inputSchema.idBlock) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    const encodedId = inputSchema.idBlock.toBER(false);\n    if (encodedId.byteLength === 0) {\n        return {\n            verified: false,\n            result: { error: \"Error encoding idBlock for ASN.1 schema\" },\n        };\n    }\n    const decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);\n    if (decodedOffset === -1) {\n        return {\n            verified: false,\n            result: { error: \"Error decoding idBlock for ASN.1 schema\" },\n        };\n    }\n    if (inputSchema.idBlock.hasOwnProperty(TAG_CLASS) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if (inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass) {\n        return {\n            verified: false,\n            result: root,\n        };\n    }\n    if (inputSchema.idBlock.hasOwnProperty(TAG_NUMBER) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if (inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber) {\n        return {\n            verified: false,\n            result: root,\n        };\n    }\n    if (inputSchema.idBlock.hasOwnProperty(IS_CONSTRUCTED) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if (inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed) {\n        return {\n            verified: false,\n            result: root,\n        };\n    }\n    if (!(IS_HEX_ONLY in inputSchema.idBlock)) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema\" },\n        };\n    }\n    if (inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly) {\n        return {\n            verified: false,\n            result: root,\n        };\n    }\n    if (inputSchema.idBlock.isHexOnly) {\n        if ((VALUE_HEX_VIEW in inputSchema.idBlock) === false) {\n            return {\n                verified: false,\n                result: { error: \"Wrong ASN.1 schema\" },\n            };\n        }\n        const schemaView = inputSchema.idBlock.valueHexView;\n        const asn1View = inputData.idBlock.valueHexView;\n        if (schemaView.length !== asn1View.length) {\n            return {\n                verified: false,\n                result: root,\n            };\n        }\n        for (let i = 0; i < schemaView.length; i++) {\n            if (schemaView[i] !== asn1View[1]) {\n                return {\n                    verified: false,\n                    result: root,\n                };\n            }\n        }\n    }\n    if (inputSchema.name) {\n        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n        if (inputSchema.name)\n            root[inputSchema.name] = inputData;\n    }\n    if (inputSchema instanceof typeStore.Constructed) {\n        let admission = 0;\n        let result = {\n            verified: false,\n            result: { error: \"Unknown error\" },\n        };\n        let maxLength = inputSchema.valueBlock.value.length;\n        if (maxLength > 0) {\n            if (inputSchema.valueBlock.value[0] instanceof Repeated) {\n                maxLength = inputData.valueBlock.value.length;\n            }\n        }\n        if (maxLength === 0) {\n            return {\n                verified: true,\n                result: root,\n            };\n        }\n        if ((inputData.valueBlock.value.length === 0)\n            && (inputSchema.valueBlock.value.length !== 0)) {\n            let _optional = true;\n            for (let i = 0; i < inputSchema.valueBlock.value.length; i++)\n                _optional = _optional && (inputSchema.valueBlock.value[i].optional || false);\n            if (_optional) {\n                return {\n                    verified: true,\n                    result: root,\n                };\n            }\n            if (inputSchema.name) {\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                if (inputSchema.name)\n                    delete root[inputSchema.name];\n            }\n            root.error = \"Inconsistent object length\";\n            return {\n                verified: false,\n                result: root,\n            };\n        }\n        for (let i = 0; i < maxLength; i++) {\n            if ((i - admission) >= inputData.valueBlock.value.length) {\n                if (inputSchema.valueBlock.value[i].optional === false) {\n                    const _result = {\n                        verified: false,\n                        result: root,\n                    };\n                    root.error = \"Inconsistent length between ASN.1 data and schema\";\n                    if (inputSchema.name) {\n                        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                        if (inputSchema.name) {\n                            delete root[inputSchema.name];\n                            _result.name = inputSchema.name;\n                        }\n                    }\n                    return _result;\n                }\n            }\n            else {\n                if (inputSchema.valueBlock.value[0] instanceof Repeated) {\n                    result = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);\n                    if (result.verified === false) {\n                        if (inputSchema.valueBlock.value[0].optional)\n                            admission++;\n                        else {\n                            if (inputSchema.name) {\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                                if (inputSchema.name)\n                                    delete root[inputSchema.name];\n                            }\n                            return result;\n                        }\n                    }\n                    if ((NAME in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].name.length > 0)) {\n                        let arrayRoot = {};\n                        if ((LOCAL in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].local))\n                            arrayRoot = inputData;\n                        else\n                            arrayRoot = root;\n                        if (typeof arrayRoot[inputSchema.valueBlock.value[0].name] === \"undefined\")\n                            arrayRoot[inputSchema.valueBlock.value[0].name] = [];\n                        arrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);\n                    }\n                }\n                else {\n                    result = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);\n                    if (result.verified === false) {\n                        if (inputSchema.valueBlock.value[i].optional)\n                            admission++;\n                        else {\n                            if (inputSchema.name) {\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                                if (inputSchema.name)\n                                    delete root[inputSchema.name];\n                            }\n                            return result;\n                        }\n                    }\n                }\n            }\n        }\n        if (result.verified === false) {\n            const _result = {\n                verified: false,\n                result: root,\n            };\n            if (inputSchema.name) {\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                if (inputSchema.name) {\n                    delete root[inputSchema.name];\n                    _result.name = inputSchema.name;\n                }\n            }\n            return _result;\n        }\n        return {\n            verified: true,\n            result: root,\n        };\n    }\n    if (inputSchema.primitiveSchema\n        && (VALUE_HEX_VIEW in inputData.valueBlock)) {\n        const asn1 = localFromBER(inputData.valueBlock.valueHexView);\n        if (asn1.offset === -1) {\n            const _result = {\n                verified: false,\n                result: asn1.result,\n            };\n            if (inputSchema.name) {\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\n                if (inputSchema.name) {\n                    delete root[inputSchema.name];\n                    _result.name = inputSchema.name;\n                }\n            }\n            return _result;\n        }\n        return compareSchema(root, asn1.result, inputSchema.primitiveSchema);\n    }\n    return {\n        verified: true,\n        result: root,\n    };\n}\nfunction verifySchema(inputBuffer, inputSchema) {\n    if ((inputSchema instanceof Object) === false) {\n        return {\n            verified: false,\n            result: { error: \"Wrong ASN.1 schema type\" },\n        };\n    }\n    const asn1 = localFromBER(pvtsutils__WEBPACK_IMPORTED_MODULE_0__.BufferSourceConverter.toUint8Array(inputBuffer));\n    if (asn1.offset === -1) {\n        return {\n            verified: false,\n            result: asn1.result,\n        };\n    }\n    return compareSchema(asn1.result, asn1.result, inputSchema);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9hc24xanMvYnVpbGQvaW5kZXguZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV1QztBQUNKOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9CQUFvQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixvQkFBb0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELDREQUErQjtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qiw4Q0FBaUI7QUFDL0M7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isd0ZBQXdGLElBQUk7QUFDOUc7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLDREQUErQjtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiw4Q0FBaUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLGVBQWUsSUFBSTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDREQUErQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiwrQ0FBa0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxnQkFBZ0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDBCQUEwQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsNERBQStCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsK0JBQStCO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFdBQVc7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsaURBQW9CO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLGdCQUFnQixJQUFJO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDREQUErQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsaURBQW9CO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLCtDQUFrQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwyQkFBMkI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLGtCQUFrQix3RUFBd0UsSUFBSTtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsOENBQWlCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw4Q0FBaUI7QUFDdkMsa0JBQWtCLE1BQU0sSUFBSSxNQUFNO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxrREFBcUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixzQ0FBc0MsSUFBSTtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHVCQUF1QixLQUFLLHNCQUFzQjtBQUNwRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0Isa0NBQWtDLElBQUk7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qiw0REFBK0I7QUFDdkQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isc0RBQXNELElBQUk7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw0REFBK0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVCQUF1QjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLEVBQUU7QUFDOUU7QUFDQTtBQUNBLGtCQUFrQix1QkFBdUI7QUFDekM7QUFDQTtBQUNBLGlCQUFpQixXQUFXLEtBQUssa0JBQWtCO0FBQ25ELGlCQUFpQixXQUFXO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHNCQUFzQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix1QkFBdUIsSUFBSTtBQUM3QztBQUNBO0FBQ0EsZ0NBQWdDLDREQUErQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsNERBQStCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpREFBb0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsdUJBQXVCLElBQUksY0FBYztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0Esa0JBQWtCLHVDQUF1QyxJQUFJO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHVCQUF1QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLFlBQVksZUFBZSxrQkFBa0IsSUFBSTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDhDQUFpQjtBQUN2QyxrQkFBa0IsTUFBTSxJQUFJLE1BQU07QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsNERBQStCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQSxrQkFBa0IsdURBQXVELElBQUk7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsNERBQStCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixZQUFZLGVBQWUsa0JBQWtCLElBQUk7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsTUFBTSxJQUFJLE1BQU07QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixRQUFRO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLG1EQUFzQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsbURBQXNCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLFFBQVE7QUFDN0M7QUFDQTtBQUNBLDhDQUE4QyxRQUFRO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsbURBQXNCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxRQUFRO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RSxRQUFRO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxpREFBb0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHVCQUF1QixJQUFJO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxpREFBb0I7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELGlCQUFpQjtBQUMxRTtBQUNBLDRCQUE0QixPQUFPO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsbUJBQW1CO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0wsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDhDQUFpQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsOENBQWlCLGNBQWM7QUFDeEU7QUFDQSwyQkFBMkIsNERBQStCLGNBQWMsOENBQWlCO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiwwQkFBMEI7QUFDekQ7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLHdDQUF3QztBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxrQkFBa0IsdUJBQXVCLElBQUksMkJBQTJCO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0Esa0JBQWtCLG1EQUFtRCxJQUFJO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsNERBQStCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixzQkFBc0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsaURBQW9CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw0QkFBNEI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsK0NBQWtCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsU0FBUztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDhDQUFpQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQixzQ0FBc0MsSUFBSTtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVCQUF1QjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVCQUF1QjtBQUMvQztBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsT0FBTztBQUNuQztBQUNBLDJCQUEyQixFQUFFLFFBQVE7QUFDckM7QUFDQSxpQ0FBaUMsRUFBRSxRQUFRLEtBQUs7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix1QkFBdUI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix1QkFBdUIsSUFBSSxzQ0FBc0M7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBLGtCQUFrQiw4QkFBOEIsSUFBSTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsNERBQStCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGlCQUFpQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isc0JBQXNCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixpREFBb0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDRCQUE0QjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiwrQ0FBa0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixTQUFTO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsOENBQWlCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLHNDQUFzQyxJQUFJO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix1QkFBdUI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVCQUF1QjtBQUMvQztBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsT0FBTztBQUNuQztBQUNBLDJCQUEyQixFQUFFLFFBQVE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHVCQUF1QixJQUFJLHNDQUFzQztBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQSxrQkFBa0IsZ0JBQWdCLElBQUk7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQixnQkFBZ0IsSUFBSTtBQUN0QztBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsNERBQStCO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFlBQVk7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUNBQXVDLDREQUErQjtBQUN0RTtBQUNBLG9DQUFvQyw4Q0FBaUI7QUFDckQ7QUFDQTtBQUNBLHFFQUFxRSxHQUFHO0FBQ3hFLG9DQUFvQyw4Q0FBaUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELDhDQUFpQjtBQUN2RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBLGdDQUFnQyw4Q0FBaUI7QUFDakQsdUNBQXVDLDREQUErQjtBQUN0RTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsOENBQWlCO0FBQ3ZFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLGdCQUFnQixJQUFJO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isc0JBQXNCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGVBQWU7QUFDdkMsNEJBQTRCLCtDQUFrQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxRQUFRO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLGdCQUFnQixJQUFJO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixrQ0FBa0MsSUFBSTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixrQkFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsNERBQStCO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsOENBQWlCO0FBQzlDLDZCQUE2Qiw4Q0FBaUI7QUFDOUMsNkJBQTZCLDhDQUFpQjtBQUM5Qyw2QkFBNkIsOENBQWlCO0FBQzlDLDZCQUE2Qiw4Q0FBaUI7QUFDOUMsNkJBQTZCLDhDQUFpQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsdUJBQXVCLElBQUksNEJBQTRCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsNENBQTRDO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHdCQUF3QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw4Q0FBaUI7QUFDOUMsNkJBQTZCLDhDQUFpQjtBQUM5Qyw2QkFBNkIsOENBQWlCO0FBQzlDLDZCQUE2Qiw4Q0FBaUI7QUFDOUMsNkJBQTZCLDhDQUFpQjtBQUM5Qyw2QkFBNkIsOENBQWlCO0FBQzlDO0FBQ0E7QUFDQSxpQ0FBaUMsOENBQWlCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQSxrQkFBa0Isd0NBQXdDLElBQUk7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0IsNEJBQTRCLElBQUk7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0Isa0RBQWtELElBQUk7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDREQUErQjtBQUN2RDtBQUNBLGtCQUFrQixvQkFBb0IsSUFBSTtBQUMxQyx3QkFBd0IsNERBQStCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qiw0REFBK0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsdUNBQXVDO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsNEJBQTRCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsMkJBQTJCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsNkJBQTZCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsNkJBQTZCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsNkJBQTZCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsNkJBQTZCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixrREFBa0Q7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGtEQUFrRDtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDZCQUE2QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDZCQUE2QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDZCQUE2QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDZCQUE2QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsNkJBQTZCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVCQUF1QjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHdCQUF3QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix5Q0FBeUM7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGVBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixrQ0FBa0M7QUFDeEQ7QUFDQTtBQUNBLDhCQUE4Qiw0REFBK0I7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZ2lCIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRGVza3RvcC9jMnBhIHRvb2wvbm9kZV9tb2R1bGVzL2FzbjFqcy9idWlsZC9pbmRleC5lcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgR01PIEdsb2JhbFNpZ25cbiAqIENvcHlyaWdodCAoYykgMjAxNS0yMDIyLCBQZWN1bGlhciBWZW50dXJlc1xuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFxuICogQXV0aG9yIDIwMTQtMjAxOSwgWXVyeSBTdHJvemhldnNreVxuICogXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLFxuICogYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICogXG4gKiAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuICogICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqIFxuICogKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiAqICAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yXG4gKiAgIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKiBcbiAqICogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgY29weXJpZ2h0IGhvbGRlciBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuICogICB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICogXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkRcbiAqIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gKiBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUlxuICogQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4gKiAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7XG4gKiBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT05cbiAqIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gKiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKiBcbiAqL1xuXG5pbXBvcnQgKiBhcyBwdnRzdXRpbHMgZnJvbSAncHZ0c3V0aWxzJztcbmltcG9ydCAqIGFzIHB2dXRpbHMgZnJvbSAncHZ1dGlscyc7XG5cbmZ1bmN0aW9uIGFzc2VydEJpZ0ludCgpIHtcbiAgICBpZiAodHlwZW9mIEJpZ0ludCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCaWdJbnQgaXMgbm90IGRlZmluZWQuIFlvdXIgZW52aXJvbm1lbnQgZG9lc24ndCBpbXBsZW1lbnQgQmlnSW50LlwiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjb25jYXQoYnVmZmVycykge1xuICAgIGxldCBvdXRwdXRMZW5ndGggPSAwO1xuICAgIGxldCBwcmV2TGVuZ3RoID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gYnVmZmVyc1tpXTtcbiAgICAgICAgb3V0cHV0TGVuZ3RoICs9IGJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgIH1cbiAgICBjb25zdCByZXRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkob3V0cHV0TGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gYnVmZmVyc1tpXTtcbiAgICAgICAgcmV0Vmlldy5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSwgcHJldkxlbmd0aCk7XG4gICAgICAgIHByZXZMZW5ndGggKz0gYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiByZXRWaWV3LmJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIGNoZWNrQnVmZmVyUGFyYW1zKGJhc2VCbG9jaywgaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCkge1xuICAgIGlmICghKGlucHV0QnVmZmVyIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgYmFzZUJsb2NrLmVycm9yID0gXCJXcm9uZyBwYXJhbWV0ZXI6IGlucHV0QnVmZmVyIG11c3QgYmUgJ1VpbnQ4QXJyYXknXCI7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFpbnB1dEJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICAgIGJhc2VCbG9jay5lcnJvciA9IFwiV3JvbmcgcGFyYW1ldGVyOiBpbnB1dEJ1ZmZlciBoYXMgemVybyBsZW5ndGhcIjtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaW5wdXRPZmZzZXQgPCAwKSB7XG4gICAgICAgIGJhc2VCbG9jay5lcnJvciA9IFwiV3JvbmcgcGFyYW1ldGVyOiBpbnB1dE9mZnNldCBsZXNzIHRoYW4gemVyb1wiO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpbnB1dExlbmd0aCA8IDApIHtcbiAgICAgICAgYmFzZUJsb2NrLmVycm9yID0gXCJXcm9uZyBwYXJhbWV0ZXI6IGlucHV0TGVuZ3RoIGxlc3MgdGhhbiB6ZXJvXCI7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKChpbnB1dEJ1ZmZlci5ieXRlTGVuZ3RoIC0gaW5wdXRPZmZzZXQgLSBpbnB1dExlbmd0aCkgPCAwKSB7XG4gICAgICAgIGJhc2VCbG9jay5lcnJvciA9IFwiRW5kIG9mIGlucHV0IHJlYWNoZWQgYmVmb3JlIG1lc3NhZ2Ugd2FzIGZ1bGx5IGRlY29kZWQgKGluY29uc2lzdGVudCBvZmZzZXQgYW5kIGxlbmd0aCB2YWx1ZXMpXCI7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmNsYXNzIFZpZXdXcml0ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLml0ZW1zID0gW107XG4gICAgfVxuICAgIHdyaXRlKGJ1Zikge1xuICAgICAgICB0aGlzLml0ZW1zLnB1c2goYnVmKTtcbiAgICB9XG4gICAgZmluYWwoKSB7XG4gICAgICAgIHJldHVybiBjb25jYXQodGhpcy5pdGVtcyk7XG4gICAgfVxufVxuXG5jb25zdCBwb3dlcnMyID0gW25ldyBVaW50OEFycmF5KFsxXSldO1xuY29uc3QgZGlnaXRzU3RyaW5nID0gXCIwMTIzNDU2Nzg5XCI7XG5jb25zdCBOQU1FID0gXCJuYW1lXCI7XG5jb25zdCBWQUxVRV9IRVhfVklFVyA9IFwidmFsdWVIZXhWaWV3XCI7XG5jb25zdCBJU19IRVhfT05MWSA9IFwiaXNIZXhPbmx5XCI7XG5jb25zdCBJRF9CTE9DSyA9IFwiaWRCbG9ja1wiO1xuY29uc3QgVEFHX0NMQVNTID0gXCJ0YWdDbGFzc1wiO1xuY29uc3QgVEFHX05VTUJFUiA9IFwidGFnTnVtYmVyXCI7XG5jb25zdCBJU19DT05TVFJVQ1RFRCA9IFwiaXNDb25zdHJ1Y3RlZFwiO1xuY29uc3QgRlJPTV9CRVIgPSBcImZyb21CRVJcIjtcbmNvbnN0IFRPX0JFUiA9IFwidG9CRVJcIjtcbmNvbnN0IExPQ0FMID0gXCJsb2NhbFwiO1xuY29uc3QgRU1QVFlfU1RSSU5HID0gXCJcIjtcbmNvbnN0IEVNUFRZX0JVRkZFUiA9IG5ldyBBcnJheUJ1ZmZlcigwKTtcbmNvbnN0IEVNUFRZX1ZJRVcgPSBuZXcgVWludDhBcnJheSgwKTtcbmNvbnN0IEVORF9PRl9DT05URU5UX05BTUUgPSBcIkVuZE9mQ29udGVudFwiO1xuY29uc3QgT0NURVRfU1RSSU5HX05BTUUgPSBcIk9DVEVUIFNUUklOR1wiO1xuY29uc3QgQklUX1NUUklOR19OQU1FID0gXCJCSVQgU1RSSU5HXCI7XG5cbmZ1bmN0aW9uIEhleEJsb2NrKEJhc2VDbGFzcykge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gX2EgPSBjbGFzcyBTb21lIGV4dGVuZHMgQmFzZUNsYXNzIHtcbiAgICAgICAgICAgIGdldCB2YWx1ZUhleCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZUhleFZpZXcuc2xpY2UoKS5idWZmZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXQgdmFsdWVIZXgodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlSGV4VmlldyA9IG5ldyBVaW50OEFycmF5KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2I7XG4gICAgICAgICAgICAgICAgc3VwZXIoLi4uYXJncyk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gYXJnc1swXSB8fCB7fTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzSGV4T25seSA9IChfYiA9IHBhcmFtcy5pc0hleE9ubHkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVIZXhWaWV3ID0gcGFyYW1zLnZhbHVlSGV4ID8gcHZ0c3V0aWxzLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkocGFyYW1zLnZhbHVlSGV4KSA6IEVNUFRZX1ZJRVc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2aWV3ID0gaW5wdXRCdWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IG5ldyBVaW50OEFycmF5KGlucHV0QnVmZmVyKSA6IGlucHV0QnVmZmVyO1xuICAgICAgICAgICAgICAgIGlmICghY2hlY2tCdWZmZXJQYXJhbXModGhpcywgdmlldywgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGVuZExlbmd0aCA9IGlucHV0T2Zmc2V0ICsgaW5wdXRMZW5ndGg7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZUhleFZpZXcgPSB2aWV3LnN1YmFycmF5KGlucHV0T2Zmc2V0LCBlbmRMZW5ndGgpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy52YWx1ZUhleFZpZXcubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2FybmluZ3MucHVzaChcIlplcm8gYnVmZmVyIGxlbmd0aFwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0T2Zmc2V0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmJsb2NrTGVuZ3RoID0gaW5wdXRMZW5ndGg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVuZExlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvQkVSKHNpemVPbmx5ID0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNIZXhPbmx5KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBcIkZsYWcgJ2lzSGV4T25seScgaXMgbm90IHNldCwgYWJvcnRcIjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEVNUFRZX0JVRkZFUjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNpemVPbmx5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQXJyYXlCdWZmZXIodGhpcy52YWx1ZUhleFZpZXcuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy52YWx1ZUhleFZpZXcuYnl0ZUxlbmd0aCA9PT0gdGhpcy52YWx1ZUhleFZpZXcuYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy52YWx1ZUhleFZpZXcuYnVmZmVyXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy52YWx1ZUhleFZpZXcuc2xpY2UoKS5idWZmZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b0pTT04oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXG4gICAgICAgICAgICAgICAgICAgIGlzSGV4T25seTogdGhpcy5pc0hleE9ubHksXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlSGV4OiBwdnRzdXRpbHMuQ29udmVydC5Ub0hleCh0aGlzLnZhbHVlSGV4VmlldyksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX2EuTkFNRSA9IFwiaGV4QmxvY2tcIixcbiAgICAgICAgX2E7XG59XG5cbmNsYXNzIExvY2FsQmFzZUJsb2NrIHtcbiAgICBzdGF0aWMgYmxvY2tOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5OQU1FO1xuICAgIH1cbiAgICBnZXQgdmFsdWVCZWZvcmVEZWNvZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlQmVmb3JlRGVjb2RlVmlldy5zbGljZSgpLmJ1ZmZlcjtcbiAgICB9XG4gICAgc2V0IHZhbHVlQmVmb3JlRGVjb2RlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWVCZWZvcmVEZWNvZGVWaWV3ID0gbmV3IFVpbnQ4QXJyYXkodmFsdWUpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcih7IGJsb2NrTGVuZ3RoID0gMCwgZXJyb3IgPSBFTVBUWV9TVFJJTkcsIHdhcm5pbmdzID0gW10sIHZhbHVlQmVmb3JlRGVjb2RlID0gRU1QVFlfVklFVywgfSA9IHt9KSB7XG4gICAgICAgIHRoaXMuYmxvY2tMZW5ndGggPSBibG9ja0xlbmd0aDtcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgICAgICB0aGlzLndhcm5pbmdzID0gd2FybmluZ3M7XG4gICAgICAgIHRoaXMudmFsdWVCZWZvcmVEZWNvZGVWaWV3ID0gcHZ0c3V0aWxzLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkodmFsdWVCZWZvcmVEZWNvZGUpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBibG9ja05hbWU6IHRoaXMuY29uc3RydWN0b3IuTkFNRSxcbiAgICAgICAgICAgIGJsb2NrTGVuZ3RoOiB0aGlzLmJsb2NrTGVuZ3RoLFxuICAgICAgICAgICAgZXJyb3I6IHRoaXMuZXJyb3IsXG4gICAgICAgICAgICB3YXJuaW5nczogdGhpcy53YXJuaW5ncyxcbiAgICAgICAgICAgIHZhbHVlQmVmb3JlRGVjb2RlOiBwdnRzdXRpbHMuQ29udmVydC5Ub0hleCh0aGlzLnZhbHVlQmVmb3JlRGVjb2RlVmlldyksXG4gICAgICAgIH07XG4gICAgfVxufVxuTG9jYWxCYXNlQmxvY2suTkFNRSA9IFwiYmFzZUJsb2NrXCI7XG5cbmNsYXNzIFZhbHVlQmxvY2sgZXh0ZW5kcyBMb2NhbEJhc2VCbG9jayB7XG4gICAgZnJvbUJFUihfaW5wdXRCdWZmZXIsIF9pbnB1dE9mZnNldCwgX2lucHV0TGVuZ3RoKSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcIlVzZXIgbmVlZCB0byBtYWtlIGEgc3BlY2lmaWMgZnVuY3Rpb24gaW4gYSBjbGFzcyB3aGljaCBleHRlbmRzICdWYWx1ZUJsb2NrJ1wiKTtcbiAgICB9XG4gICAgdG9CRVIoX3NpemVPbmx5LCBfd3JpdGVyKSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcIlVzZXIgbmVlZCB0byBtYWtlIGEgc3BlY2lmaWMgZnVuY3Rpb24gaW4gYSBjbGFzcyB3aGljaCBleHRlbmRzICdWYWx1ZUJsb2NrJ1wiKTtcbiAgICB9XG59XG5WYWx1ZUJsb2NrLk5BTUUgPSBcInZhbHVlQmxvY2tcIjtcblxuY2xhc3MgTG9jYWxJZGVudGlmaWNhdGlvbkJsb2NrIGV4dGVuZHMgSGV4QmxvY2soTG9jYWxCYXNlQmxvY2spIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGlkQmxvY2sgPSB7fSB9ID0ge30pIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBpZiAoaWRCbG9jaykge1xuICAgICAgICAgICAgdGhpcy5pc0hleE9ubHkgPSAoX2EgPSBpZEJsb2NrLmlzSGV4T25seSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnZhbHVlSGV4VmlldyA9IGlkQmxvY2sudmFsdWVIZXhcbiAgICAgICAgICAgICAgICA/IHB2dHN1dGlscy5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9VaW50OEFycmF5KGlkQmxvY2sudmFsdWVIZXgpXG4gICAgICAgICAgICAgICAgOiBFTVBUWV9WSUVXO1xuICAgICAgICAgICAgdGhpcy50YWdDbGFzcyA9IChfYiA9IGlkQmxvY2sudGFnQ2xhc3MpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IC0xO1xuICAgICAgICAgICAgdGhpcy50YWdOdW1iZXIgPSAoX2MgPSBpZEJsb2NrLnRhZ051bWJlcikgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogLTE7XG4gICAgICAgICAgICB0aGlzLmlzQ29uc3RydWN0ZWQgPSAoX2QgPSBpZEJsb2NrLmlzQ29uc3RydWN0ZWQpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50YWdDbGFzcyA9IC0xO1xuICAgICAgICAgICAgdGhpcy50YWdOdW1iZXIgPSAtMTtcbiAgICAgICAgICAgIHRoaXMuaXNDb25zdHJ1Y3RlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvQkVSKHNpemVPbmx5ID0gZmFsc2UpIHtcbiAgICAgICAgbGV0IGZpcnN0T2N0ZXQgPSAwO1xuICAgICAgICBzd2l0Y2ggKHRoaXMudGFnQ2xhc3MpIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBmaXJzdE9jdGV0IHw9IDB4MDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgZmlyc3RPY3RldCB8PSAweDQwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIGZpcnN0T2N0ZXQgfD0gMHg4MDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBmaXJzdE9jdGV0IHw9IDB4QzA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBcIlVua25vd24gdGFnIGNsYXNzXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEVNUFRZX0JVRkZFUjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0NvbnN0cnVjdGVkKVxuICAgICAgICAgICAgZmlyc3RPY3RldCB8PSAweDIwO1xuICAgICAgICBpZiAodGhpcy50YWdOdW1iZXIgPCAzMSAmJiAhdGhpcy5pc0hleE9ubHkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJldFZpZXcgPSBuZXcgVWludDhBcnJheSgxKTtcbiAgICAgICAgICAgIGlmICghc2l6ZU9ubHkpIHtcbiAgICAgICAgICAgICAgICBsZXQgbnVtYmVyID0gdGhpcy50YWdOdW1iZXI7XG4gICAgICAgICAgICAgICAgbnVtYmVyICY9IDB4MUY7XG4gICAgICAgICAgICAgICAgZmlyc3RPY3RldCB8PSBudW1iZXI7XG4gICAgICAgICAgICAgICAgcmV0Vmlld1swXSA9IGZpcnN0T2N0ZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0Vmlldy5idWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmlzSGV4T25seSkge1xuICAgICAgICAgICAgY29uc3QgZW5jb2RlZEJ1ZiA9IHB2dXRpbHMudXRpbFRvQmFzZSh0aGlzLnRhZ051bWJlciwgNyk7XG4gICAgICAgICAgICBjb25zdCBlbmNvZGVkVmlldyA9IG5ldyBVaW50OEFycmF5KGVuY29kZWRCdWYpO1xuICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IGVuY29kZWRCdWYuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IHJldFZpZXcgPSBuZXcgVWludDhBcnJheShzaXplICsgMSk7XG4gICAgICAgICAgICByZXRWaWV3WzBdID0gKGZpcnN0T2N0ZXQgfCAweDFGKTtcbiAgICAgICAgICAgIGlmICghc2l6ZU9ubHkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IChzaXplIC0gMSk7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgcmV0Vmlld1tpICsgMV0gPSBlbmNvZGVkVmlld1tpXSB8IDB4ODA7XG4gICAgICAgICAgICAgICAgcmV0Vmlld1tzaXplXSA9IGVuY29kZWRWaWV3W3NpemUgLSAxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXRWaWV3LmJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy52YWx1ZUhleFZpZXcuYnl0ZUxlbmd0aCArIDEpO1xuICAgICAgICByZXRWaWV3WzBdID0gKGZpcnN0T2N0ZXQgfCAweDFGKTtcbiAgICAgICAgaWYgKCFzaXplT25seSkge1xuICAgICAgICAgICAgY29uc3QgY3VyVmlldyA9IHRoaXMudmFsdWVIZXhWaWV3O1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAoY3VyVmlldy5sZW5ndGggLSAxKTsgaSsrKVxuICAgICAgICAgICAgICAgIHJldFZpZXdbaSArIDFdID0gY3VyVmlld1tpXSB8IDB4ODA7XG4gICAgICAgICAgICByZXRWaWV3W3RoaXMudmFsdWVIZXhWaWV3LmJ5dGVMZW5ndGhdID0gY3VyVmlld1tjdXJWaWV3Lmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXRWaWV3LmJ1ZmZlcjtcbiAgICB9XG4gICAgZnJvbUJFUihpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGlucHV0VmlldyA9IHB2dHN1dGlscy5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9VaW50OEFycmF5KGlucHV0QnVmZmVyKTtcbiAgICAgICAgaWYgKCFjaGVja0J1ZmZlclBhcmFtcyh0aGlzLCBpbnB1dFZpZXcsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCkpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnRCdWZmZXIgPSBpbnB1dFZpZXcuc3ViYXJyYXkoaW5wdXRPZmZzZXQsIGlucHV0T2Zmc2V0ICsgaW5wdXRMZW5ndGgpO1xuICAgICAgICBpZiAoaW50QnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lcnJvciA9IFwiWmVybyBidWZmZXIgbGVuZ3RoXCI7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFnQ2xhc3NNYXNrID0gaW50QnVmZmVyWzBdICYgMHhDMDtcbiAgICAgICAgc3dpdGNoICh0YWdDbGFzc01hc2spIHtcbiAgICAgICAgICAgIGNhc2UgMHgwMDpcbiAgICAgICAgICAgICAgICB0aGlzLnRhZ0NsYXNzID0gKDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAweDQwOlxuICAgICAgICAgICAgICAgIHRoaXMudGFnQ2xhc3MgPSAoMik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDB4ODA6XG4gICAgICAgICAgICAgICAgdGhpcy50YWdDbGFzcyA9ICgzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMHhDMDpcbiAgICAgICAgICAgICAgICB0aGlzLnRhZ0NsYXNzID0gKDQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gXCJVbmtub3duIHRhZyBjbGFzc1wiO1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzQ29uc3RydWN0ZWQgPSAoaW50QnVmZmVyWzBdICYgMHgyMCkgPT09IDB4MjA7XG4gICAgICAgIHRoaXMuaXNIZXhPbmx5ID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHRhZ051bWJlck1hc2sgPSBpbnRCdWZmZXJbMF0gJiAweDFGO1xuICAgICAgICBpZiAodGFnTnVtYmVyTWFzayAhPT0gMHgxRikge1xuICAgICAgICAgICAgdGhpcy50YWdOdW1iZXIgPSAodGFnTnVtYmVyTWFzayk7XG4gICAgICAgICAgICB0aGlzLmJsb2NrTGVuZ3RoID0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBjb3VudCA9IDE7XG4gICAgICAgICAgICBsZXQgaW50VGFnTnVtYmVyQnVmZmVyID0gdGhpcy52YWx1ZUhleFZpZXcgPSBuZXcgVWludDhBcnJheSgyNTUpO1xuICAgICAgICAgICAgbGV0IHRhZ051bWJlckJ1ZmZlck1heExlbmd0aCA9IDI1NTtcbiAgICAgICAgICAgIHdoaWxlIChpbnRCdWZmZXJbY291bnRdICYgMHg4MCkge1xuICAgICAgICAgICAgICAgIGludFRhZ051bWJlckJ1ZmZlcltjb3VudCAtIDFdID0gaW50QnVmZmVyW2NvdW50XSAmIDB4N0Y7XG4gICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICBpZiAoY291bnQgPj0gaW50QnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gXCJFbmQgb2YgaW5wdXQgcmVhY2hlZCBiZWZvcmUgbWVzc2FnZSB3YXMgZnVsbHkgZGVjb2RlZFwiO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PT0gdGFnTnVtYmVyQnVmZmVyTWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhZ051bWJlckJ1ZmZlck1heExlbmd0aCArPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBCdWZmZXJWaWV3ID0gbmV3IFVpbnQ4QXJyYXkodGFnTnVtYmVyQnVmZmVyTWF4TGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnRUYWdOdW1iZXJCdWZmZXIubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wQnVmZmVyVmlld1tpXSA9IGludFRhZ051bWJlckJ1ZmZlcltpXTtcbiAgICAgICAgICAgICAgICAgICAgaW50VGFnTnVtYmVyQnVmZmVyID0gdGhpcy52YWx1ZUhleFZpZXcgPSBuZXcgVWludDhBcnJheSh0YWdOdW1iZXJCdWZmZXJNYXhMZW5ndGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggPSAoY291bnQgKyAxKTtcbiAgICAgICAgICAgIGludFRhZ051bWJlckJ1ZmZlcltjb3VudCAtIDFdID0gaW50QnVmZmVyW2NvdW50XSAmIDB4N0Y7XG4gICAgICAgICAgICBjb25zdCB0ZW1wQnVmZmVyVmlldyA9IG5ldyBVaW50OEFycmF5KGNvdW50KTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKylcbiAgICAgICAgICAgICAgICB0ZW1wQnVmZmVyVmlld1tpXSA9IGludFRhZ051bWJlckJ1ZmZlcltpXTtcbiAgICAgICAgICAgIGludFRhZ051bWJlckJ1ZmZlciA9IHRoaXMudmFsdWVIZXhWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoY291bnQpO1xuICAgICAgICAgICAgaW50VGFnTnVtYmVyQnVmZmVyLnNldCh0ZW1wQnVmZmVyVmlldyk7XG4gICAgICAgICAgICBpZiAodGhpcy5ibG9ja0xlbmd0aCA8PSA5KVxuICAgICAgICAgICAgICAgIHRoaXMudGFnTnVtYmVyID0gcHZ1dGlscy51dGlsRnJvbUJhc2UoaW50VGFnTnVtYmVyQnVmZmVyLCA3KTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNIZXhPbmx5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLndhcm5pbmdzLnB1c2goXCJUYWcgdG9vIGxvbmcsIHJlcHJlc2VudGVkIGFzIGhleC1jb2RlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKCh0aGlzLnRhZ0NsYXNzID09PSAxKSlcbiAgICAgICAgICAgICYmICh0aGlzLmlzQ29uc3RydWN0ZWQpKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMudGFnTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgY2FzZSAyMzpcbiAgICAgICAgICAgICAgICBjYXNlIDI0OlxuICAgICAgICAgICAgICAgIGNhc2UgMzE6XG4gICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICBjYXNlIDMzOlxuICAgICAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBcIkNvbnN0cnVjdGVkIGVuY29kaW5nIHVzZWQgZm9yIHByaW1pdGl2ZSB0eXBlXCI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKGlucHV0T2Zmc2V0ICsgdGhpcy5ibG9ja0xlbmd0aCk7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxuICAgICAgICAgICAgdGFnQ2xhc3M6IHRoaXMudGFnQ2xhc3MsXG4gICAgICAgICAgICB0YWdOdW1iZXI6IHRoaXMudGFnTnVtYmVyLFxuICAgICAgICAgICAgaXNDb25zdHJ1Y3RlZDogdGhpcy5pc0NvbnN0cnVjdGVkLFxuICAgICAgICB9O1xuICAgIH1cbn1cbkxvY2FsSWRlbnRpZmljYXRpb25CbG9jay5OQU1FID0gXCJpZGVudGlmaWNhdGlvbkJsb2NrXCI7XG5cbmNsYXNzIExvY2FsTGVuZ3RoQmxvY2sgZXh0ZW5kcyBMb2NhbEJhc2VCbG9jayB7XG4gICAgY29uc3RydWN0b3IoeyBsZW5CbG9jayA9IHt9IH0gPSB7fSkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pc0luZGVmaW5pdGVGb3JtID0gKF9hID0gbGVuQmxvY2suaXNJbmRlZmluaXRlRm9ybSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2U7XG4gICAgICAgIHRoaXMubG9uZ0Zvcm1Vc2VkID0gKF9iID0gbGVuQmxvY2subG9uZ0Zvcm1Vc2VkKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBmYWxzZTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAoX2MgPSBsZW5CbG9jay5sZW5ndGgpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDA7XG4gICAgfVxuICAgIGZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCkge1xuICAgICAgICBjb25zdCB2aWV3ID0gcHZ0c3V0aWxzLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkoaW5wdXRCdWZmZXIpO1xuICAgICAgICBpZiAoIWNoZWNrQnVmZmVyUGFyYW1zKHRoaXMsIHZpZXcsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCkpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnRCdWZmZXIgPSB2aWV3LnN1YmFycmF5KGlucHV0T2Zmc2V0LCBpbnB1dE9mZnNldCArIGlucHV0TGVuZ3RoKTtcbiAgICAgICAgaWYgKGludEJ1ZmZlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBcIlplcm8gYnVmZmVyIGxlbmd0aFwiO1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRCdWZmZXJbMF0gPT09IDB4RkYpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBcIkxlbmd0aCBibG9jayAweEZGIGlzIHJlc2VydmVkIGJ5IHN0YW5kYXJkXCI7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc0luZGVmaW5pdGVGb3JtID0gaW50QnVmZmVyWzBdID09PSAweDgwO1xuICAgICAgICBpZiAodGhpcy5pc0luZGVmaW5pdGVGb3JtKSB7XG4gICAgICAgICAgICB0aGlzLmJsb2NrTGVuZ3RoID0gMTtcbiAgICAgICAgICAgIHJldHVybiAoaW5wdXRPZmZzZXQgKyB0aGlzLmJsb2NrTGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvbmdGb3JtVXNlZCA9ICEhKGludEJ1ZmZlclswXSAmIDB4ODApO1xuICAgICAgICBpZiAodGhpcy5sb25nRm9ybVVzZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aGlzLmxlbmd0aCA9IChpbnRCdWZmZXJbMF0pO1xuICAgICAgICAgICAgdGhpcy5ibG9ja0xlbmd0aCA9IDE7XG4gICAgICAgICAgICByZXR1cm4gKGlucHV0T2Zmc2V0ICsgdGhpcy5ibG9ja0xlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY291bnQgPSBpbnRCdWZmZXJbMF0gJiAweDdGO1xuICAgICAgICBpZiAoY291bnQgPiA4KSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yID0gXCJUb28gYmlnIGludGVnZXJcIjtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGNvdW50ICsgMSkgPiBpbnRCdWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yID0gXCJFbmQgb2YgaW5wdXQgcmVhY2hlZCBiZWZvcmUgbWVzc2FnZSB3YXMgZnVsbHkgZGVjb2RlZFwiO1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxlbk9mZnNldCA9IGlucHV0T2Zmc2V0ICsgMTtcbiAgICAgICAgY29uc3QgbGVuZ3RoQnVmZmVyVmlldyA9IHZpZXcuc3ViYXJyYXkobGVuT2Zmc2V0LCBsZW5PZmZzZXQgKyBjb3VudCk7XG4gICAgICAgIGlmIChsZW5ndGhCdWZmZXJWaWV3W2NvdW50IC0gMV0gPT09IDB4MDApXG4gICAgICAgICAgICB0aGlzLndhcm5pbmdzLnB1c2goXCJOZWVkbGVzc2x5IGxvbmcgZW5jb2RlZCBsZW5ndGhcIik7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gcHZ1dGlscy51dGlsRnJvbUJhc2UobGVuZ3RoQnVmZmVyVmlldywgOCk7XG4gICAgICAgIGlmICh0aGlzLmxvbmdGb3JtVXNlZCAmJiAodGhpcy5sZW5ndGggPD0gMTI3KSlcbiAgICAgICAgICAgIHRoaXMud2FybmluZ3MucHVzaChcIlVubmVjZXNzYXJ5IHVzYWdlIG9mIGxvbmcgbGVuZ3RoIGZvcm1cIik7XG4gICAgICAgIHRoaXMuYmxvY2tMZW5ndGggPSBjb3VudCArIDE7XG4gICAgICAgIHJldHVybiAoaW5wdXRPZmZzZXQgKyB0aGlzLmJsb2NrTGVuZ3RoKTtcbiAgICB9XG4gICAgdG9CRVIoc2l6ZU9ubHkgPSBmYWxzZSkge1xuICAgICAgICBsZXQgcmV0QnVmO1xuICAgICAgICBsZXQgcmV0VmlldztcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID4gMTI3KVxuICAgICAgICAgICAgdGhpcy5sb25nRm9ybVVzZWQgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5pc0luZGVmaW5pdGVGb3JtKSB7XG4gICAgICAgICAgICByZXRCdWYgPSBuZXcgQXJyYXlCdWZmZXIoMSk7XG4gICAgICAgICAgICBpZiAoc2l6ZU9ubHkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0VmlldyA9IG5ldyBVaW50OEFycmF5KHJldEJ1Zik7XG4gICAgICAgICAgICAgICAgcmV0Vmlld1swXSA9IDB4ODA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0QnVmO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxvbmdGb3JtVXNlZCkge1xuICAgICAgICAgICAgY29uc3QgZW5jb2RlZEJ1ZiA9IHB2dXRpbHMudXRpbFRvQmFzZSh0aGlzLmxlbmd0aCwgOCk7XG4gICAgICAgICAgICBpZiAoZW5jb2RlZEJ1Zi5ieXRlTGVuZ3RoID4gMTI3KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IFwiVG9vIGJpZyBsZW5ndGhcIjtcbiAgICAgICAgICAgICAgICByZXR1cm4gKEVNUFRZX0JVRkZFUik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXRCdWYgPSBuZXcgQXJyYXlCdWZmZXIoZW5jb2RlZEJ1Zi5ieXRlTGVuZ3RoICsgMSk7XG4gICAgICAgICAgICBpZiAoc2l6ZU9ubHkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldEJ1ZjtcbiAgICAgICAgICAgIGNvbnN0IGVuY29kZWRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoZW5jb2RlZEJ1Zik7XG4gICAgICAgICAgICByZXRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkocmV0QnVmKTtcbiAgICAgICAgICAgIHJldFZpZXdbMF0gPSBlbmNvZGVkQnVmLmJ5dGVMZW5ndGggfCAweDgwO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmNvZGVkQnVmLmJ5dGVMZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICByZXRWaWV3W2kgKyAxXSA9IGVuY29kZWRWaWV3W2ldO1xuICAgICAgICAgICAgcmV0dXJuIHJldEJ1ZjtcbiAgICAgICAgfVxuICAgICAgICByZXRCdWYgPSBuZXcgQXJyYXlCdWZmZXIoMSk7XG4gICAgICAgIGlmIChzaXplT25seSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldFZpZXcgPSBuZXcgVWludDhBcnJheShyZXRCdWYpO1xuICAgICAgICAgICAgcmV0Vmlld1swXSA9IHRoaXMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXRCdWY7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxuICAgICAgICAgICAgaXNJbmRlZmluaXRlRm9ybTogdGhpcy5pc0luZGVmaW5pdGVGb3JtLFxuICAgICAgICAgICAgbG9uZ0Zvcm1Vc2VkOiB0aGlzLmxvbmdGb3JtVXNlZCxcbiAgICAgICAgICAgIGxlbmd0aDogdGhpcy5sZW5ndGgsXG4gICAgICAgIH07XG4gICAgfVxufVxuTG9jYWxMZW5ndGhCbG9jay5OQU1FID0gXCJsZW5ndGhCbG9ja1wiO1xuXG5jb25zdCB0eXBlU3RvcmUgPSB7fTtcblxuY2xhc3MgQmFzZUJsb2NrIGV4dGVuZHMgTG9jYWxCYXNlQmxvY2sge1xuICAgIGNvbnN0cnVjdG9yKHsgbmFtZSA9IEVNUFRZX1NUUklORywgb3B0aW9uYWwgPSBmYWxzZSwgcHJpbWl0aXZlU2NoZW1hLCAuLi5wYXJhbWV0ZXJzIH0gPSB7fSwgdmFsdWVCbG9ja1R5cGUpIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMub3B0aW9uYWwgPSBvcHRpb25hbDtcbiAgICAgICAgaWYgKHByaW1pdGl2ZVNjaGVtYSkge1xuICAgICAgICAgICAgdGhpcy5wcmltaXRpdmVTY2hlbWEgPSBwcmltaXRpdmVTY2hlbWE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pZEJsb2NrID0gbmV3IExvY2FsSWRlbnRpZmljYXRpb25CbG9jayhwYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy5sZW5CbG9jayA9IG5ldyBMb2NhbExlbmd0aEJsb2NrKHBhcmFtZXRlcnMpO1xuICAgICAgICB0aGlzLnZhbHVlQmxvY2sgPSB2YWx1ZUJsb2NrVHlwZSA/IG5ldyB2YWx1ZUJsb2NrVHlwZShwYXJhbWV0ZXJzKSA6IG5ldyBWYWx1ZUJsb2NrKHBhcmFtZXRlcnMpO1xuICAgIH1cbiAgICBmcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0T2Zmc2V0ID0gdGhpcy52YWx1ZUJsb2NrLmZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCAodGhpcy5sZW5CbG9jay5pc0luZGVmaW5pdGVGb3JtKVxuICAgICAgICAgICAgPyBpbnB1dExlbmd0aFxuICAgICAgICAgICAgOiB0aGlzLmxlbkJsb2NrLmxlbmd0aCk7XG4gICAgICAgIGlmIChyZXN1bHRPZmZzZXQgPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yID0gdGhpcy52YWx1ZUJsb2NrLmVycm9yO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdE9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaWRCbG9jay5lcnJvci5sZW5ndGgpXG4gICAgICAgICAgICB0aGlzLmJsb2NrTGVuZ3RoICs9IHRoaXMuaWRCbG9jay5ibG9ja0xlbmd0aDtcbiAgICAgICAgaWYgKCF0aGlzLmxlbkJsb2NrLmVycm9yLmxlbmd0aClcbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggKz0gdGhpcy5sZW5CbG9jay5ibG9ja0xlbmd0aDtcbiAgICAgICAgaWYgKCF0aGlzLnZhbHVlQmxvY2suZXJyb3IubGVuZ3RoKVxuICAgICAgICAgICAgdGhpcy5ibG9ja0xlbmd0aCArPSB0aGlzLnZhbHVlQmxvY2suYmxvY2tMZW5ndGg7XG4gICAgICAgIHJldHVybiByZXN1bHRPZmZzZXQ7XG4gICAgfVxuICAgIHRvQkVSKHNpemVPbmx5LCB3cml0ZXIpIHtcbiAgICAgICAgY29uc3QgX3dyaXRlciA9IHdyaXRlciB8fCBuZXcgVmlld1dyaXRlcigpO1xuICAgICAgICBpZiAoIXdyaXRlcikge1xuICAgICAgICAgICAgcHJlcGFyZUluZGVmaW5pdGVGb3JtKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlkQmxvY2tCdWYgPSB0aGlzLmlkQmxvY2sudG9CRVIoc2l6ZU9ubHkpO1xuICAgICAgICBfd3JpdGVyLndyaXRlKGlkQmxvY2tCdWYpO1xuICAgICAgICBpZiAodGhpcy5sZW5CbG9jay5pc0luZGVmaW5pdGVGb3JtKSB7XG4gICAgICAgICAgICBfd3JpdGVyLndyaXRlKG5ldyBVaW50OEFycmF5KFsweDgwXSkuYnVmZmVyKTtcbiAgICAgICAgICAgIHRoaXMudmFsdWVCbG9jay50b0JFUihzaXplT25seSwgX3dyaXRlcik7XG4gICAgICAgICAgICBfd3JpdGVyLndyaXRlKG5ldyBBcnJheUJ1ZmZlcigyKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZUJsb2NrQnVmID0gdGhpcy52YWx1ZUJsb2NrLnRvQkVSKHNpemVPbmx5KTtcbiAgICAgICAgICAgIHRoaXMubGVuQmxvY2subGVuZ3RoID0gdmFsdWVCbG9ja0J1Zi5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgbGVuQmxvY2tCdWYgPSB0aGlzLmxlbkJsb2NrLnRvQkVSKHNpemVPbmx5KTtcbiAgICAgICAgICAgIF93cml0ZXIud3JpdGUobGVuQmxvY2tCdWYpO1xuICAgICAgICAgICAgX3dyaXRlci53cml0ZSh2YWx1ZUJsb2NrQnVmKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXdyaXRlcikge1xuICAgICAgICAgICAgcmV0dXJuIF93cml0ZXIuZmluYWwoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRU1QVFlfQlVGRkVSO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IG9iamVjdCA9IHtcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxuICAgICAgICAgICAgaWRCbG9jazogdGhpcy5pZEJsb2NrLnRvSlNPTigpLFxuICAgICAgICAgICAgbGVuQmxvY2s6IHRoaXMubGVuQmxvY2sudG9KU09OKCksXG4gICAgICAgICAgICB2YWx1ZUJsb2NrOiB0aGlzLnZhbHVlQmxvY2sudG9KU09OKCksXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICBvcHRpb25hbDogdGhpcy5vcHRpb25hbCxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMucHJpbWl0aXZlU2NoZW1hKVxuICAgICAgICAgICAgb2JqZWN0LnByaW1pdGl2ZVNjaGVtYSA9IHRoaXMucHJpbWl0aXZlU2NoZW1hLnRvSlNPTigpO1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cbiAgICB0b1N0cmluZyhlbmNvZGluZyA9IFwiYXNjaWlcIikge1xuICAgICAgICBpZiAoZW5jb2RpbmcgPT09IFwiYXNjaWlcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub25Bc2NpaUVuY29kaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHB2dHN1dGlscy5Db252ZXJ0LlRvSGV4KHRoaXMudG9CRVIoKSk7XG4gICAgfVxuICAgIG9uQXNjaWlFbmNvZGluZygpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuY29uc3RydWN0b3IuTkFNRTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwdnRzdXRpbHMuQ29udmVydC5Ub0hleCh0aGlzLnZhbHVlQmxvY2sudmFsdWVCZWZvcmVEZWNvZGVWaWV3KTtcbiAgICAgICAgcmV0dXJuIGAke25hbWV9IDogJHt2YWx1ZX1gO1xuICAgIH1cbiAgICBpc0VxdWFsKG90aGVyKSB7XG4gICAgICAgIGlmICh0aGlzID09PSBvdGhlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRoaXNSYXcgPSB0aGlzLnRvQkVSKCk7XG4gICAgICAgIGNvbnN0IG90aGVyUmF3ID0gb3RoZXIudG9CRVIoKTtcbiAgICAgICAgcmV0dXJuIHB2dXRpbHMuaXNFcXVhbEJ1ZmZlcih0aGlzUmF3LCBvdGhlclJhdyk7XG4gICAgfVxufVxuQmFzZUJsb2NrLk5BTUUgPSBcIkJhc2VCbG9ja1wiO1xuZnVuY3Rpb24gcHJlcGFyZUluZGVmaW5pdGVGb3JtKGJhc2VCbG9jaykge1xuICAgIHZhciBfYTtcbiAgICBpZiAoYmFzZUJsb2NrIGluc3RhbmNlb2YgdHlwZVN0b3JlLkNvbnN0cnVjdGVkKSB7XG4gICAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgYmFzZUJsb2NrLnZhbHVlQmxvY2sudmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChwcmVwYXJlSW5kZWZpbml0ZUZvcm0odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgYmFzZUJsb2NrLmxlbkJsb2NrLmlzSW5kZWZpbml0ZUZvcm0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAhISgoX2EgPSBiYXNlQmxvY2subGVuQmxvY2spID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pc0luZGVmaW5pdGVGb3JtKTtcbn1cblxuY2xhc3MgQmFzZVN0cmluZ0Jsb2NrIGV4dGVuZHMgQmFzZUJsb2NrIHtcbiAgICBnZXRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVCbG9jay52YWx1ZTtcbiAgICB9XG4gICAgc2V0VmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZUJsb2NrLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHsgdmFsdWUgPSBFTVBUWV9TVFJJTkcsIC4uLnBhcmFtZXRlcnMgfSA9IHt9LCBzdHJpbmdWYWx1ZUJsb2NrVHlwZSkge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzLCBzdHJpbmdWYWx1ZUJsb2NrVHlwZSk7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0T2Zmc2V0ID0gdGhpcy52YWx1ZUJsb2NrLmZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCAodGhpcy5sZW5CbG9jay5pc0luZGVmaW5pdGVGb3JtKVxuICAgICAgICAgICAgPyBpbnB1dExlbmd0aFxuICAgICAgICAgICAgOiB0aGlzLmxlbkJsb2NrLmxlbmd0aCk7XG4gICAgICAgIGlmIChyZXN1bHRPZmZzZXQgPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yID0gdGhpcy52YWx1ZUJsb2NrLmVycm9yO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdE9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZyb21CdWZmZXIodGhpcy52YWx1ZUJsb2NrLnZhbHVlSGV4Vmlldyk7XG4gICAgICAgIGlmICghdGhpcy5pZEJsb2NrLmVycm9yLmxlbmd0aClcbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggKz0gdGhpcy5pZEJsb2NrLmJsb2NrTGVuZ3RoO1xuICAgICAgICBpZiAoIXRoaXMubGVuQmxvY2suZXJyb3IubGVuZ3RoKVxuICAgICAgICAgICAgdGhpcy5ibG9ja0xlbmd0aCArPSB0aGlzLmxlbkJsb2NrLmJsb2NrTGVuZ3RoO1xuICAgICAgICBpZiAoIXRoaXMudmFsdWVCbG9jay5lcnJvci5sZW5ndGgpXG4gICAgICAgICAgICB0aGlzLmJsb2NrTGVuZ3RoICs9IHRoaXMudmFsdWVCbG9jay5ibG9ja0xlbmd0aDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdE9mZnNldDtcbiAgICB9XG4gICAgb25Bc2NpaUVuY29kaW5nKCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb25zdHJ1Y3Rvci5OQU1FfSA6ICcke3RoaXMudmFsdWVCbG9jay52YWx1ZX0nYDtcbiAgICB9XG59XG5CYXNlU3RyaW5nQmxvY2suTkFNRSA9IFwiQmFzZVN0cmluZ0Jsb2NrXCI7XG5cbmNsYXNzIExvY2FsUHJpbWl0aXZlVmFsdWVCbG9jayBleHRlbmRzIEhleEJsb2NrKFZhbHVlQmxvY2spIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGlzSGV4T25seSA9IHRydWUsIC4uLnBhcmFtZXRlcnMgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgICAgICB0aGlzLmlzSGV4T25seSA9IGlzSGV4T25seTtcbiAgICB9XG59XG5Mb2NhbFByaW1pdGl2ZVZhbHVlQmxvY2suTkFNRSA9IFwiUHJpbWl0aXZlVmFsdWVCbG9ja1wiO1xuXG52YXIgX2EkdztcbmNsYXNzIFByaW1pdGl2ZSBleHRlbmRzIEJhc2VCbG9jayB7XG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIExvY2FsUHJpbWl0aXZlVmFsdWVCbG9jayk7XG4gICAgICAgIHRoaXMuaWRCbG9jay5pc0NvbnN0cnVjdGVkID0gZmFsc2U7XG4gICAgfVxufVxuX2EkdyA9IFByaW1pdGl2ZTtcbigoKSA9PiB7XG4gICAgdHlwZVN0b3JlLlByaW1pdGl2ZSA9IF9hJHc7XG59KSgpO1xuUHJpbWl0aXZlLk5BTUUgPSBcIlBSSU1JVElWRVwiO1xuXG5mdW5jdGlvbiBsb2NhbENoYW5nZVR5cGUoaW5wdXRPYmplY3QsIG5ld1R5cGUpIHtcbiAgICBpZiAoaW5wdXRPYmplY3QgaW5zdGFuY2VvZiBuZXdUeXBlKSB7XG4gICAgICAgIHJldHVybiBpbnB1dE9iamVjdDtcbiAgICB9XG4gICAgY29uc3QgbmV3T2JqZWN0ID0gbmV3IG5ld1R5cGUoKTtcbiAgICBuZXdPYmplY3QuaWRCbG9jayA9IGlucHV0T2JqZWN0LmlkQmxvY2s7XG4gICAgbmV3T2JqZWN0LmxlbkJsb2NrID0gaW5wdXRPYmplY3QubGVuQmxvY2s7XG4gICAgbmV3T2JqZWN0Lndhcm5pbmdzID0gaW5wdXRPYmplY3Qud2FybmluZ3M7XG4gICAgbmV3T2JqZWN0LnZhbHVlQmVmb3JlRGVjb2RlVmlldyA9IGlucHV0T2JqZWN0LnZhbHVlQmVmb3JlRGVjb2RlVmlldztcbiAgICByZXR1cm4gbmV3T2JqZWN0O1xufVxuZnVuY3Rpb24gbG9jYWxGcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCA9IDAsIGlucHV0TGVuZ3RoID0gaW5wdXRCdWZmZXIubGVuZ3RoKSB7XG4gICAgY29uc3QgaW5jb21pbmdPZmZzZXQgPSBpbnB1dE9mZnNldDtcbiAgICBsZXQgcmV0dXJuT2JqZWN0ID0gbmV3IEJhc2VCbG9jayh7fSwgVmFsdWVCbG9jayk7XG4gICAgY29uc3QgYmFzZUJsb2NrID0gbmV3IExvY2FsQmFzZUJsb2NrKCk7XG4gICAgaWYgKCFjaGVja0J1ZmZlclBhcmFtcyhiYXNlQmxvY2ssIGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpKSB7XG4gICAgICAgIHJldHVybk9iamVjdC5lcnJvciA9IGJhc2VCbG9jay5lcnJvcjtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9mZnNldDogLTEsXG4gICAgICAgICAgICByZXN1bHQ6IHJldHVybk9iamVjdCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgaW50QnVmZmVyID0gaW5wdXRCdWZmZXIuc3ViYXJyYXkoaW5wdXRPZmZzZXQsIGlucHV0T2Zmc2V0ICsgaW5wdXRMZW5ndGgpO1xuICAgIGlmICghaW50QnVmZmVyLmxlbmd0aCkge1xuICAgICAgICByZXR1cm5PYmplY3QuZXJyb3IgPSBcIlplcm8gYnVmZmVyIGxlbmd0aFwiO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb2Zmc2V0OiAtMSxcbiAgICAgICAgICAgIHJlc3VsdDogcmV0dXJuT2JqZWN0LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBsZXQgcmVzdWx0T2Zmc2V0ID0gcmV0dXJuT2JqZWN0LmlkQmxvY2suZnJvbUJFUihpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKTtcbiAgICBpZiAocmV0dXJuT2JqZWN0LmlkQmxvY2sud2FybmluZ3MubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybk9iamVjdC53YXJuaW5ncy5jb25jYXQocmV0dXJuT2JqZWN0LmlkQmxvY2sud2FybmluZ3MpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0T2Zmc2V0ID09PSAtMSkge1xuICAgICAgICByZXR1cm5PYmplY3QuZXJyb3IgPSByZXR1cm5PYmplY3QuaWRCbG9jay5lcnJvcjtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9mZnNldDogLTEsXG4gICAgICAgICAgICByZXN1bHQ6IHJldHVybk9iamVjdCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaW5wdXRPZmZzZXQgPSByZXN1bHRPZmZzZXQ7XG4gICAgaW5wdXRMZW5ndGggLT0gcmV0dXJuT2JqZWN0LmlkQmxvY2suYmxvY2tMZW5ndGg7XG4gICAgcmVzdWx0T2Zmc2V0ID0gcmV0dXJuT2JqZWN0LmxlbkJsb2NrLmZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCk7XG4gICAgaWYgKHJldHVybk9iamVjdC5sZW5CbG9jay53YXJuaW5ncy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuT2JqZWN0Lndhcm5pbmdzLmNvbmNhdChyZXR1cm5PYmplY3QubGVuQmxvY2sud2FybmluZ3MpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0T2Zmc2V0ID09PSAtMSkge1xuICAgICAgICByZXR1cm5PYmplY3QuZXJyb3IgPSByZXR1cm5PYmplY3QubGVuQmxvY2suZXJyb3I7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvZmZzZXQ6IC0xLFxuICAgICAgICAgICAgcmVzdWx0OiByZXR1cm5PYmplY3QsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlucHV0T2Zmc2V0ID0gcmVzdWx0T2Zmc2V0O1xuICAgIGlucHV0TGVuZ3RoIC09IHJldHVybk9iamVjdC5sZW5CbG9jay5ibG9ja0xlbmd0aDtcbiAgICBpZiAoIXJldHVybk9iamVjdC5pZEJsb2NrLmlzQ29uc3RydWN0ZWRcbiAgICAgICAgJiYgcmV0dXJuT2JqZWN0LmxlbkJsb2NrLmlzSW5kZWZpbml0ZUZvcm0pIHtcbiAgICAgICAgcmV0dXJuT2JqZWN0LmVycm9yID0gXCJJbmRlZmluaXRlIGxlbmd0aCBmb3JtIHVzZWQgZm9yIHByaW1pdGl2ZSBlbmNvZGluZyBmb3JtXCI7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvZmZzZXQ6IC0xLFxuICAgICAgICAgICAgcmVzdWx0OiByZXR1cm5PYmplY3QsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGxldCBuZXdBU04xVHlwZSA9IEJhc2VCbG9jaztcbiAgICBzd2l0Y2ggKHJldHVybk9iamVjdC5pZEJsb2NrLnRhZ0NsYXNzKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGlmICgocmV0dXJuT2JqZWN0LmlkQmxvY2sudGFnTnVtYmVyID49IDM3KVxuICAgICAgICAgICAgICAgICYmIChyZXR1cm5PYmplY3QuaWRCbG9jay5pc0hleE9ubHkgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybk9iamVjdC5lcnJvciA9IFwiVU5JVkVSU0FMIDM3IGFuZCB1cHBlciB0YWdzIGFyZSByZXNlcnZlZCBieSBBU04uMSBzdGFuZGFyZFwiO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogLTEsXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogcmV0dXJuT2JqZWN0LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKHJldHVybk9iamVjdC5pZEJsb2NrLnRhZ051bWJlcikge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKChyZXR1cm5PYmplY3QuaWRCbG9jay5pc0NvbnN0cnVjdGVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgKHJldHVybk9iamVjdC5sZW5CbG9jay5sZW5ndGggPiAwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuT2JqZWN0LmVycm9yID0gXCJUeXBlIFtVTklWRVJTQUwgMF0gaXMgcmVzZXJ2ZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAtMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHJldHVybk9iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuRW5kT2ZDb250ZW50O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG5ld0FTTjFUeXBlID0gdHlwZVN0b3JlLkJvb2xlYW47XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuSW50ZWdlcjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5CaXRTdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuT2N0ZXRTdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuTnVsbDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5PYmplY3RJZGVudGlmaWVyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5FbnVtZXJhdGVkO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5VdGY4U3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5SZWxhdGl2ZU9iamVjdElkZW50aWZpZXI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgICAgIG5ld0FTTjFUeXBlID0gdHlwZVN0b3JlLlRJTUU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybk9iamVjdC5lcnJvciA9IFwiW1VOSVZFUlNBTCAxNV0gaXMgcmVzZXJ2ZWQgYnkgQVNOLjEgc3RhbmRhcmRcIjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogLTEsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHJldHVybk9iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5TZXF1ZW5jZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuU2V0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE4OlxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5OdW1lcmljU3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE5OlxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5QcmludGFibGVTdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjA6XG4gICAgICAgICAgICAgICAgICAgIG5ld0FTTjFUeXBlID0gdHlwZVN0b3JlLlRlbGV0ZXhTdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjE6XG4gICAgICAgICAgICAgICAgICAgIG5ld0FTTjFUeXBlID0gdHlwZVN0b3JlLlZpZGVvdGV4U3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5JQTVTdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjM6XG4gICAgICAgICAgICAgICAgICAgIG5ld0FTTjFUeXBlID0gdHlwZVN0b3JlLlVUQ1RpbWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjQ6XG4gICAgICAgICAgICAgICAgICAgIG5ld0FTTjFUeXBlID0gdHlwZVN0b3JlLkdlbmVyYWxpemVkVGltZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyNTpcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuR3JhcGhpY1N0cmluZztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuVmlzaWJsZVN0cmluZztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuR2VuZXJhbFN0cmluZztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyODpcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuVW5pdmVyc2FsU3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI5OlxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5DaGFyYWN0ZXJTdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzA6XG4gICAgICAgICAgICAgICAgICAgIG5ld0FTTjFUeXBlID0gdHlwZVN0b3JlLkJtcFN0cmluZztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzMTpcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuREFURTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuVGltZU9mRGF5O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDMzOlxuICAgICAgICAgICAgICAgICAgICBuZXdBU04xVHlwZSA9IHR5cGVTdG9yZS5EYXRlVGltZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSB0eXBlU3RvcmUuRHVyYXRpb247XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3T2JqZWN0ID0gcmV0dXJuT2JqZWN0LmlkQmxvY2suaXNDb25zdHJ1Y3RlZFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBuZXcgdHlwZVN0b3JlLkNvbnN0cnVjdGVkKClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IHR5cGVTdG9yZS5QcmltaXRpdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3T2JqZWN0LmlkQmxvY2sgPSByZXR1cm5PYmplY3QuaWRCbG9jaztcbiAgICAgICAgICAgICAgICAgICAgbmV3T2JqZWN0LmxlbkJsb2NrID0gcmV0dXJuT2JqZWN0LmxlbkJsb2NrO1xuICAgICAgICAgICAgICAgICAgICBuZXdPYmplY3Qud2FybmluZ3MgPSByZXR1cm5PYmplY3Qud2FybmluZ3M7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybk9iamVjdCA9IG5ld09iamVjdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICBjYXNlIDM6XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgbmV3QVNOMVR5cGUgPSByZXR1cm5PYmplY3QuaWRCbG9jay5pc0NvbnN0cnVjdGVkXG4gICAgICAgICAgICAgICAgPyB0eXBlU3RvcmUuQ29uc3RydWN0ZWRcbiAgICAgICAgICAgICAgICA6IHR5cGVTdG9yZS5QcmltaXRpdmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuT2JqZWN0ID0gbG9jYWxDaGFuZ2VUeXBlKHJldHVybk9iamVjdCwgbmV3QVNOMVR5cGUpO1xuICAgIHJlc3VsdE9mZnNldCA9IHJldHVybk9iamVjdC5mcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgcmV0dXJuT2JqZWN0LmxlbkJsb2NrLmlzSW5kZWZpbml0ZUZvcm0gPyBpbnB1dExlbmd0aCA6IHJldHVybk9iamVjdC5sZW5CbG9jay5sZW5ndGgpO1xuICAgIHJldHVybk9iamVjdC52YWx1ZUJlZm9yZURlY29kZVZpZXcgPSBpbnB1dEJ1ZmZlci5zdWJhcnJheShpbmNvbWluZ09mZnNldCwgaW5jb21pbmdPZmZzZXQgKyByZXR1cm5PYmplY3QuYmxvY2tMZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG9mZnNldDogcmVzdWx0T2Zmc2V0LFxuICAgICAgICByZXN1bHQ6IHJldHVybk9iamVjdCxcbiAgICB9O1xufVxuZnVuY3Rpb24gZnJvbUJFUihpbnB1dEJ1ZmZlcikge1xuICAgIGlmICghaW5wdXRCdWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQmFzZUJsb2NrKHt9LCBWYWx1ZUJsb2NrKTtcbiAgICAgICAgcmVzdWx0LmVycm9yID0gXCJJbnB1dCBidWZmZXIgaGFzIHplcm8gbGVuZ3RoXCI7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvZmZzZXQ6IC0xLFxuICAgICAgICAgICAgcmVzdWx0LFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gbG9jYWxGcm9tQkVSKHB2dHN1dGlscy5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9VaW50OEFycmF5KGlucHV0QnVmZmVyKS5zbGljZSgpLCAwLCBpbnB1dEJ1ZmZlci5ieXRlTGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tMZW4oaW5kZWZpbml0ZUxlbmd0aCwgbGVuZ3RoKSB7XG4gICAgaWYgKGluZGVmaW5pdGVMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiBsZW5ndGg7XG59XG5jbGFzcyBMb2NhbENvbnN0cnVjdGVkVmFsdWVCbG9jayBleHRlbmRzIFZhbHVlQmxvY2sge1xuICAgIGNvbnN0cnVjdG9yKHsgdmFsdWUgPSBbXSwgaXNJbmRlZmluaXRlRm9ybSA9IGZhbHNlLCAuLi5wYXJhbWV0ZXJzIH0gPSB7fSkge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmlzSW5kZWZpbml0ZUZvcm0gPSBpc0luZGVmaW5pdGVGb3JtO1xuICAgIH1cbiAgICBmcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpIHtcbiAgICAgICAgY29uc3QgdmlldyA9IHB2dHN1dGlscy5CdWZmZXJTb3VyY2VDb252ZXJ0ZXIudG9VaW50OEFycmF5KGlucHV0QnVmZmVyKTtcbiAgICAgICAgaWYgKCFjaGVja0J1ZmZlclBhcmFtcyh0aGlzLCB2aWV3LCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YWx1ZUJlZm9yZURlY29kZVZpZXcgPSB2aWV3LnN1YmFycmF5KGlucHV0T2Zmc2V0LCBpbnB1dE9mZnNldCArIGlucHV0TGVuZ3RoKTtcbiAgICAgICAgaWYgKHRoaXMudmFsdWVCZWZvcmVEZWNvZGVWaWV3Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy53YXJuaW5ncy5wdXNoKFwiWmVybyBidWZmZXIgbGVuZ3RoXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0T2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGxldCBjdXJyZW50T2Zmc2V0ID0gaW5wdXRPZmZzZXQ7XG4gICAgICAgIHdoaWxlIChjaGVja0xlbih0aGlzLmlzSW5kZWZpbml0ZUZvcm0sIGlucHV0TGVuZ3RoKSA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHJldHVybk9iamVjdCA9IGxvY2FsRnJvbUJFUih2aWV3LCBjdXJyZW50T2Zmc2V0LCBpbnB1dExlbmd0aCk7XG4gICAgICAgICAgICBpZiAocmV0dXJuT2JqZWN0Lm9mZnNldCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gcmV0dXJuT2JqZWN0LnJlc3VsdC5lcnJvcjtcbiAgICAgICAgICAgICAgICB0aGlzLndhcm5pbmdzLmNvbmNhdChyZXR1cm5PYmplY3QucmVzdWx0Lndhcm5pbmdzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50T2Zmc2V0ID0gcmV0dXJuT2JqZWN0Lm9mZnNldDtcbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggKz0gcmV0dXJuT2JqZWN0LnJlc3VsdC5ibG9ja0xlbmd0aDtcbiAgICAgICAgICAgIGlucHV0TGVuZ3RoIC09IHJldHVybk9iamVjdC5yZXN1bHQuYmxvY2tMZW5ndGg7XG4gICAgICAgICAgICB0aGlzLnZhbHVlLnB1c2gocmV0dXJuT2JqZWN0LnJlc3VsdCk7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0luZGVmaW5pdGVGb3JtICYmIHJldHVybk9iamVjdC5yZXN1bHQuY29uc3RydWN0b3IuTkFNRSA9PT0gRU5EX09GX0NPTlRFTlRfTkFNRSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzSW5kZWZpbml0ZUZvcm0pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlW3RoaXMudmFsdWUubGVuZ3RoIC0gMV0uY29uc3RydWN0b3IuTkFNRSA9PT0gRU5EX09GX0NPTlRFTlRfTkFNRSkge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUucG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLndhcm5pbmdzLnB1c2goXCJObyBFbmRPZkNvbnRlbnQgYmxvY2sgZW5jb2RlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3VycmVudE9mZnNldDtcbiAgICB9XG4gICAgdG9CRVIoc2l6ZU9ubHksIHdyaXRlcikge1xuICAgICAgICBjb25zdCBfd3JpdGVyID0gd3JpdGVyIHx8IG5ldyBWaWV3V3JpdGVyKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy52YWx1ZVtpXS50b0JFUihzaXplT25seSwgX3dyaXRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF3cml0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBfd3JpdGVyLmZpbmFsKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEVNUFRZX0JVRkZFUjtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICBjb25zdCBvYmplY3QgPSB7XG4gICAgICAgICAgICAuLi5zdXBlci50b0pTT04oKSxcbiAgICAgICAgICAgIGlzSW5kZWZpbml0ZUZvcm06IHRoaXMuaXNJbmRlZmluaXRlRm9ybSxcbiAgICAgICAgICAgIHZhbHVlOiBbXSxcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiB0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICBvYmplY3QudmFsdWUucHVzaCh2YWx1ZS50b0pTT04oKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG59XG5Mb2NhbENvbnN0cnVjdGVkVmFsdWVCbG9jay5OQU1FID0gXCJDb25zdHJ1Y3RlZFZhbHVlQmxvY2tcIjtcblxudmFyIF9hJHY7XG5jbGFzcyBDb25zdHJ1Y3RlZCBleHRlbmRzIEJhc2VCbG9jayB7XG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIExvY2FsQ29uc3RydWN0ZWRWYWx1ZUJsb2NrKTtcbiAgICAgICAgdGhpcy5pZEJsb2NrLmlzQ29uc3RydWN0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBmcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpIHtcbiAgICAgICAgdGhpcy52YWx1ZUJsb2NrLmlzSW5kZWZpbml0ZUZvcm0gPSB0aGlzLmxlbkJsb2NrLmlzSW5kZWZpbml0ZUZvcm07XG4gICAgICAgIGNvbnN0IHJlc3VsdE9mZnNldCA9IHRoaXMudmFsdWVCbG9jay5mcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgKHRoaXMubGVuQmxvY2suaXNJbmRlZmluaXRlRm9ybSkgPyBpbnB1dExlbmd0aCA6IHRoaXMubGVuQmxvY2subGVuZ3RoKTtcbiAgICAgICAgaWYgKHJlc3VsdE9mZnNldCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSB0aGlzLnZhbHVlQmxvY2suZXJyb3I7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0T2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pZEJsb2NrLmVycm9yLmxlbmd0aClcbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggKz0gdGhpcy5pZEJsb2NrLmJsb2NrTGVuZ3RoO1xuICAgICAgICBpZiAoIXRoaXMubGVuQmxvY2suZXJyb3IubGVuZ3RoKVxuICAgICAgICAgICAgdGhpcy5ibG9ja0xlbmd0aCArPSB0aGlzLmxlbkJsb2NrLmJsb2NrTGVuZ3RoO1xuICAgICAgICBpZiAoIXRoaXMudmFsdWVCbG9jay5lcnJvci5sZW5ndGgpXG4gICAgICAgICAgICB0aGlzLmJsb2NrTGVuZ3RoICs9IHRoaXMudmFsdWVCbG9jay5ibG9ja0xlbmd0aDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdE9mZnNldDtcbiAgICB9XG4gICAgb25Bc2NpaUVuY29kaW5nKCkge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiB0aGlzLnZhbHVlQmxvY2sudmFsdWUpIHtcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlLnRvU3RyaW5nKFwiYXNjaWlcIikuc3BsaXQoXCJcXG5cIikubWFwKChvKSA9PiBgICAke299YCkuam9pbihcIlxcblwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmxvY2tOYW1lID0gdGhpcy5pZEJsb2NrLnRhZ0NsYXNzID09PSAzXG4gICAgICAgICAgICA/IGBbJHt0aGlzLmlkQmxvY2sudGFnTnVtYmVyfV1gXG4gICAgICAgICAgICA6IHRoaXMuY29uc3RydWN0b3IuTkFNRTtcbiAgICAgICAgcmV0dXJuIHZhbHVlcy5sZW5ndGhcbiAgICAgICAgICAgID8gYCR7YmxvY2tOYW1lfSA6XFxuJHt2YWx1ZXMuam9pbihcIlxcblwiKX1gXG4gICAgICAgICAgICA6IGAke2Jsb2NrTmFtZX0gOmA7XG4gICAgfVxufVxuX2EkdiA9IENvbnN0cnVjdGVkO1xuKCgpID0+IHtcbiAgICB0eXBlU3RvcmUuQ29uc3RydWN0ZWQgPSBfYSR2O1xufSkoKTtcbkNvbnN0cnVjdGVkLk5BTUUgPSBcIkNPTlNUUlVDVEVEXCI7XG5cbmNsYXNzIExvY2FsRW5kT2ZDb250ZW50VmFsdWVCbG9jayBleHRlbmRzIFZhbHVlQmxvY2sge1xuICAgIGZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBfaW5wdXRMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0T2Zmc2V0O1xuICAgIH1cbiAgICB0b0JFUihfc2l6ZU9ubHkpIHtcbiAgICAgICAgcmV0dXJuIEVNUFRZX0JVRkZFUjtcbiAgICB9XG59XG5Mb2NhbEVuZE9mQ29udGVudFZhbHVlQmxvY2sub3ZlcnJpZGUgPSBcIkVuZE9mQ29udGVudFZhbHVlQmxvY2tcIjtcblxudmFyIF9hJHU7XG5jbGFzcyBFbmRPZkNvbnRlbnQgZXh0ZW5kcyBCYXNlQmxvY2sge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzLCBMb2NhbEVuZE9mQ29udGVudFZhbHVlQmxvY2spO1xuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xuICAgICAgICB0aGlzLmlkQmxvY2sudGFnTnVtYmVyID0gMDtcbiAgICB9XG59XG5fYSR1ID0gRW5kT2ZDb250ZW50O1xuKCgpID0+IHtcbiAgICB0eXBlU3RvcmUuRW5kT2ZDb250ZW50ID0gX2EkdTtcbn0pKCk7XG5FbmRPZkNvbnRlbnQuTkFNRSA9IEVORF9PRl9DT05URU5UX05BTUU7XG5cbnZhciBfYSR0O1xuY2xhc3MgTnVsbCBleHRlbmRzIEJhc2VCbG9jayB7XG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIFZhbHVlQmxvY2spO1xuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xuICAgICAgICB0aGlzLmlkQmxvY2sudGFnTnVtYmVyID0gNTtcbiAgICB9XG4gICAgZnJvbUJFUihpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKSB7XG4gICAgICAgIGlmICh0aGlzLmxlbkJsb2NrLmxlbmd0aCA+IDApXG4gICAgICAgICAgICB0aGlzLndhcm5pbmdzLnB1c2goXCJOb24temVybyBsZW5ndGggb2YgdmFsdWUgYmxvY2sgZm9yIE51bGwgdHlwZVwiKTtcbiAgICAgICAgaWYgKCF0aGlzLmlkQmxvY2suZXJyb3IubGVuZ3RoKVxuICAgICAgICAgICAgdGhpcy5ibG9ja0xlbmd0aCArPSB0aGlzLmlkQmxvY2suYmxvY2tMZW5ndGg7XG4gICAgICAgIGlmICghdGhpcy5sZW5CbG9jay5lcnJvci5sZW5ndGgpXG4gICAgICAgICAgICB0aGlzLmJsb2NrTGVuZ3RoICs9IHRoaXMubGVuQmxvY2suYmxvY2tMZW5ndGg7XG4gICAgICAgIHRoaXMuYmxvY2tMZW5ndGggKz0gaW5wdXRMZW5ndGg7XG4gICAgICAgIGlmICgoaW5wdXRPZmZzZXQgKyBpbnB1dExlbmd0aCkgPiBpbnB1dEJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yID0gXCJFbmQgb2YgaW5wdXQgcmVhY2hlZCBiZWZvcmUgbWVzc2FnZSB3YXMgZnVsbHkgZGVjb2RlZCAoaW5jb25zaXN0ZW50IG9mZnNldCBhbmQgbGVuZ3RoIHZhbHVlcylcIjtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKGlucHV0T2Zmc2V0ICsgaW5wdXRMZW5ndGgpO1xuICAgIH1cbiAgICB0b0JFUihzaXplT25seSwgd3JpdGVyKSB7XG4gICAgICAgIGNvbnN0IHJldEJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcigyKTtcbiAgICAgICAgaWYgKCFzaXplT25seSkge1xuICAgICAgICAgICAgY29uc3QgcmV0VmlldyA9IG5ldyBVaW50OEFycmF5KHJldEJ1Zik7XG4gICAgICAgICAgICByZXRWaWV3WzBdID0gMHgwNTtcbiAgICAgICAgICAgIHJldFZpZXdbMV0gPSAweDAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3cml0ZXIpIHtcbiAgICAgICAgICAgIHdyaXRlci53cml0ZShyZXRCdWYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXRCdWY7XG4gICAgfVxuICAgIG9uQXNjaWlFbmNvZGluZygpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29uc3RydWN0b3IuTkFNRX1gO1xuICAgIH1cbn1cbl9hJHQgPSBOdWxsO1xuKCgpID0+IHtcbiAgICB0eXBlU3RvcmUuTnVsbCA9IF9hJHQ7XG59KSgpO1xuTnVsbC5OQU1FID0gXCJOVUxMXCI7XG5cbmNsYXNzIExvY2FsQm9vbGVhblZhbHVlQmxvY2sgZXh0ZW5kcyBIZXhCbG9jayhWYWx1ZUJsb2NrKSB7XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICBmb3IgKGNvbnN0IG9jdGV0IG9mIHRoaXMudmFsdWVIZXhWaWV3KSB7XG4gICAgICAgICAgICBpZiAob2N0ZXQgPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBzZXQgdmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZUhleFZpZXdbMF0gPSB2YWx1ZSA/IDB4RkYgOiAweDAwO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcih7IHZhbHVlLCAuLi5wYXJhbWV0ZXJzIH0gPSB7fSkge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMudmFsdWVIZXgpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWVIZXhWaWV3ID0gcHZ0c3V0aWxzLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkocGFyYW1ldGVycy52YWx1ZUhleCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlSGV4VmlldyA9IG5ldyBVaW50OEFycmF5KDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCkge1xuICAgICAgICBjb25zdCBpbnB1dFZpZXcgPSBwdnRzdXRpbHMuQnVmZmVyU291cmNlQ29udmVydGVyLnRvVWludDhBcnJheShpbnB1dEJ1ZmZlcik7XG4gICAgICAgIGlmICghY2hlY2tCdWZmZXJQYXJhbXModGhpcywgaW5wdXRWaWV3LCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YWx1ZUhleFZpZXcgPSBpbnB1dFZpZXcuc3ViYXJyYXkoaW5wdXRPZmZzZXQsIGlucHV0T2Zmc2V0ICsgaW5wdXRMZW5ndGgpO1xuICAgICAgICBpZiAoaW5wdXRMZW5ndGggPiAxKVxuICAgICAgICAgICAgdGhpcy53YXJuaW5ncy5wdXNoKFwiQm9vbGVhbiB2YWx1ZSBlbmNvZGVkIGluIG1vcmUgdGhlbiAxIG9jdGV0XCIpO1xuICAgICAgICB0aGlzLmlzSGV4T25seSA9IHRydWU7XG4gICAgICAgIHB2dXRpbHMudXRpbERlY29kZVRDLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuYmxvY2tMZW5ndGggPSBpbnB1dExlbmd0aDtcbiAgICAgICAgcmV0dXJuIChpbnB1dE9mZnNldCArIGlucHV0TGVuZ3RoKTtcbiAgICB9XG4gICAgdG9CRVIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlSGV4Vmlldy5zbGljZSgpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdXBlci50b0pTT04oKSxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgICB9O1xuICAgIH1cbn1cbkxvY2FsQm9vbGVhblZhbHVlQmxvY2suTkFNRSA9IFwiQm9vbGVhblZhbHVlQmxvY2tcIjtcblxudmFyIF9hJHM7XG5jbGFzcyBCb29sZWFuIGV4dGVuZHMgQmFzZUJsb2NrIHtcbiAgICBnZXRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVCbG9jay52YWx1ZTtcbiAgICB9XG4gICAgc2V0VmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZUJsb2NrLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzLCBMb2NhbEJvb2xlYW5WYWx1ZUJsb2NrKTtcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ0NsYXNzID0gMTtcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDE7XG4gICAgfVxuICAgIG9uQXNjaWlFbmNvZGluZygpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29uc3RydWN0b3IuTkFNRX0gOiAke3RoaXMuZ2V0VmFsdWV9YDtcbiAgICB9XG59XG5fYSRzID0gQm9vbGVhbjtcbigoKSA9PiB7XG4gICAgdHlwZVN0b3JlLkJvb2xlYW4gPSBfYSRzO1xufSkoKTtcbkJvb2xlYW4uTkFNRSA9IFwiQk9PTEVBTlwiO1xuXG5jbGFzcyBMb2NhbE9jdGV0U3RyaW5nVmFsdWVCbG9jayBleHRlbmRzIEhleEJsb2NrKExvY2FsQ29uc3RydWN0ZWRWYWx1ZUJsb2NrKSB7XG4gICAgY29uc3RydWN0b3IoeyBpc0NvbnN0cnVjdGVkID0gZmFsc2UsIC4uLnBhcmFtZXRlcnMgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgICAgICB0aGlzLmlzQ29uc3RydWN0ZWQgPSBpc0NvbnN0cnVjdGVkO1xuICAgIH1cbiAgICBmcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpIHtcbiAgICAgICAgbGV0IHJlc3VsdE9mZnNldCA9IDA7XG4gICAgICAgIGlmICh0aGlzLmlzQ29uc3RydWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNIZXhPbmx5ID0gZmFsc2U7XG4gICAgICAgICAgICByZXN1bHRPZmZzZXQgPSBMb2NhbENvbnN0cnVjdGVkVmFsdWVCbG9jay5wcm90b3R5cGUuZnJvbUJFUi5jYWxsKHRoaXMsIGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdE9mZnNldCA9PT0gLTEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdE9mZnNldDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRCbG9ja05hbWUgPSB0aGlzLnZhbHVlW2ldLmNvbnN0cnVjdG9yLk5BTUU7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRCbG9ja05hbWUgPT09IEVORF9PRl9DT05URU5UX05BTUUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNJbmRlZmluaXRlRm9ybSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBcIkVuZE9mQ29udGVudCBpcyB1bmV4cGVjdGVkLCBPQ1RFVCBTVFJJTkcgbWF5IGNvbnNpc3RzIG9mIE9DVEVUIFNUUklOR3Mgb25seVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50QmxvY2tOYW1lICE9PSBPQ1RFVF9TVFJJTkdfTkFNRSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gXCJPQ1RFVCBTVFJJTkcgbWF5IGNvbnNpc3RzIG9mIE9DVEVUIFNUUklOR3Mgb25seVwiO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc0hleE9ubHkgPSB0cnVlO1xuICAgICAgICAgICAgcmVzdWx0T2Zmc2V0ID0gc3VwZXIuZnJvbUJFUihpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKTtcbiAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggPSBpbnB1dExlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0T2Zmc2V0O1xuICAgIH1cbiAgICB0b0JFUihzaXplT25seSwgd3JpdGVyKSB7XG4gICAgICAgIGlmICh0aGlzLmlzQ29uc3RydWN0ZWQpXG4gICAgICAgICAgICByZXR1cm4gTG9jYWxDb25zdHJ1Y3RlZFZhbHVlQmxvY2sucHJvdG90eXBlLnRvQkVSLmNhbGwodGhpcywgc2l6ZU9ubHksIHdyaXRlcik7XG4gICAgICAgIHJldHVybiBzaXplT25seVxuICAgICAgICAgICAgPyBuZXcgQXJyYXlCdWZmZXIodGhpcy52YWx1ZUhleFZpZXcuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgIDogdGhpcy52YWx1ZUhleFZpZXcuc2xpY2UoKS5idWZmZXI7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxuICAgICAgICAgICAgaXNDb25zdHJ1Y3RlZDogdGhpcy5pc0NvbnN0cnVjdGVkLFxuICAgICAgICB9O1xuICAgIH1cbn1cbkxvY2FsT2N0ZXRTdHJpbmdWYWx1ZUJsb2NrLk5BTUUgPSBcIk9jdGV0U3RyaW5nVmFsdWVCbG9ja1wiO1xuXG52YXIgX2EkcjtcbmNsYXNzIE9jdGV0U3RyaW5nIGV4dGVuZHMgQmFzZUJsb2NrIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGlkQmxvY2sgPSB7fSwgbGVuQmxvY2sgPSB7fSwgLi4ucGFyYW1ldGVycyB9ID0ge30pIHtcbiAgICAgICAgdmFyIF9iLCBfYztcbiAgICAgICAgKF9iID0gcGFyYW1ldGVycy5pc0NvbnN0cnVjdGVkKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAocGFyYW1ldGVycy5pc0NvbnN0cnVjdGVkID0gISEoKF9jID0gcGFyYW1ldGVycy52YWx1ZSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmxlbmd0aCkpO1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBpZEJsb2NrOiB7XG4gICAgICAgICAgICAgICAgaXNDb25zdHJ1Y3RlZDogcGFyYW1ldGVycy5pc0NvbnN0cnVjdGVkLFxuICAgICAgICAgICAgICAgIC4uLmlkQmxvY2ssXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVuQmxvY2s6IHtcbiAgICAgICAgICAgICAgICAuLi5sZW5CbG9jayxcbiAgICAgICAgICAgICAgICBpc0luZGVmaW5pdGVGb3JtOiAhIXBhcmFtZXRlcnMuaXNJbmRlZmluaXRlRm9ybSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAuLi5wYXJhbWV0ZXJzLFxuICAgICAgICB9LCBMb2NhbE9jdGV0U3RyaW5nVmFsdWVCbG9jayk7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSA0O1xuICAgIH1cbiAgICBmcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpIHtcbiAgICAgICAgdGhpcy52YWx1ZUJsb2NrLmlzQ29uc3RydWN0ZWQgPSB0aGlzLmlkQmxvY2suaXNDb25zdHJ1Y3RlZDtcbiAgICAgICAgdGhpcy52YWx1ZUJsb2NrLmlzSW5kZWZpbml0ZUZvcm0gPSB0aGlzLmxlbkJsb2NrLmlzSW5kZWZpbml0ZUZvcm07XG4gICAgICAgIGlmIChpbnB1dExlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaWRCbG9jay5lcnJvci5sZW5ndGggPT09IDApXG4gICAgICAgICAgICAgICAgdGhpcy5ibG9ja0xlbmd0aCArPSB0aGlzLmlkQmxvY2suYmxvY2tMZW5ndGg7XG4gICAgICAgICAgICBpZiAodGhpcy5sZW5CbG9jay5lcnJvci5sZW5ndGggPT09IDApXG4gICAgICAgICAgICAgICAgdGhpcy5ibG9ja0xlbmd0aCArPSB0aGlzLmxlbkJsb2NrLmJsb2NrTGVuZ3RoO1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0T2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy52YWx1ZUJsb2NrLmlzQ29uc3RydWN0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHZpZXcgPSBpbnB1dEJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyID8gbmV3IFVpbnQ4QXJyYXkoaW5wdXRCdWZmZXIpIDogaW5wdXRCdWZmZXI7XG4gICAgICAgICAgICBjb25zdCBidWYgPSB2aWV3LnN1YmFycmF5KGlucHV0T2Zmc2V0LCBpbnB1dE9mZnNldCArIGlucHV0TGVuZ3RoKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGJ1Zi5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFzbiA9IGxvY2FsRnJvbUJFUihidWYsIDAsIGJ1Zi5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFzbi5vZmZzZXQgIT09IC0xICYmIGFzbi5vZmZzZXQgPT09IGlucHV0TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlQmxvY2sudmFsdWUgPSBbYXNuLnJlc3VsdF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLmZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCk7XG4gICAgfVxuICAgIG9uQXNjaWlFbmNvZGluZygpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWVCbG9jay5pc0NvbnN0cnVjdGVkIHx8ICh0aGlzLnZhbHVlQmxvY2sudmFsdWUgJiYgdGhpcy52YWx1ZUJsb2NrLnZhbHVlLmxlbmd0aCkpIHtcbiAgICAgICAgICAgIHJldHVybiBDb25zdHJ1Y3RlZC5wcm90b3R5cGUub25Bc2NpaUVuY29kaW5nLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuY29uc3RydWN0b3IuTkFNRTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwdnRzdXRpbHMuQ29udmVydC5Ub0hleCh0aGlzLnZhbHVlQmxvY2sudmFsdWVIZXhWaWV3KTtcbiAgICAgICAgcmV0dXJuIGAke25hbWV9IDogJHt2YWx1ZX1gO1xuICAgIH1cbiAgICBnZXRWYWx1ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlkQmxvY2suaXNDb25zdHJ1Y3RlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVCbG9jay52YWx1ZUhleFZpZXcuc2xpY2UoKS5idWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBjb250ZW50IG9mIHRoaXMudmFsdWVCbG9jay52YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGNvbnRlbnQgaW5zdGFuY2VvZiBfYSRyKSB7XG4gICAgICAgICAgICAgICAgYXJyYXkucHVzaChjb250ZW50LnZhbHVlQmxvY2sudmFsdWVIZXhWaWV3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHZ0c3V0aWxzLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci5jb25jYXQoYXJyYXkpO1xuICAgIH1cbn1cbl9hJHIgPSBPY3RldFN0cmluZztcbigoKSA9PiB7XG4gICAgdHlwZVN0b3JlLk9jdGV0U3RyaW5nID0gX2Ekcjtcbn0pKCk7XG5PY3RldFN0cmluZy5OQU1FID0gT0NURVRfU1RSSU5HX05BTUU7XG5cbmNsYXNzIExvY2FsQml0U3RyaW5nVmFsdWVCbG9jayBleHRlbmRzIEhleEJsb2NrKExvY2FsQ29uc3RydWN0ZWRWYWx1ZUJsb2NrKSB7XG4gICAgY29uc3RydWN0b3IoeyB1bnVzZWRCaXRzID0gMCwgaXNDb25zdHJ1Y3RlZCA9IGZhbHNlLCAuLi5wYXJhbWV0ZXJzIH0gPSB7fSkge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy51bnVzZWRCaXRzID0gdW51c2VkQml0cztcbiAgICAgICAgdGhpcy5pc0NvbnN0cnVjdGVkID0gaXNDb25zdHJ1Y3RlZDtcbiAgICAgICAgdGhpcy5ibG9ja0xlbmd0aCA9IHRoaXMudmFsdWVIZXhWaWV3LmJ5dGVMZW5ndGg7XG4gICAgfVxuICAgIGZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCkge1xuICAgICAgICBpZiAoIWlucHV0TGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXRPZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdE9mZnNldCA9IC0xO1xuICAgICAgICBpZiAodGhpcy5pc0NvbnN0cnVjdGVkKSB7XG4gICAgICAgICAgICByZXN1bHRPZmZzZXQgPSBMb2NhbENvbnN0cnVjdGVkVmFsdWVCbG9jay5wcm90b3R5cGUuZnJvbUJFUi5jYWxsKHRoaXMsIGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdE9mZnNldCA9PT0gLTEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdE9mZnNldDtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdGhpcy52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRCbG9ja05hbWUgPSB2YWx1ZS5jb25zdHJ1Y3Rvci5OQU1FO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50QmxvY2tOYW1lID09PSBFTkRfT0ZfQ09OVEVOVF9OQU1FKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzSW5kZWZpbml0ZUZvcm0pXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gXCJFbmRPZkNvbnRlbnQgaXMgdW5leHBlY3RlZCwgQklUIFNUUklORyBtYXkgY29uc2lzdHMgb2YgQklUIFNUUklOR3Mgb25seVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50QmxvY2tOYW1lICE9PSBCSVRfU1RSSU5HX05BTUUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IFwiQklUIFNUUklORyBtYXkgY29uc2lzdHMgb2YgQklUIFNUUklOR3Mgb25seVwiO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlQmxvY2sgPSB2YWx1ZS52YWx1ZUJsb2NrO1xuICAgICAgICAgICAgICAgIGlmICgodGhpcy51bnVzZWRCaXRzID4gMCkgJiYgKHZhbHVlQmxvY2sudW51c2VkQml0cyA+IDApKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBcIlVzaW5nIG9mIFxcXCJ1bnVzZWQgYml0c1xcXCIgaW5zaWRlIGNvbnN0cnVjdGl2ZSBCSVQgU1RSSU5HIGFsbG93ZWQgZm9yIGxlYXN0IG9uZSBvbmx5XCI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy51bnVzZWRCaXRzID0gdmFsdWVCbG9jay51bnVzZWRCaXRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdE9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnB1dFZpZXcgPSBwdnRzdXRpbHMuQnVmZmVyU291cmNlQ29udmVydGVyLnRvVWludDhBcnJheShpbnB1dEJ1ZmZlcik7XG4gICAgICAgIGlmICghY2hlY2tCdWZmZXJQYXJhbXModGhpcywgaW5wdXRWaWV3LCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW50QnVmZmVyID0gaW5wdXRWaWV3LnN1YmFycmF5KGlucHV0T2Zmc2V0LCBpbnB1dE9mZnNldCArIGlucHV0TGVuZ3RoKTtcbiAgICAgICAgdGhpcy51bnVzZWRCaXRzID0gaW50QnVmZmVyWzBdO1xuICAgICAgICBpZiAodGhpcy51bnVzZWRCaXRzID4gNykge1xuICAgICAgICAgICAgdGhpcy5lcnJvciA9IFwiVW51c2VkIGJpdHMgZm9yIEJpdFN0cmluZyBtdXN0IGJlIGluIHJhbmdlIDAtN1wiO1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy51bnVzZWRCaXRzKSB7XG4gICAgICAgICAgICBjb25zdCBidWYgPSBpbnRCdWZmZXIuc3ViYXJyYXkoMSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChidWYuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhc24gPSBsb2NhbEZyb21CRVIoYnVmLCAwLCBidWYuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhc24ub2Zmc2V0ICE9PSAtMSAmJiBhc24ub2Zmc2V0ID09PSAoaW5wdXRMZW5ndGggLSAxKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IFthc24ucmVzdWx0XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlSGV4VmlldyA9IGludEJ1ZmZlci5zdWJhcnJheSgxKTtcbiAgICAgICAgdGhpcy5ibG9ja0xlbmd0aCA9IGludEJ1ZmZlci5sZW5ndGg7XG4gICAgICAgIHJldHVybiAoaW5wdXRPZmZzZXQgKyBpbnB1dExlbmd0aCk7XG4gICAgfVxuICAgIHRvQkVSKHNpemVPbmx5LCB3cml0ZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNDb25zdHJ1Y3RlZCkge1xuICAgICAgICAgICAgcmV0dXJuIExvY2FsQ29uc3RydWN0ZWRWYWx1ZUJsb2NrLnByb3RvdHlwZS50b0JFUi5jYWxsKHRoaXMsIHNpemVPbmx5LCB3cml0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaXplT25seSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBcnJheUJ1ZmZlcih0aGlzLnZhbHVlSGV4Vmlldy5ieXRlTGVuZ3RoICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLnZhbHVlSGV4Vmlldy5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gRU1QVFlfQlVGRkVSO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJldFZpZXcgPSBuZXcgVWludDhBcnJheSh0aGlzLnZhbHVlSGV4Vmlldy5sZW5ndGggKyAxKTtcbiAgICAgICAgcmV0Vmlld1swXSA9IHRoaXMudW51c2VkQml0cztcbiAgICAgICAgcmV0Vmlldy5zZXQodGhpcy52YWx1ZUhleFZpZXcsIDEpO1xuICAgICAgICByZXR1cm4gcmV0Vmlldy5idWZmZXI7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxuICAgICAgICAgICAgdW51c2VkQml0czogdGhpcy51bnVzZWRCaXRzLFxuICAgICAgICAgICAgaXNDb25zdHJ1Y3RlZDogdGhpcy5pc0NvbnN0cnVjdGVkLFxuICAgICAgICB9O1xuICAgIH1cbn1cbkxvY2FsQml0U3RyaW5nVmFsdWVCbG9jay5OQU1FID0gXCJCaXRTdHJpbmdWYWx1ZUJsb2NrXCI7XG5cbnZhciBfYSRxO1xuY2xhc3MgQml0U3RyaW5nIGV4dGVuZHMgQmFzZUJsb2NrIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGlkQmxvY2sgPSB7fSwgbGVuQmxvY2sgPSB7fSwgLi4ucGFyYW1ldGVycyB9ID0ge30pIHtcbiAgICAgICAgdmFyIF9iLCBfYztcbiAgICAgICAgKF9iID0gcGFyYW1ldGVycy5pc0NvbnN0cnVjdGVkKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAocGFyYW1ldGVycy5pc0NvbnN0cnVjdGVkID0gISEoKF9jID0gcGFyYW1ldGVycy52YWx1ZSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmxlbmd0aCkpO1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBpZEJsb2NrOiB7XG4gICAgICAgICAgICAgICAgaXNDb25zdHJ1Y3RlZDogcGFyYW1ldGVycy5pc0NvbnN0cnVjdGVkLFxuICAgICAgICAgICAgICAgIC4uLmlkQmxvY2ssXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVuQmxvY2s6IHtcbiAgICAgICAgICAgICAgICAuLi5sZW5CbG9jayxcbiAgICAgICAgICAgICAgICBpc0luZGVmaW5pdGVGb3JtOiAhIXBhcmFtZXRlcnMuaXNJbmRlZmluaXRlRm9ybSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAuLi5wYXJhbWV0ZXJzLFxuICAgICAgICB9LCBMb2NhbEJpdFN0cmluZ1ZhbHVlQmxvY2spO1xuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xuICAgICAgICB0aGlzLmlkQmxvY2sudGFnTnVtYmVyID0gMztcbiAgICB9XG4gICAgZnJvbUJFUihpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKSB7XG4gICAgICAgIHRoaXMudmFsdWVCbG9jay5pc0NvbnN0cnVjdGVkID0gdGhpcy5pZEJsb2NrLmlzQ29uc3RydWN0ZWQ7XG4gICAgICAgIHRoaXMudmFsdWVCbG9jay5pc0luZGVmaW5pdGVGb3JtID0gdGhpcy5sZW5CbG9jay5pc0luZGVmaW5pdGVGb3JtO1xuICAgICAgICByZXR1cm4gc3VwZXIuZnJvbUJFUihpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKTtcbiAgICB9XG4gICAgb25Bc2NpaUVuY29kaW5nKCkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZUJsb2NrLmlzQ29uc3RydWN0ZWQgfHwgKHRoaXMudmFsdWVCbG9jay52YWx1ZSAmJiB0aGlzLnZhbHVlQmxvY2sudmFsdWUubGVuZ3RoKSkge1xuICAgICAgICAgICAgcmV0dXJuIENvbnN0cnVjdGVkLnByb3RvdHlwZS5vbkFzY2lpRW5jb2RpbmcuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGJpdHMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlSGV4ID0gdGhpcy52YWx1ZUJsb2NrLnZhbHVlSGV4VmlldztcbiAgICAgICAgICAgIGZvciAoY29uc3QgYnl0ZSBvZiB2YWx1ZUhleCkge1xuICAgICAgICAgICAgICAgIGJpdHMucHVzaChieXRlLnRvU3RyaW5nKDIpLnBhZFN0YXJ0KDgsIFwiMFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBiaXRzU3RyID0gYml0cy5qb2luKFwiXCIpO1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuY29uc3RydWN0b3IuTkFNRTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYml0c1N0ci5zdWJzdHJpbmcoMCwgYml0c1N0ci5sZW5ndGggLSB0aGlzLnZhbHVlQmxvY2sudW51c2VkQml0cyk7XG4gICAgICAgICAgICByZXR1cm4gYCR7bmFtZX0gOiAke3ZhbHVlfWA7XG4gICAgICAgIH1cbiAgICB9XG59XG5fYSRxID0gQml0U3RyaW5nO1xuKCgpID0+IHtcbiAgICB0eXBlU3RvcmUuQml0U3RyaW5nID0gX2EkcTtcbn0pKCk7XG5CaXRTdHJpbmcuTkFNRSA9IEJJVF9TVFJJTkdfTkFNRTtcblxudmFyIF9hJHA7XG5mdW5jdGlvbiB2aWV3QWRkKGZpcnN0LCBzZWNvbmQpIHtcbiAgICBjb25zdCBjID0gbmV3IFVpbnQ4QXJyYXkoWzBdKTtcbiAgICBjb25zdCBmaXJzdFZpZXcgPSBuZXcgVWludDhBcnJheShmaXJzdCk7XG4gICAgY29uc3Qgc2Vjb25kVmlldyA9IG5ldyBVaW50OEFycmF5KHNlY29uZCk7XG4gICAgbGV0IGZpcnN0Vmlld0NvcHkgPSBmaXJzdFZpZXcuc2xpY2UoMCk7XG4gICAgY29uc3QgZmlyc3RWaWV3Q29weUxlbmd0aCA9IGZpcnN0Vmlld0NvcHkubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBzZWNvbmRWaWV3Q29weSA9IHNlY29uZFZpZXcuc2xpY2UoMCk7XG4gICAgY29uc3Qgc2Vjb25kVmlld0NvcHlMZW5ndGggPSBzZWNvbmRWaWV3Q29weS5sZW5ndGggLSAxO1xuICAgIGxldCB2YWx1ZSA9IDA7XG4gICAgY29uc3QgbWF4ID0gKHNlY29uZFZpZXdDb3B5TGVuZ3RoIDwgZmlyc3RWaWV3Q29weUxlbmd0aCkgPyBmaXJzdFZpZXdDb3B5TGVuZ3RoIDogc2Vjb25kVmlld0NvcHlMZW5ndGg7XG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIGZvciAobGV0IGkgPSBtYXg7IGkgPj0gMDsgaS0tLCBjb3VudGVyKyspIHtcbiAgICAgICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgICAgICBjYXNlIChjb3VudGVyIDwgc2Vjb25kVmlld0NvcHkubGVuZ3RoKTpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGZpcnN0Vmlld0NvcHlbZmlyc3RWaWV3Q29weUxlbmd0aCAtIGNvdW50ZXJdICsgc2Vjb25kVmlld0NvcHlbc2Vjb25kVmlld0NvcHlMZW5ndGggLSBjb3VudGVyXSArIGNbMF07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHZhbHVlID0gZmlyc3RWaWV3Q29weVtmaXJzdFZpZXdDb3B5TGVuZ3RoIC0gY291bnRlcl0gKyBjWzBdO1xuICAgICAgICB9XG4gICAgICAgIGNbMF0gPSB2YWx1ZSAvIDEwO1xuICAgICAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgICAgICAgIGNhc2UgKGNvdW50ZXIgPj0gZmlyc3RWaWV3Q29weS5sZW5ndGgpOlxuICAgICAgICAgICAgICAgIGZpcnN0Vmlld0NvcHkgPSBwdnV0aWxzLnV0aWxDb25jYXRWaWV3KG5ldyBVaW50OEFycmF5KFt2YWx1ZSAlIDEwXSksIGZpcnN0Vmlld0NvcHkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBmaXJzdFZpZXdDb3B5W2ZpcnN0Vmlld0NvcHlMZW5ndGggLSBjb3VudGVyXSA9IHZhbHVlICUgMTA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNbMF0gPiAwKVxuICAgICAgICBmaXJzdFZpZXdDb3B5ID0gcHZ1dGlscy51dGlsQ29uY2F0VmlldyhjLCBmaXJzdFZpZXdDb3B5KTtcbiAgICByZXR1cm4gZmlyc3RWaWV3Q29weTtcbn1cbmZ1bmN0aW9uIHBvd2VyMihuKSB7XG4gICAgaWYgKG4gPj0gcG93ZXJzMi5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChsZXQgcCA9IHBvd2VyczIubGVuZ3RoOyBwIDw9IG47IHArKykge1xuICAgICAgICAgICAgY29uc3QgYyA9IG5ldyBVaW50OEFycmF5KFswXSk7XG4gICAgICAgICAgICBsZXQgZGlnaXRzID0gKHBvd2VyczJbcCAtIDFdKS5zbGljZSgwKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAoZGlnaXRzLmxlbmd0aCAtIDEpOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gbmV3IFVpbnQ4QXJyYXkoWyhkaWdpdHNbaV0gPDwgMSkgKyBjWzBdXSk7XG4gICAgICAgICAgICAgICAgY1swXSA9IG5ld1ZhbHVlWzBdIC8gMTA7XG4gICAgICAgICAgICAgICAgZGlnaXRzW2ldID0gbmV3VmFsdWVbMF0gJSAxMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjWzBdID4gMClcbiAgICAgICAgICAgICAgICBkaWdpdHMgPSBwdnV0aWxzLnV0aWxDb25jYXRWaWV3KGMsIGRpZ2l0cyk7XG4gICAgICAgICAgICBwb3dlcnMyLnB1c2goZGlnaXRzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcG93ZXJzMltuXTtcbn1cbmZ1bmN0aW9uIHZpZXdTdWIoZmlyc3QsIHNlY29uZCkge1xuICAgIGxldCBiID0gMDtcbiAgICBjb25zdCBmaXJzdFZpZXcgPSBuZXcgVWludDhBcnJheShmaXJzdCk7XG4gICAgY29uc3Qgc2Vjb25kVmlldyA9IG5ldyBVaW50OEFycmF5KHNlY29uZCk7XG4gICAgY29uc3QgZmlyc3RWaWV3Q29weSA9IGZpcnN0Vmlldy5zbGljZSgwKTtcbiAgICBjb25zdCBmaXJzdFZpZXdDb3B5TGVuZ3RoID0gZmlyc3RWaWV3Q29weS5sZW5ndGggLSAxO1xuICAgIGNvbnN0IHNlY29uZFZpZXdDb3B5ID0gc2Vjb25kVmlldy5zbGljZSgwKTtcbiAgICBjb25zdCBzZWNvbmRWaWV3Q29weUxlbmd0aCA9IHNlY29uZFZpZXdDb3B5Lmxlbmd0aCAtIDE7XG4gICAgbGV0IHZhbHVlO1xuICAgIGxldCBjb3VudGVyID0gMDtcbiAgICBmb3IgKGxldCBpID0gc2Vjb25kVmlld0NvcHlMZW5ndGg7IGkgPj0gMDsgaS0tLCBjb3VudGVyKyspIHtcbiAgICAgICAgdmFsdWUgPSBmaXJzdFZpZXdDb3B5W2ZpcnN0Vmlld0NvcHlMZW5ndGggLSBjb3VudGVyXSAtIHNlY29uZFZpZXdDb3B5W3NlY29uZFZpZXdDb3B5TGVuZ3RoIC0gY291bnRlcl0gLSBiO1xuICAgICAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgICAgICAgIGNhc2UgKHZhbHVlIDwgMCk6XG4gICAgICAgICAgICAgICAgYiA9IDE7XG4gICAgICAgICAgICAgICAgZmlyc3RWaWV3Q29weVtmaXJzdFZpZXdDb3B5TGVuZ3RoIC0gY291bnRlcl0gPSB2YWx1ZSArIDEwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBiID0gMDtcbiAgICAgICAgICAgICAgICBmaXJzdFZpZXdDb3B5W2ZpcnN0Vmlld0NvcHlMZW5ndGggLSBjb3VudGVyXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChiID4gMCkge1xuICAgICAgICBmb3IgKGxldCBpID0gKGZpcnN0Vmlld0NvcHlMZW5ndGggLSBzZWNvbmRWaWV3Q29weUxlbmd0aCArIDEpOyBpID49IDA7IGktLSwgY291bnRlcisrKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGZpcnN0Vmlld0NvcHlbZmlyc3RWaWV3Q29weUxlbmd0aCAtIGNvdW50ZXJdIC0gYjtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA8IDApIHtcbiAgICAgICAgICAgICAgICBiID0gMTtcbiAgICAgICAgICAgICAgICBmaXJzdFZpZXdDb3B5W2ZpcnN0Vmlld0NvcHlMZW5ndGggLSBjb3VudGVyXSA9IHZhbHVlICsgMTA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBiID0gMDtcbiAgICAgICAgICAgICAgICBmaXJzdFZpZXdDb3B5W2ZpcnN0Vmlld0NvcHlMZW5ndGggLSBjb3VudGVyXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmaXJzdFZpZXdDb3B5LnNsaWNlKCk7XG59XG5jbGFzcyBMb2NhbEludGVnZXJWYWx1ZUJsb2NrIGV4dGVuZHMgSGV4QmxvY2soVmFsdWVCbG9jaykge1xuICAgIHNldFZhbHVlSGV4KCkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZUhleFZpZXcubGVuZ3RoID49IDQpIHtcbiAgICAgICAgICAgIHRoaXMud2FybmluZ3MucHVzaChcIlRvbyBiaWcgSW50ZWdlciBmb3IgZGVjb2RpbmcsIGhleCBvbmx5XCIpO1xuICAgICAgICAgICAgdGhpcy5pc0hleE9ubHkgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fdmFsdWVEZWMgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc0hleE9ubHkgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlSGV4Vmlldy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVEZWMgPSBwdnV0aWxzLnV0aWxEZWNvZGVUQy5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHsgdmFsdWUsIC4uLnBhcmFtZXRlcnMgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgICAgICB0aGlzLl92YWx1ZURlYyA9IDA7XG4gICAgICAgIGlmIChwYXJhbWV0ZXJzLnZhbHVlSGV4KSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlSGV4KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWVEZWMgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXQgdmFsdWVEZWModikge1xuICAgICAgICB0aGlzLl92YWx1ZURlYyA9IHY7XG4gICAgICAgIHRoaXMuaXNIZXhPbmx5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMudmFsdWVIZXhWaWV3ID0gbmV3IFVpbnQ4QXJyYXkocHZ1dGlscy51dGlsRW5jb2RlVEModikpO1xuICAgIH1cbiAgICBnZXQgdmFsdWVEZWMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZURlYztcbiAgICB9XG4gICAgZnJvbURFUihpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoLCBleHBlY3RlZExlbmd0aCA9IDApIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5mcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpO1xuICAgICAgICBpZiAob2Zmc2V0ID09PSAtMSlcbiAgICAgICAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLnZhbHVlSGV4VmlldztcbiAgICAgICAgaWYgKCh2aWV3WzBdID09PSAweDAwKSAmJiAoKHZpZXdbMV0gJiAweDgwKSAhPT0gMCkpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWVIZXhWaWV3ID0gdmlldy5zdWJhcnJheSgxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChleHBlY3RlZExlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGlmICh2aWV3Lmxlbmd0aCA8IGV4cGVjdGVkTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoZXhwZWN0ZWRMZW5ndGggLSB2aWV3Lmxlbmd0aCkgPiAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWRMZW5ndGggPSB2aWV3Lmxlbmd0aCArIDE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWVIZXhWaWV3ID0gdmlldy5zdWJhcnJheShleHBlY3RlZExlbmd0aCAtIHZpZXcubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9XG4gICAgdG9ERVIoc2l6ZU9ubHkgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy52YWx1ZUhleFZpZXc7XG4gICAgICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICAgICAgY2FzZSAoKHZpZXdbMF0gJiAweDgwKSAhPT0gMCk6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkVmlldyA9IG5ldyBVaW50OEFycmF5KHRoaXMudmFsdWVIZXhWaWV3Lmxlbmd0aCArIDEpO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkVmlld1swXSA9IDB4MDA7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRWaWV3LnNldCh2aWV3LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZUhleFZpZXcgPSB1cGRhdGVkVmlldztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICgodmlld1swXSA9PT0gMHgwMCkgJiYgKCh2aWV3WzFdICYgMHg4MCkgPT09IDApKTpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWVIZXhWaWV3ID0gdGhpcy52YWx1ZUhleFZpZXcuc3ViYXJyYXkoMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnRvQkVSKHNpemVPbmx5KTtcbiAgICB9XG4gICAgZnJvbUJFUihpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdE9mZnNldCA9IHN1cGVyLmZyb21CRVIoaW5wdXRCdWZmZXIsIGlucHV0T2Zmc2V0LCBpbnB1dExlbmd0aCk7XG4gICAgICAgIGlmIChyZXN1bHRPZmZzZXQgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0T2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0VmFsdWVIZXgoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdE9mZnNldDtcbiAgICB9XG4gICAgdG9CRVIoc2l6ZU9ubHkpIHtcbiAgICAgICAgcmV0dXJuIHNpemVPbmx5XG4gICAgICAgICAgICA/IG5ldyBBcnJheUJ1ZmZlcih0aGlzLnZhbHVlSGV4Vmlldy5sZW5ndGgpXG4gICAgICAgICAgICA6IHRoaXMudmFsdWVIZXhWaWV3LnNsaWNlKCkuYnVmZmVyO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdXBlci50b0pTT04oKSxcbiAgICAgICAgICAgIHZhbHVlRGVjOiB0aGlzLnZhbHVlRGVjLFxuICAgICAgICB9O1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgY29uc3QgZmlyc3RCaXQgPSAodGhpcy52YWx1ZUhleFZpZXcubGVuZ3RoICogOCkgLSAxO1xuICAgICAgICBsZXQgZGlnaXRzID0gbmV3IFVpbnQ4QXJyYXkoKHRoaXMudmFsdWVIZXhWaWV3Lmxlbmd0aCAqIDgpIC8gMyk7XG4gICAgICAgIGxldCBiaXROdW1iZXIgPSAwO1xuICAgICAgICBsZXQgY3VycmVudEJ5dGU7XG4gICAgICAgIGNvbnN0IGFzbjFWaWV3ID0gdGhpcy52YWx1ZUhleFZpZXc7XG4gICAgICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgICAgICBsZXQgZmxhZyA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBieXRlTnVtYmVyID0gKGFzbjFWaWV3LmJ5dGVMZW5ndGggLSAxKTsgYnl0ZU51bWJlciA+PSAwOyBieXRlTnVtYmVyLS0pIHtcbiAgICAgICAgICAgIGN1cnJlbnRCeXRlID0gYXNuMVZpZXdbYnl0ZU51bWJlcl07XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICgoY3VycmVudEJ5dGUgJiAxKSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGJpdE51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBmaXJzdEJpdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWdpdHMgPSB2aWV3U3ViKHBvd2VyMihiaXROdW1iZXIpLCBkaWdpdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFwiLVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWdpdHMgPSB2aWV3QWRkKGRpZ2l0cywgcG93ZXIyKGJpdE51bWJlcikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJpdE51bWJlcisrO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRCeXRlID4+PSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGlnaXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZGlnaXRzW2ldKVxuICAgICAgICAgICAgICAgIGZsYWcgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGZsYWcpXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGRpZ2l0c1N0cmluZy5jaGFyQXQoZGlnaXRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmxhZyA9PT0gZmFsc2UpXG4gICAgICAgICAgICByZXN1bHQgKz0gZGlnaXRzU3RyaW5nLmNoYXJBdCgwKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5fYSRwID0gTG9jYWxJbnRlZ2VyVmFsdWVCbG9jaztcbkxvY2FsSW50ZWdlclZhbHVlQmxvY2suTkFNRSA9IFwiSW50ZWdlclZhbHVlQmxvY2tcIjtcbigoKSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hJHAucHJvdG90eXBlLCBcInZhbHVlSGV4XCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgdGhpcy52YWx1ZUhleFZpZXcgPSBuZXcgVWludDhBcnJheSh2KTtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVIZXgoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZUhleFZpZXcuc2xpY2UoKS5idWZmZXI7XG4gICAgICAgIH0sXG4gICAgfSk7XG59KSgpO1xuXG52YXIgX2EkbztcbmNsYXNzIEludGVnZXIgZXh0ZW5kcyBCYXNlQmxvY2sge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzLCBMb2NhbEludGVnZXJWYWx1ZUJsb2NrKTtcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ0NsYXNzID0gMTtcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDI7XG4gICAgfVxuICAgIHRvQmlnSW50KCkge1xuICAgICAgICBhc3NlcnRCaWdJbnQoKTtcbiAgICAgICAgcmV0dXJuIEJpZ0ludCh0aGlzLnZhbHVlQmxvY2sudG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQmlnSW50KHZhbHVlKSB7XG4gICAgICAgIGFzc2VydEJpZ0ludCgpO1xuICAgICAgICBjb25zdCBiaWdJbnRWYWx1ZSA9IEJpZ0ludCh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IHdyaXRlciA9IG5ldyBWaWV3V3JpdGVyKCk7XG4gICAgICAgIGNvbnN0IGhleCA9IGJpZ0ludFZhbHVlLnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eLS8sIFwiXCIpO1xuICAgICAgICBjb25zdCB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkocHZ0c3V0aWxzLkNvbnZlcnQuRnJvbUhleChoZXgpKTtcbiAgICAgICAgaWYgKGJpZ0ludFZhbHVlIDwgMCkge1xuICAgICAgICAgICAgY29uc3QgZmlyc3QgPSBuZXcgVWludDhBcnJheSh2aWV3Lmxlbmd0aCArICh2aWV3WzBdICYgMHg4MCA/IDEgOiAwKSk7XG4gICAgICAgICAgICBmaXJzdFswXSB8PSAweDgwO1xuICAgICAgICAgICAgY29uc3QgZmlyc3RJbnQgPSBCaWdJbnQoYDB4JHtwdnRzdXRpbHMuQ29udmVydC5Ub0hleChmaXJzdCl9YCk7XG4gICAgICAgICAgICBjb25zdCBzZWNvbmRJbnQgPSBmaXJzdEludCArIGJpZ0ludFZhbHVlO1xuICAgICAgICAgICAgY29uc3Qgc2Vjb25kID0gcHZ0c3V0aWxzLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkocHZ0c3V0aWxzLkNvbnZlcnQuRnJvbUhleChzZWNvbmRJbnQudG9TdHJpbmcoMTYpKSk7XG4gICAgICAgICAgICBzZWNvbmRbMF0gfD0gMHg4MDtcbiAgICAgICAgICAgIHdyaXRlci53cml0ZShzZWNvbmQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHZpZXdbMF0gJiAweDgwKSB7XG4gICAgICAgICAgICAgICAgd3JpdGVyLndyaXRlKG5ldyBVaW50OEFycmF5KFswXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd3JpdGVyLndyaXRlKHZpZXcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcyA9IG5ldyBfYSRvKHsgdmFsdWVIZXg6IHdyaXRlci5maW5hbCgpIH0pO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBjb252ZXJ0VG9ERVIoKSB7XG4gICAgICAgIGNvbnN0IGludGVnZXIgPSBuZXcgX2Ekbyh7IHZhbHVlSGV4OiB0aGlzLnZhbHVlQmxvY2sudmFsdWVIZXhWaWV3IH0pO1xuICAgICAgICBpbnRlZ2VyLnZhbHVlQmxvY2sudG9ERVIoKTtcbiAgICAgICAgcmV0dXJuIGludGVnZXI7XG4gICAgfVxuICAgIGNvbnZlcnRGcm9tREVSKCkge1xuICAgICAgICByZXR1cm4gbmV3IF9hJG8oe1xuICAgICAgICAgICAgdmFsdWVIZXg6IHRoaXMudmFsdWVCbG9jay52YWx1ZUhleFZpZXdbMF0gPT09IDBcbiAgICAgICAgICAgICAgICA/IHRoaXMudmFsdWVCbG9jay52YWx1ZUhleFZpZXcuc3ViYXJyYXkoMSlcbiAgICAgICAgICAgICAgICA6IHRoaXMudmFsdWVCbG9jay52YWx1ZUhleFZpZXcsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvbkFzY2lpRW5jb2RpbmcoKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbnN0cnVjdG9yLk5BTUV9IDogJHt0aGlzLnZhbHVlQmxvY2sudG9TdHJpbmcoKX1gO1xuICAgIH1cbn1cbl9hJG8gPSBJbnRlZ2VyO1xuKCgpID0+IHtcbiAgICB0eXBlU3RvcmUuSW50ZWdlciA9IF9hJG87XG59KSgpO1xuSW50ZWdlci5OQU1FID0gXCJJTlRFR0VSXCI7XG5cbnZhciBfYSRuO1xuY2xhc3MgRW51bWVyYXRlZCBleHRlbmRzIEludGVnZXIge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ0NsYXNzID0gMTtcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDEwO1xuICAgIH1cbn1cbl9hJG4gPSBFbnVtZXJhdGVkO1xuKCgpID0+IHtcbiAgICB0eXBlU3RvcmUuRW51bWVyYXRlZCA9IF9hJG47XG59KSgpO1xuRW51bWVyYXRlZC5OQU1FID0gXCJFTlVNRVJBVEVEXCI7XG5cbmNsYXNzIExvY2FsU2lkVmFsdWVCbG9jayBleHRlbmRzIEhleEJsb2NrKFZhbHVlQmxvY2spIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHZhbHVlRGVjID0gLTEsIGlzRmlyc3RTaWQgPSBmYWxzZSwgLi4ucGFyYW1ldGVycyB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgICAgIHRoaXMudmFsdWVEZWMgPSB2YWx1ZURlYztcbiAgICAgICAgdGhpcy5pc0ZpcnN0U2lkID0gaXNGaXJzdFNpZDtcbiAgICB9XG4gICAgZnJvbUJFUihpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKSB7XG4gICAgICAgIGlmICghaW5wdXRMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dE9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnB1dFZpZXcgPSBwdnRzdXRpbHMuQnVmZmVyU291cmNlQ29udmVydGVyLnRvVWludDhBcnJheShpbnB1dEJ1ZmZlcik7XG4gICAgICAgIGlmICghY2hlY2tCdWZmZXJQYXJhbXModGhpcywgaW5wdXRWaWV3LCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW50QnVmZmVyID0gaW5wdXRWaWV3LnN1YmFycmF5KGlucHV0T2Zmc2V0LCBpbnB1dE9mZnNldCArIGlucHV0TGVuZ3RoKTtcbiAgICAgICAgdGhpcy52YWx1ZUhleFZpZXcgPSBuZXcgVWludDhBcnJheShpbnB1dExlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy52YWx1ZUhleFZpZXdbaV0gPSBpbnRCdWZmZXJbaV0gJiAweDdGO1xuICAgICAgICAgICAgdGhpcy5ibG9ja0xlbmd0aCsrO1xuICAgICAgICAgICAgaWYgKChpbnRCdWZmZXJbaV0gJiAweDgwKSA9PT0gMHgwMClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0ZW1wVmlldyA9IG5ldyBVaW50OEFycmF5KHRoaXMuYmxvY2tMZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYmxvY2tMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGVtcFZpZXdbaV0gPSB0aGlzLnZhbHVlSGV4Vmlld1tpXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlSGV4VmlldyA9IHRlbXBWaWV3O1xuICAgICAgICBpZiAoKGludEJ1ZmZlclt0aGlzLmJsb2NrTGVuZ3RoIC0gMV0gJiAweDgwKSAhPT0gMHgwMCkge1xuICAgICAgICAgICAgdGhpcy5lcnJvciA9IFwiRW5kIG9mIGlucHV0IHJlYWNoZWQgYmVmb3JlIG1lc3NhZ2Ugd2FzIGZ1bGx5IGRlY29kZWRcIjtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy52YWx1ZUhleFZpZXdbMF0gPT09IDB4MDApXG4gICAgICAgICAgICB0aGlzLndhcm5pbmdzLnB1c2goXCJOZWVkbGVzc2x5IGxvbmcgZm9ybWF0IG9mIFNJRCBlbmNvZGluZ1wiKTtcbiAgICAgICAgaWYgKHRoaXMuYmxvY2tMZW5ndGggPD0gOClcbiAgICAgICAgICAgIHRoaXMudmFsdWVEZWMgPSBwdnV0aWxzLnV0aWxGcm9tQmFzZSh0aGlzLnZhbHVlSGV4VmlldywgNyk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc0hleE9ubHkgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy53YXJuaW5ncy5wdXNoKFwiVG9vIGJpZyBTSUQgZm9yIGRlY29kaW5nLCBoZXggb25seVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKGlucHV0T2Zmc2V0ICsgdGhpcy5ibG9ja0xlbmd0aCk7XG4gICAgfVxuICAgIHNldCB2YWx1ZUJpZ0ludCh2YWx1ZSkge1xuICAgICAgICBhc3NlcnRCaWdJbnQoKTtcbiAgICAgICAgbGV0IGJpdHMgPSBCaWdJbnQodmFsdWUpLnRvU3RyaW5nKDIpO1xuICAgICAgICB3aGlsZSAoYml0cy5sZW5ndGggJSA3KSB7XG4gICAgICAgICAgICBiaXRzID0gXCIwXCIgKyBiaXRzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYml0cy5sZW5ndGggLyA3KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYnl0ZXNbaV0gPSBwYXJzZUludChiaXRzLnNsaWNlKGkgKiA3LCBpICogNyArIDcpLCAyKSArIChpICsgMSA8IGJ5dGVzLmxlbmd0aCA/IDB4ODAgOiAwKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZyb21CRVIoYnl0ZXMuYnVmZmVyLCAwLCBieXRlcy5sZW5ndGgpO1xuICAgIH1cbiAgICB0b0JFUihzaXplT25seSkge1xuICAgICAgICBpZiAodGhpcy5pc0hleE9ubHkpIHtcbiAgICAgICAgICAgIGlmIChzaXplT25seSlcbiAgICAgICAgICAgICAgICByZXR1cm4gKG5ldyBBcnJheUJ1ZmZlcih0aGlzLnZhbHVlSGV4Vmlldy5ieXRlTGVuZ3RoKSk7XG4gICAgICAgICAgICBjb25zdCBjdXJWaWV3ID0gdGhpcy52YWx1ZUhleFZpZXc7XG4gICAgICAgICAgICBjb25zdCByZXRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5ibG9ja0xlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8ICh0aGlzLmJsb2NrTGVuZ3RoIC0gMSk7IGkrKylcbiAgICAgICAgICAgICAgICByZXRWaWV3W2ldID0gY3VyVmlld1tpXSB8IDB4ODA7XG4gICAgICAgICAgICByZXRWaWV3W3RoaXMuYmxvY2tMZW5ndGggLSAxXSA9IGN1clZpZXdbdGhpcy5ibG9ja0xlbmd0aCAtIDFdO1xuICAgICAgICAgICAgcmV0dXJuIHJldFZpZXcuYnVmZmVyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVuY29kZWRCdWYgPSBwdnV0aWxzLnV0aWxUb0Jhc2UodGhpcy52YWx1ZURlYywgNyk7XG4gICAgICAgIGlmIChlbmNvZGVkQnVmLmJ5dGVMZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBcIkVycm9yIGR1cmluZyBlbmNvZGluZyBTSUQgdmFsdWVcIjtcbiAgICAgICAgICAgIHJldHVybiBFTVBUWV9CVUZGRVI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmV0VmlldyA9IG5ldyBVaW50OEFycmF5KGVuY29kZWRCdWYuYnl0ZUxlbmd0aCk7XG4gICAgICAgIGlmICghc2l6ZU9ubHkpIHtcbiAgICAgICAgICAgIGNvbnN0IGVuY29kZWRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoZW5jb2RlZEJ1Zik7XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBlbmNvZGVkQnVmLmJ5dGVMZW5ndGggLSAxO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgICAgICAgICAgICByZXRWaWV3W2ldID0gZW5jb2RlZFZpZXdbaV0gfCAweDgwO1xuICAgICAgICAgICAgcmV0Vmlld1tsZW5dID0gZW5jb2RlZFZpZXdbbGVuXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0VmlldztcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgICAgICBpZiAodGhpcy5pc0hleE9ubHkpXG4gICAgICAgICAgICByZXN1bHQgPSBwdnRzdXRpbHMuQ29udmVydC5Ub0hleCh0aGlzLnZhbHVlSGV4Vmlldyk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNGaXJzdFNpZCkge1xuICAgICAgICAgICAgICAgIGxldCBzaWRWYWx1ZSA9IHRoaXMudmFsdWVEZWM7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudmFsdWVEZWMgPD0gMzkpXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFwiMC5cIjtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudmFsdWVEZWMgPD0gNzkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFwiMS5cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZFZhbHVlIC09IDQwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gXCIyLlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2lkVmFsdWUgLT0gODA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNpZFZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy52YWx1ZURlYy50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxuICAgICAgICAgICAgdmFsdWVEZWM6IHRoaXMudmFsdWVEZWMsXG4gICAgICAgICAgICBpc0ZpcnN0U2lkOiB0aGlzLmlzRmlyc3RTaWQsXG4gICAgICAgIH07XG4gICAgfVxufVxuTG9jYWxTaWRWYWx1ZUJsb2NrLk5BTUUgPSBcInNpZEJsb2NrXCI7XG5cbmNsYXNzIExvY2FsT2JqZWN0SWRlbnRpZmllclZhbHVlQmxvY2sgZXh0ZW5kcyBWYWx1ZUJsb2NrIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHZhbHVlID0gRU1QVFlfU1RSSU5HLCAuLi5wYXJhbWV0ZXJzIH0gPSB7fSkge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IFtdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZnJvbVN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnJvbUJFUihpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKSB7XG4gICAgICAgIGxldCByZXN1bHRPZmZzZXQgPSBpbnB1dE9mZnNldDtcbiAgICAgICAgd2hpbGUgKGlucHV0TGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3Qgc2lkQmxvY2sgPSBuZXcgTG9jYWxTaWRWYWx1ZUJsb2NrKCk7XG4gICAgICAgICAgICByZXN1bHRPZmZzZXQgPSBzaWRCbG9jay5mcm9tQkVSKGlucHV0QnVmZmVyLCByZXN1bHRPZmZzZXQsIGlucHV0TGVuZ3RoKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHRPZmZzZXQgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ibG9ja0xlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IHNpZEJsb2NrLmVycm9yO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRPZmZzZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy52YWx1ZS5sZW5ndGggPT09IDApXG4gICAgICAgICAgICAgICAgc2lkQmxvY2suaXNGaXJzdFNpZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmJsb2NrTGVuZ3RoICs9IHNpZEJsb2NrLmJsb2NrTGVuZ3RoO1xuICAgICAgICAgICAgaW5wdXRMZW5ndGggLT0gc2lkQmxvY2suYmxvY2tMZW5ndGg7XG4gICAgICAgICAgICB0aGlzLnZhbHVlLnB1c2goc2lkQmxvY2spO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRPZmZzZXQ7XG4gICAgfVxuICAgIHRvQkVSKHNpemVPbmx5KSB7XG4gICAgICAgIGNvbnN0IHJldEJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZUJ1ZiA9IHRoaXMudmFsdWVbaV0udG9CRVIoc2l6ZU9ubHkpO1xuICAgICAgICAgICAgaWYgKHZhbHVlQnVmLmJ5dGVMZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gdGhpcy52YWx1ZVtpXS5lcnJvcjtcbiAgICAgICAgICAgICAgICByZXR1cm4gRU1QVFlfQlVGRkVSO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0QnVmZmVycy5wdXNoKHZhbHVlQnVmKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uY2F0KHJldEJ1ZmZlcnMpO1xuICAgIH1cbiAgICBmcm9tU3RyaW5nKHN0cmluZykge1xuICAgICAgICB0aGlzLnZhbHVlID0gW107XG4gICAgICAgIGxldCBwb3MxID0gMDtcbiAgICAgICAgbGV0IHBvczIgPSAwO1xuICAgICAgICBsZXQgc2lkID0gXCJcIjtcbiAgICAgICAgbGV0IGZsYWcgPSBmYWxzZTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgcG9zMiA9IHN0cmluZy5pbmRleE9mKFwiLlwiLCBwb3MxKTtcbiAgICAgICAgICAgIGlmIChwb3MyID09PSAtMSlcbiAgICAgICAgICAgICAgICBzaWQgPSBzdHJpbmcuc3Vic3RyaW5nKHBvczEpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHNpZCA9IHN0cmluZy5zdWJzdHJpbmcocG9zMSwgcG9zMik7XG4gICAgICAgICAgICBwb3MxID0gcG9zMiArIDE7XG4gICAgICAgICAgICBpZiAoZmxhZykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpZEJsb2NrID0gdGhpcy52YWx1ZVswXTtcbiAgICAgICAgICAgICAgICBsZXQgcGx1cyA9IDA7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChzaWRCbG9jay52YWx1ZURlYykge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx1cyA9IDQwO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsdXMgPSA4MDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRTSUQgPSBwYXJzZUludChzaWQsIDEwKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4ocGFyc2VkU0lEKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHNpZEJsb2NrLnZhbHVlRGVjID0gcGFyc2VkU0lEICsgcGx1cztcbiAgICAgICAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaWRCbG9jayA9IG5ldyBMb2NhbFNpZFZhbHVlQmxvY2soKTtcbiAgICAgICAgICAgICAgICBpZiAoc2lkID4gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0QmlnSW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNpZFZhbHVlID0gQmlnSW50KHNpZCk7XG4gICAgICAgICAgICAgICAgICAgIHNpZEJsb2NrLnZhbHVlQmlnSW50ID0gc2lkVmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzaWRCbG9jay52YWx1ZURlYyA9IHBhcnNlSW50KHNpZCwgMTApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oc2lkQmxvY2sudmFsdWVEZWMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMudmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNpZEJsb2NrLmlzRmlyc3RTaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBmbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZS5wdXNoKHNpZEJsb2NrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAocG9zMiAhPT0gLTEpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gICAgICAgIGxldCBpc0hleE9ubHkgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpc0hleE9ubHkgPSB0aGlzLnZhbHVlW2ldLmlzSGV4T25seTtcbiAgICAgICAgICAgIGxldCBzaWRTdHIgPSB0aGlzLnZhbHVlW2ldLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBpZiAoaSAhPT0gMClcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBgJHtyZXN1bHR9LmA7XG4gICAgICAgICAgICBpZiAoaXNIZXhPbmx5KSB7XG4gICAgICAgICAgICAgICAgc2lkU3RyID0gYHske3NpZFN0cn19YDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52YWx1ZVtpXS5pc0ZpcnN0U2lkKVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBgMi57JHtzaWRTdHJ9IC0gODB9YDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzaWRTdHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNpZFN0cjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IG9iamVjdCA9IHtcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxuICAgICAgICAgICAgdmFsdWU6IHRoaXMudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHNpZEFycmF5OiBbXSxcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBvYmplY3Quc2lkQXJyYXkucHVzaCh0aGlzLnZhbHVlW2ldLnRvSlNPTigpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cbn1cbkxvY2FsT2JqZWN0SWRlbnRpZmllclZhbHVlQmxvY2suTkFNRSA9IFwiT2JqZWN0SWRlbnRpZmllclZhbHVlQmxvY2tcIjtcblxudmFyIF9hJG07XG5jbGFzcyBPYmplY3RJZGVudGlmaWVyIGV4dGVuZHMgQmFzZUJsb2NrIHtcbiAgICBnZXRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVCbG9jay50b1N0cmluZygpO1xuICAgIH1cbiAgICBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlQmxvY2suZnJvbVN0cmluZyh2YWx1ZSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzLCBMb2NhbE9iamVjdElkZW50aWZpZXJWYWx1ZUJsb2NrKTtcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ0NsYXNzID0gMTtcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDY7XG4gICAgfVxuICAgIG9uQXNjaWlFbmNvZGluZygpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29uc3RydWN0b3IuTkFNRX0gOiAke3RoaXMudmFsdWVCbG9jay50b1N0cmluZygpIHx8IFwiZW1wdHlcIn1gO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdXBlci50b0pTT04oKSxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLmdldFZhbHVlKCksXG4gICAgICAgIH07XG4gICAgfVxufVxuX2EkbSA9IE9iamVjdElkZW50aWZpZXI7XG4oKCkgPT4ge1xuICAgIHR5cGVTdG9yZS5PYmplY3RJZGVudGlmaWVyID0gX2EkbTtcbn0pKCk7XG5PYmplY3RJZGVudGlmaWVyLk5BTUUgPSBcIk9CSkVDVCBJREVOVElGSUVSXCI7XG5cbmNsYXNzIExvY2FsUmVsYXRpdmVTaWRWYWx1ZUJsb2NrIGV4dGVuZHMgSGV4QmxvY2soTG9jYWxCYXNlQmxvY2spIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHZhbHVlRGVjID0gMCwgLi4ucGFyYW1ldGVycyB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgICAgIHRoaXMudmFsdWVEZWMgPSB2YWx1ZURlYztcbiAgICB9XG4gICAgZnJvbUJFUihpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKSB7XG4gICAgICAgIGlmIChpbnB1dExlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBpbnB1dE9mZnNldDtcbiAgICAgICAgY29uc3QgaW5wdXRWaWV3ID0gcHZ0c3V0aWxzLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkoaW5wdXRCdWZmZXIpO1xuICAgICAgICBpZiAoIWNoZWNrQnVmZmVyUGFyYW1zKHRoaXMsIGlucHV0VmlldywgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKSlcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgY29uc3QgaW50QnVmZmVyID0gaW5wdXRWaWV3LnN1YmFycmF5KGlucHV0T2Zmc2V0LCBpbnB1dE9mZnNldCArIGlucHV0TGVuZ3RoKTtcbiAgICAgICAgdGhpcy52YWx1ZUhleFZpZXcgPSBuZXcgVWludDhBcnJheShpbnB1dExlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy52YWx1ZUhleFZpZXdbaV0gPSBpbnRCdWZmZXJbaV0gJiAweDdGO1xuICAgICAgICAgICAgdGhpcy5ibG9ja0xlbmd0aCsrO1xuICAgICAgICAgICAgaWYgKChpbnRCdWZmZXJbaV0gJiAweDgwKSA9PT0gMHgwMClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0ZW1wVmlldyA9IG5ldyBVaW50OEFycmF5KHRoaXMuYmxvY2tMZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYmxvY2tMZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHRlbXBWaWV3W2ldID0gdGhpcy52YWx1ZUhleFZpZXdbaV07XG4gICAgICAgIHRoaXMudmFsdWVIZXhWaWV3ID0gdGVtcFZpZXc7XG4gICAgICAgIGlmICgoaW50QnVmZmVyW3RoaXMuYmxvY2tMZW5ndGggLSAxXSAmIDB4ODApICE9PSAweDAwKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yID0gXCJFbmQgb2YgaW5wdXQgcmVhY2hlZCBiZWZvcmUgbWVzc2FnZSB3YXMgZnVsbHkgZGVjb2RlZFwiO1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnZhbHVlSGV4Vmlld1swXSA9PT0gMHgwMClcbiAgICAgICAgICAgIHRoaXMud2FybmluZ3MucHVzaChcIk5lZWRsZXNzbHkgbG9uZyBmb3JtYXQgb2YgU0lEIGVuY29kaW5nXCIpO1xuICAgICAgICBpZiAodGhpcy5ibG9ja0xlbmd0aCA8PSA4KVxuICAgICAgICAgICAgdGhpcy52YWx1ZURlYyA9IHB2dXRpbHMudXRpbEZyb21CYXNlKHRoaXMudmFsdWVIZXhWaWV3LCA3KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzSGV4T25seSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLndhcm5pbmdzLnB1c2goXCJUb28gYmlnIFNJRCBmb3IgZGVjb2RpbmcsIGhleCBvbmx5XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoaW5wdXRPZmZzZXQgKyB0aGlzLmJsb2NrTGVuZ3RoKTtcbiAgICB9XG4gICAgdG9CRVIoc2l6ZU9ubHkpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNIZXhPbmx5KSB7XG4gICAgICAgICAgICBpZiAoc2l6ZU9ubHkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIChuZXcgQXJyYXlCdWZmZXIodGhpcy52YWx1ZUhleFZpZXcuYnl0ZUxlbmd0aCkpO1xuICAgICAgICAgICAgY29uc3QgY3VyVmlldyA9IHRoaXMudmFsdWVIZXhWaWV3O1xuICAgICAgICAgICAgY29uc3QgcmV0VmlldyA9IG5ldyBVaW50OEFycmF5KHRoaXMuYmxvY2tMZW5ndGgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAodGhpcy5ibG9ja0xlbmd0aCAtIDEpOyBpKyspXG4gICAgICAgICAgICAgICAgcmV0Vmlld1tpXSA9IGN1clZpZXdbaV0gfCAweDgwO1xuICAgICAgICAgICAgcmV0Vmlld1t0aGlzLmJsb2NrTGVuZ3RoIC0gMV0gPSBjdXJWaWV3W3RoaXMuYmxvY2tMZW5ndGggLSAxXTtcbiAgICAgICAgICAgIHJldHVybiByZXRWaWV3LmJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbmNvZGVkQnVmID0gcHZ1dGlscy51dGlsVG9CYXNlKHRoaXMudmFsdWVEZWMsIDcpO1xuICAgICAgICBpZiAoZW5jb2RlZEJ1Zi5ieXRlTGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yID0gXCJFcnJvciBkdXJpbmcgZW5jb2RpbmcgU0lEIHZhbHVlXCI7XG4gICAgICAgICAgICByZXR1cm4gRU1QVFlfQlVGRkVSO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJldFZpZXcgPSBuZXcgVWludDhBcnJheShlbmNvZGVkQnVmLmJ5dGVMZW5ndGgpO1xuICAgICAgICBpZiAoIXNpemVPbmx5KSB7XG4gICAgICAgICAgICBjb25zdCBlbmNvZGVkVmlldyA9IG5ldyBVaW50OEFycmF5KGVuY29kZWRCdWYpO1xuICAgICAgICAgICAgY29uc3QgbGVuID0gZW5jb2RlZEJ1Zi5ieXRlTGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgICAgICAgICAgICAgcmV0Vmlld1tpXSA9IGVuY29kZWRWaWV3W2ldIHwgMHg4MDtcbiAgICAgICAgICAgIHJldFZpZXdbbGVuXSA9IGVuY29kZWRWaWV3W2xlbl07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldFZpZXcuYnVmZmVyO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gICAgICAgIGlmICh0aGlzLmlzSGV4T25seSlcbiAgICAgICAgICAgIHJlc3VsdCA9IHB2dHN1dGlscy5Db252ZXJ0LlRvSGV4KHRoaXMudmFsdWVIZXhWaWV3KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnZhbHVlRGVjLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXG4gICAgICAgICAgICB2YWx1ZURlYzogdGhpcy52YWx1ZURlYyxcbiAgICAgICAgfTtcbiAgICB9XG59XG5Mb2NhbFJlbGF0aXZlU2lkVmFsdWVCbG9jay5OQU1FID0gXCJyZWxhdGl2ZVNpZEJsb2NrXCI7XG5cbmNsYXNzIExvY2FsUmVsYXRpdmVPYmplY3RJZGVudGlmaWVyVmFsdWVCbG9jayBleHRlbmRzIFZhbHVlQmxvY2sge1xuICAgIGNvbnN0cnVjdG9yKHsgdmFsdWUgPSBFTVBUWV9TVFJJTkcsIC4uLnBhcmFtZXRlcnMgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgICAgICB0aGlzLnZhbHVlID0gW107XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmcm9tQkVSKGlucHV0QnVmZmVyLCBpbnB1dE9mZnNldCwgaW5wdXRMZW5ndGgpIHtcbiAgICAgICAgbGV0IHJlc3VsdE9mZnNldCA9IGlucHV0T2Zmc2V0O1xuICAgICAgICB3aGlsZSAoaW5wdXRMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBzaWRCbG9jayA9IG5ldyBMb2NhbFJlbGF0aXZlU2lkVmFsdWVCbG9jaygpO1xuICAgICAgICAgICAgcmVzdWx0T2Zmc2V0ID0gc2lkQmxvY2suZnJvbUJFUihpbnB1dEJ1ZmZlciwgcmVzdWx0T2Zmc2V0LCBpbnB1dExlbmd0aCk7XG4gICAgICAgICAgICBpZiAocmVzdWx0T2Zmc2V0ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYmxvY2tMZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBzaWRCbG9jay5lcnJvcjtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0T2Zmc2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ibG9ja0xlbmd0aCArPSBzaWRCbG9jay5ibG9ja0xlbmd0aDtcbiAgICAgICAgICAgIGlucHV0TGVuZ3RoIC09IHNpZEJsb2NrLmJsb2NrTGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy52YWx1ZS5wdXNoKHNpZEJsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0T2Zmc2V0O1xuICAgIH1cbiAgICB0b0JFUihzaXplT25seSwgX3dyaXRlcikge1xuICAgICAgICBjb25zdCByZXRCdWZmZXJzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVCdWYgPSB0aGlzLnZhbHVlW2ldLnRvQkVSKHNpemVPbmx5KTtcbiAgICAgICAgICAgIGlmICh2YWx1ZUJ1Zi5ieXRlTGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IHRoaXMudmFsdWVbaV0uZXJyb3I7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEVNUFRZX0JVRkZFUjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldEJ1ZmZlcnMucHVzaCh2YWx1ZUJ1Zik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbmNhdChyZXRCdWZmZXJzKTtcbiAgICB9XG4gICAgZnJvbVN0cmluZyhzdHJpbmcpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IFtdO1xuICAgICAgICBsZXQgcG9zMSA9IDA7XG4gICAgICAgIGxldCBwb3MyID0gMDtcbiAgICAgICAgbGV0IHNpZCA9IFwiXCI7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHBvczIgPSBzdHJpbmcuaW5kZXhPZihcIi5cIiwgcG9zMSk7XG4gICAgICAgICAgICBpZiAocG9zMiA9PT0gLTEpXG4gICAgICAgICAgICAgICAgc2lkID0gc3RyaW5nLnN1YnN0cmluZyhwb3MxKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBzaWQgPSBzdHJpbmcuc3Vic3RyaW5nKHBvczEsIHBvczIpO1xuICAgICAgICAgICAgcG9zMSA9IHBvczIgKyAxO1xuICAgICAgICAgICAgY29uc3Qgc2lkQmxvY2sgPSBuZXcgTG9jYWxSZWxhdGl2ZVNpZFZhbHVlQmxvY2soKTtcbiAgICAgICAgICAgIHNpZEJsb2NrLnZhbHVlRGVjID0gcGFyc2VJbnQoc2lkLCAxMCk7XG4gICAgICAgICAgICBpZiAoaXNOYU4oc2lkQmxvY2sudmFsdWVEZWMpKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgdGhpcy52YWx1ZS5wdXNoKHNpZEJsb2NrKTtcbiAgICAgICAgfSB3aGlsZSAocG9zMiAhPT0gLTEpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgICAgICBsZXQgaXNIZXhPbmx5ID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy52YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaXNIZXhPbmx5ID0gdGhpcy52YWx1ZVtpXS5pc0hleE9ubHk7XG4gICAgICAgICAgICBsZXQgc2lkU3RyID0gdGhpcy52YWx1ZVtpXS50b1N0cmluZygpO1xuICAgICAgICAgICAgaWYgKGkgIT09IDApXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gYCR7cmVzdWx0fS5gO1xuICAgICAgICAgICAgaWYgKGlzSGV4T25seSkge1xuICAgICAgICAgICAgICAgIHNpZFN0ciA9IGB7JHtzaWRTdHJ9fWA7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNpZFN0cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gc2lkU3RyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgY29uc3Qgb2JqZWN0ID0ge1xuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy50b1N0cmluZygpLFxuICAgICAgICAgICAgc2lkQXJyYXk6IFtdLFxuICAgICAgICB9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudmFsdWUubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBvYmplY3Quc2lkQXJyYXkucHVzaCh0aGlzLnZhbHVlW2ldLnRvSlNPTigpKTtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG59XG5Mb2NhbFJlbGF0aXZlT2JqZWN0SWRlbnRpZmllclZhbHVlQmxvY2suTkFNRSA9IFwiUmVsYXRpdmVPYmplY3RJZGVudGlmaWVyVmFsdWVCbG9ja1wiO1xuXG52YXIgX2EkbDtcbmNsYXNzIFJlbGF0aXZlT2JqZWN0SWRlbnRpZmllciBleHRlbmRzIEJhc2VCbG9jayB7XG4gICAgZ2V0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlQmxvY2sudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgc2V0VmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZUJsb2NrLmZyb21TdHJpbmcodmFsdWUpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycywgTG9jYWxSZWxhdGl2ZU9iamVjdElkZW50aWZpZXJWYWx1ZUJsb2NrKTtcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ0NsYXNzID0gMTtcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDEzO1xuICAgIH1cbiAgICBvbkFzY2lpRW5jb2RpbmcoKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbnN0cnVjdG9yLk5BTUV9IDogJHt0aGlzLnZhbHVlQmxvY2sudG9TdHJpbmcoKSB8fCBcImVtcHR5XCJ9YDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5nZXRWYWx1ZSgpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbl9hJGwgPSBSZWxhdGl2ZU9iamVjdElkZW50aWZpZXI7XG4oKCkgPT4ge1xuICAgIHR5cGVTdG9yZS5SZWxhdGl2ZU9iamVjdElkZW50aWZpZXIgPSBfYSRsO1xufSkoKTtcblJlbGF0aXZlT2JqZWN0SWRlbnRpZmllci5OQU1FID0gXCJSZWxhdGl2ZU9iamVjdElkZW50aWZpZXJcIjtcblxudmFyIF9hJGs7XG5jbGFzcyBTZXF1ZW5jZSBleHRlbmRzIENvbnN0cnVjdGVkIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAxNjtcbiAgICB9XG59XG5fYSRrID0gU2VxdWVuY2U7XG4oKCkgPT4ge1xuICAgIHR5cGVTdG9yZS5TZXF1ZW5jZSA9IF9hJGs7XG59KSgpO1xuU2VxdWVuY2UuTkFNRSA9IFwiU0VRVUVOQ0VcIjtcblxudmFyIF9hJGo7XG5jbGFzcyBTZXQgZXh0ZW5kcyBDb25zdHJ1Y3RlZCB7XG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xuICAgICAgICB0aGlzLmlkQmxvY2sudGFnTnVtYmVyID0gMTc7XG4gICAgfVxufVxuX2EkaiA9IFNldDtcbigoKSA9PiB7XG4gICAgdHlwZVN0b3JlLlNldCA9IF9hJGo7XG59KSgpO1xuU2V0Lk5BTUUgPSBcIlNFVFwiO1xuXG5jbGFzcyBMb2NhbFN0cmluZ1ZhbHVlQmxvY2sgZXh0ZW5kcyBIZXhCbG9jayhWYWx1ZUJsb2NrKSB7XG4gICAgY29uc3RydWN0b3IoeyAuLi5wYXJhbWV0ZXJzIH0gPSB7fSkge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy5pc0hleE9ubHkgPSB0cnVlO1xuICAgICAgICB0aGlzLnZhbHVlID0gRU1QVFlfU1RSSU5HO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdXBlci50b0pTT04oKSxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgICB9O1xuICAgIH1cbn1cbkxvY2FsU3RyaW5nVmFsdWVCbG9jay5OQU1FID0gXCJTdHJpbmdWYWx1ZUJsb2NrXCI7XG5cbmNsYXNzIExvY2FsU2ltcGxlU3RyaW5nVmFsdWVCbG9jayBleHRlbmRzIExvY2FsU3RyaW5nVmFsdWVCbG9jayB7XG59XG5Mb2NhbFNpbXBsZVN0cmluZ1ZhbHVlQmxvY2suTkFNRSA9IFwiU2ltcGxlU3RyaW5nVmFsdWVCbG9ja1wiO1xuXG5jbGFzcyBMb2NhbFNpbXBsZVN0cmluZ0Jsb2NrIGV4dGVuZHMgQmFzZVN0cmluZ0Jsb2NrIHtcbiAgICBjb25zdHJ1Y3Rvcih7IC4uLnBhcmFtZXRlcnMgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIExvY2FsU2ltcGxlU3RyaW5nVmFsdWVCbG9jayk7XG4gICAgfVxuICAgIGZyb21CdWZmZXIoaW5wdXRCdWZmZXIpIHtcbiAgICAgICAgdGhpcy52YWx1ZUJsb2NrLnZhbHVlID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBwdnRzdXRpbHMuQnVmZmVyU291cmNlQ29udmVydGVyLnRvVWludDhBcnJheShpbnB1dEJ1ZmZlcikpO1xuICAgIH1cbiAgICBmcm9tU3RyaW5nKGlucHV0U3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHN0ckxlbiA9IGlucHV0U3RyaW5nLmxlbmd0aDtcbiAgICAgICAgY29uc3QgdmlldyA9IHRoaXMudmFsdWVCbG9jay52YWx1ZUhleFZpZXcgPSBuZXcgVWludDhBcnJheShzdHJMZW4pO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ckxlbjsgaSsrKVxuICAgICAgICAgICAgdmlld1tpXSA9IGlucHV0U3RyaW5nLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIHRoaXMudmFsdWVCbG9jay52YWx1ZSA9IGlucHV0U3RyaW5nO1xuICAgIH1cbn1cbkxvY2FsU2ltcGxlU3RyaW5nQmxvY2suTkFNRSA9IFwiU0lNUExFIFNUUklOR1wiO1xuXG5jbGFzcyBMb2NhbFV0ZjhTdHJpbmdWYWx1ZUJsb2NrIGV4dGVuZHMgTG9jYWxTaW1wbGVTdHJpbmdCbG9jayB7XG4gICAgZnJvbUJ1ZmZlcihpbnB1dEJ1ZmZlcikge1xuICAgICAgICB0aGlzLnZhbHVlQmxvY2sudmFsdWVIZXhWaWV3ID0gcHZ0c3V0aWxzLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkoaW5wdXRCdWZmZXIpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZUJsb2NrLnZhbHVlID0gcHZ0c3V0aWxzLkNvbnZlcnQuVG9VdGY4U3RyaW5nKGlucHV0QnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIHRoaXMud2FybmluZ3MucHVzaChgRXJyb3IgZHVyaW5nIFwiZGVjb2RlVVJJQ29tcG9uZW50XCI6ICR7ZXh9LCB1c2luZyByYXcgc3RyaW5nYCk7XG4gICAgICAgICAgICB0aGlzLnZhbHVlQmxvY2sudmFsdWUgPSBwdnRzdXRpbHMuQ29udmVydC5Ub0JpbmFyeShpbnB1dEJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnJvbVN0cmluZyhpbnB1dFN0cmluZykge1xuICAgICAgICB0aGlzLnZhbHVlQmxvY2sudmFsdWVIZXhWaWV3ID0gbmV3IFVpbnQ4QXJyYXkocHZ0c3V0aWxzLkNvbnZlcnQuRnJvbVV0ZjhTdHJpbmcoaW5wdXRTdHJpbmcpKTtcbiAgICAgICAgdGhpcy52YWx1ZUJsb2NrLnZhbHVlID0gaW5wdXRTdHJpbmc7XG4gICAgfVxufVxuTG9jYWxVdGY4U3RyaW5nVmFsdWVCbG9jay5OQU1FID0gXCJVdGY4U3RyaW5nVmFsdWVCbG9ja1wiO1xuXG52YXIgX2EkaTtcbmNsYXNzIFV0ZjhTdHJpbmcgZXh0ZW5kcyBMb2NhbFV0ZjhTdHJpbmdWYWx1ZUJsb2NrIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAxMjtcbiAgICB9XG59XG5fYSRpID0gVXRmOFN0cmluZztcbigoKSA9PiB7XG4gICAgdHlwZVN0b3JlLlV0ZjhTdHJpbmcgPSBfYSRpO1xufSkoKTtcblV0ZjhTdHJpbmcuTkFNRSA9IFwiVVRGOFN0cmluZ1wiO1xuXG5jbGFzcyBMb2NhbEJtcFN0cmluZ1ZhbHVlQmxvY2sgZXh0ZW5kcyBMb2NhbFNpbXBsZVN0cmluZ0Jsb2NrIHtcbiAgICBmcm9tQnVmZmVyKGlucHV0QnVmZmVyKSB7XG4gICAgICAgIHRoaXMudmFsdWVCbG9jay52YWx1ZSA9IHB2dHN1dGlscy5Db252ZXJ0LlRvVXRmMTZTdHJpbmcoaW5wdXRCdWZmZXIpO1xuICAgICAgICB0aGlzLnZhbHVlQmxvY2sudmFsdWVIZXhWaWV3ID0gcHZ0c3V0aWxzLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkoaW5wdXRCdWZmZXIpO1xuICAgIH1cbiAgICBmcm9tU3RyaW5nKGlucHV0U3RyaW5nKSB7XG4gICAgICAgIHRoaXMudmFsdWVCbG9jay52YWx1ZSA9IGlucHV0U3RyaW5nO1xuICAgICAgICB0aGlzLnZhbHVlQmxvY2sudmFsdWVIZXhWaWV3ID0gbmV3IFVpbnQ4QXJyYXkocHZ0c3V0aWxzLkNvbnZlcnQuRnJvbVV0ZjE2U3RyaW5nKGlucHV0U3RyaW5nKSk7XG4gICAgfVxufVxuTG9jYWxCbXBTdHJpbmdWYWx1ZUJsb2NrLk5BTUUgPSBcIkJtcFN0cmluZ1ZhbHVlQmxvY2tcIjtcblxudmFyIF9hJGg7XG5jbGFzcyBCbXBTdHJpbmcgZXh0ZW5kcyBMb2NhbEJtcFN0cmluZ1ZhbHVlQmxvY2sge1xuICAgIGNvbnN0cnVjdG9yKHsgLi4ucGFyYW1ldGVycyB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAzMDtcbiAgICB9XG59XG5fYSRoID0gQm1wU3RyaW5nO1xuKCgpID0+IHtcbiAgICB0eXBlU3RvcmUuQm1wU3RyaW5nID0gX2EkaDtcbn0pKCk7XG5CbXBTdHJpbmcuTkFNRSA9IFwiQk1QU3RyaW5nXCI7XG5cbmNsYXNzIExvY2FsVW5pdmVyc2FsU3RyaW5nVmFsdWVCbG9jayBleHRlbmRzIExvY2FsU2ltcGxlU3RyaW5nQmxvY2sge1xuICAgIGZyb21CdWZmZXIoaW5wdXRCdWZmZXIpIHtcbiAgICAgICAgY29uc3QgY29weUJ1ZmZlciA9IEFycmF5QnVmZmVyLmlzVmlldyhpbnB1dEJ1ZmZlcikgPyBpbnB1dEJ1ZmZlci5zbGljZSgpLmJ1ZmZlciA6IGlucHV0QnVmZmVyLnNsaWNlKDApO1xuICAgICAgICBjb25zdCB2YWx1ZVZpZXcgPSBuZXcgVWludDhBcnJheShjb3B5QnVmZmVyKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZVZpZXcubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgICAgICAgIHZhbHVlVmlld1tpXSA9IHZhbHVlVmlld1tpICsgM107XG4gICAgICAgICAgICB2YWx1ZVZpZXdbaSArIDFdID0gdmFsdWVWaWV3W2kgKyAyXTtcbiAgICAgICAgICAgIHZhbHVlVmlld1tpICsgMl0gPSAweDAwO1xuICAgICAgICAgICAgdmFsdWVWaWV3W2kgKyAzXSA9IDB4MDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YWx1ZUJsb2NrLnZhbHVlID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDMyQXJyYXkoY29weUJ1ZmZlcikpO1xuICAgIH1cbiAgICBmcm9tU3RyaW5nKGlucHV0U3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHN0ckxlbmd0aCA9IGlucHV0U3RyaW5nLmxlbmd0aDtcbiAgICAgICAgY29uc3QgdmFsdWVIZXhWaWV3ID0gdGhpcy52YWx1ZUJsb2NrLnZhbHVlSGV4VmlldyA9IG5ldyBVaW50OEFycmF5KHN0ckxlbmd0aCAqIDQpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ckxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjb2RlQnVmID0gcHZ1dGlscy51dGlsVG9CYXNlKGlucHV0U3RyaW5nLmNoYXJDb2RlQXQoaSksIDgpO1xuICAgICAgICAgICAgY29uc3QgY29kZVZpZXcgPSBuZXcgVWludDhBcnJheShjb2RlQnVmKTtcbiAgICAgICAgICAgIGlmIChjb2RlVmlldy5sZW5ndGggPiA0KVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY29uc3QgZGlmID0gNCAtIGNvZGVWaWV3Lmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAoY29kZVZpZXcubGVuZ3RoIC0gMSk7IGogPj0gMDsgai0tKVxuICAgICAgICAgICAgICAgIHZhbHVlSGV4Vmlld1tpICogNCArIGogKyBkaWZdID0gY29kZVZpZXdbal07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YWx1ZUJsb2NrLnZhbHVlID0gaW5wdXRTdHJpbmc7XG4gICAgfVxufVxuTG9jYWxVbml2ZXJzYWxTdHJpbmdWYWx1ZUJsb2NrLk5BTUUgPSBcIlVuaXZlcnNhbFN0cmluZ1ZhbHVlQmxvY2tcIjtcblxudmFyIF9hJGc7XG5jbGFzcyBVbml2ZXJzYWxTdHJpbmcgZXh0ZW5kcyBMb2NhbFVuaXZlcnNhbFN0cmluZ1ZhbHVlQmxvY2sge1xuICAgIGNvbnN0cnVjdG9yKHsgLi4ucGFyYW1ldGVycyB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAyODtcbiAgICB9XG59XG5fYSRnID0gVW5pdmVyc2FsU3RyaW5nO1xuKCgpID0+IHtcbiAgICB0eXBlU3RvcmUuVW5pdmVyc2FsU3RyaW5nID0gX2EkZztcbn0pKCk7XG5Vbml2ZXJzYWxTdHJpbmcuTkFNRSA9IFwiVW5pdmVyc2FsU3RyaW5nXCI7XG5cbnZhciBfYSRmO1xuY2xhc3MgTnVtZXJpY1N0cmluZyBleHRlbmRzIExvY2FsU2ltcGxlU3RyaW5nQmxvY2sge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ0NsYXNzID0gMTtcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDE4O1xuICAgIH1cbn1cbl9hJGYgPSBOdW1lcmljU3RyaW5nO1xuKCgpID0+IHtcbiAgICB0eXBlU3RvcmUuTnVtZXJpY1N0cmluZyA9IF9hJGY7XG59KSgpO1xuTnVtZXJpY1N0cmluZy5OQU1FID0gXCJOdW1lcmljU3RyaW5nXCI7XG5cbnZhciBfYSRlO1xuY2xhc3MgUHJpbnRhYmxlU3RyaW5nIGV4dGVuZHMgTG9jYWxTaW1wbGVTdHJpbmdCbG9jayB7XG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xuICAgICAgICB0aGlzLmlkQmxvY2sudGFnTnVtYmVyID0gMTk7XG4gICAgfVxufVxuX2EkZSA9IFByaW50YWJsZVN0cmluZztcbigoKSA9PiB7XG4gICAgdHlwZVN0b3JlLlByaW50YWJsZVN0cmluZyA9IF9hJGU7XG59KSgpO1xuUHJpbnRhYmxlU3RyaW5nLk5BTUUgPSBcIlByaW50YWJsZVN0cmluZ1wiO1xuXG52YXIgX2EkZDtcbmNsYXNzIFRlbGV0ZXhTdHJpbmcgZXh0ZW5kcyBMb2NhbFNpbXBsZVN0cmluZ0Jsb2NrIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAyMDtcbiAgICB9XG59XG5fYSRkID0gVGVsZXRleFN0cmluZztcbigoKSA9PiB7XG4gICAgdHlwZVN0b3JlLlRlbGV0ZXhTdHJpbmcgPSBfYSRkO1xufSkoKTtcblRlbGV0ZXhTdHJpbmcuTkFNRSA9IFwiVGVsZXRleFN0cmluZ1wiO1xuXG52YXIgX2EkYztcbmNsYXNzIFZpZGVvdGV4U3RyaW5nIGV4dGVuZHMgTG9jYWxTaW1wbGVTdHJpbmdCbG9jayB7XG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xuICAgICAgICB0aGlzLmlkQmxvY2sudGFnTnVtYmVyID0gMjE7XG4gICAgfVxufVxuX2EkYyA9IFZpZGVvdGV4U3RyaW5nO1xuKCgpID0+IHtcbiAgICB0eXBlU3RvcmUuVmlkZW90ZXhTdHJpbmcgPSBfYSRjO1xufSkoKTtcblZpZGVvdGV4U3RyaW5nLk5BTUUgPSBcIlZpZGVvdGV4U3RyaW5nXCI7XG5cbnZhciBfYSRiO1xuY2xhc3MgSUE1U3RyaW5nIGV4dGVuZHMgTG9jYWxTaW1wbGVTdHJpbmdCbG9jayB7XG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xuICAgICAgICB0aGlzLmlkQmxvY2sudGFnTnVtYmVyID0gMjI7XG4gICAgfVxufVxuX2EkYiA9IElBNVN0cmluZztcbigoKSA9PiB7XG4gICAgdHlwZVN0b3JlLklBNVN0cmluZyA9IF9hJGI7XG59KSgpO1xuSUE1U3RyaW5nLk5BTUUgPSBcIklBNVN0cmluZ1wiO1xuXG52YXIgX2EkYTtcbmNsYXNzIEdyYXBoaWNTdHJpbmcgZXh0ZW5kcyBMb2NhbFNpbXBsZVN0cmluZ0Jsb2NrIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAyNTtcbiAgICB9XG59XG5fYSRhID0gR3JhcGhpY1N0cmluZztcbigoKSA9PiB7XG4gICAgdHlwZVN0b3JlLkdyYXBoaWNTdHJpbmcgPSBfYSRhO1xufSkoKTtcbkdyYXBoaWNTdHJpbmcuTkFNRSA9IFwiR3JhcGhpY1N0cmluZ1wiO1xuXG52YXIgX2EkOTtcbmNsYXNzIFZpc2libGVTdHJpbmcgZXh0ZW5kcyBMb2NhbFNpbXBsZVN0cmluZ0Jsb2NrIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAyNjtcbiAgICB9XG59XG5fYSQ5ID0gVmlzaWJsZVN0cmluZztcbigoKSA9PiB7XG4gICAgdHlwZVN0b3JlLlZpc2libGVTdHJpbmcgPSBfYSQ5O1xufSkoKTtcblZpc2libGVTdHJpbmcuTkFNRSA9IFwiVmlzaWJsZVN0cmluZ1wiO1xuXG52YXIgX2EkODtcbmNsYXNzIEdlbmVyYWxTdHJpbmcgZXh0ZW5kcyBMb2NhbFNpbXBsZVN0cmluZ0Jsb2NrIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAyNztcbiAgICB9XG59XG5fYSQ4ID0gR2VuZXJhbFN0cmluZztcbigoKSA9PiB7XG4gICAgdHlwZVN0b3JlLkdlbmVyYWxTdHJpbmcgPSBfYSQ4O1xufSkoKTtcbkdlbmVyYWxTdHJpbmcuTkFNRSA9IFwiR2VuZXJhbFN0cmluZ1wiO1xuXG52YXIgX2EkNztcbmNsYXNzIENoYXJhY3RlclN0cmluZyBleHRlbmRzIExvY2FsU2ltcGxlU3RyaW5nQmxvY2sge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ0NsYXNzID0gMTtcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDI5O1xuICAgIH1cbn1cbl9hJDcgPSBDaGFyYWN0ZXJTdHJpbmc7XG4oKCkgPT4ge1xuICAgIHR5cGVTdG9yZS5DaGFyYWN0ZXJTdHJpbmcgPSBfYSQ3O1xufSkoKTtcbkNoYXJhY3RlclN0cmluZy5OQU1FID0gXCJDaGFyYWN0ZXJTdHJpbmdcIjtcblxudmFyIF9hJDY7XG5jbGFzcyBVVENUaW1lIGV4dGVuZHMgVmlzaWJsZVN0cmluZyB7XG4gICAgY29uc3RydWN0b3IoeyB2YWx1ZSwgdmFsdWVEYXRlLCAuLi5wYXJhbWV0ZXJzIH0gPSB7fSkge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy55ZWFyID0gMDtcbiAgICAgICAgdGhpcy5tb250aCA9IDA7XG4gICAgICAgIHRoaXMuZGF5ID0gMDtcbiAgICAgICAgdGhpcy5ob3VyID0gMDtcbiAgICAgICAgdGhpcy5taW51dGUgPSAwO1xuICAgICAgICB0aGlzLnNlY29uZCA9IDA7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMudmFsdWVCbG9jay52YWx1ZUhleFZpZXcgPSBuZXcgVWludDhBcnJheSh2YWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlQmxvY2sudmFsdWVIZXhWaWV3W2ldID0gdmFsdWUuY2hhckNvZGVBdChpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWVEYXRlKSB7XG4gICAgICAgICAgICB0aGlzLmZyb21EYXRlKHZhbHVlRGF0ZSk7XG4gICAgICAgICAgICB0aGlzLnZhbHVlQmxvY2sudmFsdWVIZXhWaWV3ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy50b0J1ZmZlcigpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xuICAgICAgICB0aGlzLmlkQmxvY2sudGFnTnVtYmVyID0gMjM7XG4gICAgfVxuICAgIGZyb21CdWZmZXIoaW5wdXRCdWZmZXIpIHtcbiAgICAgICAgdGhpcy5mcm9tU3RyaW5nKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgcHZ0c3V0aWxzLkJ1ZmZlclNvdXJjZUNvbnZlcnRlci50b1VpbnQ4QXJyYXkoaW5wdXRCdWZmZXIpKSk7XG4gICAgfVxuICAgIHRvQnVmZmVyKCkge1xuICAgICAgICBjb25zdCBzdHIgPSB0aGlzLnRvU3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihzdHIubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgdmlld1tpXSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH1cbiAgICBmcm9tRGF0ZShpbnB1dERhdGUpIHtcbiAgICAgICAgdGhpcy55ZWFyID0gaW5wdXREYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICAgIHRoaXMubW9udGggPSBpbnB1dERhdGUuZ2V0VVRDTW9udGgoKSArIDE7XG4gICAgICAgIHRoaXMuZGF5ID0gaW5wdXREYXRlLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgdGhpcy5ob3VyID0gaW5wdXREYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgICAgIHRoaXMubWludXRlID0gaW5wdXREYXRlLmdldFVUQ01pbnV0ZXMoKTtcbiAgICAgICAgdGhpcy5zZWNvbmQgPSBpbnB1dERhdGUuZ2V0VVRDU2Vjb25kcygpO1xuICAgIH1cbiAgICB0b0RhdGUoKSB7XG4gICAgICAgIHJldHVybiAobmV3IERhdGUoRGF0ZS5VVEModGhpcy55ZWFyLCB0aGlzLm1vbnRoIC0gMSwgdGhpcy5kYXksIHRoaXMuaG91ciwgdGhpcy5taW51dGUsIHRoaXMuc2Vjb25kKSkpO1xuICAgIH1cbiAgICBmcm9tU3RyaW5nKGlucHV0U3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IC8oXFxkezJ9KShcXGR7Mn0pKFxcZHsyfSkoXFxkezJ9KShcXGR7Mn0pKFxcZHsyfSlaL2lnO1xuICAgICAgICBjb25zdCBwYXJzZXJBcnJheSA9IHBhcnNlci5leGVjKGlucHV0U3RyaW5nKTtcbiAgICAgICAgaWYgKHBhcnNlckFycmF5ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yID0gXCJXcm9uZyBpbnB1dCBzdHJpbmcgZm9yIGNvbnZlcnNpb25cIjtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB5ZWFyID0gcGFyc2VJbnQocGFyc2VyQXJyYXlbMV0sIDEwKTtcbiAgICAgICAgaWYgKHllYXIgPj0gNTApXG4gICAgICAgICAgICB0aGlzLnllYXIgPSAxOTAwICsgeWVhcjtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy55ZWFyID0gMjAwMCArIHllYXI7XG4gICAgICAgIHRoaXMubW9udGggPSBwYXJzZUludChwYXJzZXJBcnJheVsyXSwgMTApO1xuICAgICAgICB0aGlzLmRheSA9IHBhcnNlSW50KHBhcnNlckFycmF5WzNdLCAxMCk7XG4gICAgICAgIHRoaXMuaG91ciA9IHBhcnNlSW50KHBhcnNlckFycmF5WzRdLCAxMCk7XG4gICAgICAgIHRoaXMubWludXRlID0gcGFyc2VJbnQocGFyc2VyQXJyYXlbNV0sIDEwKTtcbiAgICAgICAgdGhpcy5zZWNvbmQgPSBwYXJzZUludChwYXJzZXJBcnJheVs2XSwgMTApO1xuICAgIH1cbiAgICB0b1N0cmluZyhlbmNvZGluZyA9IFwiaXNvXCIpIHtcbiAgICAgICAgaWYgKGVuY29kaW5nID09PSBcImlzb1wiKSB7XG4gICAgICAgICAgICBjb25zdCBvdXRwdXRBcnJheSA9IG5ldyBBcnJheSg3KTtcbiAgICAgICAgICAgIG91dHB1dEFycmF5WzBdID0gcHZ1dGlscy5wYWROdW1iZXIoKCh0aGlzLnllYXIgPCAyMDAwKSA/ICh0aGlzLnllYXIgLSAxOTAwKSA6ICh0aGlzLnllYXIgLSAyMDAwKSksIDIpO1xuICAgICAgICAgICAgb3V0cHV0QXJyYXlbMV0gPSBwdnV0aWxzLnBhZE51bWJlcih0aGlzLm1vbnRoLCAyKTtcbiAgICAgICAgICAgIG91dHB1dEFycmF5WzJdID0gcHZ1dGlscy5wYWROdW1iZXIodGhpcy5kYXksIDIpO1xuICAgICAgICAgICAgb3V0cHV0QXJyYXlbM10gPSBwdnV0aWxzLnBhZE51bWJlcih0aGlzLmhvdXIsIDIpO1xuICAgICAgICAgICAgb3V0cHV0QXJyYXlbNF0gPSBwdnV0aWxzLnBhZE51bWJlcih0aGlzLm1pbnV0ZSwgMik7XG4gICAgICAgICAgICBvdXRwdXRBcnJheVs1XSA9IHB2dXRpbHMucGFkTnVtYmVyKHRoaXMuc2Vjb25kLCAyKTtcbiAgICAgICAgICAgIG91dHB1dEFycmF5WzZdID0gXCJaXCI7XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0QXJyYXkuam9pbihcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIudG9TdHJpbmcoZW5jb2RpbmcpO1xuICAgIH1cbiAgICBvbkFzY2lpRW5jb2RpbmcoKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNvbnN0cnVjdG9yLk5BTUV9IDogJHt0aGlzLnRvRGF0ZSgpLnRvSVNPU3RyaW5nKCl9YDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXG4gICAgICAgICAgICB5ZWFyOiB0aGlzLnllYXIsXG4gICAgICAgICAgICBtb250aDogdGhpcy5tb250aCxcbiAgICAgICAgICAgIGRheTogdGhpcy5kYXksXG4gICAgICAgICAgICBob3VyOiB0aGlzLmhvdXIsXG4gICAgICAgICAgICBtaW51dGU6IHRoaXMubWludXRlLFxuICAgICAgICAgICAgc2Vjb25kOiB0aGlzLnNlY29uZCxcbiAgICAgICAgfTtcbiAgICB9XG59XG5fYSQ2ID0gVVRDVGltZTtcbigoKSA9PiB7XG4gICAgdHlwZVN0b3JlLlVUQ1RpbWUgPSBfYSQ2O1xufSkoKTtcblVUQ1RpbWUuTkFNRSA9IFwiVVRDVGltZVwiO1xuXG52YXIgX2EkNTtcbmNsYXNzIEdlbmVyYWxpemVkVGltZSBleHRlbmRzIFVUQ1RpbWUge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgICAgICB2YXIgX2I7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgICAgICAoX2IgPSB0aGlzLm1pbGxpc2Vjb25kKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAodGhpcy5taWxsaXNlY29uZCA9IDApO1xuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xuICAgICAgICB0aGlzLmlkQmxvY2sudGFnTnVtYmVyID0gMjQ7XG4gICAgfVxuICAgIGZyb21EYXRlKGlucHV0RGF0ZSkge1xuICAgICAgICBzdXBlci5mcm9tRGF0ZShpbnB1dERhdGUpO1xuICAgICAgICB0aGlzLm1pbGxpc2Vjb25kID0gaW5wdXREYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIH1cbiAgICB0b0RhdGUoKSB7XG4gICAgICAgIGNvbnN0IHV0Y0RhdGUgPSBEYXRlLlVUQyh0aGlzLnllYXIsIHRoaXMubW9udGggLSAxLCB0aGlzLmRheSwgdGhpcy5ob3VyLCB0aGlzLm1pbnV0ZSwgdGhpcy5zZWNvbmQsIHRoaXMubWlsbGlzZWNvbmQpO1xuICAgICAgICByZXR1cm4gKG5ldyBEYXRlKHV0Y0RhdGUpKTtcbiAgICB9XG4gICAgZnJvbVN0cmluZyhpbnB1dFN0cmluZykge1xuICAgICAgICBsZXQgaXNVVEMgPSBmYWxzZTtcbiAgICAgICAgbGV0IHRpbWVTdHJpbmcgPSBcIlwiO1xuICAgICAgICBsZXQgZGF0ZVRpbWVTdHJpbmcgPSBcIlwiO1xuICAgICAgICBsZXQgZnJhY3Rpb25QYXJ0ID0gMDtcbiAgICAgICAgbGV0IHBhcnNlcjtcbiAgICAgICAgbGV0IGhvdXJEaWZmZXJlbmNlID0gMDtcbiAgICAgICAgbGV0IG1pbnV0ZURpZmZlcmVuY2UgPSAwO1xuICAgICAgICBpZiAoaW5wdXRTdHJpbmdbaW5wdXRTdHJpbmcubGVuZ3RoIC0gMV0gPT09IFwiWlwiKSB7XG4gICAgICAgICAgICB0aW1lU3RyaW5nID0gaW5wdXRTdHJpbmcuc3Vic3RyaW5nKDAsIGlucHV0U3RyaW5nLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgaXNVVEMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbnVtYmVyID0gbmV3IE51bWJlcihpbnB1dFN0cmluZ1tpbnB1dFN0cmluZy5sZW5ndGggLSAxXSk7XG4gICAgICAgICAgICBpZiAoaXNOYU4obnVtYmVyLnZhbHVlT2YoKSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV3JvbmcgaW5wdXQgc3RyaW5nIGZvciBjb252ZXJzaW9uXCIpO1xuICAgICAgICAgICAgdGltZVN0cmluZyA9IGlucHV0U3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1VUQykge1xuICAgICAgICAgICAgaWYgKHRpbWVTdHJpbmcuaW5kZXhPZihcIitcIikgIT09IC0xKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldyb25nIGlucHV0IHN0cmluZyBmb3IgY29udmVyc2lvblwiKTtcbiAgICAgICAgICAgIGlmICh0aW1lU3RyaW5nLmluZGV4T2YoXCItXCIpICE9PSAtMSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXcm9uZyBpbnB1dCBzdHJpbmcgZm9yIGNvbnZlcnNpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgbXVsdGlwbGllciA9IDE7XG4gICAgICAgICAgICBsZXQgZGlmZmVyZW5jZVBvc2l0aW9uID0gdGltZVN0cmluZy5pbmRleE9mKFwiK1wiKTtcbiAgICAgICAgICAgIGxldCBkaWZmZXJlbmNlU3RyaW5nID0gXCJcIjtcbiAgICAgICAgICAgIGlmIChkaWZmZXJlbmNlUG9zaXRpb24gPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgZGlmZmVyZW5jZVBvc2l0aW9uID0gdGltZVN0cmluZy5pbmRleE9mKFwiLVwiKTtcbiAgICAgICAgICAgICAgICBtdWx0aXBsaWVyID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGlmZmVyZW5jZVBvc2l0aW9uICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGRpZmZlcmVuY2VTdHJpbmcgPSB0aW1lU3RyaW5nLnN1YnN0cmluZyhkaWZmZXJlbmNlUG9zaXRpb24gKyAxKTtcbiAgICAgICAgICAgICAgICB0aW1lU3RyaW5nID0gdGltZVN0cmluZy5zdWJzdHJpbmcoMCwgZGlmZmVyZW5jZVBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBpZiAoKGRpZmZlcmVuY2VTdHJpbmcubGVuZ3RoICE9PSAyKSAmJiAoZGlmZmVyZW5jZVN0cmluZy5sZW5ndGggIT09IDQpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXcm9uZyBpbnB1dCBzdHJpbmcgZm9yIGNvbnZlcnNpb25cIik7XG4gICAgICAgICAgICAgICAgbGV0IG51bWJlciA9IHBhcnNlSW50KGRpZmZlcmVuY2VTdHJpbmcuc3Vic3RyaW5nKDAsIDIpLCAxMCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKG51bWJlci52YWx1ZU9mKCkpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXcm9uZyBpbnB1dCBzdHJpbmcgZm9yIGNvbnZlcnNpb25cIik7XG4gICAgICAgICAgICAgICAgaG91ckRpZmZlcmVuY2UgPSBtdWx0aXBsaWVyICogbnVtYmVyO1xuICAgICAgICAgICAgICAgIGlmIChkaWZmZXJlbmNlU3RyaW5nLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICBudW1iZXIgPSBwYXJzZUludChkaWZmZXJlbmNlU3RyaW5nLnN1YnN0cmluZygyLCA0KSwgMTApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4obnVtYmVyLnZhbHVlT2YoKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXcm9uZyBpbnB1dCBzdHJpbmcgZm9yIGNvbnZlcnNpb25cIik7XG4gICAgICAgICAgICAgICAgICAgIG1pbnV0ZURpZmZlcmVuY2UgPSBtdWx0aXBsaWVyICogbnVtYmVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgZnJhY3Rpb25Qb2ludFBvc2l0aW9uID0gdGltZVN0cmluZy5pbmRleE9mKFwiLlwiKTtcbiAgICAgICAgaWYgKGZyYWN0aW9uUG9pbnRQb3NpdGlvbiA9PT0gLTEpXG4gICAgICAgICAgICBmcmFjdGlvblBvaW50UG9zaXRpb24gPSB0aW1lU3RyaW5nLmluZGV4T2YoXCIsXCIpO1xuICAgICAgICBpZiAoZnJhY3Rpb25Qb2ludFBvc2l0aW9uICE9PSAtMSkge1xuICAgICAgICAgICAgY29uc3QgZnJhY3Rpb25QYXJ0Q2hlY2sgPSBuZXcgTnVtYmVyKGAwJHt0aW1lU3RyaW5nLnN1YnN0cmluZyhmcmFjdGlvblBvaW50UG9zaXRpb24pfWApO1xuICAgICAgICAgICAgaWYgKGlzTmFOKGZyYWN0aW9uUGFydENoZWNrLnZhbHVlT2YoKSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV3JvbmcgaW5wdXQgc3RyaW5nIGZvciBjb252ZXJzaW9uXCIpO1xuICAgICAgICAgICAgZnJhY3Rpb25QYXJ0ID0gZnJhY3Rpb25QYXJ0Q2hlY2sudmFsdWVPZigpO1xuICAgICAgICAgICAgZGF0ZVRpbWVTdHJpbmcgPSB0aW1lU3RyaW5nLnN1YnN0cmluZygwLCBmcmFjdGlvblBvaW50UG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRhdGVUaW1lU3RyaW5nID0gdGltZVN0cmluZztcbiAgICAgICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgICAgICBjYXNlIChkYXRlVGltZVN0cmluZy5sZW5ndGggPT09IDgpOlxuICAgICAgICAgICAgICAgIHBhcnNlciA9IC8oXFxkezR9KShcXGR7Mn0pKFxcZHsyfSkvaWc7XG4gICAgICAgICAgICAgICAgaWYgKGZyYWN0aW9uUG9pbnRQb3NpdGlvbiAhPT0gLTEpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldyb25nIGlucHV0IHN0cmluZyBmb3IgY29udmVyc2lvblwiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgKGRhdGVUaW1lU3RyaW5nLmxlbmd0aCA9PT0gMTApOlxuICAgICAgICAgICAgICAgIHBhcnNlciA9IC8oXFxkezR9KShcXGR7Mn0pKFxcZHsyfSkoXFxkezJ9KS9pZztcbiAgICAgICAgICAgICAgICBpZiAoZnJhY3Rpb25Qb2ludFBvc2l0aW9uICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZnJhY3Rpb25SZXN1bHQgPSA2MCAqIGZyYWN0aW9uUGFydDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5taW51dGUgPSBNYXRoLmZsb29yKGZyYWN0aW9uUmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgZnJhY3Rpb25SZXN1bHQgPSA2MCAqIChmcmFjdGlvblJlc3VsdCAtIHRoaXMubWludXRlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWNvbmQgPSBNYXRoLmZsb29yKGZyYWN0aW9uUmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgZnJhY3Rpb25SZXN1bHQgPSAxMDAwICogKGZyYWN0aW9uUmVzdWx0IC0gdGhpcy5zZWNvbmQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1pbGxpc2Vjb25kID0gTWF0aC5mbG9vcihmcmFjdGlvblJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAoZGF0ZVRpbWVTdHJpbmcubGVuZ3RoID09PSAxMik6XG4gICAgICAgICAgICAgICAgcGFyc2VyID0gLyhcXGR7NH0pKFxcZHsyfSkoXFxkezJ9KShcXGR7Mn0pKFxcZHsyfSkvaWc7XG4gICAgICAgICAgICAgICAgaWYgKGZyYWN0aW9uUG9pbnRQb3NpdGlvbiAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZyYWN0aW9uUmVzdWx0ID0gNjAgKiBmcmFjdGlvblBhcnQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2Vjb25kID0gTWF0aC5mbG9vcihmcmFjdGlvblJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYWN0aW9uUmVzdWx0ID0gMTAwMCAqIChmcmFjdGlvblJlc3VsdCAtIHRoaXMuc2Vjb25kKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5taWxsaXNlY29uZCA9IE1hdGguZmxvb3IoZnJhY3Rpb25SZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgKGRhdGVUaW1lU3RyaW5nLmxlbmd0aCA9PT0gMTQpOlxuICAgICAgICAgICAgICAgIHBhcnNlciA9IC8oXFxkezR9KShcXGR7Mn0pKFxcZHsyfSkoXFxkezJ9KShcXGR7Mn0pKFxcZHsyfSkvaWc7XG4gICAgICAgICAgICAgICAgaWYgKGZyYWN0aW9uUG9pbnRQb3NpdGlvbiAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJhY3Rpb25SZXN1bHQgPSAxMDAwICogZnJhY3Rpb25QYXJ0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1pbGxpc2Vjb25kID0gTWF0aC5mbG9vcihmcmFjdGlvblJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXcm9uZyBpbnB1dCBzdHJpbmcgZm9yIGNvbnZlcnNpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyc2VyQXJyYXkgPSBwYXJzZXIuZXhlYyhkYXRlVGltZVN0cmluZyk7XG4gICAgICAgIGlmIChwYXJzZXJBcnJheSA9PT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldyb25nIGlucHV0IHN0cmluZyBmb3IgY29udmVyc2lvblwiKTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDE7IGogPCBwYXJzZXJBcnJheS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgc3dpdGNoIChqKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnllYXIgPSBwYXJzZUludChwYXJzZXJBcnJheVtqXSwgMTApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9udGggPSBwYXJzZUludChwYXJzZXJBcnJheVtqXSwgMTApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF5ID0gcGFyc2VJbnQocGFyc2VyQXJyYXlbal0sIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhvdXIgPSBwYXJzZUludChwYXJzZXJBcnJheVtqXSwgMTApICsgaG91ckRpZmZlcmVuY2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5taW51dGUgPSBwYXJzZUludChwYXJzZXJBcnJheVtqXSwgMTApICsgbWludXRlRGlmZmVyZW5jZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlY29uZCA9IHBhcnNlSW50KHBhcnNlckFycmF5W2pdLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldyb25nIGlucHV0IHN0cmluZyBmb3IgY29udmVyc2lvblwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVVEMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBjb25zdCB0ZW1wRGF0ZSA9IG5ldyBEYXRlKHRoaXMueWVhciwgdGhpcy5tb250aCwgdGhpcy5kYXksIHRoaXMuaG91ciwgdGhpcy5taW51dGUsIHRoaXMuc2Vjb25kLCB0aGlzLm1pbGxpc2Vjb25kKTtcbiAgICAgICAgICAgIHRoaXMueWVhciA9IHRlbXBEYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICAgICAgICB0aGlzLm1vbnRoID0gdGVtcERhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICAgIHRoaXMuZGF5ID0gdGVtcERhdGUuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgICB0aGlzLmhvdXIgPSB0ZW1wRGF0ZS5nZXRVVENIb3VycygpO1xuICAgICAgICAgICAgdGhpcy5taW51dGUgPSB0ZW1wRGF0ZS5nZXRVVENNaW51dGVzKCk7XG4gICAgICAgICAgICB0aGlzLnNlY29uZCA9IHRlbXBEYXRlLmdldFVUQ1NlY29uZHMoKTtcbiAgICAgICAgICAgIHRoaXMubWlsbGlzZWNvbmQgPSB0ZW1wRGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b1N0cmluZyhlbmNvZGluZyA9IFwiaXNvXCIpIHtcbiAgICAgICAgaWYgKGVuY29kaW5nID09PSBcImlzb1wiKSB7XG4gICAgICAgICAgICBjb25zdCBvdXRwdXRBcnJheSA9IFtdO1xuICAgICAgICAgICAgb3V0cHV0QXJyYXkucHVzaChwdnV0aWxzLnBhZE51bWJlcih0aGlzLnllYXIsIDQpKTtcbiAgICAgICAgICAgIG91dHB1dEFycmF5LnB1c2gocHZ1dGlscy5wYWROdW1iZXIodGhpcy5tb250aCwgMikpO1xuICAgICAgICAgICAgb3V0cHV0QXJyYXkucHVzaChwdnV0aWxzLnBhZE51bWJlcih0aGlzLmRheSwgMikpO1xuICAgICAgICAgICAgb3V0cHV0QXJyYXkucHVzaChwdnV0aWxzLnBhZE51bWJlcih0aGlzLmhvdXIsIDIpKTtcbiAgICAgICAgICAgIG91dHB1dEFycmF5LnB1c2gocHZ1dGlscy5wYWROdW1iZXIodGhpcy5taW51dGUsIDIpKTtcbiAgICAgICAgICAgIG91dHB1dEFycmF5LnB1c2gocHZ1dGlscy5wYWROdW1iZXIodGhpcy5zZWNvbmQsIDIpKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1pbGxpc2Vjb25kICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0QXJyYXkucHVzaChcIi5cIik7XG4gICAgICAgICAgICAgICAgb3V0cHV0QXJyYXkucHVzaChwdnV0aWxzLnBhZE51bWJlcih0aGlzLm1pbGxpc2Vjb25kLCAzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXRwdXRBcnJheS5wdXNoKFwiWlwiKTtcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXRBcnJheS5qb2luKFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci50b1N0cmluZyhlbmNvZGluZyk7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmQ6IHRoaXMubWlsbGlzZWNvbmQsXG4gICAgICAgIH07XG4gICAgfVxufVxuX2EkNSA9IEdlbmVyYWxpemVkVGltZTtcbigoKSA9PiB7XG4gICAgdHlwZVN0b3JlLkdlbmVyYWxpemVkVGltZSA9IF9hJDU7XG59KSgpO1xuR2VuZXJhbGl6ZWRUaW1lLk5BTUUgPSBcIkdlbmVyYWxpemVkVGltZVwiO1xuXG52YXIgX2EkNDtcbmNsYXNzIERBVEUgZXh0ZW5kcyBVdGY4U3RyaW5nIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAzMTtcbiAgICB9XG59XG5fYSQ0ID0gREFURTtcbigoKSA9PiB7XG4gICAgdHlwZVN0b3JlLkRBVEUgPSBfYSQ0O1xufSkoKTtcbkRBVEUuTkFNRSA9IFwiREFURVwiO1xuXG52YXIgX2EkMztcbmNsYXNzIFRpbWVPZkRheSBleHRlbmRzIFV0ZjhTdHJpbmcge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ0NsYXNzID0gMTtcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDMyO1xuICAgIH1cbn1cbl9hJDMgPSBUaW1lT2ZEYXk7XG4oKCkgPT4ge1xuICAgIHR5cGVTdG9yZS5UaW1lT2ZEYXkgPSBfYSQzO1xufSkoKTtcblRpbWVPZkRheS5OQU1FID0gXCJUaW1lT2ZEYXlcIjtcblxudmFyIF9hJDI7XG5jbGFzcyBEYXRlVGltZSBleHRlbmRzIFV0ZjhTdHJpbmcge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ0NsYXNzID0gMTtcbiAgICAgICAgdGhpcy5pZEJsb2NrLnRhZ051bWJlciA9IDMzO1xuICAgIH1cbn1cbl9hJDIgPSBEYXRlVGltZTtcbigoKSA9PiB7XG4gICAgdHlwZVN0b3JlLkRhdGVUaW1lID0gX2EkMjtcbn0pKCk7XG5EYXRlVGltZS5OQU1FID0gXCJEYXRlVGltZVwiO1xuXG52YXIgX2EkMTtcbmNsYXNzIER1cmF0aW9uIGV4dGVuZHMgVXRmOFN0cmluZyB7XG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgICAgICB0aGlzLmlkQmxvY2sudGFnQ2xhc3MgPSAxO1xuICAgICAgICB0aGlzLmlkQmxvY2sudGFnTnVtYmVyID0gMzQ7XG4gICAgfVxufVxuX2EkMSA9IER1cmF0aW9uO1xuKCgpID0+IHtcbiAgICB0eXBlU3RvcmUuRHVyYXRpb24gPSBfYSQxO1xufSkoKTtcbkR1cmF0aW9uLk5BTUUgPSBcIkR1cmF0aW9uXCI7XG5cbnZhciBfYTtcbmNsYXNzIFRJTUUgZXh0ZW5kcyBVdGY4U3RyaW5nIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzID0ge30pIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdDbGFzcyA9IDE7XG4gICAgICAgIHRoaXMuaWRCbG9jay50YWdOdW1iZXIgPSAxNDtcbiAgICB9XG59XG5fYSA9IFRJTUU7XG4oKCkgPT4ge1xuICAgIHR5cGVTdG9yZS5USU1FID0gX2E7XG59KSgpO1xuVElNRS5OQU1FID0gXCJUSU1FXCI7XG5cbmNsYXNzIEFueSB7XG4gICAgY29uc3RydWN0b3IoeyBuYW1lID0gRU1QVFlfU1RSSU5HLCBvcHRpb25hbCA9IGZhbHNlIH0gPSB7fSkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLm9wdGlvbmFsID0gb3B0aW9uYWw7XG4gICAgfVxufVxuXG5jbGFzcyBDaG9pY2UgZXh0ZW5kcyBBbnkge1xuICAgIGNvbnN0cnVjdG9yKHsgdmFsdWUgPSBbXSwgLi4ucGFyYW1ldGVycyB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG59XG5cbmNsYXNzIFJlcGVhdGVkIGV4dGVuZHMgQW55IHtcbiAgICBjb25zdHJ1Y3Rvcih7IHZhbHVlID0gbmV3IEFueSgpLCBsb2NhbCA9IGZhbHNlLCAuLi5wYXJhbWV0ZXJzIH0gPSB7fSkge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmxvY2FsID0gbG9jYWw7XG4gICAgfVxufVxuXG5jbGFzcyBSYXdEYXRhIHtcbiAgICBnZXQgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVZpZXcuc2xpY2UoKS5idWZmZXI7XG4gICAgfVxuICAgIHNldCBkYXRhKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGF0YVZpZXcgPSBwdnRzdXRpbHMuQnVmZmVyU291cmNlQ29udmVydGVyLnRvVWludDhBcnJheSh2YWx1ZSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHsgZGF0YSA9IEVNUFRZX1ZJRVcgfSA9IHt9KSB7XG4gICAgICAgIHRoaXMuZGF0YVZpZXcgPSBwdnRzdXRpbHMuQnVmZmVyU291cmNlQ29udmVydGVyLnRvVWludDhBcnJheShkYXRhKTtcbiAgICB9XG4gICAgZnJvbUJFUihpbnB1dEJ1ZmZlciwgaW5wdXRPZmZzZXQsIGlucHV0TGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGVuZExlbmd0aCA9IGlucHV0T2Zmc2V0ICsgaW5wdXRMZW5ndGg7XG4gICAgICAgIHRoaXMuZGF0YVZpZXcgPSBwdnRzdXRpbHMuQnVmZmVyU291cmNlQ29udmVydGVyLnRvVWludDhBcnJheShpbnB1dEJ1ZmZlcikuc3ViYXJyYXkoaW5wdXRPZmZzZXQsIGVuZExlbmd0aCk7XG4gICAgICAgIHJldHVybiBlbmRMZW5ndGg7XG4gICAgfVxuICAgIHRvQkVSKF9zaXplT25seSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhVmlldy5zbGljZSgpLmJ1ZmZlcjtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVTY2hlbWEocm9vdCwgaW5wdXREYXRhLCBpbnB1dFNjaGVtYSkge1xuICAgIGlmIChpbnB1dFNjaGVtYSBpbnN0YW5jZW9mIENob2ljZSkge1xuICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgaW5wdXRTY2hlbWEudmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbXBhcmVTY2hlbWEocm9vdCwgaW5wdXREYXRhLCBlbGVtZW50KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQudmVyaWZpZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB2ZXJpZmllZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiByb290LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgX3Jlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVzdWx0OiB7IGVycm9yOiBcIldyb25nIHZhbHVlcyBmb3IgQ2hvaWNlIHR5cGVcIiB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpbnB1dFNjaGVtYS5oYXNPd25Qcm9wZXJ0eShOQU1FKSlcbiAgICAgICAgICAgICAgICBfcmVzdWx0Lm5hbWUgPSBpbnB1dFNjaGVtYS5uYW1lO1xuICAgICAgICAgICAgcmV0dXJuIF9yZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlucHV0U2NoZW1hIGluc3RhbmNlb2YgQW55KSB7XG4gICAgICAgIGlmIChpbnB1dFNjaGVtYS5oYXNPd25Qcm9wZXJ0eShOQU1FKSlcbiAgICAgICAgICAgIHJvb3RbaW5wdXRTY2hlbWEubmFtZV0gPSBpbnB1dERhdGE7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2ZXJpZmllZDogdHJ1ZSxcbiAgICAgICAgICAgIHJlc3VsdDogcm9vdCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKChyb290IGluc3RhbmNlb2YgT2JqZWN0KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcbiAgICAgICAgICAgIHJlc3VsdDogeyBlcnJvcjogXCJXcm9uZyByb290IG9iamVjdFwiIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICgoaW5wdXREYXRhIGluc3RhbmNlb2YgT2JqZWN0KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcbiAgICAgICAgICAgIHJlc3VsdDogeyBlcnJvcjogXCJXcm9uZyBBU04uMSBkYXRhXCIgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKChpbnB1dFNjaGVtYSBpbnN0YW5jZW9mIE9iamVjdCkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgICAgICByZXN1bHQ6IHsgZXJyb3I6IFwiV3JvbmcgQVNOLjEgc2NoZW1hXCIgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKChJRF9CTE9DSyBpbiBpbnB1dFNjaGVtYSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgICAgICByZXN1bHQ6IHsgZXJyb3I6IFwiV3JvbmcgQVNOLjEgc2NoZW1hXCIgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKChGUk9NX0JFUiBpbiBpbnB1dFNjaGVtYS5pZEJsb2NrKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcbiAgICAgICAgICAgIHJlc3VsdDogeyBlcnJvcjogXCJXcm9uZyBBU04uMSBzY2hlbWFcIiB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoKFRPX0JFUiBpbiBpbnB1dFNjaGVtYS5pZEJsb2NrKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcbiAgICAgICAgICAgIHJlc3VsdDogeyBlcnJvcjogXCJXcm9uZyBBU04uMSBzY2hlbWFcIiB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBlbmNvZGVkSWQgPSBpbnB1dFNjaGVtYS5pZEJsb2NrLnRvQkVSKGZhbHNlKTtcbiAgICBpZiAoZW5jb2RlZElkLmJ5dGVMZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcbiAgICAgICAgICAgIHJlc3VsdDogeyBlcnJvcjogXCJFcnJvciBlbmNvZGluZyBpZEJsb2NrIGZvciBBU04uMSBzY2hlbWFcIiB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBkZWNvZGVkT2Zmc2V0ID0gaW5wdXRTY2hlbWEuaWRCbG9jay5mcm9tQkVSKGVuY29kZWRJZCwgMCwgZW5jb2RlZElkLmJ5dGVMZW5ndGgpO1xuICAgIGlmIChkZWNvZGVkT2Zmc2V0ID09PSAtMSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxuICAgICAgICAgICAgcmVzdWx0OiB7IGVycm9yOiBcIkVycm9yIGRlY29kaW5nIGlkQmxvY2sgZm9yIEFTTi4xIHNjaGVtYVwiIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChpbnB1dFNjaGVtYS5pZEJsb2NrLmhhc093blByb3BlcnR5KFRBR19DTEFTUykgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgICAgICByZXN1bHQ6IHsgZXJyb3I6IFwiV3JvbmcgQVNOLjEgc2NoZW1hXCIgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlucHV0U2NoZW1hLmlkQmxvY2sudGFnQ2xhc3MgIT09IGlucHV0RGF0YS5pZEJsb2NrLnRhZ0NsYXNzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgICAgICByZXN1bHQ6IHJvb3QsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChpbnB1dFNjaGVtYS5pZEJsb2NrLmhhc093blByb3BlcnR5KFRBR19OVU1CRVIpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxuICAgICAgICAgICAgcmVzdWx0OiB7IGVycm9yOiBcIldyb25nIEFTTi4xIHNjaGVtYVwiIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChpbnB1dFNjaGVtYS5pZEJsb2NrLnRhZ051bWJlciAhPT0gaW5wdXREYXRhLmlkQmxvY2sudGFnTnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgICAgICByZXN1bHQ6IHJvb3QsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChpbnB1dFNjaGVtYS5pZEJsb2NrLmhhc093blByb3BlcnR5KElTX0NPTlNUUlVDVEVEKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcbiAgICAgICAgICAgIHJlc3VsdDogeyBlcnJvcjogXCJXcm9uZyBBU04uMSBzY2hlbWFcIiB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoaW5wdXRTY2hlbWEuaWRCbG9jay5pc0NvbnN0cnVjdGVkICE9PSBpbnB1dERhdGEuaWRCbG9jay5pc0NvbnN0cnVjdGVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgICAgICByZXN1bHQ6IHJvb3QsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICghKElTX0hFWF9PTkxZIGluIGlucHV0U2NoZW1hLmlkQmxvY2spKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgICAgICByZXN1bHQ6IHsgZXJyb3I6IFwiV3JvbmcgQVNOLjEgc2NoZW1hXCIgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlucHV0U2NoZW1hLmlkQmxvY2suaXNIZXhPbmx5ICE9PSBpbnB1dERhdGEuaWRCbG9jay5pc0hleE9ubHkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcbiAgICAgICAgICAgIHJlc3VsdDogcm9vdCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlucHV0U2NoZW1hLmlkQmxvY2suaXNIZXhPbmx5KSB7XG4gICAgICAgIGlmICgoVkFMVUVfSEVYX1ZJRVcgaW4gaW5wdXRTY2hlbWEuaWRCbG9jaykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXN1bHQ6IHsgZXJyb3I6IFwiV3JvbmcgQVNOLjEgc2NoZW1hXCIgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2NoZW1hVmlldyA9IGlucHV0U2NoZW1hLmlkQmxvY2sudmFsdWVIZXhWaWV3O1xuICAgICAgICBjb25zdCBhc24xVmlldyA9IGlucHV0RGF0YS5pZEJsb2NrLnZhbHVlSGV4VmlldztcbiAgICAgICAgaWYgKHNjaGVtYVZpZXcubGVuZ3RoICE9PSBhc24xVmlldy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJlc3VsdDogcm9vdCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY2hlbWFWaWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoc2NoZW1hVmlld1tpXSAhPT0gYXNuMVZpZXdbMV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogcm9vdCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpbnB1dFNjaGVtYS5uYW1lKSB7XG4gICAgICAgIGlucHV0U2NoZW1hLm5hbWUgPSBpbnB1dFNjaGVtYS5uYW1lLnJlcGxhY2UoL15cXHMrfFxccyskL2csIEVNUFRZX1NUUklORyk7XG4gICAgICAgIGlmIChpbnB1dFNjaGVtYS5uYW1lKVxuICAgICAgICAgICAgcm9vdFtpbnB1dFNjaGVtYS5uYW1lXSA9IGlucHV0RGF0YTtcbiAgICB9XG4gICAgaWYgKGlucHV0U2NoZW1hIGluc3RhbmNlb2YgdHlwZVN0b3JlLkNvbnN0cnVjdGVkKSB7XG4gICAgICAgIGxldCBhZG1pc3Npb24gPSAwO1xuICAgICAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxuICAgICAgICAgICAgcmVzdWx0OiB7IGVycm9yOiBcIlVua25vd24gZXJyb3JcIiB9LFxuICAgICAgICB9O1xuICAgICAgICBsZXQgbWF4TGVuZ3RoID0gaW5wdXRTY2hlbWEudmFsdWVCbG9jay52YWx1ZS5sZW5ndGg7XG4gICAgICAgIGlmIChtYXhMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXRTY2hlbWEudmFsdWVCbG9jay52YWx1ZVswXSBpbnN0YW5jZW9mIFJlcGVhdGVkKSB7XG4gICAgICAgICAgICAgICAgbWF4TGVuZ3RoID0gaW5wdXREYXRhLnZhbHVlQmxvY2sudmFsdWUubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtYXhMZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdmVyaWZpZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVzdWx0OiByb290LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGlucHV0RGF0YS52YWx1ZUJsb2NrLnZhbHVlLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgICYmIChpbnB1dFNjaGVtYS52YWx1ZUJsb2NrLnZhbHVlLmxlbmd0aCAhPT0gMCkpIHtcbiAgICAgICAgICAgIGxldCBfb3B0aW9uYWwgPSB0cnVlO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dFNjaGVtYS52YWx1ZUJsb2NrLnZhbHVlLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIF9vcHRpb25hbCA9IF9vcHRpb25hbCAmJiAoaW5wdXRTY2hlbWEudmFsdWVCbG9jay52YWx1ZVtpXS5vcHRpb25hbCB8fCBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoX29wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZpZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogcm9vdCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlucHV0U2NoZW1hLm5hbWUpIHtcbiAgICAgICAgICAgICAgICBpbnB1dFNjaGVtYS5uYW1lID0gaW5wdXRTY2hlbWEubmFtZS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCBFTVBUWV9TVFJJTkcpO1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dFNjaGVtYS5uYW1lKVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcm9vdFtpbnB1dFNjaGVtYS5uYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJvb3QuZXJyb3IgPSBcIkluY29uc2lzdGVudCBvYmplY3QgbGVuZ3RoXCI7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXN1bHQ6IHJvb3QsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICgoaSAtIGFkbWlzc2lvbikgPj0gaW5wdXREYXRhLnZhbHVlQmxvY2sudmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0U2NoZW1hLnZhbHVlQmxvY2sudmFsdWVbaV0ub3B0aW9uYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IF9yZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHJvb3QsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJvb3QuZXJyb3IgPSBcIkluY29uc2lzdGVudCBsZW5ndGggYmV0d2VlbiBBU04uMSBkYXRhIGFuZCBzY2hlbWFcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0U2NoZW1hLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0U2NoZW1hLm5hbWUgPSBpbnB1dFNjaGVtYS5uYW1lLnJlcGxhY2UoL15cXHMrfFxccyskL2csIEVNUFRZX1NUUklORyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRTY2hlbWEubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByb290W2lucHV0U2NoZW1hLm5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9yZXN1bHQubmFtZSA9IGlucHV0U2NoZW1hLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0U2NoZW1hLnZhbHVlQmxvY2sudmFsdWVbMF0gaW5zdGFuY2VvZiBSZXBlYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBjb21wYXJlU2NoZW1hKHJvb3QsIGlucHV0RGF0YS52YWx1ZUJsb2NrLnZhbHVlW2ldLCBpbnB1dFNjaGVtYS52YWx1ZUJsb2NrLnZhbHVlWzBdLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC52ZXJpZmllZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dFNjaGVtYS52YWx1ZUJsb2NrLnZhbHVlWzBdLm9wdGlvbmFsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkbWlzc2lvbisrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0U2NoZW1hLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRTY2hlbWEubmFtZSA9IGlucHV0U2NoZW1hLm5hbWUucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgRU1QVFlfU1RSSU5HKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0U2NoZW1hLm5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgcm9vdFtpbnB1dFNjaGVtYS5uYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoKE5BTUUgaW4gaW5wdXRTY2hlbWEudmFsdWVCbG9jay52YWx1ZVswXSkgJiYgKGlucHV0U2NoZW1hLnZhbHVlQmxvY2sudmFsdWVbMF0ubmFtZS5sZW5ndGggPiAwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFycmF5Um9vdCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChMT0NBTCBpbiBpbnB1dFNjaGVtYS52YWx1ZUJsb2NrLnZhbHVlWzBdKSAmJiAoaW5wdXRTY2hlbWEudmFsdWVCbG9jay52YWx1ZVswXS5sb2NhbCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlSb290ID0gaW5wdXREYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5Um9vdCA9IHJvb3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFycmF5Um9vdFtpbnB1dFNjaGVtYS52YWx1ZUJsb2NrLnZhbHVlWzBdLm5hbWVdID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5Um9vdFtpbnB1dFNjaGVtYS52YWx1ZUJsb2NrLnZhbHVlWzBdLm5hbWVdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJheVJvb3RbaW5wdXRTY2hlbWEudmFsdWVCbG9jay52YWx1ZVswXS5uYW1lXS5wdXNoKGlucHV0RGF0YS52YWx1ZUJsb2NrLnZhbHVlW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gY29tcGFyZVNjaGVtYShyb290LCBpbnB1dERhdGEudmFsdWVCbG9jay52YWx1ZVtpIC0gYWRtaXNzaW9uXSwgaW5wdXRTY2hlbWEudmFsdWVCbG9jay52YWx1ZVtpXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudmVyaWZpZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRTY2hlbWEudmFsdWVCbG9jay52YWx1ZVtpXS5vcHRpb25hbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZG1pc3Npb24rKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dFNjaGVtYS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0U2NoZW1hLm5hbWUgPSBpbnB1dFNjaGVtYS5uYW1lLnJlcGxhY2UoL15cXHMrfFxccyskL2csIEVNUFRZX1NUUklORyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dFNjaGVtYS5uYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJvb3RbaW5wdXRTY2hlbWEubmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdC52ZXJpZmllZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGNvbnN0IF9yZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJlc3VsdDogcm9vdCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaW5wdXRTY2hlbWEubmFtZSkge1xuICAgICAgICAgICAgICAgIGlucHV0U2NoZW1hLm5hbWUgPSBpbnB1dFNjaGVtYS5uYW1lLnJlcGxhY2UoL15cXHMrfFxccyskL2csIEVNUFRZX1NUUklORyk7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0U2NoZW1hLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJvb3RbaW5wdXRTY2hlbWEubmFtZV07XG4gICAgICAgICAgICAgICAgICAgIF9yZXN1bHQubmFtZSA9IGlucHV0U2NoZW1hLm5hbWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF9yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZlcmlmaWVkOiB0cnVlLFxuICAgICAgICAgICAgcmVzdWx0OiByb290LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoaW5wdXRTY2hlbWEucHJpbWl0aXZlU2NoZW1hXG4gICAgICAgICYmIChWQUxVRV9IRVhfVklFVyBpbiBpbnB1dERhdGEudmFsdWVCbG9jaykpIHtcbiAgICAgICAgY29uc3QgYXNuMSA9IGxvY2FsRnJvbUJFUihpbnB1dERhdGEudmFsdWVCbG9jay52YWx1ZUhleFZpZXcpO1xuICAgICAgICBpZiAoYXNuMS5vZmZzZXQgPT09IC0xKSB7XG4gICAgICAgICAgICBjb25zdCBfcmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXN1bHQ6IGFzbjEucmVzdWx0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpbnB1dFNjaGVtYS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgaW5wdXRTY2hlbWEubmFtZSA9IGlucHV0U2NoZW1hLm5hbWUucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgRU1QVFlfU1RSSU5HKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXRTY2hlbWEubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcm9vdFtpbnB1dFNjaGVtYS5uYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdC5uYW1lID0gaW5wdXRTY2hlbWEubmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX3Jlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tcGFyZVNjaGVtYShyb290LCBhc24xLnJlc3VsdCwgaW5wdXRTY2hlbWEucHJpbWl0aXZlU2NoZW1hKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmVyaWZpZWQ6IHRydWUsXG4gICAgICAgIHJlc3VsdDogcm9vdCxcbiAgICB9O1xufVxuZnVuY3Rpb24gdmVyaWZ5U2NoZW1hKGlucHV0QnVmZmVyLCBpbnB1dFNjaGVtYSkge1xuICAgIGlmICgoaW5wdXRTY2hlbWEgaW5zdGFuY2VvZiBPYmplY3QpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxuICAgICAgICAgICAgcmVzdWx0OiB7IGVycm9yOiBcIldyb25nIEFTTi4xIHNjaGVtYSB0eXBlXCIgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgYXNuMSA9IGxvY2FsRnJvbUJFUihwdnRzdXRpbHMuQnVmZmVyU291cmNlQ29udmVydGVyLnRvVWludDhBcnJheShpbnB1dEJ1ZmZlcikpO1xuICAgIGlmIChhc24xLm9mZnNldCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZlcmlmaWVkOiBmYWxzZSxcbiAgICAgICAgICAgIHJlc3VsdDogYXNuMS5yZXN1bHQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBjb21wYXJlU2NoZW1hKGFzbjEucmVzdWx0LCBhc24xLnJlc3VsdCwgaW5wdXRTY2hlbWEpO1xufVxuXG5leHBvcnQgeyBBbnksIEJhc2VCbG9jaywgQmFzZVN0cmluZ0Jsb2NrLCBCaXRTdHJpbmcsIEJtcFN0cmluZywgQm9vbGVhbiwgQ2hhcmFjdGVyU3RyaW5nLCBDaG9pY2UsIENvbnN0cnVjdGVkLCBEQVRFLCBEYXRlVGltZSwgRHVyYXRpb24sIEVuZE9mQ29udGVudCwgRW51bWVyYXRlZCwgR2VuZXJhbFN0cmluZywgR2VuZXJhbGl6ZWRUaW1lLCBHcmFwaGljU3RyaW5nLCBIZXhCbG9jaywgSUE1U3RyaW5nLCBJbnRlZ2VyLCBOdWxsLCBOdW1lcmljU3RyaW5nLCBPYmplY3RJZGVudGlmaWVyLCBPY3RldFN0cmluZywgUHJpbWl0aXZlLCBQcmludGFibGVTdHJpbmcsIFJhd0RhdGEsIFJlbGF0aXZlT2JqZWN0SWRlbnRpZmllciwgUmVwZWF0ZWQsIFNlcXVlbmNlLCBTZXQsIFRJTUUsIFRlbGV0ZXhTdHJpbmcsIFRpbWVPZkRheSwgVVRDVGltZSwgVW5pdmVyc2FsU3RyaW5nLCBVdGY4U3RyaW5nLCBWYWx1ZUJsb2NrLCBWaWRlb3RleFN0cmluZywgVmlld1dyaXRlciwgVmlzaWJsZVN0cmluZywgY29tcGFyZVNjaGVtYSwgZnJvbUJFUiwgdmVyaWZ5U2NoZW1hIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/asn1js/build/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/bit.js":
/*!****************************************************!*\
  !*** ./node_modules/bytestreamjs/build/mjs/bit.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bitsToStringArray: () => (/* binding */ bitsToStringArray)\n/* harmony export */ });\nconst bitsToStringArray = [\n    \"00000000\", \"00000001\", \"00000010\",\n    \"00000011\", \"00000100\", \"00000101\",\n    \"00000110\", \"00000111\", \"00001000\",\n    \"00001001\", \"00001010\", \"00001011\",\n    \"00001100\", \"00001101\", \"00001110\",\n    \"00001111\", \"00010000\", \"00010001\",\n    \"00010010\", \"00010011\", \"00010100\",\n    \"00010101\", \"00010110\", \"00010111\",\n    \"00011000\", \"00011001\", \"00011010\",\n    \"00011011\", \"00011100\", \"00011101\",\n    \"00011110\", \"00011111\", \"00100000\",\n    \"00100001\", \"00100010\", \"00100011\",\n    \"00100100\", \"00100101\", \"00100110\",\n    \"00100111\", \"00101000\", \"00101001\",\n    \"00101010\", \"00101011\", \"00101100\",\n    \"00101101\", \"00101110\", \"00101111\",\n    \"00110000\", \"00110001\", \"00110010\",\n    \"00110011\", \"00110100\", \"00110101\",\n    \"00110110\", \"00110111\", \"00111000\",\n    \"00111001\", \"00111010\", \"00111011\",\n    \"00111100\", \"00111101\", \"00111110\",\n    \"00111111\", \"01000000\", \"01000001\",\n    \"01000010\", \"01000011\", \"01000100\",\n    \"01000101\", \"01000110\", \"01000111\",\n    \"01001000\", \"01001001\", \"01001010\",\n    \"01001011\", \"01001100\", \"01001101\",\n    \"01001110\", \"01001111\", \"01010000\",\n    \"01010001\", \"01010010\", \"01010011\",\n    \"01010100\", \"01010101\", \"01010110\",\n    \"01010111\", \"01011000\", \"01011001\",\n    \"01011010\", \"01011011\", \"01011100\",\n    \"01011101\", \"01011110\", \"01011111\",\n    \"01100000\", \"01100001\", \"01100010\",\n    \"01100011\", \"01100100\", \"01100101\",\n    \"01100110\", \"01100111\", \"01101000\",\n    \"01101001\", \"01101010\", \"01101011\",\n    \"01101100\", \"01101101\", \"01101110\",\n    \"01101111\", \"01110000\", \"01110001\",\n    \"01110010\", \"01110011\", \"01110100\",\n    \"01110101\", \"01110110\", \"01110111\",\n    \"01111000\", \"01111001\", \"01111010\",\n    \"01111011\", \"01111100\", \"01111101\",\n    \"01111110\", \"01111111\", \"10000000\",\n    \"10000001\", \"10000010\", \"10000011\",\n    \"10000100\", \"10000101\", \"10000110\",\n    \"10000111\", \"10001000\", \"10001001\",\n    \"10001010\", \"10001011\", \"10001100\",\n    \"10001101\", \"10001110\", \"10001111\",\n    \"10010000\", \"10010001\", \"10010010\",\n    \"10010011\", \"10010100\", \"10010101\",\n    \"10010110\", \"10010111\", \"10011000\",\n    \"10011001\", \"10011010\", \"10011011\",\n    \"10011100\", \"10011101\", \"10011110\",\n    \"10011111\", \"10100000\", \"10100001\",\n    \"10100010\", \"10100011\", \"10100100\",\n    \"10100101\", \"10100110\", \"10100111\",\n    \"10101000\", \"10101001\", \"10101010\",\n    \"10101011\", \"10101100\", \"10101101\",\n    \"10101110\", \"10101111\", \"10110000\",\n    \"10110001\", \"10110010\", \"10110011\",\n    \"10110100\", \"10110101\", \"10110110\",\n    \"10110111\", \"10111000\", \"10111001\",\n    \"10111010\", \"10111011\", \"10111100\",\n    \"10111101\", \"10111110\", \"10111111\",\n    \"11000000\", \"11000001\", \"11000010\",\n    \"11000011\", \"11000100\", \"11000101\",\n    \"11000110\", \"11000111\", \"11001000\",\n    \"11001001\", \"11001010\", \"11001011\",\n    \"11001100\", \"11001101\", \"11001110\",\n    \"11001111\", \"11010000\", \"11010001\",\n    \"11010010\", \"11010011\", \"11010100\",\n    \"11010101\", \"11010110\", \"11010111\",\n    \"11011000\", \"11011001\", \"11011010\",\n    \"11011011\", \"11011100\", \"11011101\",\n    \"11011110\", \"11011111\", \"11100000\",\n    \"11100001\", \"11100010\", \"11100011\",\n    \"11100100\", \"11100101\", \"11100110\",\n    \"11100111\", \"11101000\", \"11101001\",\n    \"11101010\", \"11101011\", \"11101100\",\n    \"11101101\", \"11101110\", \"11101111\",\n    \"11110000\", \"11110001\", \"11110010\",\n    \"11110011\", \"11110100\", \"11110101\",\n    \"11110110\", \"11110111\", \"11111000\",\n    \"11111001\", \"11111010\", \"11111011\",\n    \"11111100\", \"11111101\", \"11111110\",\n    \"11111111\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ieXRlc3RyZWFtanMvYnVpbGQvbWpzL2JpdC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9EZXNrdG9wL2MycGEgdG9vbC9ub2RlX21vZHVsZXMvYnl0ZXN0cmVhbWpzL2J1aWxkL21qcy9iaXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGJpdHNUb1N0cmluZ0FycmF5ID0gW1xuICAgIFwiMDAwMDAwMDBcIiwgXCIwMDAwMDAwMVwiLCBcIjAwMDAwMDEwXCIsXG4gICAgXCIwMDAwMDAxMVwiLCBcIjAwMDAwMTAwXCIsIFwiMDAwMDAxMDFcIixcbiAgICBcIjAwMDAwMTEwXCIsIFwiMDAwMDAxMTFcIiwgXCIwMDAwMTAwMFwiLFxuICAgIFwiMDAwMDEwMDFcIiwgXCIwMDAwMTAxMFwiLCBcIjAwMDAxMDExXCIsXG4gICAgXCIwMDAwMTEwMFwiLCBcIjAwMDAxMTAxXCIsIFwiMDAwMDExMTBcIixcbiAgICBcIjAwMDAxMTExXCIsIFwiMDAwMTAwMDBcIiwgXCIwMDAxMDAwMVwiLFxuICAgIFwiMDAwMTAwMTBcIiwgXCIwMDAxMDAxMVwiLCBcIjAwMDEwMTAwXCIsXG4gICAgXCIwMDAxMDEwMVwiLCBcIjAwMDEwMTEwXCIsIFwiMDAwMTAxMTFcIixcbiAgICBcIjAwMDExMDAwXCIsIFwiMDAwMTEwMDFcIiwgXCIwMDAxMTAxMFwiLFxuICAgIFwiMDAwMTEwMTFcIiwgXCIwMDAxMTEwMFwiLCBcIjAwMDExMTAxXCIsXG4gICAgXCIwMDAxMTExMFwiLCBcIjAwMDExMTExXCIsIFwiMDAxMDAwMDBcIixcbiAgICBcIjAwMTAwMDAxXCIsIFwiMDAxMDAwMTBcIiwgXCIwMDEwMDAxMVwiLFxuICAgIFwiMDAxMDAxMDBcIiwgXCIwMDEwMDEwMVwiLCBcIjAwMTAwMTEwXCIsXG4gICAgXCIwMDEwMDExMVwiLCBcIjAwMTAxMDAwXCIsIFwiMDAxMDEwMDFcIixcbiAgICBcIjAwMTAxMDEwXCIsIFwiMDAxMDEwMTFcIiwgXCIwMDEwMTEwMFwiLFxuICAgIFwiMDAxMDExMDFcIiwgXCIwMDEwMTExMFwiLCBcIjAwMTAxMTExXCIsXG4gICAgXCIwMDExMDAwMFwiLCBcIjAwMTEwMDAxXCIsIFwiMDAxMTAwMTBcIixcbiAgICBcIjAwMTEwMDExXCIsIFwiMDAxMTAxMDBcIiwgXCIwMDExMDEwMVwiLFxuICAgIFwiMDAxMTAxMTBcIiwgXCIwMDExMDExMVwiLCBcIjAwMTExMDAwXCIsXG4gICAgXCIwMDExMTAwMVwiLCBcIjAwMTExMDEwXCIsIFwiMDAxMTEwMTFcIixcbiAgICBcIjAwMTExMTAwXCIsIFwiMDAxMTExMDFcIiwgXCIwMDExMTExMFwiLFxuICAgIFwiMDAxMTExMTFcIiwgXCIwMTAwMDAwMFwiLCBcIjAxMDAwMDAxXCIsXG4gICAgXCIwMTAwMDAxMFwiLCBcIjAxMDAwMDExXCIsIFwiMDEwMDAxMDBcIixcbiAgICBcIjAxMDAwMTAxXCIsIFwiMDEwMDAxMTBcIiwgXCIwMTAwMDExMVwiLFxuICAgIFwiMDEwMDEwMDBcIiwgXCIwMTAwMTAwMVwiLCBcIjAxMDAxMDEwXCIsXG4gICAgXCIwMTAwMTAxMVwiLCBcIjAxMDAxMTAwXCIsIFwiMDEwMDExMDFcIixcbiAgICBcIjAxMDAxMTEwXCIsIFwiMDEwMDExMTFcIiwgXCIwMTAxMDAwMFwiLFxuICAgIFwiMDEwMTAwMDFcIiwgXCIwMTAxMDAxMFwiLCBcIjAxMDEwMDExXCIsXG4gICAgXCIwMTAxMDEwMFwiLCBcIjAxMDEwMTAxXCIsIFwiMDEwMTAxMTBcIixcbiAgICBcIjAxMDEwMTExXCIsIFwiMDEwMTEwMDBcIiwgXCIwMTAxMTAwMVwiLFxuICAgIFwiMDEwMTEwMTBcIiwgXCIwMTAxMTAxMVwiLCBcIjAxMDExMTAwXCIsXG4gICAgXCIwMTAxMTEwMVwiLCBcIjAxMDExMTEwXCIsIFwiMDEwMTExMTFcIixcbiAgICBcIjAxMTAwMDAwXCIsIFwiMDExMDAwMDFcIiwgXCIwMTEwMDAxMFwiLFxuICAgIFwiMDExMDAwMTFcIiwgXCIwMTEwMDEwMFwiLCBcIjAxMTAwMTAxXCIsXG4gICAgXCIwMTEwMDExMFwiLCBcIjAxMTAwMTExXCIsIFwiMDExMDEwMDBcIixcbiAgICBcIjAxMTAxMDAxXCIsIFwiMDExMDEwMTBcIiwgXCIwMTEwMTAxMVwiLFxuICAgIFwiMDExMDExMDBcIiwgXCIwMTEwMTEwMVwiLCBcIjAxMTAxMTEwXCIsXG4gICAgXCIwMTEwMTExMVwiLCBcIjAxMTEwMDAwXCIsIFwiMDExMTAwMDFcIixcbiAgICBcIjAxMTEwMDEwXCIsIFwiMDExMTAwMTFcIiwgXCIwMTExMDEwMFwiLFxuICAgIFwiMDExMTAxMDFcIiwgXCIwMTExMDExMFwiLCBcIjAxMTEwMTExXCIsXG4gICAgXCIwMTExMTAwMFwiLCBcIjAxMTExMDAxXCIsIFwiMDExMTEwMTBcIixcbiAgICBcIjAxMTExMDExXCIsIFwiMDExMTExMDBcIiwgXCIwMTExMTEwMVwiLFxuICAgIFwiMDExMTExMTBcIiwgXCIwMTExMTExMVwiLCBcIjEwMDAwMDAwXCIsXG4gICAgXCIxMDAwMDAwMVwiLCBcIjEwMDAwMDEwXCIsIFwiMTAwMDAwMTFcIixcbiAgICBcIjEwMDAwMTAwXCIsIFwiMTAwMDAxMDFcIiwgXCIxMDAwMDExMFwiLFxuICAgIFwiMTAwMDAxMTFcIiwgXCIxMDAwMTAwMFwiLCBcIjEwMDAxMDAxXCIsXG4gICAgXCIxMDAwMTAxMFwiLCBcIjEwMDAxMDExXCIsIFwiMTAwMDExMDBcIixcbiAgICBcIjEwMDAxMTAxXCIsIFwiMTAwMDExMTBcIiwgXCIxMDAwMTExMVwiLFxuICAgIFwiMTAwMTAwMDBcIiwgXCIxMDAxMDAwMVwiLCBcIjEwMDEwMDEwXCIsXG4gICAgXCIxMDAxMDAxMVwiLCBcIjEwMDEwMTAwXCIsIFwiMTAwMTAxMDFcIixcbiAgICBcIjEwMDEwMTEwXCIsIFwiMTAwMTAxMTFcIiwgXCIxMDAxMTAwMFwiLFxuICAgIFwiMTAwMTEwMDFcIiwgXCIxMDAxMTAxMFwiLCBcIjEwMDExMDExXCIsXG4gICAgXCIxMDAxMTEwMFwiLCBcIjEwMDExMTAxXCIsIFwiMTAwMTExMTBcIixcbiAgICBcIjEwMDExMTExXCIsIFwiMTAxMDAwMDBcIiwgXCIxMDEwMDAwMVwiLFxuICAgIFwiMTAxMDAwMTBcIiwgXCIxMDEwMDAxMVwiLCBcIjEwMTAwMTAwXCIsXG4gICAgXCIxMDEwMDEwMVwiLCBcIjEwMTAwMTEwXCIsIFwiMTAxMDAxMTFcIixcbiAgICBcIjEwMTAxMDAwXCIsIFwiMTAxMDEwMDFcIiwgXCIxMDEwMTAxMFwiLFxuICAgIFwiMTAxMDEwMTFcIiwgXCIxMDEwMTEwMFwiLCBcIjEwMTAxMTAxXCIsXG4gICAgXCIxMDEwMTExMFwiLCBcIjEwMTAxMTExXCIsIFwiMTAxMTAwMDBcIixcbiAgICBcIjEwMTEwMDAxXCIsIFwiMTAxMTAwMTBcIiwgXCIxMDExMDAxMVwiLFxuICAgIFwiMTAxMTAxMDBcIiwgXCIxMDExMDEwMVwiLCBcIjEwMTEwMTEwXCIsXG4gICAgXCIxMDExMDExMVwiLCBcIjEwMTExMDAwXCIsIFwiMTAxMTEwMDFcIixcbiAgICBcIjEwMTExMDEwXCIsIFwiMTAxMTEwMTFcIiwgXCIxMDExMTEwMFwiLFxuICAgIFwiMTAxMTExMDFcIiwgXCIxMDExMTExMFwiLCBcIjEwMTExMTExXCIsXG4gICAgXCIxMTAwMDAwMFwiLCBcIjExMDAwMDAxXCIsIFwiMTEwMDAwMTBcIixcbiAgICBcIjExMDAwMDExXCIsIFwiMTEwMDAxMDBcIiwgXCIxMTAwMDEwMVwiLFxuICAgIFwiMTEwMDAxMTBcIiwgXCIxMTAwMDExMVwiLCBcIjExMDAxMDAwXCIsXG4gICAgXCIxMTAwMTAwMVwiLCBcIjExMDAxMDEwXCIsIFwiMTEwMDEwMTFcIixcbiAgICBcIjExMDAxMTAwXCIsIFwiMTEwMDExMDFcIiwgXCIxMTAwMTExMFwiLFxuICAgIFwiMTEwMDExMTFcIiwgXCIxMTAxMDAwMFwiLCBcIjExMDEwMDAxXCIsXG4gICAgXCIxMTAxMDAxMFwiLCBcIjExMDEwMDExXCIsIFwiMTEwMTAxMDBcIixcbiAgICBcIjExMDEwMTAxXCIsIFwiMTEwMTAxMTBcIiwgXCIxMTAxMDExMVwiLFxuICAgIFwiMTEwMTEwMDBcIiwgXCIxMTAxMTAwMVwiLCBcIjExMDExMDEwXCIsXG4gICAgXCIxMTAxMTAxMVwiLCBcIjExMDExMTAwXCIsIFwiMTEwMTExMDFcIixcbiAgICBcIjExMDExMTEwXCIsIFwiMTEwMTExMTFcIiwgXCIxMTEwMDAwMFwiLFxuICAgIFwiMTExMDAwMDFcIiwgXCIxMTEwMDAxMFwiLCBcIjExMTAwMDExXCIsXG4gICAgXCIxMTEwMDEwMFwiLCBcIjExMTAwMTAxXCIsIFwiMTExMDAxMTBcIixcbiAgICBcIjExMTAwMTExXCIsIFwiMTExMDEwMDBcIiwgXCIxMTEwMTAwMVwiLFxuICAgIFwiMTExMDEwMTBcIiwgXCIxMTEwMTAxMVwiLCBcIjExMTAxMTAwXCIsXG4gICAgXCIxMTEwMTEwMVwiLCBcIjExMTAxMTEwXCIsIFwiMTExMDExMTFcIixcbiAgICBcIjExMTEwMDAwXCIsIFwiMTExMTAwMDFcIiwgXCIxMTExMDAxMFwiLFxuICAgIFwiMTExMTAwMTFcIiwgXCIxMTExMDEwMFwiLCBcIjExMTEwMTAxXCIsXG4gICAgXCIxMTExMDExMFwiLCBcIjExMTEwMTExXCIsIFwiMTExMTEwMDBcIixcbiAgICBcIjExMTExMDAxXCIsIFwiMTExMTEwMTBcIiwgXCIxMTExMTAxMVwiLFxuICAgIFwiMTExMTExMDBcIiwgXCIxMTExMTEwMVwiLCBcIjExMTExMTEwXCIsXG4gICAgXCIxMTExMTExMVwiXG5dO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/bit.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/bit_stream.js":
/*!***********************************************************!*\
  !*** ./node_modules/bytestreamjs/build/mjs/bit_stream.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BitStream: () => (/* binding */ BitStream)\n/* harmony export */ });\n/* harmony import */ var _bit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bit */ \"(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/bit.js\");\n/* harmony import */ var _byte_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./byte_stream */ \"(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/byte_stream.js\");\n\n\nclass BitStream {\n    constructor(parameters) {\n        this.buffer = new ArrayBuffer(0);\n        this.view = new Uint8Array(this.buffer);\n        this.bitsCount = 0;\n        if (parameters) {\n            if (\"byteStream\" in parameters) {\n                this.fromByteStream(parameters.byteStream);\n            }\n            if (\"view\" in parameters) {\n                this.fromUint8Array(parameters.view);\n            }\n            if (\"buffer\" in parameters) {\n                this.fromArrayBuffer(parameters.buffer);\n            }\n            if (\"string\" in parameters) {\n                this.fromString(parameters.string);\n            }\n            if (\"uint32\" in parameters) {\n                this.fromUint32(parameters.uint32);\n            }\n            if (\"bitsCount\" in parameters && parameters.bitsCount) {\n                this.bitsCount = parameters.bitsCount;\n            }\n        }\n    }\n    clear() {\n        this.buffer = new ArrayBuffer(0);\n        this.view = new Uint8Array(this.buffer);\n        this.bitsCount = 0;\n    }\n    fromByteStream(stream) {\n        this.fromUint8Array(stream.view);\n    }\n    fromArrayBuffer(array) {\n        this.buffer = array;\n        this.view = new Uint8Array(array);\n        this.bitsCount = this.view.length << 3;\n    }\n    fromUint8Array(array) {\n        this.fromArrayBuffer(new Uint8Array(array).buffer);\n    }\n    fromString(string) {\n        const stringLength = string.length;\n        this.buffer = new ArrayBuffer((stringLength >> 3) + ((stringLength % 8) ? 1 : 0));\n        this.view = new Uint8Array(this.buffer);\n        this.bitsCount = ((stringLength >> 3) + 1) << 3;\n        let byteIndex = 0;\n        for (let i = 0; i < stringLength; i++) {\n            if (string[i] == \"1\")\n                this.view[byteIndex] |= 1 << (7 - (i % 8));\n            if (i && (((i + 1) % 8) == 0))\n                byteIndex++;\n        }\n        if (stringLength % 8)\n            this.shiftRight(8 - (stringLength % 8));\n        this.bitsCount = stringLength;\n    }\n    fromUint32(uint32) {\n        this.buffer = new ArrayBuffer(4);\n        this.view = new Uint8Array(this.buffer);\n        const value = new Uint32Array([uint32]);\n        const view = new Uint8Array(value.buffer);\n        for (let i = 3; i >= 0; i--)\n            this.view[i] = view[3 - i];\n        this.bitsCount = 32;\n    }\n    toString(start, length) {\n        if (start == null) {\n            start = 0;\n        }\n        if ((start >= this.view.length) || (start < 0)) {\n            start = 0;\n        }\n        if (length == null) {\n            length = this.view.length - start;\n        }\n        if ((length >= this.view.length) || (length < 0)) {\n            length = this.view.length - start;\n        }\n        const result = [];\n        for (let i = start; i < (start + length); i++) {\n            result.push(_bit__WEBPACK_IMPORTED_MODULE_0__.bitsToStringArray[this.view[i]]);\n        }\n        return result.join(\"\").substring((this.view.length << 3) - this.bitsCount);\n    }\n    shiftRight(shift, needShrink = true) {\n        if (this.view.length == 0) {\n            return;\n        }\n        if ((shift < 0) || (shift > 8)) {\n            throw new Error(\"The \\\"shift\\\" parameter must be in range 0-8\");\n        }\n        if (shift > this.bitsCount) {\n            throw new Error(\"The \\\"shift\\\" parameter can not be bigger than \\\"this.bitsCount\\\"\");\n        }\n        const shiftMask = 0xFF >> (8 - shift);\n        this.view[this.view.length - 1] >>= shift;\n        for (let i = (this.view.length - 2); i >= 0; i--) {\n            this.view[i + 1] |= (this.view[i] & shiftMask) << (8 - shift);\n            this.view[i] >>= shift;\n        }\n        this.bitsCount -= shift;\n        if (this.bitsCount == 0) {\n            this.clear();\n        }\n        if (needShrink) {\n            this.shrink();\n        }\n    }\n    shiftLeft(shift) {\n        if (this.view.length == 0) {\n            return;\n        }\n        if ((shift < 0) || (shift > 8)) {\n            throw new Error(\"The \\\"shift\\\" parameter must be in range 0-8\");\n        }\n        if (shift > this.bitsCount) {\n            throw new Error(\"The \\\"shift\\\" parameter can not be bigger than \\\"this.bitsCount\\\"\");\n        }\n        const bitsOffset = this.bitsCount & 0x07;\n        if (bitsOffset > shift) {\n            this.view[0] &= 0xFF >> (bitsOffset + shift);\n        }\n        else {\n            const view = this.view.slice(1);\n            view[0] &= 0xFF >> (shift - bitsOffset);\n            this.buffer = view.buffer;\n            this.view = view;\n        }\n        this.bitsCount -= shift;\n        if (this.bitsCount == 0) {\n            this.clear();\n        }\n    }\n    slice(start = 0, end = 0) {\n        let valueShift = 0;\n        if (this.bitsCount % 8) {\n            valueShift = (8 - (this.bitsCount % 8));\n        }\n        start += valueShift;\n        end += valueShift;\n        const maxEnd = (this.view.length << 3) - 1;\n        if ((start < 0) || (start > maxEnd)) {\n            return new BitStream();\n        }\n        if (!end) {\n            end = maxEnd;\n        }\n        if ((end < 0) || (end > maxEnd)) {\n            return new BitStream();\n        }\n        if ((end - start + 1) > this.bitsCount) {\n            return new BitStream();\n        }\n        const startIndex = start >> 3;\n        const startOffset = start & 0x07;\n        const endIndex = end >> 3;\n        const endOffset = end & 0x07;\n        const bitsLength = ((endIndex - startIndex) == 0) ? 1 : (endIndex - startIndex + 1);\n        const result = new BitStream({\n            buffer: this.buffer.slice(startIndex, startIndex + bitsLength),\n            bitsCount: bitsLength << 3,\n        });\n        result.view[0] &= (0xFF >> startOffset);\n        result.view[bitsLength] &= (0xFF << (7 - endOffset));\n        if (7 - endOffset) {\n            result.shiftRight(7 - endOffset, false);\n        }\n        result.bitsCount = (end - start + 1);\n        result.shrink();\n        return result;\n    }\n    copy(start = 0, length = 0) {\n        const maxEnd = (this.view.length << 3) - 1;\n        if ((start < 0) || (start > maxEnd)) {\n            return new BitStream();\n        }\n        if (!length) {\n            length = (this.view.length << 3) - start - 1;\n        }\n        if (length > this.bitsCount) {\n            return new BitStream();\n        }\n        return this.slice(start, start + length - 1);\n    }\n    shrink() {\n        const currentLength = (this.bitsCount >> 3) + ((this.bitsCount % 8) ? 1 : 0);\n        if (currentLength < this.view.length) {\n            const view = this.view.slice(this.view.length - currentLength, (this.view.length - currentLength) + currentLength);\n            this.view = view;\n            this.buffer = view.buffer;\n        }\n    }\n    reverseBytes() {\n        for (let i = 0; i < this.view.length; i++) {\n            this.view[i] = ((this.view[i] * 0x0802 & 0x22110) | (this.view[i] * 0x8020 & 0x88440)) * 0x10101 >> 16;\n        }\n        if (this.bitsCount % 8) {\n            const currentLength = (this.bitsCount >> 3) + ((this.bitsCount % 8) ? 1 : 0);\n            this.view[this.view.length - currentLength] >>= (8 - (this.bitsCount & 0x07));\n        }\n    }\n    reverseValue() {\n        const initialValue = this.toString();\n        const initialValueLength = initialValue.length;\n        const reversedValue = new Array(initialValueLength);\n        for (let i = 0; i < initialValueLength; i++) {\n            reversedValue[initialValueLength - 1 - i] = initialValue[i];\n        }\n        this.fromString(reversedValue.join(\"\"));\n    }\n    getNumberValue() {\n        const byteLength = (this.view.length - 1);\n        if (byteLength > 3) {\n            return (-1);\n        }\n        if (byteLength == (-1)) {\n            return 0;\n        }\n        const value = new Uint32Array(1);\n        const view = new Uint8Array(value.buffer);\n        for (let i = byteLength; i >= 0; i--) {\n            view[byteLength - i] = this.view[i];\n        }\n        return value[0];\n    }\n    findPattern(pattern, start, length, backward) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString(),\n        });\n        const stringPattern = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: pattern.toString()\n        });\n        return stringStream.findPattern(stringPattern, start, length, backward);\n    }\n    findFirstIn(patterns, start, length, backward) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString(),\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.findFirstIn(stringPatterns, start, length, backward);\n    }\n    findAllIn(patterns, start, length) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.findAllIn(stringPatterns, start, length);\n    }\n    findAllPatternIn(pattern, start, length) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringPattern = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: pattern.toString()\n        });\n        return stringStream.findAllPatternIn(stringPattern, start, length);\n    }\n    findFirstNotIn(patterns, start, length, backward) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.findFirstNotIn(stringPatterns, start, length, backward);\n    }\n    findAllNotIn(patterns, start, length) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.findAllNotIn(stringPatterns, start, length);\n    }\n    findFirstSequence(patterns, start, length, backward) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.findFirstSequence(stringPatterns, start, length, backward);\n    }\n    findAllSequences(patterns, start, length) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.findAllSequences(stringPatterns, start, length);\n    }\n    findPairedPatterns(leftPattern, rightPattern, start, length) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringLeftPattern = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: leftPattern.toString()\n        });\n        const stringRightPattern = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: rightPattern.toString()\n        });\n        return stringStream.findPairedPatterns(stringLeftPattern, stringRightPattern, start, length);\n    }\n    findPairedArrays(inputLeftPatterns, inputRightPatterns, start, length) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringLeftPatterns = new Array(inputLeftPatterns.length);\n        for (let i = 0; i < inputLeftPatterns.length; i++) {\n            stringLeftPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: inputLeftPatterns[i].toString()\n            });\n        }\n        const stringRightPatterns = new Array(inputRightPatterns.length);\n        for (let i = 0; i < inputRightPatterns.length; i++) {\n            stringRightPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: inputRightPatterns[i].toString()\n            });\n        }\n        return stringStream.findPairedArrays(stringLeftPatterns, stringRightPatterns, start, length);\n    }\n    replacePattern(searchPattern, replacePattern, start, length) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringSearchPattern = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: searchPattern.toString()\n        });\n        const stringReplacePattern = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: replacePattern.toString()\n        });\n        if (stringStream.replacePattern(stringSearchPattern, stringReplacePattern, start, length)) {\n            this.fromString(stringStream.toString());\n            return true;\n        }\n        return false;\n    }\n    skipPatterns(patterns, start, length, backward) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.skipPatterns(stringPatterns, start, length, backward);\n    }\n    skipNotPatterns(patterns, start, length, backward) {\n        const stringStream = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n            string: this.toString()\n        });\n        const stringPatterns = new Array(patterns.length);\n        for (let i = 0; i < patterns.length; i++) {\n            stringPatterns[i] = new _byte_stream__WEBPACK_IMPORTED_MODULE_1__.ByteStream({\n                string: patterns[i].toString()\n            });\n        }\n        return stringStream.skipNotPatterns(stringPatterns, start, length, backward);\n    }\n    append(stream) {\n        this.fromString([\n            this.toString(),\n            stream.toString()\n        ].join(\"\"));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/bit_stream.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/byte_stream.js":
/*!************************************************************!*\
  !*** ./node_modules/bytestreamjs/build/mjs/byte_stream.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ByteStream: () => (/* binding */ ByteStream)\n/* harmony export */ });\nclass ByteStream {\n    constructor(parameters = {}) {\n        if (\"view\" in parameters) {\n            this.fromUint8Array(parameters.view);\n        }\n        else if (\"buffer\" in parameters) {\n            this.fromArrayBuffer(parameters.buffer);\n        }\n        else if (\"string\" in parameters) {\n            this.fromString(parameters.string);\n        }\n        else if (\"hexstring\" in parameters) {\n            this.fromHexString(parameters.hexstring);\n        }\n        else {\n            if (\"length\" in parameters && parameters.length > 0) {\n                this.length = parameters.length;\n                if (parameters.stub) {\n                    for (let i = 0; i < this._view.length; i++) {\n                        this._view[i] = parameters.stub;\n                    }\n                }\n            }\n            else {\n                this.length = 0;\n            }\n        }\n    }\n    set buffer(value) {\n        this._buffer = value;\n        this._view = new Uint8Array(this._buffer);\n    }\n    get buffer() {\n        return this._buffer;\n    }\n    set view(value) {\n        this._buffer = new ArrayBuffer(value.length);\n        this._view = new Uint8Array(this._buffer);\n        this._view.set(value);\n    }\n    get view() {\n        return this._view;\n    }\n    get length() {\n        return this.view.byteLength;\n    }\n    set length(value) {\n        this._buffer = new ArrayBuffer(value);\n        this._view = new Uint8Array(this._buffer);\n    }\n    clear() {\n        this._buffer = new ArrayBuffer(0);\n        this._view = new Uint8Array(this._buffer);\n    }\n    fromArrayBuffer(array) {\n        this._buffer = array;\n        this._view = new Uint8Array(this._buffer);\n    }\n    fromUint8Array(array) {\n        this.fromArrayBuffer(new Uint8Array(array).buffer);\n    }\n    fromString(string) {\n        const stringLength = string.length;\n        this.length = stringLength;\n        for (let i = 0; i < stringLength; i++)\n            this.view[i] = string.charCodeAt(i);\n    }\n    toString(start = 0, length = (this.view.length - start)) {\n        let result = \"\";\n        if ((start >= this.view.length) || (start < 0)) {\n            start = 0;\n        }\n        if ((length >= this.view.length) || (length < 0)) {\n            length = this.view.length - start;\n        }\n        for (let i = start; i < (start + length); i++)\n            result += String.fromCharCode(this.view[i]);\n        return result;\n    }\n    fromHexString(hexString) {\n        const stringLength = hexString.length;\n        this.buffer = new ArrayBuffer(stringLength >> 1);\n        this.view = new Uint8Array(this.buffer);\n        const hexMap = new Map();\n        hexMap.set(\"0\", 0x00);\n        hexMap.set(\"1\", 0x01);\n        hexMap.set(\"2\", 0x02);\n        hexMap.set(\"3\", 0x03);\n        hexMap.set(\"4\", 0x04);\n        hexMap.set(\"5\", 0x05);\n        hexMap.set(\"6\", 0x06);\n        hexMap.set(\"7\", 0x07);\n        hexMap.set(\"8\", 0x08);\n        hexMap.set(\"9\", 0x09);\n        hexMap.set(\"A\", 0x0A);\n        hexMap.set(\"a\", 0x0A);\n        hexMap.set(\"B\", 0x0B);\n        hexMap.set(\"b\", 0x0B);\n        hexMap.set(\"C\", 0x0C);\n        hexMap.set(\"c\", 0x0C);\n        hexMap.set(\"D\", 0x0D);\n        hexMap.set(\"d\", 0x0D);\n        hexMap.set(\"E\", 0x0E);\n        hexMap.set(\"e\", 0x0E);\n        hexMap.set(\"F\", 0x0F);\n        hexMap.set(\"f\", 0x0F);\n        let j = 0;\n        let temp = 0x00;\n        for (let i = 0; i < stringLength; i++) {\n            if (!(i % 2)) {\n                temp = hexMap.get(hexString.charAt(i)) << 4;\n            }\n            else {\n                temp |= hexMap.get(hexString.charAt(i));\n                this.view[j] = temp;\n                j++;\n            }\n        }\n    }\n    toHexString(start = 0, length = (this.view.length - start)) {\n        let result = \"\";\n        if ((start >= this.view.length) || (start < 0)) {\n            start = 0;\n        }\n        if ((length >= this.view.length) || (length < 0)) {\n            length = this.view.length - start;\n        }\n        for (let i = start; i < (start + length); i++) {\n            const str = this.view[i].toString(16).toUpperCase();\n            result = result + ((str.length == 1) ? \"0\" : \"\") + str;\n        }\n        return result;\n    }\n    copy(start = 0, length = (this.length - start)) {\n        if (!start && !this.length) {\n            return new ByteStream();\n        }\n        if ((start < 0) || (start > (this.length - 1))) {\n            throw new Error(`Wrong start position: ${start}`);\n        }\n        const stream = new ByteStream({\n            buffer: this._buffer.slice(start, start + length)\n        });\n        return stream;\n    }\n    slice(start = 0, end = this.length) {\n        if (!start && !this.length) {\n            return new ByteStream();\n        }\n        if ((start < 0) || (start > (this.length - 1))) {\n            throw new Error(`Wrong start position: ${start}`);\n        }\n        const stream = new ByteStream({\n            buffer: this._buffer.slice(start, end),\n        });\n        return stream;\n    }\n    realloc(size) {\n        const buffer = new ArrayBuffer(size);\n        const view = new Uint8Array(buffer);\n        if (size > this._view.length)\n            view.set(this._view);\n        else {\n            view.set(new Uint8Array(this._buffer, 0, size));\n        }\n        this._buffer = buffer;\n        this._view = new Uint8Array(this._buffer);\n    }\n    append(stream) {\n        const initialSize = this.length;\n        const streamViewLength = stream.length;\n        const subarrayView = stream._view.subarray();\n        this.realloc(initialSize + streamViewLength);\n        this._view.set(subarrayView, initialSize);\n    }\n    insert(stream, start = 0, length = (this.length - start)) {\n        if (start > (this.length - 1))\n            return false;\n        if (length > (this.length - start)) {\n            length = this.length - start;\n        }\n        if (length > stream.length) {\n            length = stream.length;\n        }\n        if (length == stream.length)\n            this._view.set(stream._view, start);\n        else {\n            this._view.set(stream._view.subarray(0, length), start);\n        }\n        return true;\n    }\n    isEqual(stream) {\n        if (this.length != stream.length)\n            return false;\n        for (let i = 0; i < stream.length; i++) {\n            if (this.view[i] != stream.view[i])\n                return false;\n        }\n        return true;\n    }\n    isEqualView(view) {\n        if (view.length != this.view.length)\n            return false;\n        for (let i = 0; i < view.length; i++) {\n            if (this.view[i] != view[i])\n                return false;\n        }\n        return true;\n    }\n    findPattern(pattern, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const patternLength = pattern.length;\n        if (patternLength > length) {\n            return (-1);\n        }\n        const patternArray = [];\n        for (let i = 0; i < patternLength; i++)\n            patternArray.push(pattern.view[i]);\n        for (let i = 0; i <= (length - patternLength); i++) {\n            let equal = true;\n            const equalStart = (backward) ? (start - patternLength - i) : (start + i);\n            for (let j = 0; j < patternLength; j++) {\n                if (this.view[j + equalStart] != patternArray[j]) {\n                    equal = false;\n                    break;\n                }\n            }\n            if (equal) {\n                return (backward) ? (start - patternLength - i) : (start + patternLength + i);\n            }\n        }\n        return (-1);\n    }\n    findFirstIn(patterns, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const result = {\n            id: (-1),\n            position: (backward) ? 0 : (start + length),\n            length: 0\n        };\n        for (let i = 0; i < patterns.length; i++) {\n            const position = this.findPattern(patterns[i], start, length, backward);\n            if (position != (-1)) {\n                let valid = false;\n                const patternLength = patterns[i].length;\n                if (backward) {\n                    if ((position - patternLength) >= (result.position - result.length))\n                        valid = true;\n                }\n                else {\n                    if ((position - patternLength) <= (result.position - result.length))\n                        valid = true;\n                }\n                if (valid) {\n                    result.position = position;\n                    result.id = i;\n                    result.length = patternLength;\n                }\n            }\n        }\n        return result;\n    }\n    findAllIn(patterns, start_, length_) {\n        let { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let patternFound = {\n            id: (-1),\n            position: start\n        };\n        do {\n            const position = patternFound.position;\n            patternFound = this.findFirstIn(patterns, patternFound.position, length);\n            if (patternFound.id == (-1)) {\n                break;\n            }\n            length -= (patternFound.position - position);\n            result.push({\n                id: patternFound.id,\n                position: patternFound.position\n            });\n        } while (true);\n        return result;\n    }\n    findAllPatternIn(pattern, start_, length_) {\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        const patternLength = pattern.length;\n        if (patternLength > length) {\n            return (-1);\n        }\n        const patternArray = Array.from(pattern.view);\n        for (let i = 0; i <= (length - patternLength); i++) {\n            let equal = true;\n            const equalStart = start + i;\n            for (let j = 0; j < patternLength; j++) {\n                if (this.view[j + equalStart] != patternArray[j]) {\n                    equal = false;\n                    break;\n                }\n            }\n            if (equal) {\n                result.push(start + patternLength + i);\n                i += (patternLength - 1);\n            }\n        }\n        return result;\n    }\n    findFirstNotIn(patterns, start_, length_, backward_) {\n        let { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const result = {\n            left: {\n                id: (-1),\n                position: start\n            },\n            right: {\n                id: (-1),\n                position: 0\n            },\n            value: new ByteStream()\n        };\n        let currentLength = length;\n        while (currentLength > 0) {\n            result.right = this.findFirstIn(patterns, (backward) ? (start - length + currentLength) : (start + length - currentLength), currentLength, backward);\n            if (result.right.id == (-1)) {\n                length = currentLength;\n                if (backward) {\n                    start -= length;\n                }\n                else {\n                    start = result.left.position;\n                }\n                result.value = new ByteStream({\n                    buffer: this._buffer.slice(start, start + length),\n                });\n                break;\n            }\n            if (result.right.position != ((backward) ? (result.left.position - patterns[result.right.id].length) : (result.left.position + patterns[result.right.id].length))) {\n                if (backward) {\n                    start = result.right.position + patterns[result.right.id].length;\n                    length = result.left.position - result.right.position - patterns[result.right.id].length;\n                }\n                else {\n                    start = result.left.position;\n                    length = result.right.position - result.left.position - patterns[result.right.id].length;\n                }\n                result.value = new ByteStream({\n                    buffer: this._buffer.slice(start, start + length),\n                });\n                break;\n            }\n            result.left = result.right;\n            currentLength -= patterns[result.right.id].length;\n        }\n        if (backward) {\n            const temp = result.right;\n            result.right = result.left;\n            result.left = temp;\n        }\n        return result;\n    }\n    findAllNotIn(patterns, start_, length_) {\n        let { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let patternFound = {\n            left: {\n                id: (-1),\n                position: start\n            },\n            right: {\n                id: (-1),\n                position: start\n            },\n            value: new ByteStream()\n        };\n        do {\n            const position = patternFound.right.position;\n            patternFound = this.findFirstNotIn(patterns, patternFound.right.position, length);\n            length -= (patternFound.right.position - position);\n            result.push({\n                left: {\n                    id: patternFound.left.id,\n                    position: patternFound.left.position\n                },\n                right: {\n                    id: patternFound.right.id,\n                    position: patternFound.right.position\n                },\n                value: patternFound.value\n            });\n        } while (patternFound.right.id != (-1));\n        return result;\n    }\n    findFirstSequence(patterns, start_, length_, backward_) {\n        let { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const firstIn = this.skipNotPatterns(patterns, start, length, backward);\n        if (firstIn == (-1)) {\n            return {\n                position: (-1),\n                value: new ByteStream()\n            };\n        }\n        const firstNotIn = this.skipPatterns(patterns, firstIn, length - ((backward) ? (start - firstIn) : (firstIn - start)), backward);\n        if (backward) {\n            start = firstNotIn;\n            length = (firstIn - firstNotIn);\n        }\n        else {\n            start = firstIn;\n            length = (firstNotIn - firstIn);\n        }\n        const value = new ByteStream({\n            buffer: this._buffer.slice(start, start + length),\n        });\n        return {\n            position: firstNotIn,\n            value\n        };\n    }\n    findAllSequences(patterns, start_, length_) {\n        let { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let patternFound = {\n            position: start,\n            value: new ByteStream()\n        };\n        do {\n            const position = patternFound.position;\n            patternFound = this.findFirstSequence(patterns, patternFound.position, length);\n            if (patternFound.position != (-1)) {\n                length -= (patternFound.position - position);\n                result.push({\n                    position: patternFound.position,\n                    value: patternFound.value,\n                });\n            }\n        } while (patternFound.position != (-1));\n        return result;\n    }\n    findPairedPatterns(leftPattern, rightPattern, start_, length_) {\n        const result = [];\n        if (leftPattern.isEqual(rightPattern))\n            return result;\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        let currentPositionLeft = 0;\n        const leftPatterns = this.findAllPatternIn(leftPattern, start, length);\n        if (!Array.isArray(leftPatterns) || leftPatterns.length == 0) {\n            return result;\n        }\n        const rightPatterns = this.findAllPatternIn(rightPattern, start, length);\n        if (!Array.isArray(rightPatterns) || rightPatterns.length == 0) {\n            return result;\n        }\n        while (currentPositionLeft < leftPatterns.length) {\n            if (rightPatterns.length == 0) {\n                break;\n            }\n            if (leftPatterns[0] == rightPatterns[0]) {\n                result.push({\n                    left: leftPatterns[0],\n                    right: rightPatterns[0]\n                });\n                leftPatterns.splice(0, 1);\n                rightPatterns.splice(0, 1);\n                continue;\n            }\n            if (leftPatterns[currentPositionLeft] > rightPatterns[0]) {\n                break;\n            }\n            while (leftPatterns[currentPositionLeft] < rightPatterns[0]) {\n                currentPositionLeft++;\n                if (currentPositionLeft >= leftPatterns.length) {\n                    break;\n                }\n            }\n            result.push({\n                left: leftPatterns[currentPositionLeft - 1],\n                right: rightPatterns[0]\n            });\n            leftPatterns.splice(currentPositionLeft - 1, 1);\n            rightPatterns.splice(0, 1);\n            currentPositionLeft = 0;\n        }\n        result.sort((a, b) => (a.left - b.left));\n        return result;\n    }\n    findPairedArrays(inputLeftPatterns, inputRightPatterns, start_, length_) {\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let currentPositionLeft = 0;\n        const leftPatterns = this.findAllIn(inputLeftPatterns, start, length);\n        if (leftPatterns.length == 0)\n            return result;\n        const rightPatterns = this.findAllIn(inputRightPatterns, start, length);\n        if (rightPatterns.length == 0)\n            return result;\n        while (currentPositionLeft < leftPatterns.length) {\n            if (rightPatterns.length == 0) {\n                break;\n            }\n            if (leftPatterns[0].position == rightPatterns[0].position) {\n                result.push({\n                    left: leftPatterns[0],\n                    right: rightPatterns[0]\n                });\n                leftPatterns.splice(0, 1);\n                rightPatterns.splice(0, 1);\n                continue;\n            }\n            if (leftPatterns[currentPositionLeft].position > rightPatterns[0].position) {\n                break;\n            }\n            while (leftPatterns[currentPositionLeft].position < rightPatterns[0].position) {\n                currentPositionLeft++;\n                if (currentPositionLeft >= leftPatterns.length) {\n                    break;\n                }\n            }\n            result.push({\n                left: leftPatterns[currentPositionLeft - 1],\n                right: rightPatterns[0]\n            });\n            leftPatterns.splice(currentPositionLeft - 1, 1);\n            rightPatterns.splice(0, 1);\n            currentPositionLeft = 0;\n        }\n        result.sort((a, b) => (a.left.position - b.left.position));\n        return result;\n    }\n    replacePattern(searchPattern, replacePattern, start_, length_, findAllResult = null) {\n        let result = [];\n        let i;\n        const output = {\n            status: (-1),\n            searchPatternPositions: [],\n            replacePatternPositions: []\n        };\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        if (findAllResult == null) {\n            result = this.findAllIn([searchPattern], start, length);\n            if (result.length == 0) {\n                return output;\n            }\n        }\n        else {\n            result = findAllResult;\n        }\n        output.searchPatternPositions.push(...Array.from(result, element => element.position));\n        const patternDifference = searchPattern.length - replacePattern.length;\n        const changedBuffer = new ArrayBuffer(this.view.length - (result.length * patternDifference));\n        const changedView = new Uint8Array(changedBuffer);\n        changedView.set(new Uint8Array(this.buffer, 0, start));\n        for (i = 0; i < result.length; i++) {\n            const currentPosition = (i == 0) ? start : result[i - 1].position;\n            changedView.set(new Uint8Array(this.buffer, currentPosition, result[i].position - searchPattern.length - currentPosition), currentPosition - i * patternDifference);\n            changedView.set(replacePattern.view, result[i].position - searchPattern.length - i * patternDifference);\n            output.replacePatternPositions.push(result[i].position - searchPattern.length - i * patternDifference);\n        }\n        i--;\n        changedView.set(new Uint8Array(this.buffer, result[i].position, this.length - result[i].position), result[i].position - searchPattern.length + replacePattern.length - i * patternDifference);\n        this.buffer = changedBuffer;\n        this.view = new Uint8Array(this.buffer);\n        output.status = 1;\n        return output;\n    }\n    skipPatterns(patterns, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        let result = start;\n        for (let k = 0; k < patterns.length; k++) {\n            const patternLength = patterns[k].length;\n            const equalStart = (backward) ? (result - patternLength) : (result);\n            let equal = true;\n            for (let j = 0; j < patternLength; j++) {\n                if (this.view[j + equalStart] != patterns[k].view[j]) {\n                    equal = false;\n                    break;\n                }\n            }\n            if (equal) {\n                k = (-1);\n                if (backward) {\n                    result -= patternLength;\n                    if (result <= 0)\n                        return result;\n                }\n                else {\n                    result += patternLength;\n                    if (result >= (start + length))\n                        return result;\n                }\n            }\n        }\n        return result;\n    }\n    skipNotPatterns(patterns, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        let result = (-1);\n        for (let i = 0; i < length; i++) {\n            for (let k = 0; k < patterns.length; k++) {\n                const patternLength = patterns[k].length;\n                const equalStart = (backward) ? (start - i - patternLength) : (start + i);\n                let equal = true;\n                for (let j = 0; j < patternLength; j++) {\n                    if (this.view[j + equalStart] != patterns[k].view[j]) {\n                        equal = false;\n                        break;\n                    }\n                }\n                if (equal) {\n                    result = (backward) ? (start - i) : (start + i);\n                    break;\n                }\n            }\n            if (result != (-1)) {\n                break;\n            }\n        }\n        return result;\n    }\n    prepareFindParameters(start = null, length = null, backward = false) {\n        if (start === null) {\n            start = (backward) ? this.length : 0;\n        }\n        if (start > this.length) {\n            start = this.length;\n        }\n        if (backward) {\n            if (length === null) {\n                length = start;\n            }\n            if (length > start) {\n                length = start;\n            }\n        }\n        else {\n            if (length === null) {\n                length = this.length - start;\n            }\n            if (length > (this.length - start)) {\n                length = this.length - start;\n            }\n        }\n        return { start, length, backward };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/byte_stream.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/helpers.js":
/*!********************************************************!*\
  !*** ./node_modules/bytestreamjs/build/mjs/helpers.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseByteMap: () => (/* binding */ parseByteMap)\n/* harmony export */ });\nfunction parseByteMap(stream, map, elements, start = null, length = null) {\n    if (start === null) {\n        start = 0;\n    }\n    if (start > (stream.length - 1)) {\n        return [];\n    }\n    if (length === null) {\n        length = stream.length - start;\n    }\n    if (length > (stream.length - start)) {\n        length = stream.length - start;\n    }\n    let dataView;\n    if ((start == 0) && (length == stream.length)) {\n        dataView = stream.view;\n    }\n    else {\n        dataView = new Uint8Array(stream.buffer, start, length);\n    }\n    const resultArray = new Array(elements);\n    let elementsCount = 0;\n    let count = 0;\n    const mapLength = map.length;\n    while (count < length) {\n        let structureLength = 0;\n        resultArray[elementsCount] = {};\n        for (let i = 0; i < mapLength; i++) {\n            if (map[i].maxlength == 0) {\n                if (\"defaultValue\" in map[i]) {\n                    (resultArray[elementsCount])[map[i].name] = map[i].defaultValue;\n                }\n                continue;\n            }\n            const array = new Uint8Array(map[i].maxlength);\n            for (let j = 0; j < map[i].maxlength; j++) {\n                array[j] = dataView[count++];\n            }\n            const result = (map[i].func)(array);\n            if (result.status == (-1)) {\n                if (resultArray.length == 1) {\n                    return [];\n                }\n                return resultArray.slice(0, resultArray.length - 1);\n            }\n            if (map[i].type != \"check\") {\n                (resultArray[elementsCount])[map[i].name] = result.value;\n            }\n            count -= (map[i].maxlength - result.length);\n            structureLength += result.length;\n        }\n        (resultArray[elementsCount++]).structureLength = structureLength;\n    }\n    return resultArray;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ieXRlc3RyZWFtanMvYnVpbGQvbWpzL2hlbHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixlQUFlO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHNCQUFzQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0Rlc2t0b3AvYzJwYSB0b29sL25vZGVfbW9kdWxlcy9ieXRlc3RyZWFtanMvYnVpbGQvbWpzL2hlbHBlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQnl0ZU1hcChzdHJlYW0sIG1hcCwgZWxlbWVudHMsIHN0YXJ0ID0gbnVsbCwgbGVuZ3RoID0gbnVsbCkge1xuICAgIGlmIChzdGFydCA9PT0gbnVsbCkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgfVxuICAgIGlmIChzdGFydCA+IChzdHJlYW0ubGVuZ3RoIC0gMSkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBpZiAobGVuZ3RoID09PSBudWxsKSB7XG4gICAgICAgIGxlbmd0aCA9IHN0cmVhbS5sZW5ndGggLSBzdGFydDtcbiAgICB9XG4gICAgaWYgKGxlbmd0aCA+IChzdHJlYW0ubGVuZ3RoIC0gc3RhcnQpKSB7XG4gICAgICAgIGxlbmd0aCA9IHN0cmVhbS5sZW5ndGggLSBzdGFydDtcbiAgICB9XG4gICAgbGV0IGRhdGFWaWV3O1xuICAgIGlmICgoc3RhcnQgPT0gMCkgJiYgKGxlbmd0aCA9PSBzdHJlYW0ubGVuZ3RoKSkge1xuICAgICAgICBkYXRhVmlldyA9IHN0cmVhbS52aWV3O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZGF0YVZpZXcgPSBuZXcgVWludDhBcnJheShzdHJlYW0uYnVmZmVyLCBzdGFydCwgbGVuZ3RoKTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0QXJyYXkgPSBuZXcgQXJyYXkoZWxlbWVudHMpO1xuICAgIGxldCBlbGVtZW50c0NvdW50ID0gMDtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGNvbnN0IG1hcExlbmd0aCA9IG1hcC5sZW5ndGg7XG4gICAgd2hpbGUgKGNvdW50IDwgbGVuZ3RoKSB7XG4gICAgICAgIGxldCBzdHJ1Y3R1cmVMZW5ndGggPSAwO1xuICAgICAgICByZXN1bHRBcnJheVtlbGVtZW50c0NvdW50XSA9IHt9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hcExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAobWFwW2ldLm1heGxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKFwiZGVmYXVsdFZhbHVlXCIgaW4gbWFwW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHRBcnJheVtlbGVtZW50c0NvdW50XSlbbWFwW2ldLm5hbWVdID0gbWFwW2ldLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhcnJheSA9IG5ldyBVaW50OEFycmF5KG1hcFtpXS5tYXhsZW5ndGgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBtYXBbaV0ubWF4bGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBhcnJheVtqXSA9IGRhdGFWaWV3W2NvdW50KytdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gKG1hcFtpXS5mdW5jKShhcnJheSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PSAoLTEpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdEFycmF5Lmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdEFycmF5LnNsaWNlKDAsIHJlc3VsdEFycmF5Lmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hcFtpXS50eXBlICE9IFwiY2hlY2tcIikge1xuICAgICAgICAgICAgICAgIChyZXN1bHRBcnJheVtlbGVtZW50c0NvdW50XSlbbWFwW2ldLm5hbWVdID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY291bnQgLT0gKG1hcFtpXS5tYXhsZW5ndGggLSByZXN1bHQubGVuZ3RoKTtcbiAgICAgICAgICAgIHN0cnVjdHVyZUxlbmd0aCArPSByZXN1bHQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIChyZXN1bHRBcnJheVtlbGVtZW50c0NvdW50KytdKS5zdHJ1Y3R1cmVMZW5ndGggPSBzdHJ1Y3R1cmVMZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRBcnJheTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/helpers.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/index.js":
/*!******************************************************!*\
  !*** ./node_modules/bytestreamjs/build/mjs/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BitStream: () => (/* reexport safe */ _bit_stream__WEBPACK_IMPORTED_MODULE_3__.BitStream),\n/* harmony export */   ByteStream: () => (/* reexport safe */ _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream),\n/* harmony export */   SeqBitStream: () => (/* reexport safe */ _seq_bit_stream__WEBPACK_IMPORTED_MODULE_4__.SeqBitStream),\n/* harmony export */   SeqStream: () => (/* reexport safe */ _seq_stream__WEBPACK_IMPORTED_MODULE_1__.SeqStream),\n/* harmony export */   parseByteMap: () => (/* reexport safe */ _helpers__WEBPACK_IMPORTED_MODULE_2__.parseByteMap)\n/* harmony export */ });\n/* harmony import */ var _byte_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./byte_stream */ \"(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/byte_stream.js\");\n/* harmony import */ var _seq_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./seq_stream */ \"(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/seq_stream.js\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers */ \"(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/helpers.js\");\n/* harmony import */ var _bit_stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bit_stream */ \"(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/bit_stream.js\");\n/* harmony import */ var _seq_bit_stream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./seq_bit_stream */ \"(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/seq_bit_stream.js\");\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ieXRlc3RyZWFtanMvYnVpbGQvbWpzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBOEI7QUFDRDtBQUNIO0FBQ0c7QUFDSSIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0Rlc2t0b3AvYzJwYSB0b29sL25vZGVfbW9kdWxlcy9ieXRlc3RyZWFtanMvYnVpbGQvbWpzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2J5dGVfc3RyZWFtXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zZXFfc3RyZWFtXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9oZWxwZXJzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9iaXRfc3RyZWFtXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zZXFfYml0X3N0cmVhbVwiO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/seq_bit_stream.js":
/*!***************************************************************!*\
  !*** ./node_modules/bytestreamjs/build/mjs/seq_bit_stream.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SeqBitStream: () => (/* binding */ SeqBitStream)\n/* harmony export */ });\n/* harmony import */ var _bit_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bit_stream */ \"(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/bit_stream.js\");\n\nclass SeqBitStream {\n    constructor(parameters = {}) {\n        var _a;\n        this._length = 0;\n        this._start = 0;\n        this.prevLength = 0;\n        this.prevStart = 0;\n        this.stream = ((_a = parameters.stream) === null || _a === void 0 ? void 0 : _a.slice()) || new _bit_stream__WEBPACK_IMPORTED_MODULE_0__.BitStream();\n        this.appendBlock = parameters.appendBlock || 0;\n        if (parameters.start && parameters.start > 0) {\n            this.start = parameters.start;\n        }\n        if (parameters.length && parameters.length > 0) {\n            this.length = parameters.length;\n        }\n        this.backward = parameters.backward || false;\n    }\n    set start(value) {\n        if (value > this.stream.bitsCount) {\n            return;\n        }\n        this._length -= ((this.backward) ? (this._start - value) : (value - this._start));\n        this._start = value;\n        this.prevStart = this._start;\n        this.prevLength = this._length;\n    }\n    get start() {\n        return this._start;\n    }\n    set length(value) {\n        if (value > this.stream.bitsCount) {\n            return;\n        }\n        this.prevLength = this._length;\n        this._length = value;\n    }\n    get length() {\n        return this._length;\n    }\n    set stream(value) {\n        this._stream = value;\n        this.prevLength = this._length;\n        this._length = value.bitsCount;\n        this.prevStart = this._start;\n        this._start = (this.backward) ? this.length : 0;\n    }\n    get stream() {\n        return this._stream;\n    }\n    getBits(length = null) {\n        if (length === null) {\n            length = 0;\n        }\n        else if (length === 0) {\n            return new _bit_stream__WEBPACK_IMPORTED_MODULE_0__.BitStream();\n        }\n        if ((this.start + length) > this.stream.bitsCount) {\n            length = (this.stream.bitsCount - this.start);\n        }\n        let result;\n        if (this.backward) {\n            result = this.stream.copy(this.start - length, length);\n            this.start -= result.bitsCount;\n        }\n        else {\n            result = this.stream.copy(this.start, length);\n            this.start += result.bitsCount;\n        }\n        return result;\n    }\n    getBitsString(length) {\n        return this.getBits(length).toString();\n    }\n    getBitsReversedValue(length) {\n        const initialValue = this.getBitsString(length);\n        const initialValueLength = initialValue.length;\n        let byteIndex;\n        const initialOffset = 8 - (initialValueLength % 8);\n        const reversedValue = new Array(initialValueLength);\n        const value = new Uint32Array(1);\n        const valueView = new Uint8Array(value.buffer, 0, 4);\n        let i;\n        if (initialValueLength > 32) {\n            return (-1);\n        }\n        if (length == 32) {\n            byteIndex = 3;\n        }\n        else {\n            byteIndex = ((initialValueLength - 1) >> 3);\n        }\n        for (i = 0; i < initialValueLength; i++) {\n            reversedValue[initialValueLength - 1 - i] = initialValue[i];\n        }\n        for (i = initialOffset; i < (initialOffset + initialValueLength); i++) {\n            if (reversedValue[i - initialOffset] == \"1\") {\n                valueView[byteIndex] |= 0x01 << (7 - (i % 8));\n            }\n            if (i && (((i + 1) % 8) == 0)) {\n                byteIndex--;\n            }\n        }\n        return value[0];\n    }\n    toString() {\n        const streamToDisplay = this.stream.copy(this.start, this.length);\n        return streamToDisplay.toString();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ieXRlc3RyZWFtanMvYnVpbGQvbWpzL3NlcV9iaXRfc3RyZWFtLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQ2xDO0FBQ1AsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3R0FBd0csa0RBQVM7QUFDakg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsa0RBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHdCQUF3QjtBQUM1QztBQUNBO0FBQ0EsZ0NBQWdDLDBDQUEwQztBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRGVza3RvcC9jMnBhIHRvb2wvbm9kZV9tb2R1bGVzL2J5dGVzdHJlYW1qcy9idWlsZC9tanMvc2VxX2JpdF9zdHJlYW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQml0U3RyZWFtIH0gZnJvbSBcIi4vYml0X3N0cmVhbVwiO1xuZXhwb3J0IGNsYXNzIFNlcUJpdFN0cmVhbSB7XG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycyA9IHt9KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fc3RhcnQgPSAwO1xuICAgICAgICB0aGlzLnByZXZMZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnByZXZTdGFydCA9IDA7XG4gICAgICAgIHRoaXMuc3RyZWFtID0gKChfYSA9IHBhcmFtZXRlcnMuc3RyZWFtKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2xpY2UoKSkgfHwgbmV3IEJpdFN0cmVhbSgpO1xuICAgICAgICB0aGlzLmFwcGVuZEJsb2NrID0gcGFyYW1ldGVycy5hcHBlbmRCbG9jayB8fCAwO1xuICAgICAgICBpZiAocGFyYW1ldGVycy5zdGFydCAmJiBwYXJhbWV0ZXJzLnN0YXJ0ID4gMCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydCA9IHBhcmFtZXRlcnMuc3RhcnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtZXRlcnMubGVuZ3RoICYmIHBhcmFtZXRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5sZW5ndGggPSBwYXJhbWV0ZXJzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJhY2t3YXJkID0gcGFyYW1ldGVycy5iYWNrd2FyZCB8fCBmYWxzZTtcbiAgICB9XG4gICAgc2V0IHN0YXJ0KHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA+IHRoaXMuc3RyZWFtLmJpdHNDb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xlbmd0aCAtPSAoKHRoaXMuYmFja3dhcmQpID8gKHRoaXMuX3N0YXJ0IC0gdmFsdWUpIDogKHZhbHVlIC0gdGhpcy5fc3RhcnQpKTtcbiAgICAgICAgdGhpcy5fc3RhcnQgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5wcmV2U3RhcnQgPSB0aGlzLl9zdGFydDtcbiAgICAgICAgdGhpcy5wcmV2TGVuZ3RoID0gdGhpcy5fbGVuZ3RoO1xuICAgIH1cbiAgICBnZXQgc3RhcnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFydDtcbiAgICB9XG4gICAgc2V0IGxlbmd0aCh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPiB0aGlzLnN0cmVhbS5iaXRzQ291bnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZXZMZW5ndGggPSB0aGlzLl9sZW5ndGg7XG4gICAgICAgIHRoaXMuX2xlbmd0aCA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGVuZ3RoO1xuICAgIH1cbiAgICBzZXQgc3RyZWFtKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3N0cmVhbSA9IHZhbHVlO1xuICAgICAgICB0aGlzLnByZXZMZW5ndGggPSB0aGlzLl9sZW5ndGg7XG4gICAgICAgIHRoaXMuX2xlbmd0aCA9IHZhbHVlLmJpdHNDb3VudDtcbiAgICAgICAgdGhpcy5wcmV2U3RhcnQgPSB0aGlzLl9zdGFydDtcbiAgICAgICAgdGhpcy5fc3RhcnQgPSAodGhpcy5iYWNrd2FyZCkgPyB0aGlzLmxlbmd0aCA6IDA7XG4gICAgfVxuICAgIGdldCBzdHJlYW0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdHJlYW07XG4gICAgfVxuICAgIGdldEJpdHMobGVuZ3RoID0gbnVsbCkge1xuICAgICAgICBpZiAobGVuZ3RoID09PSBudWxsKSB7XG4gICAgICAgICAgICBsZW5ndGggPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBCaXRTdHJlYW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHRoaXMuc3RhcnQgKyBsZW5ndGgpID4gdGhpcy5zdHJlYW0uYml0c0NvdW50KSB7XG4gICAgICAgICAgICBsZW5ndGggPSAodGhpcy5zdHJlYW0uYml0c0NvdW50IC0gdGhpcy5zdGFydCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgaWYgKHRoaXMuYmFja3dhcmQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuc3RyZWFtLmNvcHkodGhpcy5zdGFydCAtIGxlbmd0aCwgbGVuZ3RoKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQgLT0gcmVzdWx0LmJpdHNDb3VudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuc3RyZWFtLmNvcHkodGhpcy5zdGFydCwgbGVuZ3RoKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQgKz0gcmVzdWx0LmJpdHNDb3VudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBnZXRCaXRzU3RyaW5nKGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRCaXRzKGxlbmd0aCkudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgZ2V0Qml0c1JldmVyc2VkVmFsdWUobGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGluaXRpYWxWYWx1ZSA9IHRoaXMuZ2V0Qml0c1N0cmluZyhsZW5ndGgpO1xuICAgICAgICBjb25zdCBpbml0aWFsVmFsdWVMZW5ndGggPSBpbml0aWFsVmFsdWUubGVuZ3RoO1xuICAgICAgICBsZXQgYnl0ZUluZGV4O1xuICAgICAgICBjb25zdCBpbml0aWFsT2Zmc2V0ID0gOCAtIChpbml0aWFsVmFsdWVMZW5ndGggJSA4KTtcbiAgICAgICAgY29uc3QgcmV2ZXJzZWRWYWx1ZSA9IG5ldyBBcnJheShpbml0aWFsVmFsdWVMZW5ndGgpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IG5ldyBVaW50MzJBcnJheSgxKTtcbiAgICAgICAgY29uc3QgdmFsdWVWaWV3ID0gbmV3IFVpbnQ4QXJyYXkodmFsdWUuYnVmZmVyLCAwLCA0KTtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGlmIChpbml0aWFsVmFsdWVMZW5ndGggPiAzMikge1xuICAgICAgICAgICAgcmV0dXJuICgtMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlbmd0aCA9PSAzMikge1xuICAgICAgICAgICAgYnl0ZUluZGV4ID0gMztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVJbmRleCA9ICgoaW5pdGlhbFZhbHVlTGVuZ3RoIC0gMSkgPj4gMyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGluaXRpYWxWYWx1ZUxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXZlcnNlZFZhbHVlW2luaXRpYWxWYWx1ZUxlbmd0aCAtIDEgLSBpXSA9IGluaXRpYWxWYWx1ZVtpXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSBpbml0aWFsT2Zmc2V0OyBpIDwgKGluaXRpYWxPZmZzZXQgKyBpbml0aWFsVmFsdWVMZW5ndGgpOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChyZXZlcnNlZFZhbHVlW2kgLSBpbml0aWFsT2Zmc2V0XSA9PSBcIjFcIikge1xuICAgICAgICAgICAgICAgIHZhbHVlVmlld1tieXRlSW5kZXhdIHw9IDB4MDEgPDwgKDcgLSAoaSAlIDgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpICYmICgoKGkgKyAxKSAlIDgpID09IDApKSB7XG4gICAgICAgICAgICAgICAgYnl0ZUluZGV4LS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlWzBdO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgY29uc3Qgc3RyZWFtVG9EaXNwbGF5ID0gdGhpcy5zdHJlYW0uY29weSh0aGlzLnN0YXJ0LCB0aGlzLmxlbmd0aCk7XG4gICAgICAgIHJldHVybiBzdHJlYW1Ub0Rpc3BsYXkudG9TdHJpbmcoKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/seq_bit_stream.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/seq_stream.js":
/*!***********************************************************!*\
  !*** ./node_modules/bytestreamjs/build/mjs/seq_stream.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SeqStream: () => (/* binding */ SeqStream)\n/* harmony export */ });\n/* harmony import */ var _byte_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./byte_stream */ \"(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/byte_stream.js\");\n\nconst pow2_24 = 16777216;\nclass SeqStream {\n    constructor(parameters = {}) {\n        this._stream = new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream();\n        this._length = 0;\n        this._start = 0;\n        this.backward = false;\n        this.appendBlock = 0;\n        this.prevLength = 0;\n        this.prevStart = 0;\n        if (\"view\" in parameters) {\n            this.stream = new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream({ view: parameters.view });\n        }\n        else if (\"buffer\" in parameters) {\n            this.stream = new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream({ buffer: parameters.buffer });\n        }\n        else if (\"string\" in parameters) {\n            this.stream = new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream({ string: parameters.string });\n        }\n        else if (\"hexstring\" in parameters) {\n            this.stream = new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream({ hexstring: parameters.hexstring });\n        }\n        else if (\"stream\" in parameters) {\n            this.stream = parameters.stream.slice();\n        }\n        else {\n            this.stream = new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream();\n        }\n        if (\"backward\" in parameters && parameters.backward) {\n            this.backward = parameters.backward;\n            this._start = this.stream.length;\n        }\n        if (\"length\" in parameters && parameters.length > 0) {\n            this._length = parameters.length;\n        }\n        if (\"start\" in parameters && parameters.start && parameters.start > 0) {\n            this._start = parameters.start;\n        }\n        if (\"appendBlock\" in parameters && parameters.appendBlock && parameters.appendBlock > 0) {\n            this.appendBlock = parameters.appendBlock;\n        }\n    }\n    set stream(value) {\n        this._stream = value;\n        this.prevLength = this._length;\n        this._length = value.length;\n        this.prevStart = this._start;\n        this._start = 0;\n    }\n    get stream() {\n        return this._stream;\n    }\n    set length(value) {\n        this.prevLength = this._length;\n        this._length = value;\n    }\n    get length() {\n        if (this.appendBlock) {\n            return this.start;\n        }\n        return this._length;\n    }\n    set start(value) {\n        if (value > this.stream.length)\n            return;\n        this.prevStart = this._start;\n        this.prevLength = this._length;\n        this._length -= (this.backward) ? (this._start - value) : (value - this._start);\n        this._start = value;\n    }\n    get start() {\n        return this._start;\n    }\n    get buffer() {\n        return this._stream.buffer.slice(0, this._length);\n    }\n    resetPosition() {\n        this._start = this.prevStart;\n        this._length = this.prevLength;\n    }\n    findPattern(pattern, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const result = this.stream.findPattern(pattern, this.start, this.length, this.backward);\n        if (result == (-1))\n            return result;\n        if (this.backward) {\n            if (result < (this.start - pattern.length - gap)) {\n                return (-1);\n            }\n        }\n        else {\n            if (result > (this.start + pattern.length + gap)) {\n                return (-1);\n            }\n        }\n        this.start = result;\n        return result;\n    }\n    findFirstIn(patterns, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const result = this.stream.findFirstIn(patterns, this.start, this.length, this.backward);\n        if (result.id == (-1))\n            return result;\n        if (this.backward) {\n            if (result.position < (this.start - patterns[result.id].length - gap)) {\n                return {\n                    id: (-1),\n                    position: (this.backward) ? 0 : (this.start + this.length)\n                };\n            }\n        }\n        else {\n            if (result.position > (this.start + patterns[result.id].length + gap)) {\n                return {\n                    id: (-1),\n                    position: (this.backward) ? 0 : (this.start + this.length)\n                };\n            }\n        }\n        this.start = result.position;\n        return result;\n    }\n    findAllIn(patterns) {\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        return this.stream.findAllIn(patterns, start, this.length);\n    }\n    findFirstNotIn(patterns, gap = null) {\n        if ((gap == null) || (gap > this._length)) {\n            gap = this._length;\n        }\n        const result = this._stream.findFirstNotIn(patterns, this._start, this._length, this.backward);\n        if ((result.left.id == (-1)) && (result.right.id == (-1))) {\n            return result;\n        }\n        if (this.backward) {\n            if (result.right.id != (-1)) {\n                if (result.right.position < (this._start - patterns[result.right.id].length - gap)) {\n                    return {\n                        left: {\n                            id: (-1),\n                            position: this._start\n                        },\n                        right: {\n                            id: (-1),\n                            position: 0\n                        },\n                        value: new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream()\n                    };\n                }\n            }\n        }\n        else {\n            if (result.left.id != (-1)) {\n                if (result.left.position > (this._start + patterns[result.left.id].length + gap)) {\n                    return {\n                        left: {\n                            id: (-1),\n                            position: this._start\n                        },\n                        right: {\n                            id: (-1),\n                            position: 0\n                        },\n                        value: new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream()\n                    };\n                }\n            }\n        }\n        if (this.backward) {\n            if (result.left.id == (-1)) {\n                this.start = 0;\n            }\n            else {\n                this.start = result.left.position;\n            }\n        }\n        else {\n            if (result.right.id == (-1)) {\n                this.start = (this._start + this._length);\n            }\n            else {\n                this.start = result.right.position;\n            }\n        }\n        return result;\n    }\n    findAllNotIn(patterns) {\n        const start = (this.backward) ? (this._start - this._length) : this._start;\n        return this._stream.findAllNotIn(patterns, start, this._length);\n    }\n    findFirstSequence(patterns, length = null, gap = null) {\n        if ((length == null) || (length > this._length)) {\n            length = this._length;\n        }\n        if ((gap == null) || (gap > length)) {\n            gap = length;\n        }\n        const result = this._stream.findFirstSequence(patterns, this._start, length, this.backward);\n        if (result.value.length == 0) {\n            return result;\n        }\n        if (this.backward) {\n            if (result.position < (this._start - result.value.length - gap)) {\n                return {\n                    position: (-1),\n                    value: new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream()\n                };\n            }\n        }\n        else {\n            if (result.position > (this._start + result.value.length + gap)) {\n                return {\n                    position: (-1),\n                    value: new _byte_stream__WEBPACK_IMPORTED_MODULE_0__.ByteStream()\n                };\n            }\n        }\n        this.start = result.position;\n        return result;\n    }\n    findAllSequences(patterns) {\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        return this.stream.findAllSequences(patterns, start, this.length);\n    }\n    findPairedPatterns(leftPattern, rightPattern, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        const result = this.stream.findPairedPatterns(leftPattern, rightPattern, start, this.length);\n        if (result.length) {\n            if (this.backward) {\n                if (result[0].right < (this.start - rightPattern.length - gap)) {\n                    return [];\n                }\n            }\n            else {\n                if (result[0].left > (this.start + leftPattern.length + gap)) {\n                    return [];\n                }\n            }\n        }\n        return result;\n    }\n    findPairedArrays(leftPatterns, rightPatterns, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        const result = this.stream.findPairedArrays(leftPatterns, rightPatterns, start, this.length);\n        if (result.length) {\n            if (this.backward) {\n                if (result[0].right.position < (this.start - rightPatterns[result[0].right.id].length - gap)) {\n                    return [];\n                }\n            }\n            else {\n                if (result[0].left.position > (this.start + leftPatterns[result[0].left.id].length + gap)) {\n                    return [];\n                }\n            }\n        }\n        return result;\n    }\n    replacePattern(searchPattern, replacePattern) {\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        return this.stream.replacePattern(searchPattern, replacePattern, start, this.length);\n    }\n    skipPatterns(patterns) {\n        const result = this.stream.skipPatterns(patterns, this.start, this.length, this.backward);\n        this.start = result;\n        return result;\n    }\n    skipNotPatterns(patterns) {\n        const result = this.stream.skipNotPatterns(patterns, this.start, this.length, this.backward);\n        if (result == (-1))\n            return (-1);\n        this.start = result;\n        return result;\n    }\n    append(stream) {\n        this.beforeAppend(stream.length);\n        this._stream.view.set(stream.view, this._start);\n        this._length += (stream.length * 2);\n        this.start = (this._start + stream.length);\n        this.prevLength -= (stream.length * 2);\n    }\n    appendView(view) {\n        this.beforeAppend(view.length);\n        this._stream.view.set(view, this._start);\n        this._length += (view.length * 2);\n        this.start = (this._start + view.length);\n        this.prevLength -= (view.length * 2);\n    }\n    appendChar(char) {\n        this.beforeAppend(1);\n        this._stream.view[this._start] = char;\n        this._length += 2;\n        this.start = (this._start + 1);\n        this.prevLength -= 2;\n    }\n    appendUint16(number) {\n        this.beforeAppend(2);\n        const value = new Uint16Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this.stream.view[this._start] = view[1];\n        this._stream.view[this._start + 1] = view[0];\n        this._length += 4;\n        this.start = this._start + 2;\n        this.prevLength -= 4;\n    }\n    appendUint24(number) {\n        this.beforeAppend(3);\n        const value = new Uint32Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[2];\n        this._stream.view[this._start + 1] = view[1];\n        this._stream.view[this._start + 2] = view[0];\n        this._length += 6;\n        this.start = (this._start + 3);\n        this.prevLength -= 6;\n    }\n    appendUint32(number) {\n        this.beforeAppend(4);\n        const value = new Uint32Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[3];\n        this._stream.view[this._start + 1] = view[2];\n        this._stream.view[this._start + 2] = view[1];\n        this._stream.view[this._start + 3] = view[0];\n        this._length += 8;\n        this.start = (this._start + 4);\n        this.prevLength -= 8;\n    }\n    appendInt16(number) {\n        this.beforeAppend(2);\n        const value = new Int16Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[1];\n        this._stream.view[this._start + 1] = view[0];\n        this._length += 4;\n        this.start = (this._start + 2);\n        this.prevLength -= 4;\n    }\n    appendInt32(number) {\n        this.beforeAppend(4);\n        const value = new Int32Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[3];\n        this._stream.view[this._start + 1] = view[2];\n        this._stream.view[this._start + 2] = view[1];\n        this._stream.view[this._start + 3] = view[0];\n        this._length += 8;\n        this.start = (this._start + 4);\n        this.prevLength -= 8;\n    }\n    getBlock(size, changeLength = true) {\n        if (this._length <= 0) {\n            return new Uint8Array(0);\n        }\n        if (this._length < size) {\n            size = this._length;\n        }\n        let result;\n        if (this.backward) {\n            const view = this._stream.view.subarray(this._length - size, this._length);\n            result = new Uint8Array(size);\n            for (let i = 0; i < size; i++) {\n                result[size - 1 - i] = view[i];\n            }\n        }\n        else {\n            result = this._stream.view.subarray(this._start, this._start + size);\n        }\n        if (changeLength) {\n            this.start += ((this.backward) ? ((-1) * size) : size);\n        }\n        return result;\n    }\n    getUint16(changeLength = true) {\n        const block = this.getBlock(2, changeLength);\n        if (block.length < 2)\n            return 0;\n        return (block[0] << 8) | block[1];\n    }\n    getInt16(changeLength = true) {\n        const num = this.getUint16(changeLength);\n        const negative = 0x8000;\n        if (num & negative) {\n            return -(negative - (num ^ negative));\n        }\n        return num;\n    }\n    getUint24(changeLength = true) {\n        const block = this.getBlock(4, changeLength);\n        if (block.length < 3)\n            return 0;\n        return (block[0] << 16) |\n            (block[1] << 8) |\n            block[2];\n    }\n    getUint32(changeLength = true) {\n        const block = this.getBlock(4, changeLength);\n        if (block.length < 4)\n            return 0;\n        return (block[0] * pow2_24) +\n            (block[1] << 16) +\n            (block[2] << 8) +\n            block[3];\n    }\n    getInt32(changeLength = true) {\n        const num = this.getUint32(changeLength);\n        const negative = 0x80000000;\n        if (num & negative) {\n            return -(negative - (num ^ negative));\n        }\n        return num;\n    }\n    beforeAppend(size) {\n        if ((this._start + size) > this._stream.length) {\n            if (size > this.appendBlock) {\n                this.appendBlock = size + SeqStream.APPEND_BLOCK;\n            }\n            this._stream.realloc(this._stream.length + this.appendBlock);\n        }\n    }\n}\nSeqStream.APPEND_BLOCK = 1000;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/seq_stream.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/goober/dist/goober.modern.js":
/*!***************************************************!*\
  !*** ./node_modules/goober/dist/goober.modern.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   css: () => (/* binding */ u),\n/* harmony export */   extractCss: () => (/* binding */ r),\n/* harmony export */   glob: () => (/* binding */ b),\n/* harmony export */   keyframes: () => (/* binding */ h),\n/* harmony export */   setup: () => (/* binding */ m),\n/* harmony export */   styled: () => (/* binding */ w)\n/* harmony export */ });\nlet e={data:\"\"},t=t=>{if(\"object\"==typeof window){let e=(t?t.querySelector(\"#_goober\"):window._goober)||Object.assign(document.createElement(\"style\"),{innerHTML:\" \",id:\"_goober\"});return e.nonce=window.__nonce__,e.parentNode||(t||document.head).appendChild(e),e.firstChild}return t||e},r=e=>{let r=t(e),l=r.data;return r.data=\"\",l},l=/(?:([\\u0080-\\uFFFF\\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\\s*)/g,a=/\\/\\*[^]*?\\*\\/|  +/g,n=/\\n+/g,o=(e,t)=>{let r=\"\",l=\"\",a=\"\";for(let n in e){let c=e[n];\"@\"==n[0]?\"i\"==n[1]?r=n+\" \"+c+\";\":l+=\"f\"==n[1]?o(c,n):n+\"{\"+o(c,\"k\"==n[1]?\"\":t)+\"}\":\"object\"==typeof c?l+=o(c,t?t.replace(/([^,])+/g,e=>n.replace(/([^,]*:\\S+\\([^)]*\\))|([^,])+/g,t=>/&/.test(t)?t.replace(/&/g,e):e?e+\" \"+t:t)):n):null!=c&&(n=/^--/.test(n)?n:n.replace(/[A-Z]/g,\"-$&\").toLowerCase(),a+=o.p?o.p(n,c):n+\":\"+c+\";\")}return r+(t&&a?t+\"{\"+a+\"}\":a)+l},c={},s=e=>{if(\"object\"==typeof e){let t=\"\";for(let r in e)t+=r+s(e[r]);return t}return e},i=(e,t,r,i,p)=>{let u=s(e),d=c[u]||(c[u]=(e=>{let t=0,r=11;for(;t<e.length;)r=101*r+e.charCodeAt(t++)>>>0;return\"go\"+r})(u));if(!c[d]){let t=u!==e?e:(e=>{let t,r,o=[{}];for(;t=l.exec(e.replace(a,\"\"));)t[4]?o.shift():t[3]?(r=t[3].replace(n,\" \").trim(),o.unshift(o[0][r]=o[0][r]||{})):o[0][t[1]]=t[2].replace(n,\" \").trim();return o[0]})(e);c[d]=o(p?{[\"@keyframes \"+d]:t}:t,r?\"\":\".\"+d)}let f=r&&c.g?c.g:null;return r&&(c.g=c[d]),((e,t,r,l)=>{l?t.data=t.data.replace(l,e):-1===t.data.indexOf(e)&&(t.data=r?e+t.data:t.data+e)})(c[d],t,i,f),d},p=(e,t,r)=>e.reduce((e,l,a)=>{let n=t[a];if(n&&n.call){let e=n(r),t=e&&e.props&&e.props.className||/^go/.test(e)&&e;n=t?\".\"+t:e&&\"object\"==typeof e?e.props?\"\":o(e,\"\"):!1===e?\"\":e}return e+l+(null==n?\"\":n)},\"\");function u(e){let r=this||{},l=e.call?e(r.p):e;return i(l.unshift?l.raw?p(l,[].slice.call(arguments,1),r.p):l.reduce((e,t)=>Object.assign(e,t&&t.call?t(r.p):t),{}):l,t(r.target),r.g,r.o,r.k)}let d,f,g,b=u.bind({g:1}),h=u.bind({k:1});function m(e,t,r,l){o.p=t,d=e,f=r,g=l}function w(e,t){let r=this||{};return function(){let l=arguments;function a(n,o){let c=Object.assign({},n),s=c.className||a.className;r.p=Object.assign({theme:f&&f()},c),r.o=/ *go\\d+/.test(s),c.className=u.apply(r,l)+(s?\" \"+s:\"\"),t&&(c.ref=o);let i=e;return e[0]&&(i=c.as||e,delete c.as),g&&i[0]&&g(c),d(i,c)}return t?t(a):a}}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9nb29iZXIvZGlzdC9nb29iZXIubW9kZXJuLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU8sUUFBUSxPQUFPLDRCQUE0QixxR0FBcUcsMkJBQTJCLEVBQUUsNkZBQTZGLFlBQVksT0FBTyxvQkFBb0IsbUJBQW1CLHlDQUF5QyxLQUFLLE9BQU8sT0FBTyxJQUFJLGlEQUFpRCxtQkFBbUIsZ0JBQWdCLFdBQVcsZ0NBQWdDLDBCQUEwQix3QkFBd0IsZ1BBQWdQLEdBQUcsbUJBQW1CLE1BQU0sT0FBTyxLQUFLLE9BQU8sdUJBQXVCLFNBQVMsNEJBQTRCLFNBQVMsU0FBUyxpQkFBaUIsOEJBQThCLGFBQWEsS0FBSyxXQUFXLCtCQUErQixhQUFhLE1BQU0sVUFBVSxtQkFBbUIsYUFBYSxFQUFFLEtBQUssMEJBQTBCLGdGQUFnRix5Q0FBeUMsWUFBWSxLQUFLLFVBQVUsb0JBQW9CLGVBQWUsc0JBQXNCLGtDQUFrQyxrRkFBa0YsZ0JBQWdCLCtCQUErQixXQUFXLGNBQWMsNkRBQTZELCtEQUErRCwwQkFBMEIsS0FBSyxjQUFjLGNBQWMsbUJBQW1CLG1IQUFtSCw2QkFBNkIsb0JBQW9CLElBQUksWUFBWSxJQUFJLEVBQUUsb0JBQW9CLGtCQUFrQixnQkFBZ0IsZUFBZSxrQkFBa0IsZ0JBQWdCLGdCQUFnQixzQkFBc0IsK0JBQStCLG1CQUFtQixhQUFhLDZFQUE2RSxRQUFRLDBEQUEwRCxpQkFBa0ciLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9EZXNrdG9wL2MycGEgdG9vbC9ub2RlX21vZHVsZXMvZ29vYmVyL2Rpc3QvZ29vYmVyLm1vZGVybi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgZT17ZGF0YTpcIlwifSx0PXQ9PntpZihcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93KXtsZXQgZT0odD90LnF1ZXJ5U2VsZWN0b3IoXCIjX2dvb2JlclwiKTp3aW5kb3cuX2dvb2Jlcil8fE9iamVjdC5hc3NpZ24oZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLHtpbm5lckhUTUw6XCIgXCIsaWQ6XCJfZ29vYmVyXCJ9KTtyZXR1cm4gZS5ub25jZT13aW5kb3cuX19ub25jZV9fLGUucGFyZW50Tm9kZXx8KHR8fGRvY3VtZW50LmhlYWQpLmFwcGVuZENoaWxkKGUpLGUuZmlyc3RDaGlsZH1yZXR1cm4gdHx8ZX0scj1lPT57bGV0IHI9dChlKSxsPXIuZGF0YTtyZXR1cm4gci5kYXRhPVwiXCIsbH0sbD0vKD86KFtcXHUwMDgwLVxcdUZGRkZcXHctJUBdKykgKjo/ICooW157O10rPyk7fChbXjt9e10qPykgKnspfCh9XFxzKikvZyxhPS9cXC9cXCpbXl0qP1xcKlxcL3wgICsvZyxuPS9cXG4rL2csbz0oZSx0KT0+e2xldCByPVwiXCIsbD1cIlwiLGE9XCJcIjtmb3IobGV0IG4gaW4gZSl7bGV0IGM9ZVtuXTtcIkBcIj09blswXT9cImlcIj09blsxXT9yPW4rXCIgXCIrYytcIjtcIjpsKz1cImZcIj09blsxXT9vKGMsbik6bitcIntcIitvKGMsXCJrXCI9PW5bMV0/XCJcIjp0KStcIn1cIjpcIm9iamVjdFwiPT10eXBlb2YgYz9sKz1vKGMsdD90LnJlcGxhY2UoLyhbXixdKSsvZyxlPT5uLnJlcGxhY2UoLyhbXixdKjpcXFMrXFwoW14pXSpcXCkpfChbXixdKSsvZyx0PT4vJi8udGVzdCh0KT90LnJlcGxhY2UoLyYvZyxlKTplP2UrXCIgXCIrdDp0KSk6bik6bnVsbCE9YyYmKG49L14tLS8udGVzdChuKT9uOm4ucmVwbGFjZSgvW0EtWl0vZyxcIi0kJlwiKS50b0xvd2VyQ2FzZSgpLGErPW8ucD9vLnAobixjKTpuK1wiOlwiK2MrXCI7XCIpfXJldHVybiByKyh0JiZhP3QrXCJ7XCIrYStcIn1cIjphKStsfSxjPXt9LHM9ZT0+e2lmKFwib2JqZWN0XCI9PXR5cGVvZiBlKXtsZXQgdD1cIlwiO2ZvcihsZXQgciBpbiBlKXQrPXIrcyhlW3JdKTtyZXR1cm4gdH1yZXR1cm4gZX0saT0oZSx0LHIsaSxwKT0+e2xldCB1PXMoZSksZD1jW3VdfHwoY1t1XT0oZT0+e2xldCB0PTAscj0xMTtmb3IoO3Q8ZS5sZW5ndGg7KXI9MTAxKnIrZS5jaGFyQ29kZUF0KHQrKyk+Pj4wO3JldHVyblwiZ29cIityfSkodSkpO2lmKCFjW2RdKXtsZXQgdD11IT09ZT9lOihlPT57bGV0IHQscixvPVt7fV07Zm9yKDt0PWwuZXhlYyhlLnJlcGxhY2UoYSxcIlwiKSk7KXRbNF0/by5zaGlmdCgpOnRbM10/KHI9dFszXS5yZXBsYWNlKG4sXCIgXCIpLnRyaW0oKSxvLnVuc2hpZnQob1swXVtyXT1vWzBdW3JdfHx7fSkpOm9bMF1bdFsxXV09dFsyXS5yZXBsYWNlKG4sXCIgXCIpLnRyaW0oKTtyZXR1cm4gb1swXX0pKGUpO2NbZF09byhwP3tbXCJAa2V5ZnJhbWVzIFwiK2RdOnR9OnQscj9cIlwiOlwiLlwiK2QpfWxldCBmPXImJmMuZz9jLmc6bnVsbDtyZXR1cm4gciYmKGMuZz1jW2RdKSwoKGUsdCxyLGwpPT57bD90LmRhdGE9dC5kYXRhLnJlcGxhY2UobCxlKTotMT09PXQuZGF0YS5pbmRleE9mKGUpJiYodC5kYXRhPXI/ZSt0LmRhdGE6dC5kYXRhK2UpfSkoY1tkXSx0LGksZiksZH0scD0oZSx0LHIpPT5lLnJlZHVjZSgoZSxsLGEpPT57bGV0IG49dFthXTtpZihuJiZuLmNhbGwpe2xldCBlPW4ociksdD1lJiZlLnByb3BzJiZlLnByb3BzLmNsYXNzTmFtZXx8L15nby8udGVzdChlKSYmZTtuPXQ/XCIuXCIrdDplJiZcIm9iamVjdFwiPT10eXBlb2YgZT9lLnByb3BzP1wiXCI6byhlLFwiXCIpOiExPT09ZT9cIlwiOmV9cmV0dXJuIGUrbCsobnVsbD09bj9cIlwiOm4pfSxcIlwiKTtmdW5jdGlvbiB1KGUpe2xldCByPXRoaXN8fHt9LGw9ZS5jYWxsP2Uoci5wKTplO3JldHVybiBpKGwudW5zaGlmdD9sLnJhdz9wKGwsW10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSksci5wKTpsLnJlZHVjZSgoZSx0KT0+T2JqZWN0LmFzc2lnbihlLHQmJnQuY2FsbD90KHIucCk6dCkse30pOmwsdChyLnRhcmdldCksci5nLHIubyxyLmspfWxldCBkLGYsZyxiPXUuYmluZCh7ZzoxfSksaD11LmJpbmQoe2s6MX0pO2Z1bmN0aW9uIG0oZSx0LHIsbCl7by5wPXQsZD1lLGY9cixnPWx9ZnVuY3Rpb24gdyhlLHQpe2xldCByPXRoaXN8fHt9O3JldHVybiBmdW5jdGlvbigpe2xldCBsPWFyZ3VtZW50cztmdW5jdGlvbiBhKG4sbyl7bGV0IGM9T2JqZWN0LmFzc2lnbih7fSxuKSxzPWMuY2xhc3NOYW1lfHxhLmNsYXNzTmFtZTtyLnA9T2JqZWN0LmFzc2lnbih7dGhlbWU6ZiYmZigpfSxjKSxyLm89LyAqZ29cXGQrLy50ZXN0KHMpLGMuY2xhc3NOYW1lPXUuYXBwbHkocixsKSsocz9cIiBcIitzOlwiXCIpLHQmJihjLnJlZj1vKTtsZXQgaT1lO3JldHVybiBlWzBdJiYoaT1jLmFzfHxlLGRlbGV0ZSBjLmFzKSxnJiZpWzBdJiZnKGMpLGQoaSxjKX1yZXR1cm4gdD90KGEpOmF9fWV4cG9ydHt1IGFzIGNzcyxyIGFzIGV4dHJhY3RDc3MsYiBhcyBnbG9iLGggYXMga2V5ZnJhbWVzLG0gYXMgc2V0dXAsdyBhcyBzdHlsZWR9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/goober/dist/goober.modern.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/api/image.js":
/*!*********************************************!*\
  !*** ./node_modules/next/dist/api/image.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport default from dynamic */ _shared_lib_image_external__WEBPACK_IMPORTED_MODULE_0___default.a)\n/* harmony export */ });\n/* harmony import */ var _shared_lib_image_external__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/lib/image-external */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/image-external.js\");\n/* harmony import */ var _shared_lib_image_external__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_shared_lib_image_external__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _shared_lib_image_external__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _shared_lib_image_external__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n//# sourceMappingURL=image.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYXBpL2ltYWdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUF1RDtBQUNWOztBQUU3QyIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0Rlc2t0b3AvYzJwYSB0b29sL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYXBpL2ltYWdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuLi9zaGFyZWQvbGliL2ltYWdlLWV4dGVybmFsJztcbmV4cG9ydCAqIGZyb20gJy4uL3NoYXJlZC9saWIvaW1hZ2UtZXh0ZXJuYWwnO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbWFnZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/api/image.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fjeremiah%2FDesktop%2Fc2pa%20tool%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!":
/*!*****************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fjeremiah%2FDesktop%2Fc2pa%20tool%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false! ***!
  \*****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/page.tsx */ \"(app-pages-browser)/./app/page.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGVXNlcnMlMkZqZXJlbWlhaCUyRkRlc2t0b3AlMkZjMnBhJTIwdG9vbCUyRmFwcCUyRnBhZ2UudHN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEsc0pBQW1GIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvamVyZW1pYWgvRGVza3RvcC9jMnBhIHRvb2wvYXBwL3BhZ2UudHN4XCIpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fjeremiah%2FDesktop%2Fc2pa%20tool%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/image-component.js":
/*!**********************************************************!*\
  !*** ./node_modules/next/dist/client/image-component.js ***!
  \**********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/* __next_internal_client_entry_do_not_use__  cjs */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"Image\", ({\n    enumerable: true,\n    get: function() {\n        return Image;\n    }\n}));\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_wildcard.js\");\nconst _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\nconst _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nconst _reactdom = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\"));\nconst _head = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../shared/lib/head */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/head.js\"));\nconst _getimgprops = __webpack_require__(/*! ../shared/lib/get-img-props */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/get-img-props.js\");\nconst _imageconfig = __webpack_require__(/*! ../shared/lib/image-config */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/image-config.js\");\nconst _imageconfigcontextsharedruntime = __webpack_require__(/*! ../shared/lib/image-config-context.shared-runtime */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/image-config-context.shared-runtime.js\");\nconst _warnonce = __webpack_require__(/*! ../shared/lib/utils/warn-once */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/utils/warn-once.js\");\nconst _routercontextsharedruntime = __webpack_require__(/*! ../shared/lib/router-context.shared-runtime */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router-context.shared-runtime.js\");\nconst _imageloader = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! next/dist/shared/lib/image-loader */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/image-loader.js\"));\nconst _usemergedref = __webpack_require__(/*! ./use-merged-ref */ \"(app-pages-browser)/./node_modules/next/dist/client/use-merged-ref.js\");\n// This is replaced by webpack define plugin\nconst configEnv = {\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"dangerouslyAllowSVG\":false,\"unoptimized\":false,\"domains\":[],\"remotePatterns\":[]};\nif (false) {}\n// See https://stackoverflow.com/q/39777833/266535 for why we use this ref\n// handler instead of the img's onLoad attribute.\nfunction handleLoading(img, placeholder, onLoadRef, onLoadingCompleteRef, setBlurComplete, unoptimized, sizesInput) {\n    const src = img == null ? void 0 : img.src;\n    if (!img || img['data-loaded-src'] === src) {\n        return;\n    }\n    img['data-loaded-src'] = src;\n    const p = 'decode' in img ? img.decode() : Promise.resolve();\n    p.catch(()=>{}).then(()=>{\n        if (!img.parentElement || !img.isConnected) {\n            // Exit early in case of race condition:\n            // - onload() is called\n            // - decode() is called but incomplete\n            // - unmount is called\n            // - decode() completes\n            return;\n        }\n        if (placeholder !== 'empty') {\n            setBlurComplete(true);\n        }\n        if (onLoadRef == null ? void 0 : onLoadRef.current) {\n            // Since we don't have the SyntheticEvent here,\n            // we must create one with the same shape.\n            // See https://reactjs.org/docs/events.html\n            const event = new Event('load');\n            Object.defineProperty(event, 'target', {\n                writable: false,\n                value: img\n            });\n            let prevented = false;\n            let stopped = false;\n            onLoadRef.current({\n                ...event,\n                nativeEvent: event,\n                currentTarget: img,\n                target: img,\n                isDefaultPrevented: ()=>prevented,\n                isPropagationStopped: ()=>stopped,\n                persist: ()=>{},\n                preventDefault: ()=>{\n                    prevented = true;\n                    event.preventDefault();\n                },\n                stopPropagation: ()=>{\n                    stopped = true;\n                    event.stopPropagation();\n                }\n            });\n        }\n        if (onLoadingCompleteRef == null ? void 0 : onLoadingCompleteRef.current) {\n            onLoadingCompleteRef.current(img);\n        }\n        if (true) {\n            const origSrc = new URL(src, 'http://n').searchParams.get('url') || src;\n            if (img.getAttribute('data-nimg') === 'fill') {\n                if (!unoptimized && (!sizesInput || sizesInput === '100vw')) {\n                    let widthViewportRatio = img.getBoundingClientRect().width / window.innerWidth;\n                    if (widthViewportRatio < 0.6) {\n                        if (sizesInput === '100vw') {\n                            (0, _warnonce.warnOnce)('Image with src \"' + origSrc + '\" has \"fill\" prop and \"sizes\" prop of \"100vw\", but image is not rendered at full viewport width. Please adjust \"sizes\" to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes');\n                        } else {\n                            (0, _warnonce.warnOnce)('Image with src \"' + origSrc + '\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes');\n                        }\n                    }\n                }\n                if (img.parentElement) {\n                    const { position } = window.getComputedStyle(img.parentElement);\n                    const valid = [\n                        'absolute',\n                        'fixed',\n                        'relative'\n                    ];\n                    if (!valid.includes(position)) {\n                        (0, _warnonce.warnOnce)('Image with src \"' + origSrc + '\" has \"fill\" and parent element with invalid \"position\". Provided \"' + position + '\" should be one of ' + valid.map(String).join(',') + \".\");\n                    }\n                }\n                if (img.height === 0) {\n                    (0, _warnonce.warnOnce)('Image with src \"' + origSrc + '\" has \"fill\" and a height value of 0. This is likely because the parent element of the image has not been styled to have a set height.');\n                }\n            }\n            const heightModified = img.height.toString() !== img.getAttribute('height');\n            const widthModified = img.width.toString() !== img.getAttribute('width');\n            if (heightModified && !widthModified || !heightModified && widthModified) {\n                (0, _warnonce.warnOnce)('Image with src \"' + origSrc + '\" has either width or height modified, but not the other. If you use CSS to change the size of your image, also include the styles \\'width: \"auto\"\\' or \\'height: \"auto\"\\' to maintain the aspect ratio.');\n            }\n        }\n    });\n}\nfunction getDynamicProps(fetchPriority) {\n    if (Boolean(_react.use)) {\n        // In React 19.0.0 or newer, we must use camelCase\n        // prop to avoid \"Warning: Invalid DOM property\".\n        // See https://github.com/facebook/react/pull/25927\n        return {\n            fetchPriority\n        };\n    }\n    // In React 18.2.0 or older, we must use lowercase prop\n    // to avoid \"Warning: Invalid DOM property\".\n    return {\n        fetchpriority: fetchPriority\n    };\n}\nconst ImageElement = /*#__PURE__*/ (0, _react.forwardRef)((param, forwardedRef)=>{\n    let { src, srcSet, sizes, height, width, decoding, className, style, fetchPriority, placeholder, loading, unoptimized, fill, onLoadRef, onLoadingCompleteRef, setBlurComplete, setShowAltText, sizesInput, onLoad, onError, ...rest } = param;\n    const ownRef = (0, _react.useCallback)((img)=>{\n        if (!img) {\n            return;\n        }\n        if (onError) {\n            // If the image has an error before react hydrates, then the error is lost.\n            // The workaround is to wait until the image is mounted which is after hydration,\n            // then we set the src again to trigger the error handler (if there was an error).\n            // eslint-disable-next-line no-self-assign\n            img.src = img.src;\n        }\n        if (true) {\n            if (!src) {\n                console.error('Image is missing required \"src\" property:', img);\n            }\n            if (img.getAttribute('alt') === null) {\n                console.error('Image is missing required \"alt\" property. Please add Alternative Text to describe the image for screen readers and search engines.');\n            }\n        }\n        if (img.complete) {\n            handleLoading(img, placeholder, onLoadRef, onLoadingCompleteRef, setBlurComplete, unoptimized, sizesInput);\n        }\n    }, [\n        src,\n        placeholder,\n        onLoadRef,\n        onLoadingCompleteRef,\n        setBlurComplete,\n        onError,\n        unoptimized,\n        sizesInput\n    ]);\n    const ref = (0, _usemergedref.useMergedRef)(forwardedRef, ownRef);\n    return /*#__PURE__*/ (0, _jsxruntime.jsx)(\"img\", {\n        ...rest,\n        ...getDynamicProps(fetchPriority),\n        // It's intended to keep `loading` before `src` because React updates\n        // props in order which causes Safari/Firefox to not lazy load properly.\n        // See https://github.com/facebook/react/issues/25883\n        loading: loading,\n        width: width,\n        height: height,\n        decoding: decoding,\n        \"data-nimg\": fill ? 'fill' : '1',\n        className: className,\n        style: style,\n        // It's intended to keep `src` the last attribute because React updates\n        // attributes in order. If we keep `src` the first one, Safari will\n        // immediately start to fetch `src`, before `sizes` and `srcSet` are even\n        // updated by React. That causes multiple unnecessary requests if `srcSet`\n        // and `sizes` are defined.\n        // This bug cannot be reproduced in Chrome or Firefox.\n        sizes: sizes,\n        srcSet: srcSet,\n        src: src,\n        ref: ref,\n        onLoad: (event)=>{\n            const img = event.currentTarget;\n            handleLoading(img, placeholder, onLoadRef, onLoadingCompleteRef, setBlurComplete, unoptimized, sizesInput);\n        },\n        onError: (event)=>{\n            // if the real image fails to load, this will ensure \"alt\" is visible\n            setShowAltText(true);\n            if (placeholder !== 'empty') {\n                // If the real image fails to load, this will still remove the placeholder.\n                setBlurComplete(true);\n            }\n            if (onError) {\n                onError(event);\n            }\n        }\n    });\n});\nfunction ImagePreload(param) {\n    let { isAppRouter, imgAttributes } = param;\n    const opts = {\n        as: 'image',\n        imageSrcSet: imgAttributes.srcSet,\n        imageSizes: imgAttributes.sizes,\n        crossOrigin: imgAttributes.crossOrigin,\n        referrerPolicy: imgAttributes.referrerPolicy,\n        ...getDynamicProps(imgAttributes.fetchPriority)\n    };\n    if (isAppRouter && _reactdom.default.preload) {\n        // See https://github.com/facebook/react/pull/26940\n        _reactdom.default.preload(imgAttributes.src, opts);\n        return null;\n    }\n    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_head.default, {\n        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(\"link\", {\n            rel: \"preload\",\n            // Note how we omit the `href` attribute, as it would only be relevant\n            // for browsers that do not support `imagesrcset`, and in those cases\n            // it would cause the incorrect image to be preloaded.\n            //\n            // https://html.spec.whatwg.org/multipage/semantics.html#attr-link-imagesrcset\n            href: imgAttributes.srcSet ? undefined : imgAttributes.src,\n            ...opts\n        }, '__nimg-' + imgAttributes.src + imgAttributes.srcSet + imgAttributes.sizes)\n    });\n}\n_c = ImagePreload;\nconst Image = /*#__PURE__*/ (0, _react.forwardRef)((props, forwardedRef)=>{\n    const pagesRouter = (0, _react.useContext)(_routercontextsharedruntime.RouterContext);\n    // We're in the app directory if there is no pages router.\n    const isAppRouter = !pagesRouter;\n    const configContext = (0, _react.useContext)(_imageconfigcontextsharedruntime.ImageConfigContext);\n    const config = (0, _react.useMemo)(()=>{\n        var _c_qualities;\n        const c = configEnv || configContext || _imageconfig.imageConfigDefault;\n        const allSizes = [\n            ...c.deviceSizes,\n            ...c.imageSizes\n        ].sort((a, b)=>a - b);\n        const deviceSizes = c.deviceSizes.sort((a, b)=>a - b);\n        const qualities = (_c_qualities = c.qualities) == null ? void 0 : _c_qualities.sort((a, b)=>a - b);\n        return {\n            ...c,\n            allSizes,\n            deviceSizes,\n            qualities\n        };\n    }, [\n        configContext\n    ]);\n    const { onLoad, onLoadingComplete } = props;\n    const onLoadRef = (0, _react.useRef)(onLoad);\n    (0, _react.useEffect)(()=>{\n        onLoadRef.current = onLoad;\n    }, [\n        onLoad\n    ]);\n    const onLoadingCompleteRef = (0, _react.useRef)(onLoadingComplete);\n    (0, _react.useEffect)(()=>{\n        onLoadingCompleteRef.current = onLoadingComplete;\n    }, [\n        onLoadingComplete\n    ]);\n    const [blurComplete, setBlurComplete] = (0, _react.useState)(false);\n    const [showAltText, setShowAltText] = (0, _react.useState)(false);\n    const { props: imgAttributes, meta: imgMeta } = (0, _getimgprops.getImgProps)(props, {\n        defaultLoader: _imageloader.default,\n        imgConf: config,\n        blurComplete,\n        showAltText\n    });\n    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {\n        children: [\n            /*#__PURE__*/ (0, _jsxruntime.jsx)(ImageElement, {\n                ...imgAttributes,\n                unoptimized: imgMeta.unoptimized,\n                placeholder: imgMeta.placeholder,\n                fill: imgMeta.fill,\n                onLoadRef: onLoadRef,\n                onLoadingCompleteRef: onLoadingCompleteRef,\n                setBlurComplete: setBlurComplete,\n                setShowAltText: setShowAltText,\n                sizesInput: props.sizes,\n                ref: forwardedRef\n            }),\n            imgMeta.priority ? /*#__PURE__*/ (0, _jsxruntime.jsx)(ImagePreload, {\n                isAppRouter: isAppRouter,\n                imgAttributes: imgAttributes\n            }) : null\n        ]\n    });\n});\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n    Object.defineProperty(exports.default, '__esModule', {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=image-component.js.map\nvar _c;\n$RefreshReg$(_c, \"ImagePreload\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/image-component.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/use-merged-ref.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/client/use-merged-ref.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"useMergedRef\", ({\n    enumerable: true,\n    get: function() {\n        return useMergedRef;\n    }\n}));\nconst _react = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nfunction useMergedRef(refA, refB) {\n    const cleanupA = (0, _react.useRef)(null);\n    const cleanupB = (0, _react.useRef)(null);\n    // NOTE: In theory, we could skip the wrapping if only one of the refs is non-null.\n    // (this happens often if the user doesn't pass a ref to Link/Form/Image)\n    // But this can cause us to leak a cleanup-ref into user code (e.g. via `<Link legacyBehavior>`),\n    // and the user might pass that ref into ref-merging library that doesn't support cleanup refs\n    // (because it hasn't been updated for React 19)\n    // which can then cause things to blow up, because a cleanup-returning ref gets called with `null`.\n    // So in practice, it's safer to be defensive and always wrap the ref, even on React 19.\n    return (0, _react.useCallback)((current)=>{\n        if (current === null) {\n            const cleanupFnA = cleanupA.current;\n            if (cleanupFnA) {\n                cleanupA.current = null;\n                cleanupFnA();\n            }\n            const cleanupFnB = cleanupB.current;\n            if (cleanupFnB) {\n                cleanupB.current = null;\n                cleanupFnB();\n            }\n        } else {\n            if (refA) {\n                cleanupA.current = applyRef(refA, current);\n            }\n            if (refB) {\n                cleanupB.current = applyRef(refB, current);\n            }\n        }\n    }, [\n        refA,\n        refB\n    ]);\n}\nfunction applyRef(refA, current) {\n    if (typeof refA === 'function') {\n        const cleanup = refA(current);\n        if (typeof cleanup === 'function') {\n            return cleanup;\n        } else {\n            return ()=>refA(null);\n        }\n    } else {\n        refA.current = current;\n        return ()=>{\n            refA.current = null;\n        };\n    }\n}\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n    Object.defineProperty(exports.default, '__esModule', {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=use-merged-ref.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3VzZS1tZXJnZWQtcmVmLmpzIiwibWFwcGluZ3MiOiI7Ozs7Z0RBU2dCQTs7O2VBQUFBOzs7bUNBVDhCO0FBU3ZDLFNBQVNBLGFBQ2RDLElBQW1CLEVBQ25CQyxJQUFtQjtJQUVuQixNQUFNQyxXQUFXQyxDQUFBQSxHQUFBQSxPQUFBQSxNQUFBQSxFQUE0QjtJQUM3QyxNQUFNQyxXQUFXRCxDQUFBQSxHQUFBQSxPQUFBQSxNQUFBQSxFQUE0QjtJQUU3QyxtRkFBbUY7SUFDbkYseUVBQXlFO0lBQ3pFLGlHQUFpRztJQUNqRyw4RkFBOEY7SUFDOUYsZ0RBQWdEO0lBQ2hELG1HQUFtRztJQUNuRyx3RkFBd0Y7SUFDeEYsT0FBT0UsQ0FBQUEsR0FBQUEsT0FBQUEsV0FBQUEsRUFDTCxDQUFDQztRQUNDLElBQUlBLFlBQVksTUFBTTtZQUNwQixNQUFNQyxhQUFhTCxTQUFTSSxPQUFPO1lBQ25DLElBQUlDLFlBQVk7Z0JBQ2RMLFNBQVNJLE9BQU8sR0FBRztnQkFDbkJDO1lBQ0Y7WUFDQSxNQUFNQyxhQUFhSixTQUFTRSxPQUFPO1lBQ25DLElBQUlFLFlBQVk7Z0JBQ2RKLFNBQVNFLE9BQU8sR0FBRztnQkFDbkJFO1lBQ0Y7UUFDRixPQUFPO1lBQ0wsSUFBSVIsTUFBTTtnQkFDUkUsU0FBU0ksT0FBTyxHQUFHRyxTQUFTVCxNQUFNTTtZQUNwQztZQUNBLElBQUlMLE1BQU07Z0JBQ1JHLFNBQVNFLE9BQU8sR0FBR0csU0FBU1IsTUFBTUs7WUFDcEM7UUFDRjtJQUNGLEdBQ0E7UUFBQ047UUFBTUM7S0FBSztBQUVoQjtBQUVBLFNBQVNRLFNBQ1BULElBQWdDLEVBQ2hDTSxPQUFpQjtJQUVqQixJQUFJLE9BQU9OLFNBQVMsWUFBWTtRQUM5QixNQUFNVSxVQUFVVixLQUFLTTtRQUNyQixJQUFJLE9BQU9JLFlBQVksWUFBWTtZQUNqQyxPQUFPQTtRQUNULE9BQU87WUFDTCxPQUFPLElBQU1WLEtBQUs7UUFDcEI7SUFDRixPQUFPO1FBQ0xBLEtBQUtNLE9BQU8sR0FBR0E7UUFDZixPQUFPO1lBQ0xOLEtBQUtNLE9BQU8sR0FBRztRQUNqQjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9zcmMvY2xpZW50L3VzZS1tZXJnZWQtcmVmLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VSZWYsIHR5cGUgUmVmIH0gZnJvbSAncmVhY3QnXG5cbi8vIFRoaXMgaXMgYSBjb21wYXRpYmlsaXR5IGhvb2sgdG8gc3VwcG9ydCBSZWFjdCAxOCBhbmQgMTkgcmVmcy5cbi8vIEluIDE5LCBhIGNsZWFudXAgZnVuY3Rpb24gZnJvbSByZWZzIG1heSBiZSByZXR1cm5lZC5cbi8vIEluIDE4LCByZXR1cm5pbmcgYSBjbGVhbnVwIGZ1bmN0aW9uIGNyZWF0ZXMgYSB3YXJuaW5nLlxuLy8gU2luY2Ugd2UgdGFrZSB1c2Vyc3BhY2UgcmVmcywgd2UgZG9uJ3Qga25vdyBhaGVhZCBvZiB0aW1lIGlmIGEgY2xlYW51cCBmdW5jdGlvbiB3aWxsIGJlIHJldHVybmVkLlxuLy8gVGhpcyBpbXBsZW1lbnRzIGNsZWFudXAgZnVuY3Rpb25zIHdpdGggdGhlIG9sZCBiZWhhdmlvciBpbiAxOC5cbi8vIFdlIGtub3cgcmVmcyBhcmUgYWx3YXlzIGNhbGxlZCBhbHRlcm5hdGluZyB3aXRoIGBudWxsYCBhbmQgdGhlbiBgVGAuXG4vLyBTbyBhIGNhbGwgd2l0aCBgbnVsbGAgbWVhbnMgd2UgbmVlZCB0byBjYWxsIHRoZSBwcmV2aW91cyBjbGVhbnVwIGZ1bmN0aW9ucy5cbmV4cG9ydCBmdW5jdGlvbiB1c2VNZXJnZWRSZWY8VEVsZW1lbnQ+KFxuICByZWZBOiBSZWY8VEVsZW1lbnQ+LFxuICByZWZCOiBSZWY8VEVsZW1lbnQ+XG4pOiBSZWY8VEVsZW1lbnQ+IHtcbiAgY29uc3QgY2xlYW51cEEgPSB1c2VSZWY8KCgpID0+IHZvaWQpIHwgbnVsbD4obnVsbClcbiAgY29uc3QgY2xlYW51cEIgPSB1c2VSZWY8KCgpID0+IHZvaWQpIHwgbnVsbD4obnVsbClcblxuICAvLyBOT1RFOiBJbiB0aGVvcnksIHdlIGNvdWxkIHNraXAgdGhlIHdyYXBwaW5nIGlmIG9ubHkgb25lIG9mIHRoZSByZWZzIGlzIG5vbi1udWxsLlxuICAvLyAodGhpcyBoYXBwZW5zIG9mdGVuIGlmIHRoZSB1c2VyIGRvZXNuJ3QgcGFzcyBhIHJlZiB0byBMaW5rL0Zvcm0vSW1hZ2UpXG4gIC8vIEJ1dCB0aGlzIGNhbiBjYXVzZSB1cyB0byBsZWFrIGEgY2xlYW51cC1yZWYgaW50byB1c2VyIGNvZGUgKGUuZy4gdmlhIGA8TGluayBsZWdhY3lCZWhhdmlvcj5gKSxcbiAgLy8gYW5kIHRoZSB1c2VyIG1pZ2h0IHBhc3MgdGhhdCByZWYgaW50byByZWYtbWVyZ2luZyBsaWJyYXJ5IHRoYXQgZG9lc24ndCBzdXBwb3J0IGNsZWFudXAgcmVmc1xuICAvLyAoYmVjYXVzZSBpdCBoYXNuJ3QgYmVlbiB1cGRhdGVkIGZvciBSZWFjdCAxOSlcbiAgLy8gd2hpY2ggY2FuIHRoZW4gY2F1c2UgdGhpbmdzIHRvIGJsb3cgdXAsIGJlY2F1c2UgYSBjbGVhbnVwLXJldHVybmluZyByZWYgZ2V0cyBjYWxsZWQgd2l0aCBgbnVsbGAuXG4gIC8vIFNvIGluIHByYWN0aWNlLCBpdCdzIHNhZmVyIHRvIGJlIGRlZmVuc2l2ZSBhbmQgYWx3YXlzIHdyYXAgdGhlIHJlZiwgZXZlbiBvbiBSZWFjdCAxOS5cbiAgcmV0dXJuIHVzZUNhbGxiYWNrKFxuICAgIChjdXJyZW50OiBURWxlbWVudCB8IG51bGwpOiB2b2lkID0+IHtcbiAgICAgIGlmIChjdXJyZW50ID09PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGNsZWFudXBGbkEgPSBjbGVhbnVwQS5jdXJyZW50XG4gICAgICAgIGlmIChjbGVhbnVwRm5BKSB7XG4gICAgICAgICAgY2xlYW51cEEuY3VycmVudCA9IG51bGxcbiAgICAgICAgICBjbGVhbnVwRm5BKClcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjbGVhbnVwRm5CID0gY2xlYW51cEIuY3VycmVudFxuICAgICAgICBpZiAoY2xlYW51cEZuQikge1xuICAgICAgICAgIGNsZWFudXBCLmN1cnJlbnQgPSBudWxsXG4gICAgICAgICAgY2xlYW51cEZuQigpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChyZWZBKSB7XG4gICAgICAgICAgY2xlYW51cEEuY3VycmVudCA9IGFwcGx5UmVmKHJlZkEsIGN1cnJlbnQpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlZkIpIHtcbiAgICAgICAgICBjbGVhbnVwQi5jdXJyZW50ID0gYXBwbHlSZWYocmVmQiwgY3VycmVudClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgW3JlZkEsIHJlZkJdXG4gIClcbn1cblxuZnVuY3Rpb24gYXBwbHlSZWY8VEVsZW1lbnQ+KFxuICByZWZBOiBOb25OdWxsYWJsZTxSZWY8VEVsZW1lbnQ+PixcbiAgY3VycmVudDogVEVsZW1lbnRcbikge1xuICBpZiAodHlwZW9mIHJlZkEgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zdCBjbGVhbnVwID0gcmVmQShjdXJyZW50KVxuICAgIGlmICh0eXBlb2YgY2xlYW51cCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGNsZWFudXBcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICgpID0+IHJlZkEobnVsbClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVmQS5jdXJyZW50ID0gY3VycmVudFxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICByZWZBLmN1cnJlbnQgPSBudWxsXG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsidXNlTWVyZ2VkUmVmIiwicmVmQSIsInJlZkIiLCJjbGVhbnVwQSIsInVzZVJlZiIsImNsZWFudXBCIiwidXNlQ2FsbGJhY2siLCJjdXJyZW50IiwiY2xlYW51cEZuQSIsImNsZWFudXBGbkIiLCJhcHBseVJlZiIsImNsZWFudXAiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/use-merged-ref.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/compiled/buffer/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={675:function(e,r){\"use strict\";r.byteLength=byteLength;r.toByteArray=toByteArray;r.fromByteArray=fromByteArray;var t=[];var f=[];var n=typeof Uint8Array!==\"undefined\"?Uint8Array:Array;var i=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";for(var o=0,u=i.length;o<u;++o){t[o]=i[o];f[i.charCodeAt(o)]=o}f[\"-\".charCodeAt(0)]=62;f[\"_\".charCodeAt(0)]=63;function getLens(e){var r=e.length;if(r%4>0){throw new Error(\"Invalid string. Length must be a multiple of 4\")}var t=e.indexOf(\"=\");if(t===-1)t=r;var f=t===r?0:4-t%4;return[t,f]}function byteLength(e){var r=getLens(e);var t=r[0];var f=r[1];return(t+f)*3/4-f}function _byteLength(e,r,t){return(r+t)*3/4-t}function toByteArray(e){var r;var t=getLens(e);var i=t[0];var o=t[1];var u=new n(_byteLength(e,i,o));var a=0;var s=o>0?i-4:i;var h;for(h=0;h<s;h+=4){r=f[e.charCodeAt(h)]<<18|f[e.charCodeAt(h+1)]<<12|f[e.charCodeAt(h+2)]<<6|f[e.charCodeAt(h+3)];u[a++]=r>>16&255;u[a++]=r>>8&255;u[a++]=r&255}if(o===2){r=f[e.charCodeAt(h)]<<2|f[e.charCodeAt(h+1)]>>4;u[a++]=r&255}if(o===1){r=f[e.charCodeAt(h)]<<10|f[e.charCodeAt(h+1)]<<4|f[e.charCodeAt(h+2)]>>2;u[a++]=r>>8&255;u[a++]=r&255}return u}function tripletToBase64(e){return t[e>>18&63]+t[e>>12&63]+t[e>>6&63]+t[e&63]}function encodeChunk(e,r,t){var f;var n=[];for(var i=r;i<t;i+=3){f=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(e[i+2]&255);n.push(tripletToBase64(f))}return n.join(\"\")}function fromByteArray(e){var r;var f=e.length;var n=f%3;var i=[];var o=16383;for(var u=0,a=f-n;u<a;u+=o){i.push(encodeChunk(e,u,u+o>a?a:u+o))}if(n===1){r=e[f-1];i.push(t[r>>2]+t[r<<4&63]+\"==\")}else if(n===2){r=(e[f-2]<<8)+e[f-1];i.push(t[r>>10]+t[r>>4&63]+t[r<<2&63]+\"=\")}return i.join(\"\")}},72:function(e,r,t){\"use strict\";\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */var f=t(675);var n=t(783);var i=typeof Symbol===\"function\"&&typeof Symbol.for===\"function\"?Symbol.for(\"nodejs.util.inspect.custom\"):null;r.Buffer=Buffer;r.SlowBuffer=SlowBuffer;r.INSPECT_MAX_BYTES=50;var o=2147483647;r.kMaxLength=o;Buffer.TYPED_ARRAY_SUPPORT=typedArraySupport();if(!Buffer.TYPED_ARRAY_SUPPORT&&typeof console!==\"undefined\"&&typeof console.error===\"function\"){console.error(\"This browser lacks typed array (Uint8Array) support which is required by \"+\"`buffer` v5.x. Use `buffer` v4.x if you require old browser support.\")}function typedArraySupport(){try{var e=new Uint8Array(1);var r={foo:function(){return 42}};Object.setPrototypeOf(r,Uint8Array.prototype);Object.setPrototypeOf(e,r);return e.foo()===42}catch(e){return false}}Object.defineProperty(Buffer.prototype,\"parent\",{enumerable:true,get:function(){if(!Buffer.isBuffer(this))return undefined;return this.buffer}});Object.defineProperty(Buffer.prototype,\"offset\",{enumerable:true,get:function(){if(!Buffer.isBuffer(this))return undefined;return this.byteOffset}});function createBuffer(e){if(e>o){throw new RangeError('The value \"'+e+'\" is invalid for option \"size\"')}var r=new Uint8Array(e);Object.setPrototypeOf(r,Buffer.prototype);return r}function Buffer(e,r,t){if(typeof e===\"number\"){if(typeof r===\"string\"){throw new TypeError('The \"string\" argument must be of type string. Received type number')}return allocUnsafe(e)}return from(e,r,t)}Buffer.poolSize=8192;function from(e,r,t){if(typeof e===\"string\"){return fromString(e,r)}if(ArrayBuffer.isView(e)){return fromArrayLike(e)}if(e==null){throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \"+\"or Array-like Object. Received type \"+typeof e)}if(isInstance(e,ArrayBuffer)||e&&isInstance(e.buffer,ArrayBuffer)){return fromArrayBuffer(e,r,t)}if(typeof SharedArrayBuffer!==\"undefined\"&&(isInstance(e,SharedArrayBuffer)||e&&isInstance(e.buffer,SharedArrayBuffer))){return fromArrayBuffer(e,r,t)}if(typeof e===\"number\"){throw new TypeError('The \"value\" argument must not be of type number. Received type number')}var f=e.valueOf&&e.valueOf();if(f!=null&&f!==e){return Buffer.from(f,r,t)}var n=fromObject(e);if(n)return n;if(typeof Symbol!==\"undefined\"&&Symbol.toPrimitive!=null&&typeof e[Symbol.toPrimitive]===\"function\"){return Buffer.from(e[Symbol.toPrimitive](\"string\"),r,t)}throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \"+\"or Array-like Object. Received type \"+typeof e)}Buffer.from=function(e,r,t){return from(e,r,t)};Object.setPrototypeOf(Buffer.prototype,Uint8Array.prototype);Object.setPrototypeOf(Buffer,Uint8Array);function assertSize(e){if(typeof e!==\"number\"){throw new TypeError('\"size\" argument must be of type number')}else if(e<0){throw new RangeError('The value \"'+e+'\" is invalid for option \"size\"')}}function alloc(e,r,t){assertSize(e);if(e<=0){return createBuffer(e)}if(r!==undefined){return typeof t===\"string\"?createBuffer(e).fill(r,t):createBuffer(e).fill(r)}return createBuffer(e)}Buffer.alloc=function(e,r,t){return alloc(e,r,t)};function allocUnsafe(e){assertSize(e);return createBuffer(e<0?0:checked(e)|0)}Buffer.allocUnsafe=function(e){return allocUnsafe(e)};Buffer.allocUnsafeSlow=function(e){return allocUnsafe(e)};function fromString(e,r){if(typeof r!==\"string\"||r===\"\"){r=\"utf8\"}if(!Buffer.isEncoding(r)){throw new TypeError(\"Unknown encoding: \"+r)}var t=byteLength(e,r)|0;var f=createBuffer(t);var n=f.write(e,r);if(n!==t){f=f.slice(0,n)}return f}function fromArrayLike(e){var r=e.length<0?0:checked(e.length)|0;var t=createBuffer(r);for(var f=0;f<r;f+=1){t[f]=e[f]&255}return t}function fromArrayBuffer(e,r,t){if(r<0||e.byteLength<r){throw new RangeError('\"offset\" is outside of buffer bounds')}if(e.byteLength<r+(t||0)){throw new RangeError('\"length\" is outside of buffer bounds')}var f;if(r===undefined&&t===undefined){f=new Uint8Array(e)}else if(t===undefined){f=new Uint8Array(e,r)}else{f=new Uint8Array(e,r,t)}Object.setPrototypeOf(f,Buffer.prototype);return f}function fromObject(e){if(Buffer.isBuffer(e)){var r=checked(e.length)|0;var t=createBuffer(r);if(t.length===0){return t}e.copy(t,0,0,r);return t}if(e.length!==undefined){if(typeof e.length!==\"number\"||numberIsNaN(e.length)){return createBuffer(0)}return fromArrayLike(e)}if(e.type===\"Buffer\"&&Array.isArray(e.data)){return fromArrayLike(e.data)}}function checked(e){if(e>=o){throw new RangeError(\"Attempt to allocate Buffer larger than maximum \"+\"size: 0x\"+o.toString(16)+\" bytes\")}return e|0}function SlowBuffer(e){if(+e!=e){e=0}return Buffer.alloc(+e)}Buffer.isBuffer=function isBuffer(e){return e!=null&&e._isBuffer===true&&e!==Buffer.prototype};Buffer.compare=function compare(e,r){if(isInstance(e,Uint8Array))e=Buffer.from(e,e.offset,e.byteLength);if(isInstance(r,Uint8Array))r=Buffer.from(r,r.offset,r.byteLength);if(!Buffer.isBuffer(e)||!Buffer.isBuffer(r)){throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array')}if(e===r)return 0;var t=e.length;var f=r.length;for(var n=0,i=Math.min(t,f);n<i;++n){if(e[n]!==r[n]){t=e[n];f=r[n];break}}if(t<f)return-1;if(f<t)return 1;return 0};Buffer.isEncoding=function isEncoding(e){switch(String(e).toLowerCase()){case\"hex\":case\"utf8\":case\"utf-8\":case\"ascii\":case\"latin1\":case\"binary\":case\"base64\":case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return true;default:return false}};Buffer.concat=function concat(e,r){if(!Array.isArray(e)){throw new TypeError('\"list\" argument must be an Array of Buffers')}if(e.length===0){return Buffer.alloc(0)}var t;if(r===undefined){r=0;for(t=0;t<e.length;++t){r+=e[t].length}}var f=Buffer.allocUnsafe(r);var n=0;for(t=0;t<e.length;++t){var i=e[t];if(isInstance(i,Uint8Array)){i=Buffer.from(i)}if(!Buffer.isBuffer(i)){throw new TypeError('\"list\" argument must be an Array of Buffers')}i.copy(f,n);n+=i.length}return f};function byteLength(e,r){if(Buffer.isBuffer(e)){return e.length}if(ArrayBuffer.isView(e)||isInstance(e,ArrayBuffer)){return e.byteLength}if(typeof e!==\"string\"){throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. '+\"Received type \"+typeof e)}var t=e.length;var f=arguments.length>2&&arguments[2]===true;if(!f&&t===0)return 0;var n=false;for(;;){switch(r){case\"ascii\":case\"latin1\":case\"binary\":return t;case\"utf8\":case\"utf-8\":return utf8ToBytes(e).length;case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return t*2;case\"hex\":return t>>>1;case\"base64\":return base64ToBytes(e).length;default:if(n){return f?-1:utf8ToBytes(e).length}r=(\"\"+r).toLowerCase();n=true}}}Buffer.byteLength=byteLength;function slowToString(e,r,t){var f=false;if(r===undefined||r<0){r=0}if(r>this.length){return\"\"}if(t===undefined||t>this.length){t=this.length}if(t<=0){return\"\"}t>>>=0;r>>>=0;if(t<=r){return\"\"}if(!e)e=\"utf8\";while(true){switch(e){case\"hex\":return hexSlice(this,r,t);case\"utf8\":case\"utf-8\":return utf8Slice(this,r,t);case\"ascii\":return asciiSlice(this,r,t);case\"latin1\":case\"binary\":return latin1Slice(this,r,t);case\"base64\":return base64Slice(this,r,t);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return utf16leSlice(this,r,t);default:if(f)throw new TypeError(\"Unknown encoding: \"+e);e=(e+\"\").toLowerCase();f=true}}}Buffer.prototype._isBuffer=true;function swap(e,r,t){var f=e[r];e[r]=e[t];e[t]=f}Buffer.prototype.swap16=function swap16(){var e=this.length;if(e%2!==0){throw new RangeError(\"Buffer size must be a multiple of 16-bits\")}for(var r=0;r<e;r+=2){swap(this,r,r+1)}return this};Buffer.prototype.swap32=function swap32(){var e=this.length;if(e%4!==0){throw new RangeError(\"Buffer size must be a multiple of 32-bits\")}for(var r=0;r<e;r+=4){swap(this,r,r+3);swap(this,r+1,r+2)}return this};Buffer.prototype.swap64=function swap64(){var e=this.length;if(e%8!==0){throw new RangeError(\"Buffer size must be a multiple of 64-bits\")}for(var r=0;r<e;r+=8){swap(this,r,r+7);swap(this,r+1,r+6);swap(this,r+2,r+5);swap(this,r+3,r+4)}return this};Buffer.prototype.toString=function toString(){var e=this.length;if(e===0)return\"\";if(arguments.length===0)return utf8Slice(this,0,e);return slowToString.apply(this,arguments)};Buffer.prototype.toLocaleString=Buffer.prototype.toString;Buffer.prototype.equals=function equals(e){if(!Buffer.isBuffer(e))throw new TypeError(\"Argument must be a Buffer\");if(this===e)return true;return Buffer.compare(this,e)===0};Buffer.prototype.inspect=function inspect(){var e=\"\";var t=r.INSPECT_MAX_BYTES;e=this.toString(\"hex\",0,t).replace(/(.{2})/g,\"$1 \").trim();if(this.length>t)e+=\" ... \";return\"<Buffer \"+e+\">\"};if(i){Buffer.prototype[i]=Buffer.prototype.inspect}Buffer.prototype.compare=function compare(e,r,t,f,n){if(isInstance(e,Uint8Array)){e=Buffer.from(e,e.offset,e.byteLength)}if(!Buffer.isBuffer(e)){throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. '+\"Received type \"+typeof e)}if(r===undefined){r=0}if(t===undefined){t=e?e.length:0}if(f===undefined){f=0}if(n===undefined){n=this.length}if(r<0||t>e.length||f<0||n>this.length){throw new RangeError(\"out of range index\")}if(f>=n&&r>=t){return 0}if(f>=n){return-1}if(r>=t){return 1}r>>>=0;t>>>=0;f>>>=0;n>>>=0;if(this===e)return 0;var i=n-f;var o=t-r;var u=Math.min(i,o);var a=this.slice(f,n);var s=e.slice(r,t);for(var h=0;h<u;++h){if(a[h]!==s[h]){i=a[h];o=s[h];break}}if(i<o)return-1;if(o<i)return 1;return 0};function bidirectionalIndexOf(e,r,t,f,n){if(e.length===0)return-1;if(typeof t===\"string\"){f=t;t=0}else if(t>2147483647){t=2147483647}else if(t<-2147483648){t=-2147483648}t=+t;if(numberIsNaN(t)){t=n?0:e.length-1}if(t<0)t=e.length+t;if(t>=e.length){if(n)return-1;else t=e.length-1}else if(t<0){if(n)t=0;else return-1}if(typeof r===\"string\"){r=Buffer.from(r,f)}if(Buffer.isBuffer(r)){if(r.length===0){return-1}return arrayIndexOf(e,r,t,f,n)}else if(typeof r===\"number\"){r=r&255;if(typeof Uint8Array.prototype.indexOf===\"function\"){if(n){return Uint8Array.prototype.indexOf.call(e,r,t)}else{return Uint8Array.prototype.lastIndexOf.call(e,r,t)}}return arrayIndexOf(e,[r],t,f,n)}throw new TypeError(\"val must be string, number or Buffer\")}function arrayIndexOf(e,r,t,f,n){var i=1;var o=e.length;var u=r.length;if(f!==undefined){f=String(f).toLowerCase();if(f===\"ucs2\"||f===\"ucs-2\"||f===\"utf16le\"||f===\"utf-16le\"){if(e.length<2||r.length<2){return-1}i=2;o/=2;u/=2;t/=2}}function read(e,r){if(i===1){return e[r]}else{return e.readUInt16BE(r*i)}}var a;if(n){var s=-1;for(a=t;a<o;a++){if(read(e,a)===read(r,s===-1?0:a-s)){if(s===-1)s=a;if(a-s+1===u)return s*i}else{if(s!==-1)a-=a-s;s=-1}}}else{if(t+u>o)t=o-u;for(a=t;a>=0;a--){var h=true;for(var c=0;c<u;c++){if(read(e,a+c)!==read(r,c)){h=false;break}}if(h)return a}}return-1}Buffer.prototype.includes=function includes(e,r,t){return this.indexOf(e,r,t)!==-1};Buffer.prototype.indexOf=function indexOf(e,r,t){return bidirectionalIndexOf(this,e,r,t,true)};Buffer.prototype.lastIndexOf=function lastIndexOf(e,r,t){return bidirectionalIndexOf(this,e,r,t,false)};function hexWrite(e,r,t,f){t=Number(t)||0;var n=e.length-t;if(!f){f=n}else{f=Number(f);if(f>n){f=n}}var i=r.length;if(f>i/2){f=i/2}for(var o=0;o<f;++o){var u=parseInt(r.substr(o*2,2),16);if(numberIsNaN(u))return o;e[t+o]=u}return o}function utf8Write(e,r,t,f){return blitBuffer(utf8ToBytes(r,e.length-t),e,t,f)}function asciiWrite(e,r,t,f){return blitBuffer(asciiToBytes(r),e,t,f)}function latin1Write(e,r,t,f){return asciiWrite(e,r,t,f)}function base64Write(e,r,t,f){return blitBuffer(base64ToBytes(r),e,t,f)}function ucs2Write(e,r,t,f){return blitBuffer(utf16leToBytes(r,e.length-t),e,t,f)}Buffer.prototype.write=function write(e,r,t,f){if(r===undefined){f=\"utf8\";t=this.length;r=0}else if(t===undefined&&typeof r===\"string\"){f=r;t=this.length;r=0}else if(isFinite(r)){r=r>>>0;if(isFinite(t)){t=t>>>0;if(f===undefined)f=\"utf8\"}else{f=t;t=undefined}}else{throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\")}var n=this.length-r;if(t===undefined||t>n)t=n;if(e.length>0&&(t<0||r<0)||r>this.length){throw new RangeError(\"Attempt to write outside buffer bounds\")}if(!f)f=\"utf8\";var i=false;for(;;){switch(f){case\"hex\":return hexWrite(this,e,r,t);case\"utf8\":case\"utf-8\":return utf8Write(this,e,r,t);case\"ascii\":return asciiWrite(this,e,r,t);case\"latin1\":case\"binary\":return latin1Write(this,e,r,t);case\"base64\":return base64Write(this,e,r,t);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return ucs2Write(this,e,r,t);default:if(i)throw new TypeError(\"Unknown encoding: \"+f);f=(\"\"+f).toLowerCase();i=true}}};Buffer.prototype.toJSON=function toJSON(){return{type:\"Buffer\",data:Array.prototype.slice.call(this._arr||this,0)}};function base64Slice(e,r,t){if(r===0&&t===e.length){return f.fromByteArray(e)}else{return f.fromByteArray(e.slice(r,t))}}function utf8Slice(e,r,t){t=Math.min(e.length,t);var f=[];var n=r;while(n<t){var i=e[n];var o=null;var u=i>239?4:i>223?3:i>191?2:1;if(n+u<=t){var a,s,h,c;switch(u){case 1:if(i<128){o=i}break;case 2:a=e[n+1];if((a&192)===128){c=(i&31)<<6|a&63;if(c>127){o=c}}break;case 3:a=e[n+1];s=e[n+2];if((a&192)===128&&(s&192)===128){c=(i&15)<<12|(a&63)<<6|s&63;if(c>2047&&(c<55296||c>57343)){o=c}}break;case 4:a=e[n+1];s=e[n+2];h=e[n+3];if((a&192)===128&&(s&192)===128&&(h&192)===128){c=(i&15)<<18|(a&63)<<12|(s&63)<<6|h&63;if(c>65535&&c<1114112){o=c}}}}if(o===null){o=65533;u=1}else if(o>65535){o-=65536;f.push(o>>>10&1023|55296);o=56320|o&1023}f.push(o);n+=u}return decodeCodePointsArray(f)}var u=4096;function decodeCodePointsArray(e){var r=e.length;if(r<=u){return String.fromCharCode.apply(String,e)}var t=\"\";var f=0;while(f<r){t+=String.fromCharCode.apply(String,e.slice(f,f+=u))}return t}function asciiSlice(e,r,t){var f=\"\";t=Math.min(e.length,t);for(var n=r;n<t;++n){f+=String.fromCharCode(e[n]&127)}return f}function latin1Slice(e,r,t){var f=\"\";t=Math.min(e.length,t);for(var n=r;n<t;++n){f+=String.fromCharCode(e[n])}return f}function hexSlice(e,r,t){var f=e.length;if(!r||r<0)r=0;if(!t||t<0||t>f)t=f;var n=\"\";for(var i=r;i<t;++i){n+=s[e[i]]}return n}function utf16leSlice(e,r,t){var f=e.slice(r,t);var n=\"\";for(var i=0;i<f.length;i+=2){n+=String.fromCharCode(f[i]+f[i+1]*256)}return n}Buffer.prototype.slice=function slice(e,r){var t=this.length;e=~~e;r=r===undefined?t:~~r;if(e<0){e+=t;if(e<0)e=0}else if(e>t){e=t}if(r<0){r+=t;if(r<0)r=0}else if(r>t){r=t}if(r<e)r=e;var f=this.subarray(e,r);Object.setPrototypeOf(f,Buffer.prototype);return f};function checkOffset(e,r,t){if(e%1!==0||e<0)throw new RangeError(\"offset is not uint\");if(e+r>t)throw new RangeError(\"Trying to access beyond buffer length\")}Buffer.prototype.readUIntLE=function readUIntLE(e,r,t){e=e>>>0;r=r>>>0;if(!t)checkOffset(e,r,this.length);var f=this[e];var n=1;var i=0;while(++i<r&&(n*=256)){f+=this[e+i]*n}return f};Buffer.prototype.readUIntBE=function readUIntBE(e,r,t){e=e>>>0;r=r>>>0;if(!t){checkOffset(e,r,this.length)}var f=this[e+--r];var n=1;while(r>0&&(n*=256)){f+=this[e+--r]*n}return f};Buffer.prototype.readUInt8=function readUInt8(e,r){e=e>>>0;if(!r)checkOffset(e,1,this.length);return this[e]};Buffer.prototype.readUInt16LE=function readUInt16LE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);return this[e]|this[e+1]<<8};Buffer.prototype.readUInt16BE=function readUInt16BE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);return this[e]<<8|this[e+1]};Buffer.prototype.readUInt32LE=function readUInt32LE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return(this[e]|this[e+1]<<8|this[e+2]<<16)+this[e+3]*16777216};Buffer.prototype.readUInt32BE=function readUInt32BE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return this[e]*16777216+(this[e+1]<<16|this[e+2]<<8|this[e+3])};Buffer.prototype.readIntLE=function readIntLE(e,r,t){e=e>>>0;r=r>>>0;if(!t)checkOffset(e,r,this.length);var f=this[e];var n=1;var i=0;while(++i<r&&(n*=256)){f+=this[e+i]*n}n*=128;if(f>=n)f-=Math.pow(2,8*r);return f};Buffer.prototype.readIntBE=function readIntBE(e,r,t){e=e>>>0;r=r>>>0;if(!t)checkOffset(e,r,this.length);var f=r;var n=1;var i=this[e+--f];while(f>0&&(n*=256)){i+=this[e+--f]*n}n*=128;if(i>=n)i-=Math.pow(2,8*r);return i};Buffer.prototype.readInt8=function readInt8(e,r){e=e>>>0;if(!r)checkOffset(e,1,this.length);if(!(this[e]&128))return this[e];return(255-this[e]+1)*-1};Buffer.prototype.readInt16LE=function readInt16LE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);var t=this[e]|this[e+1]<<8;return t&32768?t|4294901760:t};Buffer.prototype.readInt16BE=function readInt16BE(e,r){e=e>>>0;if(!r)checkOffset(e,2,this.length);var t=this[e+1]|this[e]<<8;return t&32768?t|4294901760:t};Buffer.prototype.readInt32LE=function readInt32LE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24};Buffer.prototype.readInt32BE=function readInt32BE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]};Buffer.prototype.readFloatLE=function readFloatLE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return n.read(this,e,true,23,4)};Buffer.prototype.readFloatBE=function readFloatBE(e,r){e=e>>>0;if(!r)checkOffset(e,4,this.length);return n.read(this,e,false,23,4)};Buffer.prototype.readDoubleLE=function readDoubleLE(e,r){e=e>>>0;if(!r)checkOffset(e,8,this.length);return n.read(this,e,true,52,8)};Buffer.prototype.readDoubleBE=function readDoubleBE(e,r){e=e>>>0;if(!r)checkOffset(e,8,this.length);return n.read(this,e,false,52,8)};function checkInt(e,r,t,f,n,i){if(!Buffer.isBuffer(e))throw new TypeError('\"buffer\" argument must be a Buffer instance');if(r>n||r<i)throw new RangeError('\"value\" argument is out of bounds');if(t+f>e.length)throw new RangeError(\"Index out of range\")}Buffer.prototype.writeUIntLE=function writeUIntLE(e,r,t,f){e=+e;r=r>>>0;t=t>>>0;if(!f){var n=Math.pow(2,8*t)-1;checkInt(this,e,r,t,n,0)}var i=1;var o=0;this[r]=e&255;while(++o<t&&(i*=256)){this[r+o]=e/i&255}return r+t};Buffer.prototype.writeUIntBE=function writeUIntBE(e,r,t,f){e=+e;r=r>>>0;t=t>>>0;if(!f){var n=Math.pow(2,8*t)-1;checkInt(this,e,r,t,n,0)}var i=t-1;var o=1;this[r+i]=e&255;while(--i>=0&&(o*=256)){this[r+i]=e/o&255}return r+t};Buffer.prototype.writeUInt8=function writeUInt8(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,1,255,0);this[r]=e&255;return r+1};Buffer.prototype.writeUInt16LE=function writeUInt16LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,65535,0);this[r]=e&255;this[r+1]=e>>>8;return r+2};Buffer.prototype.writeUInt16BE=function writeUInt16BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,65535,0);this[r]=e>>>8;this[r+1]=e&255;return r+2};Buffer.prototype.writeUInt32LE=function writeUInt32LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,4294967295,0);this[r+3]=e>>>24;this[r+2]=e>>>16;this[r+1]=e>>>8;this[r]=e&255;return r+4};Buffer.prototype.writeUInt32BE=function writeUInt32BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,4294967295,0);this[r]=e>>>24;this[r+1]=e>>>16;this[r+2]=e>>>8;this[r+3]=e&255;return r+4};Buffer.prototype.writeIntLE=function writeIntLE(e,r,t,f){e=+e;r=r>>>0;if(!f){var n=Math.pow(2,8*t-1);checkInt(this,e,r,t,n-1,-n)}var i=0;var o=1;var u=0;this[r]=e&255;while(++i<t&&(o*=256)){if(e<0&&u===0&&this[r+i-1]!==0){u=1}this[r+i]=(e/o>>0)-u&255}return r+t};Buffer.prototype.writeIntBE=function writeIntBE(e,r,t,f){e=+e;r=r>>>0;if(!f){var n=Math.pow(2,8*t-1);checkInt(this,e,r,t,n-1,-n)}var i=t-1;var o=1;var u=0;this[r+i]=e&255;while(--i>=0&&(o*=256)){if(e<0&&u===0&&this[r+i+1]!==0){u=1}this[r+i]=(e/o>>0)-u&255}return r+t};Buffer.prototype.writeInt8=function writeInt8(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,1,127,-128);if(e<0)e=255+e+1;this[r]=e&255;return r+1};Buffer.prototype.writeInt16LE=function writeInt16LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,32767,-32768);this[r]=e&255;this[r+1]=e>>>8;return r+2};Buffer.prototype.writeInt16BE=function writeInt16BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,2,32767,-32768);this[r]=e>>>8;this[r+1]=e&255;return r+2};Buffer.prototype.writeInt32LE=function writeInt32LE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,2147483647,-2147483648);this[r]=e&255;this[r+1]=e>>>8;this[r+2]=e>>>16;this[r+3]=e>>>24;return r+4};Buffer.prototype.writeInt32BE=function writeInt32BE(e,r,t){e=+e;r=r>>>0;if(!t)checkInt(this,e,r,4,2147483647,-2147483648);if(e<0)e=4294967295+e+1;this[r]=e>>>24;this[r+1]=e>>>16;this[r+2]=e>>>8;this[r+3]=e&255;return r+4};function checkIEEE754(e,r,t,f,n,i){if(t+f>e.length)throw new RangeError(\"Index out of range\");if(t<0)throw new RangeError(\"Index out of range\")}function writeFloat(e,r,t,f,i){r=+r;t=t>>>0;if(!i){checkIEEE754(e,r,t,4,34028234663852886e22,-34028234663852886e22)}n.write(e,r,t,f,23,4);return t+4}Buffer.prototype.writeFloatLE=function writeFloatLE(e,r,t){return writeFloat(this,e,r,true,t)};Buffer.prototype.writeFloatBE=function writeFloatBE(e,r,t){return writeFloat(this,e,r,false,t)};function writeDouble(e,r,t,f,i){r=+r;t=t>>>0;if(!i){checkIEEE754(e,r,t,8,17976931348623157e292,-17976931348623157e292)}n.write(e,r,t,f,52,8);return t+8}Buffer.prototype.writeDoubleLE=function writeDoubleLE(e,r,t){return writeDouble(this,e,r,true,t)};Buffer.prototype.writeDoubleBE=function writeDoubleBE(e,r,t){return writeDouble(this,e,r,false,t)};Buffer.prototype.copy=function copy(e,r,t,f){if(!Buffer.isBuffer(e))throw new TypeError(\"argument should be a Buffer\");if(!t)t=0;if(!f&&f!==0)f=this.length;if(r>=e.length)r=e.length;if(!r)r=0;if(f>0&&f<t)f=t;if(f===t)return 0;if(e.length===0||this.length===0)return 0;if(r<0){throw new RangeError(\"targetStart out of bounds\")}if(t<0||t>=this.length)throw new RangeError(\"Index out of range\");if(f<0)throw new RangeError(\"sourceEnd out of bounds\");if(f>this.length)f=this.length;if(e.length-r<f-t){f=e.length-r+t}var n=f-t;if(this===e&&typeof Uint8Array.prototype.copyWithin===\"function\"){this.copyWithin(r,t,f)}else if(this===e&&t<r&&r<f){for(var i=n-1;i>=0;--i){e[i+r]=this[i+t]}}else{Uint8Array.prototype.set.call(e,this.subarray(t,f),r)}return n};Buffer.prototype.fill=function fill(e,r,t,f){if(typeof e===\"string\"){if(typeof r===\"string\"){f=r;r=0;t=this.length}else if(typeof t===\"string\"){f=t;t=this.length}if(f!==undefined&&typeof f!==\"string\"){throw new TypeError(\"encoding must be a string\")}if(typeof f===\"string\"&&!Buffer.isEncoding(f)){throw new TypeError(\"Unknown encoding: \"+f)}if(e.length===1){var n=e.charCodeAt(0);if(f===\"utf8\"&&n<128||f===\"latin1\"){e=n}}}else if(typeof e===\"number\"){e=e&255}else if(typeof e===\"boolean\"){e=Number(e)}if(r<0||this.length<r||this.length<t){throw new RangeError(\"Out of range index\")}if(t<=r){return this}r=r>>>0;t=t===undefined?this.length:t>>>0;if(!e)e=0;var i;if(typeof e===\"number\"){for(i=r;i<t;++i){this[i]=e}}else{var o=Buffer.isBuffer(e)?e:Buffer.from(e,f);var u=o.length;if(u===0){throw new TypeError('The value \"'+e+'\" is invalid for argument \"value\"')}for(i=0;i<t-r;++i){this[i+r]=o[i%u]}}return this};var a=/[^+/0-9A-Za-z-_]/g;function base64clean(e){e=e.split(\"=\")[0];e=e.trim().replace(a,\"\");if(e.length<2)return\"\";while(e.length%4!==0){e=e+\"=\"}return e}function utf8ToBytes(e,r){r=r||Infinity;var t;var f=e.length;var n=null;var i=[];for(var o=0;o<f;++o){t=e.charCodeAt(o);if(t>55295&&t<57344){if(!n){if(t>56319){if((r-=3)>-1)i.push(239,191,189);continue}else if(o+1===f){if((r-=3)>-1)i.push(239,191,189);continue}n=t;continue}if(t<56320){if((r-=3)>-1)i.push(239,191,189);n=t;continue}t=(n-55296<<10|t-56320)+65536}else if(n){if((r-=3)>-1)i.push(239,191,189)}n=null;if(t<128){if((r-=1)<0)break;i.push(t)}else if(t<2048){if((r-=2)<0)break;i.push(t>>6|192,t&63|128)}else if(t<65536){if((r-=3)<0)break;i.push(t>>12|224,t>>6&63|128,t&63|128)}else if(t<1114112){if((r-=4)<0)break;i.push(t>>18|240,t>>12&63|128,t>>6&63|128,t&63|128)}else{throw new Error(\"Invalid code point\")}}return i}function asciiToBytes(e){var r=[];for(var t=0;t<e.length;++t){r.push(e.charCodeAt(t)&255)}return r}function utf16leToBytes(e,r){var t,f,n;var i=[];for(var o=0;o<e.length;++o){if((r-=2)<0)break;t=e.charCodeAt(o);f=t>>8;n=t%256;i.push(n);i.push(f)}return i}function base64ToBytes(e){return f.toByteArray(base64clean(e))}function blitBuffer(e,r,t,f){for(var n=0;n<f;++n){if(n+t>=r.length||n>=e.length)break;r[n+t]=e[n]}return n}function isInstance(e,r){return e instanceof r||e!=null&&e.constructor!=null&&e.constructor.name!=null&&e.constructor.name===r.name}function numberIsNaN(e){return e!==e}var s=function(){var e=\"0123456789abcdef\";var r=new Array(256);for(var t=0;t<16;++t){var f=t*16;for(var n=0;n<16;++n){r[f+n]=e[t]+e[n]}}return r}()},783:function(e,r){\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nr.read=function(e,r,t,f,n){var i,o;var u=n*8-f-1;var a=(1<<u)-1;var s=a>>1;var h=-7;var c=t?n-1:0;var l=t?-1:1;var p=e[r+c];c+=l;i=p&(1<<-h)-1;p>>=-h;h+=u;for(;h>0;i=i*256+e[r+c],c+=l,h-=8){}o=i&(1<<-h)-1;i>>=-h;h+=f;for(;h>0;o=o*256+e[r+c],c+=l,h-=8){}if(i===0){i=1-s}else if(i===a){return o?NaN:(p?-1:1)*Infinity}else{o=o+Math.pow(2,f);i=i-s}return(p?-1:1)*o*Math.pow(2,i-f)};r.write=function(e,r,t,f,n,i){var o,u,a;var s=i*8-n-1;var h=(1<<s)-1;var c=h>>1;var l=n===23?Math.pow(2,-24)-Math.pow(2,-77):0;var p=f?0:i-1;var y=f?1:-1;var g=r<0||r===0&&1/r<0?1:0;r=Math.abs(r);if(isNaN(r)||r===Infinity){u=isNaN(r)?1:0;o=h}else{o=Math.floor(Math.log(r)/Math.LN2);if(r*(a=Math.pow(2,-o))<1){o--;a*=2}if(o+c>=1){r+=l/a}else{r+=l*Math.pow(2,1-c)}if(r*a>=2){o++;a/=2}if(o+c>=h){u=0;o=h}else if(o+c>=1){u=(r*a-1)*Math.pow(2,n);o=o+c}else{u=r*Math.pow(2,c-1)*Math.pow(2,n);o=0}}for(;n>=8;e[t+p]=u&255,p+=y,u/=256,n-=8){}o=o<<n|u;s+=n;for(;s>0;e[t+p]=o&255,p+=y,o/=256,s-=8){}e[t+p-y]|=g*128}}};var r={};function __nccwpck_require__(t){var f=r[t];if(f!==undefined){return f.exports}var n=r[t]={exports:{}};var i=true;try{e[t](n,n.exports,__nccwpck_require__);i=false}finally{if(i)delete r[t]}return n.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(72);module.exports=t})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/picomatch/index.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/compiled/picomatch/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("var __dirname = \"/\";\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n(()=>{\"use strict\";var t={170:(t,e,u)=>{const n=u(510);const isWindows=()=>{if(typeof navigator!==\"undefined\"&&navigator.platform){const t=navigator.platform.toLowerCase();return t===\"win32\"||t===\"windows\"}if(typeof process!==\"undefined\"&&process.platform){return process.platform===\"win32\"}return false};function picomatch(t,e,u=false){if(e&&(e.windows===null||e.windows===undefined)){e={...e,windows:isWindows()}}return n(t,e,u)}Object.assign(picomatch,n);t.exports=picomatch},154:t=>{const e=\"\\\\\\\\/\";const u=`[^${e}]`;const n=\"\\\\.\";const o=\"\\\\+\";const s=\"\\\\?\";const r=\"\\\\/\";const a=\"(?=.)\";const i=\"[^/]\";const c=`(?:${r}|$)`;const p=`(?:^|${r})`;const l=`${n}{1,2}${c}`;const f=`(?!${n})`;const A=`(?!${p}${l})`;const _=`(?!${n}{0,1}${c})`;const R=`(?!${l})`;const E=`[^.${r}]`;const h=`${i}*?`;const g=\"/\";const b={DOT_LITERAL:n,PLUS_LITERAL:o,QMARK_LITERAL:s,SLASH_LITERAL:r,ONE_CHAR:a,QMARK:i,END_ANCHOR:c,DOTS_SLASH:l,NO_DOT:f,NO_DOTS:A,NO_DOT_SLASH:_,NO_DOTS_SLASH:R,QMARK_NO_DOT:E,STAR:h,START_ANCHOR:p,SEP:g};const C={...b,SLASH_LITERAL:`[${e}]`,QMARK:u,STAR:`${u}*?`,DOTS_SLASH:`${n}{1,2}(?:[${e}]|$)`,NO_DOT:`(?!${n})`,NO_DOTS:`(?!(?:^|[${e}])${n}{1,2}(?:[${e}]|$))`,NO_DOT_SLASH:`(?!${n}{0,1}(?:[${e}]|$))`,NO_DOTS_SLASH:`(?!${n}{1,2}(?:[${e}]|$))`,QMARK_NO_DOT:`[^.${e}]`,START_ANCHOR:`(?:^|[${e}])`,END_ANCHOR:`(?:[${e}]|$)`,SEP:\"\\\\\"};const y={alnum:\"a-zA-Z0-9\",alpha:\"a-zA-Z\",ascii:\"\\\\x00-\\\\x7F\",blank:\" \\\\t\",cntrl:\"\\\\x00-\\\\x1F\\\\x7F\",digit:\"0-9\",graph:\"\\\\x21-\\\\x7E\",lower:\"a-z\",print:\"\\\\x20-\\\\x7E \",punct:\"\\\\-!\\\"#$%&'()\\\\*+,./:;<=>?@[\\\\]^_`{|}~\",space:\" \\\\t\\\\r\\\\n\\\\v\\\\f\",upper:\"A-Z\",word:\"A-Za-z0-9_\",xdigit:\"A-Fa-f0-9\"};t.exports={MAX_LENGTH:1024*64,POSIX_REGEX_SOURCE:y,REGEX_BACKSLASH:/\\\\(?![*+?^${}(|)[\\]])/g,REGEX_NON_SPECIAL_CHARS:/^[^@![\\].,$*+?^{}()|\\\\/]+/,REGEX_SPECIAL_CHARS:/[-*+?.^${}(|)[\\]]/,REGEX_SPECIAL_CHARS_BACKREF:/(\\\\?)((\\W)(\\3*))/g,REGEX_SPECIAL_CHARS_GLOBAL:/([-*+?.^${}(|)[\\]])/g,REGEX_REMOVE_BACKSLASH:/(?:\\[.*?[^\\\\]\\]|\\\\(?=.))/g,REPLACEMENTS:{\"***\":\"*\",\"**/**\":\"**\",\"**/**/**\":\"**\"},CHAR_0:48,CHAR_9:57,CHAR_UPPERCASE_A:65,CHAR_LOWERCASE_A:97,CHAR_UPPERCASE_Z:90,CHAR_LOWERCASE_Z:122,CHAR_LEFT_PARENTHESES:40,CHAR_RIGHT_PARENTHESES:41,CHAR_ASTERISK:42,CHAR_AMPERSAND:38,CHAR_AT:64,CHAR_BACKWARD_SLASH:92,CHAR_CARRIAGE_RETURN:13,CHAR_CIRCUMFLEX_ACCENT:94,CHAR_COLON:58,CHAR_COMMA:44,CHAR_DOT:46,CHAR_DOUBLE_QUOTE:34,CHAR_EQUAL:61,CHAR_EXCLAMATION_MARK:33,CHAR_FORM_FEED:12,CHAR_FORWARD_SLASH:47,CHAR_GRAVE_ACCENT:96,CHAR_HASH:35,CHAR_HYPHEN_MINUS:45,CHAR_LEFT_ANGLE_BRACKET:60,CHAR_LEFT_CURLY_BRACE:123,CHAR_LEFT_SQUARE_BRACKET:91,CHAR_LINE_FEED:10,CHAR_NO_BREAK_SPACE:160,CHAR_PERCENT:37,CHAR_PLUS:43,CHAR_QUESTION_MARK:63,CHAR_RIGHT_ANGLE_BRACKET:62,CHAR_RIGHT_CURLY_BRACE:125,CHAR_RIGHT_SQUARE_BRACKET:93,CHAR_SEMICOLON:59,CHAR_SINGLE_QUOTE:39,CHAR_SPACE:32,CHAR_TAB:9,CHAR_UNDERSCORE:95,CHAR_VERTICAL_LINE:124,CHAR_ZERO_WIDTH_NOBREAK_SPACE:65279,extglobChars(t){return{\"!\":{type:\"negate\",open:\"(?:(?!(?:\",close:`))${t.STAR})`},\"?\":{type:\"qmark\",open:\"(?:\",close:\")?\"},\"+\":{type:\"plus\",open:\"(?:\",close:\")+\"},\"*\":{type:\"star\",open:\"(?:\",close:\")*\"},\"@\":{type:\"at\",open:\"(?:\",close:\")\"}}},globChars(t){return t===true?C:b}}},697:(t,e,u)=>{const n=u(154);const o=u(96);const{MAX_LENGTH:s,POSIX_REGEX_SOURCE:r,REGEX_NON_SPECIAL_CHARS:a,REGEX_SPECIAL_CHARS_BACKREF:i,REPLACEMENTS:c}=n;const expandRange=(t,e)=>{if(typeof e.expandRange===\"function\"){return e.expandRange(...t,e)}t.sort();const u=`[${t.join(\"-\")}]`;try{new RegExp(u)}catch(e){return t.map((t=>o.escapeRegex(t))).join(\"..\")}return u};const syntaxError=(t,e)=>`Missing ${t}: \"${e}\" - use \"\\\\\\\\${e}\" to match literal characters`;const parse=(t,e)=>{if(typeof t!==\"string\"){throw new TypeError(\"Expected a string\")}t=c[t]||t;const u={...e};const p=typeof u.maxLength===\"number\"?Math.min(s,u.maxLength):s;let l=t.length;if(l>p){throw new SyntaxError(`Input length: ${l}, exceeds maximum allowed length: ${p}`)}const f={type:\"bos\",value:\"\",output:u.prepend||\"\"};const A=[f];const _=u.capture?\"\":\"?:\";const R=n.globChars(u.windows);const E=n.extglobChars(R);const{DOT_LITERAL:h,PLUS_LITERAL:g,SLASH_LITERAL:b,ONE_CHAR:C,DOTS_SLASH:y,NO_DOT:$,NO_DOT_SLASH:x,NO_DOTS_SLASH:S,QMARK:H,QMARK_NO_DOT:v,STAR:d,START_ANCHOR:L}=R;const globstar=t=>`(${_}(?:(?!${L}${t.dot?y:h}).)*?)`;const T=u.dot?\"\":$;const O=u.dot?H:v;let k=u.bash===true?globstar(u):d;if(u.capture){k=`(${k})`}if(typeof u.noext===\"boolean\"){u.noextglob=u.noext}const m={input:t,index:-1,start:0,dot:u.dot===true,consumed:\"\",output:\"\",prefix:\"\",backtrack:false,negated:false,brackets:0,braces:0,parens:0,quotes:0,globstar:false,tokens:A};t=o.removePrefix(t,m);l=t.length;const w=[];const N=[];const I=[];let B=f;let G;const eos=()=>m.index===l-1;const D=m.peek=(e=1)=>t[m.index+e];const M=m.advance=()=>t[++m.index]||\"\";const remaining=()=>t.slice(m.index+1);const consume=(t=\"\",e=0)=>{m.consumed+=t;m.index+=e};const append=t=>{m.output+=t.output!=null?t.output:t.value;consume(t.value)};const negate=()=>{let t=1;while(D()===\"!\"&&(D(2)!==\"(\"||D(3)===\"?\")){M();m.start++;t++}if(t%2===0){return false}m.negated=true;m.start++;return true};const increment=t=>{m[t]++;I.push(t)};const decrement=t=>{m[t]--;I.pop()};const push=t=>{if(B.type===\"globstar\"){const e=m.braces>0&&(t.type===\"comma\"||t.type===\"brace\");const u=t.extglob===true||w.length&&(t.type===\"pipe\"||t.type===\"paren\");if(t.type!==\"slash\"&&t.type!==\"paren\"&&!e&&!u){m.output=m.output.slice(0,-B.output.length);B.type=\"star\";B.value=\"*\";B.output=k;m.output+=B.output}}if(w.length&&t.type!==\"paren\"){w[w.length-1].inner+=t.value}if(t.value||t.output)append(t);if(B&&B.type===\"text\"&&t.type===\"text\"){B.output=(B.output||B.value)+t.value;B.value+=t.value;return}t.prev=B;A.push(t);B=t};const extglobOpen=(t,e)=>{const n={...E[e],conditions:1,inner:\"\"};n.prev=B;n.parens=m.parens;n.output=m.output;const o=(u.capture?\"(\":\"\")+n.open;increment(\"parens\");push({type:t,value:e,output:m.output?\"\":C});push({type:\"paren\",extglob:true,value:M(),output:o});w.push(n)};const extglobClose=t=>{let n=t.close+(u.capture?\")\":\"\");let o;if(t.type===\"negate\"){let s=k;if(t.inner&&t.inner.length>1&&t.inner.includes(\"/\")){s=globstar(u)}if(s!==k||eos()||/^\\)+$/.test(remaining())){n=t.close=`)$))${s}`}if(t.inner.includes(\"*\")&&(o=remaining())&&/^\\.[^\\\\/.]+$/.test(o)){const u=parse(o,{...e,fastpaths:false}).output;n=t.close=`)${u})${s})`}if(t.prev.type===\"bos\"){m.negatedExtglob=true}}push({type:\"paren\",extglob:true,value:G,output:n});decrement(\"parens\")};if(u.fastpaths!==false&&!/(^[*!]|[/()[\\]{}\"])/.test(t)){let n=false;let s=t.replace(i,((t,e,u,o,s,r)=>{if(o===\"\\\\\"){n=true;return t}if(o===\"?\"){if(e){return e+o+(s?H.repeat(s.length):\"\")}if(r===0){return O+(s?H.repeat(s.length):\"\")}return H.repeat(u.length)}if(o===\".\"){return h.repeat(u.length)}if(o===\"*\"){if(e){return e+o+(s?k:\"\")}return k}return e?t:`\\\\${t}`}));if(n===true){if(u.unescape===true){s=s.replace(/\\\\/g,\"\")}else{s=s.replace(/\\\\+/g,(t=>t.length%2===0?\"\\\\\\\\\":t?\"\\\\\":\"\"))}}if(s===t&&u.contains===true){m.output=t;return m}m.output=o.wrapOutput(s,m,e);return m}while(!eos()){G=M();if(G===\"\\0\"){continue}if(G===\"\\\\\"){const t=D();if(t===\"/\"&&u.bash!==true){continue}if(t===\".\"||t===\";\"){continue}if(!t){G+=\"\\\\\";push({type:\"text\",value:G});continue}const e=/^\\\\+/.exec(remaining());let n=0;if(e&&e[0].length>2){n=e[0].length;m.index+=n;if(n%2!==0){G+=\"\\\\\"}}if(u.unescape===true){G=M()}else{G+=M()}if(m.brackets===0){push({type:\"text\",value:G});continue}}if(m.brackets>0&&(G!==\"]\"||B.value===\"[\"||B.value===\"[^\")){if(u.posix!==false&&G===\":\"){const t=B.value.slice(1);if(t.includes(\"[\")){B.posix=true;if(t.includes(\":\")){const t=B.value.lastIndexOf(\"[\");const e=B.value.slice(0,t);const u=B.value.slice(t+2);const n=r[u];if(n){B.value=e+n;m.backtrack=true;M();if(!f.output&&A.indexOf(B)===1){f.output=C}continue}}}}if(G===\"[\"&&D()!==\":\"||G===\"-\"&&D()===\"]\"){G=`\\\\${G}`}if(G===\"]\"&&(B.value===\"[\"||B.value===\"[^\")){G=`\\\\${G}`}if(u.posix===true&&G===\"!\"&&B.value===\"[\"){G=\"^\"}B.value+=G;append({value:G});continue}if(m.quotes===1&&G!=='\"'){G=o.escapeRegex(G);B.value+=G;append({value:G});continue}if(G==='\"'){m.quotes=m.quotes===1?0:1;if(u.keepQuotes===true){push({type:\"text\",value:G})}continue}if(G===\"(\"){increment(\"parens\");push({type:\"paren\",value:G});continue}if(G===\")\"){if(m.parens===0&&u.strictBrackets===true){throw new SyntaxError(syntaxError(\"opening\",\"(\"))}const t=w[w.length-1];if(t&&m.parens===t.parens+1){extglobClose(w.pop());continue}push({type:\"paren\",value:G,output:m.parens?\")\":\"\\\\)\"});decrement(\"parens\");continue}if(G===\"[\"){if(u.nobracket===true||!remaining().includes(\"]\")){if(u.nobracket!==true&&u.strictBrackets===true){throw new SyntaxError(syntaxError(\"closing\",\"]\"))}G=`\\\\${G}`}else{increment(\"brackets\")}push({type:\"bracket\",value:G});continue}if(G===\"]\"){if(u.nobracket===true||B&&B.type===\"bracket\"&&B.value.length===1){push({type:\"text\",value:G,output:`\\\\${G}`});continue}if(m.brackets===0){if(u.strictBrackets===true){throw new SyntaxError(syntaxError(\"opening\",\"[\"))}push({type:\"text\",value:G,output:`\\\\${G}`});continue}decrement(\"brackets\");const t=B.value.slice(1);if(B.posix!==true&&t[0]===\"^\"&&!t.includes(\"/\")){G=`/${G}`}B.value+=G;append({value:G});if(u.literalBrackets===false||o.hasRegexChars(t)){continue}const e=o.escapeRegex(B.value);m.output=m.output.slice(0,-B.value.length);if(u.literalBrackets===true){m.output+=e;B.value=e;continue}B.value=`(${_}${e}|${B.value})`;m.output+=B.value;continue}if(G===\"{\"&&u.nobrace!==true){increment(\"braces\");const t={type:\"brace\",value:G,output:\"(\",outputIndex:m.output.length,tokensIndex:m.tokens.length};N.push(t);push(t);continue}if(G===\"}\"){const t=N[N.length-1];if(u.nobrace===true||!t){push({type:\"text\",value:G,output:G});continue}let e=\")\";if(t.dots===true){const t=A.slice();const n=[];for(let e=t.length-1;e>=0;e--){A.pop();if(t[e].type===\"brace\"){break}if(t[e].type!==\"dots\"){n.unshift(t[e].value)}}e=expandRange(n,u);m.backtrack=true}if(t.comma!==true&&t.dots!==true){const u=m.output.slice(0,t.outputIndex);const n=m.tokens.slice(t.tokensIndex);t.value=t.output=\"\\\\{\";G=e=\"\\\\}\";m.output=u;for(const t of n){m.output+=t.output||t.value}}push({type:\"brace\",value:G,output:e});decrement(\"braces\");N.pop();continue}if(G===\"|\"){if(w.length>0){w[w.length-1].conditions++}push({type:\"text\",value:G});continue}if(G===\",\"){let t=G;const e=N[N.length-1];if(e&&I[I.length-1]===\"braces\"){e.comma=true;t=\"|\"}push({type:\"comma\",value:G,output:t});continue}if(G===\"/\"){if(B.type===\"dot\"&&m.index===m.start+1){m.start=m.index+1;m.consumed=\"\";m.output=\"\";A.pop();B=f;continue}push({type:\"slash\",value:G,output:b});continue}if(G===\".\"){if(m.braces>0&&B.type===\"dot\"){if(B.value===\".\")B.output=h;const t=N[N.length-1];B.type=\"dots\";B.output+=G;B.value+=G;t.dots=true;continue}if(m.braces+m.parens===0&&B.type!==\"bos\"&&B.type!==\"slash\"){push({type:\"text\",value:G,output:h});continue}push({type:\"dot\",value:G,output:h});continue}if(G===\"?\"){const t=B&&B.value===\"(\";if(!t&&u.noextglob!==true&&D()===\"(\"&&D(2)!==\"?\"){extglobOpen(\"qmark\",G);continue}if(B&&B.type===\"paren\"){const t=D();let e=G;if(B.value===\"(\"&&!/[!=<:]/.test(t)||t===\"<\"&&!/<([!=]|\\w+>)/.test(remaining())){e=`\\\\${G}`}push({type:\"text\",value:G,output:e});continue}if(u.dot!==true&&(B.type===\"slash\"||B.type===\"bos\")){push({type:\"qmark\",value:G,output:v});continue}push({type:\"qmark\",value:G,output:H});continue}if(G===\"!\"){if(u.noextglob!==true&&D()===\"(\"){if(D(2)!==\"?\"||!/[!=<:]/.test(D(3))){extglobOpen(\"negate\",G);continue}}if(u.nonegate!==true&&m.index===0){negate();continue}}if(G===\"+\"){if(u.noextglob!==true&&D()===\"(\"&&D(2)!==\"?\"){extglobOpen(\"plus\",G);continue}if(B&&B.value===\"(\"||u.regex===false){push({type:\"plus\",value:G,output:g});continue}if(B&&(B.type===\"bracket\"||B.type===\"paren\"||B.type===\"brace\")||m.parens>0){push({type:\"plus\",value:G});continue}push({type:\"plus\",value:g});continue}if(G===\"@\"){if(u.noextglob!==true&&D()===\"(\"&&D(2)!==\"?\"){push({type:\"at\",extglob:true,value:G,output:\"\"});continue}push({type:\"text\",value:G});continue}if(G!==\"*\"){if(G===\"$\"||G===\"^\"){G=`\\\\${G}`}const t=a.exec(remaining());if(t){G+=t[0];m.index+=t[0].length}push({type:\"text\",value:G});continue}if(B&&(B.type===\"globstar\"||B.star===true)){B.type=\"star\";B.star=true;B.value+=G;B.output=k;m.backtrack=true;m.globstar=true;consume(G);continue}let e=remaining();if(u.noextglob!==true&&/^\\([^?]/.test(e)){extglobOpen(\"star\",G);continue}if(B.type===\"star\"){if(u.noglobstar===true){consume(G);continue}const n=B.prev;const o=n.prev;const s=n.type===\"slash\"||n.type===\"bos\";const r=o&&(o.type===\"star\"||o.type===\"globstar\");if(u.bash===true&&(!s||e[0]&&e[0]!==\"/\")){push({type:\"star\",value:G,output:\"\"});continue}const a=m.braces>0&&(n.type===\"comma\"||n.type===\"brace\");const i=w.length&&(n.type===\"pipe\"||n.type===\"paren\");if(!s&&n.type!==\"paren\"&&!a&&!i){push({type:\"star\",value:G,output:\"\"});continue}while(e.slice(0,3)===\"/**\"){const u=t[m.index+4];if(u&&u!==\"/\"){break}e=e.slice(3);consume(\"/**\",3)}if(n.type===\"bos\"&&eos()){B.type=\"globstar\";B.value+=G;B.output=globstar(u);m.output=B.output;m.globstar=true;consume(G);continue}if(n.type===\"slash\"&&n.prev.type!==\"bos\"&&!r&&eos()){m.output=m.output.slice(0,-(n.output+B.output).length);n.output=`(?:${n.output}`;B.type=\"globstar\";B.output=globstar(u)+(u.strictSlashes?\")\":\"|$)\");B.value+=G;m.globstar=true;m.output+=n.output+B.output;consume(G);continue}if(n.type===\"slash\"&&n.prev.type!==\"bos\"&&e[0]===\"/\"){const t=e[1]!==void 0?\"|$\":\"\";m.output=m.output.slice(0,-(n.output+B.output).length);n.output=`(?:${n.output}`;B.type=\"globstar\";B.output=`${globstar(u)}${b}|${b}${t})`;B.value+=G;m.output+=n.output+B.output;m.globstar=true;consume(G+M());push({type:\"slash\",value:\"/\",output:\"\"});continue}if(n.type===\"bos\"&&e[0]===\"/\"){B.type=\"globstar\";B.value+=G;B.output=`(?:^|${b}|${globstar(u)}${b})`;m.output=B.output;m.globstar=true;consume(G+M());push({type:\"slash\",value:\"/\",output:\"\"});continue}m.output=m.output.slice(0,-B.output.length);B.type=\"globstar\";B.output=globstar(u);B.value+=G;m.output+=B.output;m.globstar=true;consume(G);continue}const n={type:\"star\",value:G,output:k};if(u.bash===true){n.output=\".*?\";if(B.type===\"bos\"||B.type===\"slash\"){n.output=T+n.output}push(n);continue}if(B&&(B.type===\"bracket\"||B.type===\"paren\")&&u.regex===true){n.output=G;push(n);continue}if(m.index===m.start||B.type===\"slash\"||B.type===\"dot\"){if(B.type===\"dot\"){m.output+=x;B.output+=x}else if(u.dot===true){m.output+=S;B.output+=S}else{m.output+=T;B.output+=T}if(D()!==\"*\"){m.output+=C;B.output+=C}}push(n)}while(m.brackets>0){if(u.strictBrackets===true)throw new SyntaxError(syntaxError(\"closing\",\"]\"));m.output=o.escapeLast(m.output,\"[\");decrement(\"brackets\")}while(m.parens>0){if(u.strictBrackets===true)throw new SyntaxError(syntaxError(\"closing\",\")\"));m.output=o.escapeLast(m.output,\"(\");decrement(\"parens\")}while(m.braces>0){if(u.strictBrackets===true)throw new SyntaxError(syntaxError(\"closing\",\"}\"));m.output=o.escapeLast(m.output,\"{\");decrement(\"braces\")}if(u.strictSlashes!==true&&(B.type===\"star\"||B.type===\"bracket\")){push({type:\"maybe_slash\",value:\"\",output:`${b}?`})}if(m.backtrack===true){m.output=\"\";for(const t of m.tokens){m.output+=t.output!=null?t.output:t.value;if(t.suffix){m.output+=t.suffix}}}return m};parse.fastpaths=(t,e)=>{const u={...e};const r=typeof u.maxLength===\"number\"?Math.min(s,u.maxLength):s;const a=t.length;if(a>r){throw new SyntaxError(`Input length: ${a}, exceeds maximum allowed length: ${r}`)}t=c[t]||t;const{DOT_LITERAL:i,SLASH_LITERAL:p,ONE_CHAR:l,DOTS_SLASH:f,NO_DOT:A,NO_DOTS:_,NO_DOTS_SLASH:R,STAR:E,START_ANCHOR:h}=n.globChars(u.windows);const g=u.dot?_:A;const b=u.dot?R:A;const C=u.capture?\"\":\"?:\";const y={negated:false,prefix:\"\"};let $=u.bash===true?\".*?\":E;if(u.capture){$=`(${$})`}const globstar=t=>{if(t.noglobstar===true)return $;return`(${C}(?:(?!${h}${t.dot?f:i}).)*?)`};const create=t=>{switch(t){case\"*\":return`${g}${l}${$}`;case\".*\":return`${i}${l}${$}`;case\"*.*\":return`${g}${$}${i}${l}${$}`;case\"*/*\":return`${g}${$}${p}${l}${b}${$}`;case\"**\":return g+globstar(u);case\"**/*\":return`(?:${g}${globstar(u)}${p})?${b}${l}${$}`;case\"**/*.*\":return`(?:${g}${globstar(u)}${p})?${b}${$}${i}${l}${$}`;case\"**/.*\":return`(?:${g}${globstar(u)}${p})?${i}${l}${$}`;default:{const e=/^(.*?)\\.(\\w+)$/.exec(t);if(!e)return;const u=create(e[1]);if(!u)return;return u+i+e[2]}}};const x=o.removePrefix(t,y);let S=create(x);if(S&&u.strictSlashes!==true){S+=`${p}?`}return S};t.exports=parse},510:(t,e,u)=>{const n=u(716);const o=u(697);const s=u(96);const r=u(154);const isObject=t=>t&&typeof t===\"object\"&&!Array.isArray(t);const picomatch=(t,e,u=false)=>{if(Array.isArray(t)){const n=t.map((t=>picomatch(t,e,u)));const arrayMatcher=t=>{for(const e of n){const u=e(t);if(u)return u}return false};return arrayMatcher}const n=isObject(t)&&t.tokens&&t.input;if(t===\"\"||typeof t!==\"string\"&&!n){throw new TypeError(\"Expected pattern to be a non-empty string\")}const o=e||{};const s=o.windows;const r=n?picomatch.compileRe(t,e):picomatch.makeRe(t,e,false,true);const a=r.state;delete r.state;let isIgnored=()=>false;if(o.ignore){const t={...e,ignore:null,onMatch:null,onResult:null};isIgnored=picomatch(o.ignore,t,u)}const matcher=(u,n=false)=>{const{isMatch:i,match:c,output:p}=picomatch.test(u,r,e,{glob:t,posix:s});const l={glob:t,state:a,regex:r,posix:s,input:u,output:p,match:c,isMatch:i};if(typeof o.onResult===\"function\"){o.onResult(l)}if(i===false){l.isMatch=false;return n?l:false}if(isIgnored(u)){if(typeof o.onIgnore===\"function\"){o.onIgnore(l)}l.isMatch=false;return n?l:false}if(typeof o.onMatch===\"function\"){o.onMatch(l)}return n?l:true};if(u){matcher.state=a}return matcher};picomatch.test=(t,e,u,{glob:n,posix:o}={})=>{if(typeof t!==\"string\"){throw new TypeError(\"Expected input to be a string\")}if(t===\"\"){return{isMatch:false,output:\"\"}}const r=u||{};const a=r.format||(o?s.toPosixSlashes:null);let i=t===n;let c=i&&a?a(t):t;if(i===false){c=a?a(t):t;i=c===n}if(i===false||r.capture===true){if(r.matchBase===true||r.basename===true){i=picomatch.matchBase(t,e,u,o)}else{i=e.exec(c)}}return{isMatch:Boolean(i),match:i,output:c}};picomatch.matchBase=(t,e,u)=>{const n=e instanceof RegExp?e:picomatch.makeRe(e,u);return n.test(s.basename(t))};picomatch.isMatch=(t,e,u)=>picomatch(e,u)(t);picomatch.parse=(t,e)=>{if(Array.isArray(t))return t.map((t=>picomatch.parse(t,e)));return o(t,{...e,fastpaths:false})};picomatch.scan=(t,e)=>n(t,e);picomatch.compileRe=(t,e,u=false,n=false)=>{if(u===true){return t.output}const o=e||{};const s=o.contains?\"\":\"^\";const r=o.contains?\"\":\"$\";let a=`${s}(?:${t.output})${r}`;if(t&&t.negated===true){a=`^(?!${a}).*$`}const i=picomatch.toRegex(a,e);if(n===true){i.state=t}return i};picomatch.makeRe=(t,e={},u=false,n=false)=>{if(!t||typeof t!==\"string\"){throw new TypeError(\"Expected a non-empty string\")}let s={negated:false,fastpaths:true};if(e.fastpaths!==false&&(t[0]===\".\"||t[0]===\"*\")){s.output=o.fastpaths(t,e)}if(!s.output){s=o(t,e)}return picomatch.compileRe(s,e,u,n)};picomatch.toRegex=(t,e)=>{try{const u=e||{};return new RegExp(t,u.flags||(u.nocase?\"i\":\"\"))}catch(t){if(e&&e.debug===true)throw t;return/$^/}};picomatch.constants=r;t.exports=picomatch},716:(t,e,u)=>{const n=u(96);const{CHAR_ASTERISK:o,CHAR_AT:s,CHAR_BACKWARD_SLASH:r,CHAR_COMMA:a,CHAR_DOT:i,CHAR_EXCLAMATION_MARK:c,CHAR_FORWARD_SLASH:p,CHAR_LEFT_CURLY_BRACE:l,CHAR_LEFT_PARENTHESES:f,CHAR_LEFT_SQUARE_BRACKET:A,CHAR_PLUS:_,CHAR_QUESTION_MARK:R,CHAR_RIGHT_CURLY_BRACE:E,CHAR_RIGHT_PARENTHESES:h,CHAR_RIGHT_SQUARE_BRACKET:g}=u(154);const isPathSeparator=t=>t===p||t===r;const depth=t=>{if(t.isPrefix!==true){t.depth=t.isGlobstar?Infinity:1}};const scan=(t,e)=>{const u=e||{};const b=t.length-1;const C=u.parts===true||u.scanToEnd===true;const y=[];const $=[];const x=[];let S=t;let H=-1;let v=0;let d=0;let L=false;let T=false;let O=false;let k=false;let m=false;let w=false;let N=false;let I=false;let B=false;let G=false;let D=0;let M;let P;let K={value:\"\",depth:0,isGlob:false};const eos=()=>H>=b;const peek=()=>S.charCodeAt(H+1);const advance=()=>{M=P;return S.charCodeAt(++H)};while(H<b){P=advance();let t;if(P===r){N=K.backslashes=true;P=advance();if(P===l){w=true}continue}if(w===true||P===l){D++;while(eos()!==true&&(P=advance())){if(P===r){N=K.backslashes=true;advance();continue}if(P===l){D++;continue}if(w!==true&&P===i&&(P=advance())===i){L=K.isBrace=true;O=K.isGlob=true;G=true;if(C===true){continue}break}if(w!==true&&P===a){L=K.isBrace=true;O=K.isGlob=true;G=true;if(C===true){continue}break}if(P===E){D--;if(D===0){w=false;L=K.isBrace=true;G=true;break}}}if(C===true){continue}break}if(P===p){y.push(H);$.push(K);K={value:\"\",depth:0,isGlob:false};if(G===true)continue;if(M===i&&H===v+1){v+=2;continue}d=H+1;continue}if(u.noext!==true){const t=P===_||P===s||P===o||P===R||P===c;if(t===true&&peek()===f){O=K.isGlob=true;k=K.isExtglob=true;G=true;if(P===c&&H===v){B=true}if(C===true){while(eos()!==true&&(P=advance())){if(P===r){N=K.backslashes=true;P=advance();continue}if(P===h){O=K.isGlob=true;G=true;break}}continue}break}}if(P===o){if(M===o)m=K.isGlobstar=true;O=K.isGlob=true;G=true;if(C===true){continue}break}if(P===R){O=K.isGlob=true;G=true;if(C===true){continue}break}if(P===A){while(eos()!==true&&(t=advance())){if(t===r){N=K.backslashes=true;advance();continue}if(t===g){T=K.isBracket=true;O=K.isGlob=true;G=true;break}}if(C===true){continue}break}if(u.nonegate!==true&&P===c&&H===v){I=K.negated=true;v++;continue}if(u.noparen!==true&&P===f){O=K.isGlob=true;if(C===true){while(eos()!==true&&(P=advance())){if(P===f){N=K.backslashes=true;P=advance();continue}if(P===h){G=true;break}}continue}break}if(O===true){G=true;if(C===true){continue}break}}if(u.noext===true){k=false;O=false}let U=S;let X=\"\";let F=\"\";if(v>0){X=S.slice(0,v);S=S.slice(v);d-=v}if(U&&O===true&&d>0){U=S.slice(0,d);F=S.slice(d)}else if(O===true){U=\"\";F=S}else{U=S}if(U&&U!==\"\"&&U!==\"/\"&&U!==S){if(isPathSeparator(U.charCodeAt(U.length-1))){U=U.slice(0,-1)}}if(u.unescape===true){if(F)F=n.removeBackslashes(F);if(U&&N===true){U=n.removeBackslashes(U)}}const Q={prefix:X,input:t,start:v,base:U,glob:F,isBrace:L,isBracket:T,isGlob:O,isExtglob:k,isGlobstar:m,negated:I,negatedExtglob:B};if(u.tokens===true){Q.maxDepth=0;if(!isPathSeparator(P)){$.push(K)}Q.tokens=$}if(u.parts===true||u.tokens===true){let e;for(let n=0;n<y.length;n++){const o=e?e+1:v;const s=y[n];const r=t.slice(o,s);if(u.tokens){if(n===0&&v!==0){$[n].isPrefix=true;$[n].value=X}else{$[n].value=r}depth($[n]);Q.maxDepth+=$[n].depth}if(n!==0||r!==\"\"){x.push(r)}e=s}if(e&&e+1<t.length){const n=t.slice(e+1);x.push(n);if(u.tokens){$[$.length-1].value=n;depth($[$.length-1]);Q.maxDepth+=$[$.length-1].depth}}Q.slashes=y;Q.parts=x}return Q};t.exports=scan},96:(t,e,u)=>{const{REGEX_BACKSLASH:n,REGEX_REMOVE_BACKSLASH:o,REGEX_SPECIAL_CHARS:s,REGEX_SPECIAL_CHARS_GLOBAL:r}=u(154);e.isObject=t=>t!==null&&typeof t===\"object\"&&!Array.isArray(t);e.hasRegexChars=t=>s.test(t);e.isRegexChar=t=>t.length===1&&e.hasRegexChars(t);e.escapeRegex=t=>t.replace(r,\"\\\\$1\");e.toPosixSlashes=t=>t.replace(n,\"/\");e.removeBackslashes=t=>t.replace(o,(t=>t===\"\\\\\"?\"\":t));e.escapeLast=(t,u,n)=>{const o=t.lastIndexOf(u,n);if(o===-1)return t;if(t[o-1]===\"\\\\\")return e.escapeLast(t,u,o-1);return`${t.slice(0,o)}\\\\${t.slice(o)}`};e.removePrefix=(t,e={})=>{let u=t;if(u.startsWith(\"./\")){u=u.slice(2);e.prefix=\"./\"}return u};e.wrapOutput=(t,e={},u={})=>{const n=u.contains?\"\":\"^\";const o=u.contains?\"\":\"$\";let s=`${n}(?:${t})${o}`;if(e.negated===true){s=`(?:^(?!${s}).*$)`}return s};e.basename=(t,{windows:e}={})=>{const u=t.split(e?/[\\\\/]/:\"/\");const n=u[u.length-1];if(n===\"\"){return u[u.length-2]}return n}}};var e={};function __nccwpck_require__(u){var n=e[u];if(n!==undefined){return n.exports}var o=e[u]={exports:{}};var s=true;try{t[u](o,o.exports,__nccwpck_require__);s=false}finally{if(s)delete e[u]}return o.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var u=__nccwpck_require__(170);module.exports=u})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/picomatch/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  (function () {\n    function getComponentNameFromType(type) {\n      if (null == type) return null;\n      if (\"function\" === typeof type)\n        return type.$$typeof === REACT_CLIENT_REFERENCE\n          ? null\n          : type.displayName || type.name || null;\n      if (\"string\" === typeof type) return type;\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PORTAL_TYPE:\n          return \"Portal\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n      }\n      if (\"object\" === typeof type)\n        switch (\n          (\"number\" === typeof type.tag &&\n            console.error(\n              \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n            ),\n          type.$$typeof)\n        ) {\n          case REACT_CONTEXT_TYPE:\n            return (type.displayName || \"Context\") + \".Provider\";\n          case REACT_CONSUMER_TYPE:\n            return (type._context.displayName || \"Context\") + \".Consumer\";\n          case REACT_FORWARD_REF_TYPE:\n            var innerType = type.render;\n            type = type.displayName;\n            type ||\n              ((type = innerType.displayName || innerType.name || \"\"),\n              (type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\"));\n            return type;\n          case REACT_MEMO_TYPE:\n            return (\n              (innerType = type.displayName || null),\n              null !== innerType\n                ? innerType\n                : getComponentNameFromType(type.type) || \"Memo\"\n            );\n          case REACT_LAZY_TYPE:\n            innerType = type._payload;\n            type = type._init;\n            try {\n              return getComponentNameFromType(type(innerType));\n            } catch (x) {}\n        }\n      return null;\n    }\n    function testStringCoercion(value) {\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      try {\n        testStringCoercion(value);\n        var JSCompiler_inline_result = !1;\n      } catch (e) {\n        JSCompiler_inline_result = !0;\n      }\n      if (JSCompiler_inline_result) {\n        JSCompiler_inline_result = console;\n        var JSCompiler_temp_const = JSCompiler_inline_result.error;\n        var JSCompiler_inline_result$jscomp$0 =\n          (\"function\" === typeof Symbol &&\n            Symbol.toStringTag &&\n            value[Symbol.toStringTag]) ||\n          value.constructor.name ||\n          \"Object\";\n        JSCompiler_temp_const.call(\n          JSCompiler_inline_result,\n          \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n          JSCompiler_inline_result$jscomp$0\n        );\n        return testStringCoercion(value);\n      }\n    }\n    function getTaskName(type) {\n      if (type === REACT_FRAGMENT_TYPE) return \"<>\";\n      if (\n        \"object\" === typeof type &&\n        null !== type &&\n        type.$$typeof === REACT_LAZY_TYPE\n      )\n        return \"<...>\";\n      try {\n        var name = getComponentNameFromType(type);\n        return name ? \"<\" + name + \">\" : \"<...>\";\n      } catch (x) {\n        return \"<...>\";\n      }\n    }\n    function getOwner() {\n      var dispatcher = ReactSharedInternals.A;\n      return null === dispatcher ? null : dispatcher.getOwner();\n    }\n    function hasValidKey(config) {\n      if (hasOwnProperty.call(config, \"key\")) {\n        var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n        if (getter && getter.isReactWarning) return !1;\n      }\n      return void 0 !== config.key;\n    }\n    function defineKeyPropWarningGetter(props, displayName) {\n      function warnAboutAccessingKey() {\n        specialPropKeyWarningShown ||\n          ((specialPropKeyWarningShown = !0),\n          console.error(\n            \"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",\n            displayName\n          ));\n      }\n      warnAboutAccessingKey.isReactWarning = !0;\n      Object.defineProperty(props, \"key\", {\n        get: warnAboutAccessingKey,\n        configurable: !0\n      });\n    }\n    function elementRefGetterWithDeprecationWarning() {\n      var componentName = getComponentNameFromType(this.type);\n      didWarnAboutElementRef[componentName] ||\n        ((didWarnAboutElementRef[componentName] = !0),\n        console.error(\n          \"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"\n        ));\n      componentName = this.props.ref;\n      return void 0 !== componentName ? componentName : null;\n    }\n    function ReactElement(\n      type,\n      key,\n      self,\n      source,\n      owner,\n      props,\n      debugStack,\n      debugTask\n    ) {\n      self = props.ref;\n      type = {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key,\n        props: props,\n        _owner: owner\n      };\n      null !== (void 0 !== self ? self : null)\n        ? Object.defineProperty(type, \"ref\", {\n            enumerable: !1,\n            get: elementRefGetterWithDeprecationWarning\n          })\n        : Object.defineProperty(type, \"ref\", { enumerable: !1, value: null });\n      type._store = {};\n      Object.defineProperty(type._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: 0\n      });\n      Object.defineProperty(type, \"_debugInfo\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: null\n      });\n      Object.defineProperty(type, \"_debugStack\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugStack\n      });\n      Object.defineProperty(type, \"_debugTask\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugTask\n      });\n      Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n      return type;\n    }\n    function jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self,\n      debugStack,\n      debugTask\n    ) {\n      var children = config.children;\n      if (void 0 !== children)\n        if (isStaticChildren)\n          if (isArrayImpl(children)) {\n            for (\n              isStaticChildren = 0;\n              isStaticChildren < children.length;\n              isStaticChildren++\n            )\n              validateChildKeys(children[isStaticChildren]);\n            Object.freeze && Object.freeze(children);\n          } else\n            console.error(\n              \"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\"\n            );\n        else validateChildKeys(children);\n      if (hasOwnProperty.call(config, \"key\")) {\n        children = getComponentNameFromType(type);\n        var keys = Object.keys(config).filter(function (k) {\n          return \"key\" !== k;\n        });\n        isStaticChildren =\n          0 < keys.length\n            ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\"\n            : \"{key: someKey}\";\n        didWarnAboutKeySpread[children + isStaticChildren] ||\n          ((keys =\n            0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\"),\n          console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />',\n            isStaticChildren,\n            children,\n            keys,\n            children\n          ),\n          (didWarnAboutKeySpread[children + isStaticChildren] = !0));\n      }\n      children = null;\n      void 0 !== maybeKey &&\n        (checkKeyStringCoercion(maybeKey), (children = \"\" + maybeKey));\n      hasValidKey(config) &&\n        (checkKeyStringCoercion(config.key), (children = \"\" + config.key));\n      if (\"key\" in config) {\n        maybeKey = {};\n        for (var propName in config)\n          \"key\" !== propName && (maybeKey[propName] = config[propName]);\n      } else maybeKey = config;\n      children &&\n        defineKeyPropWarningGetter(\n          maybeKey,\n          \"function\" === typeof type\n            ? type.displayName || type.name || \"Unknown\"\n            : type\n        );\n      return ReactElement(\n        type,\n        children,\n        self,\n        source,\n        getOwner(),\n        maybeKey,\n        debugStack,\n        debugTask\n      );\n    }\n    function validateChildKeys(node) {\n      \"object\" === typeof node &&\n        null !== node &&\n        node.$$typeof === REACT_ELEMENT_TYPE &&\n        node._store &&\n        (node._store.validated = 1);\n    }\n    var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"),\n      REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n      REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n      REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n      REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n      REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n    Symbol.for(\"react.provider\");\n    var REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n      REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n      REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n      REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n      REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n      REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n      REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n      REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"),\n      ReactSharedInternals =\n        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      isArrayImpl = Array.isArray,\n      createTask = console.createTask\n        ? console.createTask\n        : function () {\n            return null;\n          },\n      specialPropKeyWarningShown;\n    var didWarnAboutElementRef = {};\n    var didWarnAboutKeySpread = {};\n    exports.Fragment = REACT_FRAGMENT_TYPE;\n    exports.jsxDEV = function (\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self\n    ) {\n      return jsxDEVImpl(\n        type,\n        config,\n        maybeKey,\n        isStaticChildren,\n        source,\n        self,\n        Error(\"react-stack-top-frame\"),\n        createTask(getTaskName(type))\n      );\n    };\n  })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9EZXNrdG9wL2MycGEgdG9vbC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/amp-context.shared-runtime.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/amp-context.shared-runtime.js ***!
  \*************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"AmpStateContext\", ({\n    enumerable: true,\n    get: function() {\n        return AmpStateContext;\n    }\n}));\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nconst AmpStateContext = _react.default.createContext({});\nif (true) {\n    AmpStateContext.displayName = 'AmpStateContext';\n} //# sourceMappingURL=amp-context.shared-runtime.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9hbXAtY29udGV4dC5zaGFyZWQtcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiOzs7O21EQUVhQTs7O2VBQUFBOzs7OzRFQUZLO0FBRVgsTUFBTUEsa0JBQXNDQyxPQUFBQSxPQUFLLENBQUNDLGFBQWEsQ0FBQyxDQUFDO0FBRXhFLElBQUlDLElBQW9CLEVBQW1CO0lBQ3pDSCxnQkFBZ0JNLFdBQVcsR0FBRztBQUNoQyIsInNvdXJjZXMiOlsiL1VzZXJzL3NyYy9zaGFyZWQvbGliL2FtcC1jb250ZXh0LnNoYXJlZC1ydW50aW1lLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuZXhwb3J0IGNvbnN0IEFtcFN0YXRlQ29udGV4dDogUmVhY3QuQ29udGV4dDxhbnk+ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7fSlcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgQW1wU3RhdGVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0FtcFN0YXRlQ29udGV4dCdcbn1cbiJdLCJuYW1lcyI6WyJBbXBTdGF0ZUNvbnRleHQiLCJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJkaXNwbGF5TmFtZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/amp-context.shared-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/amp-mode.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/amp-mode.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"isInAmpMode\", ({\n    enumerable: true,\n    get: function() {\n        return isInAmpMode;\n    }\n}));\nfunction isInAmpMode(param) {\n    let { ampFirst = false, hybrid = false, hasQuery = false } = param === void 0 ? {} : param;\n    return ampFirst || hybrid && hasQuery;\n} //# sourceMappingURL=amp-mode.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9hbXAtbW9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7OytDQUFnQkE7OztlQUFBQTs7O0FBQVQsU0FBU0EsWUFBWTtJQUFBLE1BQzFCQyxXQUFXLEtBQUssRUFDaEJDLFNBQVMsS0FBSyxFQUNkQyxXQUFXLEtBQUssRUFDakIsR0FKMkIsbUJBSXhCLENBQUMsSUFKdUI7SUFLMUIsT0FBT0YsWUFBYUMsVUFBVUM7QUFDaEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zcmMvc2hhcmVkL2xpYi9hbXAtbW9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNJbkFtcE1vZGUoe1xuICBhbXBGaXJzdCA9IGZhbHNlLFxuICBoeWJyaWQgPSBmYWxzZSxcbiAgaGFzUXVlcnkgPSBmYWxzZSxcbn0gPSB7fSk6IGJvb2xlYW4ge1xuICByZXR1cm4gYW1wRmlyc3QgfHwgKGh5YnJpZCAmJiBoYXNRdWVyeSlcbn1cbiJdLCJuYW1lcyI6WyJpc0luQW1wTW9kZSIsImFtcEZpcnN0IiwiaHlicmlkIiwiaGFzUXVlcnkiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/amp-mode.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/get-img-props.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/get-img-props.js ***!
  \************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getImgProps\", ({\n    enumerable: true,\n    get: function() {\n        return getImgProps;\n    }\n}));\nconst _warnonce = __webpack_require__(/*! ./utils/warn-once */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/utils/warn-once.js\");\nconst _imageblursvg = __webpack_require__(/*! ./image-blur-svg */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/image-blur-svg.js\");\nconst _imageconfig = __webpack_require__(/*! ./image-config */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/image-config.js\");\nconst VALID_LOADING_VALUES = [\n    'lazy',\n    'eager',\n    undefined\n];\nfunction isStaticRequire(src) {\n    return src.default !== undefined;\n}\nfunction isStaticImageData(src) {\n    return src.src !== undefined;\n}\nfunction isStaticImport(src) {\n    return !!src && typeof src === 'object' && (isStaticRequire(src) || isStaticImageData(src));\n}\nconst allImgs = new Map();\nlet perfObserver;\nfunction getInt(x) {\n    if (typeof x === 'undefined') {\n        return x;\n    }\n    if (typeof x === 'number') {\n        return Number.isFinite(x) ? x : NaN;\n    }\n    if (typeof x === 'string' && /^[0-9]+$/.test(x)) {\n        return parseInt(x, 10);\n    }\n    return NaN;\n}\nfunction getWidths(param, width, sizes) {\n    let { deviceSizes, allSizes } = param;\n    if (sizes) {\n        // Find all the \"vw\" percent sizes used in the sizes prop\n        const viewportWidthRe = /(^|\\s)(1?\\d?\\d)vw/g;\n        const percentSizes = [];\n        for(let match; match = viewportWidthRe.exec(sizes); match){\n            percentSizes.push(parseInt(match[2]));\n        }\n        if (percentSizes.length) {\n            const smallestRatio = Math.min(...percentSizes) * 0.01;\n            return {\n                widths: allSizes.filter((s)=>s >= deviceSizes[0] * smallestRatio),\n                kind: 'w'\n            };\n        }\n        return {\n            widths: allSizes,\n            kind: 'w'\n        };\n    }\n    if (typeof width !== 'number') {\n        return {\n            widths: deviceSizes,\n            kind: 'w'\n        };\n    }\n    const widths = [\n        ...new Set(// > are actually 3x in the green color, but only 1.5x in the red and\n        // > blue colors. Showing a 3x resolution image in the app vs a 2x\n        // > resolution image will be visually the same, though the 3x image\n        // > takes significantly more data. Even true 3x resolution screens are\n        // > wasteful as the human eye cannot see that level of detail without\n        // > something like a magnifying glass.\n        // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html\n        [\n            width,\n            width * 2 /*, width * 3*/ \n        ].map((w)=>allSizes.find((p)=>p >= w) || allSizes[allSizes.length - 1]))\n    ];\n    return {\n        widths,\n        kind: 'x'\n    };\n}\nfunction generateImgAttrs(param) {\n    let { config, src, unoptimized, width, quality, sizes, loader } = param;\n    if (unoptimized) {\n        return {\n            src,\n            srcSet: undefined,\n            sizes: undefined\n        };\n    }\n    const { widths, kind } = getWidths(config, width, sizes);\n    const last = widths.length - 1;\n    return {\n        sizes: !sizes && kind === 'w' ? '100vw' : sizes,\n        srcSet: widths.map((w, i)=>loader({\n                config,\n                src,\n                quality,\n                width: w\n            }) + \" \" + (kind === 'w' ? w : i + 1) + kind).join(', '),\n        // It's intended to keep `src` the last attribute because React updates\n        // attributes in order. If we keep `src` the first one, Safari will\n        // immediately start to fetch `src`, before `sizes` and `srcSet` are even\n        // updated by React. That causes multiple unnecessary requests if `srcSet`\n        // and `sizes` are defined.\n        // This bug cannot be reproduced in Chrome or Firefox.\n        src: loader({\n            config,\n            src,\n            quality,\n            width: widths[last]\n        })\n    };\n}\nfunction getImgProps(param, _state) {\n    let { src, sizes, unoptimized = false, priority = false, loading, className, quality, width, height, fill = false, style, overrideSrc, onLoad, onLoadingComplete, placeholder = 'empty', blurDataURL, fetchPriority, decoding = 'async', layout, objectFit, objectPosition, lazyBoundary, lazyRoot, ...rest } = param;\n    const { imgConf, showAltText, blurComplete, defaultLoader } = _state;\n    let config;\n    let c = imgConf || _imageconfig.imageConfigDefault;\n    if ('allSizes' in c) {\n        config = c;\n    } else {\n        var _c_qualities;\n        const allSizes = [\n            ...c.deviceSizes,\n            ...c.imageSizes\n        ].sort((a, b)=>a - b);\n        const deviceSizes = c.deviceSizes.sort((a, b)=>a - b);\n        const qualities = (_c_qualities = c.qualities) == null ? void 0 : _c_qualities.sort((a, b)=>a - b);\n        config = {\n            ...c,\n            allSizes,\n            deviceSizes,\n            qualities\n        };\n    }\n    if (typeof defaultLoader === 'undefined') {\n        throw Object.defineProperty(new Error('images.loaderFile detected but the file is missing default export.\\nRead more: https://nextjs.org/docs/messages/invalid-images-config'), \"__NEXT_ERROR_CODE\", {\n            value: \"E163\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    let loader = rest.loader || defaultLoader;\n    // Remove property so it's not spread on <img> element\n    delete rest.loader;\n    delete rest.srcSet;\n    // This special value indicates that the user\n    // didn't define a \"loader\" prop or \"loader\" config.\n    const isDefaultLoader = '__next_img_default' in loader;\n    if (isDefaultLoader) {\n        if (config.loader === 'custom') {\n            throw Object.defineProperty(new Error('Image with src \"' + src + '\" is missing \"loader\" prop.' + \"\\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader\"), \"__NEXT_ERROR_CODE\", {\n                value: \"E252\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n    } else {\n        // The user defined a \"loader\" prop or config.\n        // Since the config object is internal only, we\n        // must not pass it to the user-defined \"loader\".\n        const customImageLoader = loader;\n        loader = (obj)=>{\n            const { config: _, ...opts } = obj;\n            return customImageLoader(opts);\n        };\n    }\n    if (layout) {\n        if (layout === 'fill') {\n            fill = true;\n        }\n        const layoutToStyle = {\n            intrinsic: {\n                maxWidth: '100%',\n                height: 'auto'\n            },\n            responsive: {\n                width: '100%',\n                height: 'auto'\n            }\n        };\n        const layoutToSizes = {\n            responsive: '100vw',\n            fill: '100vw'\n        };\n        const layoutStyle = layoutToStyle[layout];\n        if (layoutStyle) {\n            style = {\n                ...style,\n                ...layoutStyle\n            };\n        }\n        const layoutSizes = layoutToSizes[layout];\n        if (layoutSizes && !sizes) {\n            sizes = layoutSizes;\n        }\n    }\n    let staticSrc = '';\n    let widthInt = getInt(width);\n    let heightInt = getInt(height);\n    let blurWidth;\n    let blurHeight;\n    if (isStaticImport(src)) {\n        const staticImageData = isStaticRequire(src) ? src.default : src;\n        if (!staticImageData.src) {\n            throw Object.defineProperty(new Error(\"An object should only be passed to the image component src parameter if it comes from a static image import. It must include src. Received \" + JSON.stringify(staticImageData)), \"__NEXT_ERROR_CODE\", {\n                value: \"E460\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (!staticImageData.height || !staticImageData.width) {\n            throw Object.defineProperty(new Error(\"An object should only be passed to the image component src parameter if it comes from a static image import. It must include height and width. Received \" + JSON.stringify(staticImageData)), \"__NEXT_ERROR_CODE\", {\n                value: \"E48\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        blurWidth = staticImageData.blurWidth;\n        blurHeight = staticImageData.blurHeight;\n        blurDataURL = blurDataURL || staticImageData.blurDataURL;\n        staticSrc = staticImageData.src;\n        if (!fill) {\n            if (!widthInt && !heightInt) {\n                widthInt = staticImageData.width;\n                heightInt = staticImageData.height;\n            } else if (widthInt && !heightInt) {\n                const ratio = widthInt / staticImageData.width;\n                heightInt = Math.round(staticImageData.height * ratio);\n            } else if (!widthInt && heightInt) {\n                const ratio = heightInt / staticImageData.height;\n                widthInt = Math.round(staticImageData.width * ratio);\n            }\n        }\n    }\n    src = typeof src === 'string' ? src : staticSrc;\n    let isLazy = !priority && (loading === 'lazy' || typeof loading === 'undefined');\n    if (!src || src.startsWith('data:') || src.startsWith('blob:')) {\n        // https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n        unoptimized = true;\n        isLazy = false;\n    }\n    if (config.unoptimized) {\n        unoptimized = true;\n    }\n    if (isDefaultLoader && !config.dangerouslyAllowSVG && src.split('?', 1)[0].endsWith('.svg')) {\n        // Special case to make svg serve as-is to avoid proxying\n        // through the built-in Image Optimization API.\n        unoptimized = true;\n    }\n    const qualityInt = getInt(quality);\n    if (true) {\n        if (config.output === 'export' && isDefaultLoader && !unoptimized) {\n            throw Object.defineProperty(new Error(\"Image Optimization using the default loader is not compatible with `{ output: 'export' }`.\\n  Possible solutions:\\n    - Remove `{ output: 'export' }` and run \\\"next start\\\" to run server mode including the Image Optimization API.\\n    - Configure `{ images: { unoptimized: true } }` in `next.config.js` to disable the Image Optimization API.\\n  Read more: https://nextjs.org/docs/messages/export-image-api\"), \"__NEXT_ERROR_CODE\", {\n                value: \"E500\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (!src) {\n            // React doesn't show the stack trace and there's\n            // no `src` to help identify which image, so we\n            // instead console.error(ref) during mount.\n            unoptimized = true;\n        } else {\n            if (fill) {\n                if (width) {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" has both \"width\" and \"fill\" properties. Only one should be used.'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E96\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                if (height) {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" has both \"height\" and \"fill\" properties. Only one should be used.'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E115\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                if ((style == null ? void 0 : style.position) && style.position !== 'absolute') {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" has both \"fill\" and \"style.position\" properties. Images with \"fill\" always use position absolute - it cannot be modified.'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E216\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                if ((style == null ? void 0 : style.width) && style.width !== '100%') {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" has both \"fill\" and \"style.width\" properties. Images with \"fill\" always use width 100% - it cannot be modified.'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E73\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                if ((style == null ? void 0 : style.height) && style.height !== '100%') {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" has both \"fill\" and \"style.height\" properties. Images with \"fill\" always use height 100% - it cannot be modified.'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E404\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n            } else {\n                if (typeof widthInt === 'undefined') {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" is missing required \"width\" property.'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E451\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                } else if (isNaN(widthInt)) {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" has invalid \"width\" property. Expected a numeric value in pixels but received \"' + width + '\".'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E66\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                if (typeof heightInt === 'undefined') {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" is missing required \"height\" property.'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E397\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                } else if (isNaN(heightInt)) {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" has invalid \"height\" property. Expected a numeric value in pixels but received \"' + height + '\".'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E444\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                // eslint-disable-next-line no-control-regex\n                if (/^[\\x00-\\x20]/.test(src)) {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" cannot start with a space or control character. Use src.trimStart() to remove it or encodeURIComponent(src) to keep it.'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E176\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                // eslint-disable-next-line no-control-regex\n                if (/[\\x00-\\x20]$/.test(src)) {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" cannot end with a space or control character. Use src.trimEnd() to remove it or encodeURIComponent(src) to keep it.'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E21\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n            }\n        }\n        if (!VALID_LOADING_VALUES.includes(loading)) {\n            throw Object.defineProperty(new Error('Image with src \"' + src + '\" has invalid \"loading\" property. Provided \"' + loading + '\" should be one of ' + VALID_LOADING_VALUES.map(String).join(',') + \".\"), \"__NEXT_ERROR_CODE\", {\n                value: \"E357\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (priority && loading === 'lazy') {\n            throw Object.defineProperty(new Error('Image with src \"' + src + '\" has both \"priority\" and \"loading=\\'lazy\\'\" properties. Only one should be used.'), \"__NEXT_ERROR_CODE\", {\n                value: \"E218\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (placeholder !== 'empty' && placeholder !== 'blur' && !placeholder.startsWith('data:image/')) {\n            throw Object.defineProperty(new Error('Image with src \"' + src + '\" has invalid \"placeholder\" property \"' + placeholder + '\".'), \"__NEXT_ERROR_CODE\", {\n                value: \"E431\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (placeholder !== 'empty') {\n            if (widthInt && heightInt && widthInt * heightInt < 1600) {\n                (0, _warnonce.warnOnce)('Image with src \"' + src + '\" is smaller than 40x40. Consider removing the \"placeholder\" property to improve performance.');\n            }\n        }\n        if (placeholder === 'blur' && !blurDataURL) {\n            const VALID_BLUR_EXT = [\n                'jpeg',\n                'png',\n                'webp',\n                'avif'\n            ] // should match next-image-loader\n            ;\n            throw Object.defineProperty(new Error('Image with src \"' + src + '\" has \"placeholder=\\'blur\\'\" property but is missing the \"blurDataURL\" property.\\n        Possible solutions:\\n          - Add a \"blurDataURL\" property, the contents should be a small Data URL to represent the image\\n          - Change the \"src\" property to a static import with one of the supported file types: ' + VALID_BLUR_EXT.join(',') + ' (animated images not supported)\\n          - Remove the \"placeholder\" property, effectively no blur effect\\n        Read more: https://nextjs.org/docs/messages/placeholder-blur-data-url'), \"__NEXT_ERROR_CODE\", {\n                value: \"E371\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if ('ref' in rest) {\n            (0, _warnonce.warnOnce)('Image with src \"' + src + '\" is using unsupported \"ref\" property. Consider using the \"onLoad\" property instead.');\n        }\n        if (!unoptimized && !isDefaultLoader) {\n            const urlStr = loader({\n                config,\n                src,\n                width: widthInt || 400,\n                quality: qualityInt || 75\n            });\n            let url;\n            try {\n                url = new URL(urlStr);\n            } catch (err) {}\n            if (urlStr === src || url && url.pathname === src && !url.search) {\n                (0, _warnonce.warnOnce)('Image with src \"' + src + '\" has a \"loader\" property that does not implement width. Please implement it or use the \"unoptimized\" property instead.' + \"\\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader-width\");\n            }\n        }\n        if (onLoadingComplete) {\n            (0, _warnonce.warnOnce)('Image with src \"' + src + '\" is using deprecated \"onLoadingComplete\" property. Please use the \"onLoad\" property instead.');\n        }\n        for (const [legacyKey, legacyValue] of Object.entries({\n            layout,\n            objectFit,\n            objectPosition,\n            lazyBoundary,\n            lazyRoot\n        })){\n            if (legacyValue) {\n                (0, _warnonce.warnOnce)('Image with src \"' + src + '\" has legacy prop \"' + legacyKey + '\". Did you forget to run the codemod?' + \"\\nRead more: https://nextjs.org/docs/messages/next-image-upgrade-to-13\");\n            }\n        }\n        if ( true && !perfObserver && window.PerformanceObserver) {\n            perfObserver = new PerformanceObserver((entryList)=>{\n                for (const entry of entryList.getEntries()){\n                    var _entry_element;\n                    // @ts-ignore - missing \"LargestContentfulPaint\" class with \"element\" prop\n                    const imgSrc = (entry == null ? void 0 : (_entry_element = entry.element) == null ? void 0 : _entry_element.src) || '';\n                    const lcpImage = allImgs.get(imgSrc);\n                    if (lcpImage && !lcpImage.priority && lcpImage.placeholder === 'empty' && !lcpImage.src.startsWith('data:') && !lcpImage.src.startsWith('blob:')) {\n                        // https://web.dev/lcp/#measure-lcp-in-javascript\n                        (0, _warnonce.warnOnce)('Image with src \"' + lcpImage.src + '\" was detected as the Largest Contentful Paint (LCP). Please add the \"priority\" property if this image is above the fold.' + \"\\nRead more: https://nextjs.org/docs/api-reference/next/image#priority\");\n                    }\n                }\n            });\n            try {\n                perfObserver.observe({\n                    type: 'largest-contentful-paint',\n                    buffered: true\n                });\n            } catch (err) {\n                // Log error but don't crash the app\n                console.error(err);\n            }\n        }\n    }\n    const imgStyle = Object.assign(fill ? {\n        position: 'absolute',\n        height: '100%',\n        width: '100%',\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        objectFit,\n        objectPosition\n    } : {}, showAltText ? {} : {\n        color: 'transparent'\n    }, style);\n    const backgroundImage = !blurComplete && placeholder !== 'empty' ? placeholder === 'blur' ? 'url(\"data:image/svg+xml;charset=utf-8,' + (0, _imageblursvg.getImageBlurSvg)({\n        widthInt,\n        heightInt,\n        blurWidth,\n        blurHeight,\n        blurDataURL: blurDataURL || '',\n        objectFit: imgStyle.objectFit\n    }) + '\")' : 'url(\"' + placeholder + '\")' // assume `data:image/`\n     : null;\n    let placeholderStyle = backgroundImage ? {\n        backgroundSize: imgStyle.objectFit || 'cover',\n        backgroundPosition: imgStyle.objectPosition || '50% 50%',\n        backgroundRepeat: 'no-repeat',\n        backgroundImage\n    } : {};\n    if (true) {\n        if (placeholderStyle.backgroundImage && placeholder === 'blur' && (blurDataURL == null ? void 0 : blurDataURL.startsWith('/'))) {\n            // During `next dev`, we don't want to generate blur placeholders with webpack\n            // because it can delay starting the dev server. Instead, `next-image-loader.js`\n            // will inline a special url to lazily generate the blur placeholder at request time.\n            placeholderStyle.backgroundImage = 'url(\"' + blurDataURL + '\")';\n        }\n    }\n    const imgAttributes = generateImgAttrs({\n        config,\n        src,\n        unoptimized,\n        width: widthInt,\n        quality: qualityInt,\n        sizes,\n        loader\n    });\n    if (true) {\n        if (true) {\n            let fullUrl;\n            try {\n                fullUrl = new URL(imgAttributes.src);\n            } catch (e) {\n                fullUrl = new URL(imgAttributes.src, window.location.href);\n            }\n            allImgs.set(fullUrl.href, {\n                src,\n                priority,\n                placeholder\n            });\n        }\n    }\n    const props = {\n        ...rest,\n        loading: isLazy ? 'lazy' : loading,\n        fetchPriority,\n        width: widthInt,\n        height: heightInt,\n        decoding,\n        className,\n        style: {\n            ...imgStyle,\n            ...placeholderStyle\n        },\n        sizes: imgAttributes.sizes,\n        srcSet: imgAttributes.srcSet,\n        src: overrideSrc || imgAttributes.src\n    };\n    const meta = {\n        unoptimized,\n        priority,\n        placeholder,\n        fill\n    };\n    return {\n        props,\n        meta\n    };\n} //# sourceMappingURL=get-img-props.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9nZXQtaW1nLXByb3BzLmpzIiwibWFwcGluZ3MiOiI7Ozs7K0NBOE9nQkE7OztlQUFBQTs7O3NDQTlPUzswQ0FDTzt5Q0FDRztBQStFbkMsTUFBTUMsdUJBQXVCO0lBQUM7SUFBUTtJQUFTQztDQUFVO0FBa0J6RCxTQUFTQyxnQkFDUEMsR0FBb0M7SUFFcEMsT0FBUUEsSUFBc0JDLE9BQU8sS0FBS0g7QUFDNUM7QUFFQSxTQUFTSSxrQkFDUEYsR0FBb0M7SUFFcEMsT0FBUUEsSUFBd0JBLEdBQUcsS0FBS0Y7QUFDMUM7QUFFQSxTQUFTSyxlQUFlSCxHQUEwQjtJQUNoRCxPQUNFLENBQUMsQ0FBQ0EsT0FDRixPQUFPQSxRQUFRLFlBQ2RELENBQUFBLGdCQUFnQkMsUUFDZkUsa0JBQWtCRixJQUFBQSxDQUFtQjtBQUUzQztBQUVBLE1BQU1JLFVBQVUsSUFBSUM7QUFJcEIsSUFBSUM7QUFFSixTQUFTQyxPQUFPQyxDQUFVO0lBQ3hCLElBQUksT0FBT0EsTUFBTSxhQUFhO1FBQzVCLE9BQU9BO0lBQ1Q7SUFDQSxJQUFJLE9BQU9BLE1BQU0sVUFBVTtRQUN6QixPQUFPQyxPQUFPQyxRQUFRLENBQUNGLEtBQUtBLElBQUlHO0lBQ2xDO0lBQ0EsSUFBSSxPQUFPSCxNQUFNLFlBQVksV0FBV0ksSUFBSSxDQUFDSixJQUFJO1FBQy9DLE9BQU9LLFNBQVNMLEdBQUc7SUFDckI7SUFDQSxPQUFPRztBQUNUO0FBRUEsU0FBU0csVUFDUCxLQUFzQyxFQUN0Q0MsS0FBeUIsRUFDekJDLEtBQXlCO0lBRnpCLE1BQUVDLFdBQVcsRUFBRUMsUUFBUSxFQUFlLEdBQXRDO0lBSUEsSUFBSUYsT0FBTztRQUNULHlEQUF5RDtRQUN6RCxNQUFNRyxrQkFBa0I7UUFDeEIsTUFBTUMsZUFBZSxFQUFFO1FBQ3ZCLElBQUssSUFBSUMsT0FBUUEsUUFBUUYsZ0JBQWdCRyxJQUFJLENBQUNOLFFBQVNLLE1BQU87WUFDNURELGFBQWFHLElBQUksQ0FBQ1YsU0FBU1EsS0FBSyxDQUFDLEVBQUU7UUFDckM7UUFDQSxJQUFJRCxhQUFhSSxNQUFNLEVBQUU7WUFDdkIsTUFBTUMsZ0JBQWdCQyxLQUFLQyxHQUFHLElBQUlQLGdCQUFnQjtZQUNsRCxPQUFPO2dCQUNMUSxRQUFRVixTQUFTVyxNQUFNLENBQUMsQ0FBQ0MsSUFBTUEsS0FBS2IsV0FBVyxDQUFDLEVBQUUsR0FBR1E7Z0JBQ3JETSxNQUFNO1lBQ1I7UUFDRjtRQUNBLE9BQU87WUFBRUgsUUFBUVY7WUFBVWEsTUFBTTtRQUFJO0lBQ3ZDO0lBQ0EsSUFBSSxPQUFPaEIsVUFBVSxVQUFVO1FBQzdCLE9BQU87WUFBRWEsUUFBUVg7WUFBYWMsTUFBTTtRQUFJO0lBQzFDO0lBRUEsTUFBTUgsU0FBUztXQUNWLElBQUlJLElBQ0wscUVBQ3FFO1FBQ3JFLGtFQUFrRTtRQUNsRSxvRUFBb0U7UUFDcEUsdUVBQXVFO1FBQ3ZFLHNFQUFzRTtRQUN0RSx1Q0FBdUM7UUFDdkMscUlBQXFJO1FBQ3JJO1lBQUNqQjtZQUFPQSxRQUFRLEVBQUUsYUFBYTtTQUFHLENBQUNrQixHQUFHLENBQ3BDLENBQUNDLElBQU1oQixTQUFTaUIsSUFBSSxDQUFDLENBQUNDLElBQU1BLEtBQUtGLE1BQU1oQixRQUFRLENBQUNBLFNBQVNNLE1BQU0sR0FBRyxFQUFFO0tBR3pFO0lBQ0QsT0FBTztRQUFFSTtRQUFRRyxNQUFNO0lBQUk7QUFDN0I7QUFrQkEsU0FBU00saUJBQWlCLEtBUVI7SUFSUSxNQUN4QkMsTUFBTSxFQUNOdEMsR0FBRyxFQUNIdUMsV0FBVyxFQUNYeEIsS0FBSyxFQUNMeUIsT0FBTyxFQUNQeEIsS0FBSyxFQUNMeUIsTUFBTSxFQUNVLEdBUlE7SUFTeEIsSUFBSUYsYUFBYTtRQUNmLE9BQU87WUFBRXZDO1lBQUswQyxRQUFRNUM7WUFBV2tCLE9BQU9sQjtRQUFVO0lBQ3BEO0lBRUEsTUFBTSxFQUFFOEIsTUFBTSxFQUFFRyxJQUFJLEVBQUUsR0FBR2pCLFVBQVV3QixRQUFRdkIsT0FBT0M7SUFDbEQsTUFBTTJCLE9BQU9mLE9BQU9KLE1BQU0sR0FBRztJQUU3QixPQUFPO1FBQ0xSLE9BQU8sQ0FBQ0EsU0FBU2UsU0FBUyxNQUFNLFVBQVVmO1FBQzFDMEIsUUFBUWQsT0FDTEssR0FBRyxDQUNGLENBQUNDLEdBQUdVLElBQ0NILE9BQU87Z0JBQUVIO2dCQUFRdEM7Z0JBQUt3QztnQkFBU3pCLE9BQU9tQjtZQUFFLEtBQUcsTUFDNUNILENBQUFBLFNBQVMsTUFBTUcsSUFBSVUsSUFBSSxLQUN0QmIsTUFFTmMsSUFBSSxDQUFDO1FBRVIsdUVBQXVFO1FBQ3ZFLG1FQUFtRTtRQUNuRSx5RUFBeUU7UUFDekUsMEVBQTBFO1FBQzFFLDJCQUEyQjtRQUMzQixzREFBc0Q7UUFDdEQ3QyxLQUFLeUMsT0FBTztZQUFFSDtZQUFRdEM7WUFBS3dDO1lBQVN6QixPQUFPYSxNQUFNLENBQUNlLEtBQUs7UUFBQztJQUMxRDtBQUNGO0FBS08sU0FBUy9DLFlBQ2QsS0F5QmEsRUFDYmtELE1BS0M7SUEvQkQsTUFDRTlDLEdBQUcsRUFDSGdCLEtBQUssRUFDTHVCLGNBQWMsS0FBSyxFQUNuQlEsV0FBVyxLQUFLLEVBQ2hCQyxPQUFPLEVBQ1BDLFNBQVMsRUFDVFQsT0FBTyxFQUNQekIsS0FBSyxFQUNMbUMsTUFBTSxFQUNOQyxPQUFPLEtBQUssRUFDWkMsS0FBSyxFQUNMQyxXQUFXLEVBQ1hDLE1BQU0sRUFDTkMsaUJBQWlCLEVBQ2pCQyxjQUFjLE9BQU8sRUFDckJDLFdBQVcsRUFDWEMsYUFBYSxFQUNiQyxXQUFXLE9BQU8sRUFDbEJDLE1BQU0sRUFDTkMsU0FBUyxFQUNUQyxjQUFjLEVBQ2RDLFlBQVksRUFDWkMsUUFBUSxFQUNSLEdBQUdDLE1BQ1EsR0F6QmI7SUF5Q0EsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLFdBQVcsRUFBRUMsWUFBWSxFQUFFQyxhQUFhLEVBQUUsR0FBR3ZCO0lBQzlELElBQUlSO0lBQ0osSUFBSWdDLElBQUlKLFdBQVdLLGFBQUFBLGtCQUFrQjtJQUNyQyxJQUFJLGNBQWNELEdBQUc7UUFDbkJoQyxTQUFTZ0M7SUFDWCxPQUFPO1lBR2FBO1FBRmxCLE1BQU1wRCxXQUFXO2VBQUlvRCxFQUFFckQsV0FBVztlQUFLcUQsRUFBRUUsVUFBVTtTQUFDLENBQUNDLElBQUksQ0FBQyxDQUFDQyxHQUFHQyxJQUFNRCxJQUFJQztRQUN4RSxNQUFNMUQsY0FBY3FELEVBQUVyRCxXQUFXLENBQUN3RCxJQUFJLENBQUMsQ0FBQ0MsR0FBR0MsSUFBTUQsSUFBSUM7UUFDckQsTUFBTUMsWUFBQUEsQ0FBWU4sZUFBQUEsRUFBRU0sU0FBQUEsS0FBUyxnQkFBWE4sYUFBYUcsSUFBSSxDQUFDLENBQUNDLEdBQUdDLElBQU1ELElBQUlDO1FBQ2xEckMsU0FBUztZQUFFLEdBQUdnQyxDQUFDO1lBQUVwRDtZQUFVRDtZQUFhMkQ7UUFBVTtJQUNwRDtJQUVBLElBQUksT0FBT1Asa0JBQWtCLGFBQWE7UUFDeEMsTUFBTSxxQkFFTCxDQUZLLElBQUlRLE1BQ1IsMElBREk7bUJBQUE7d0JBQUE7MEJBQUE7UUFFTjtJQUNGO0lBQ0EsSUFBSXBDLFNBQWdDd0IsS0FBS3hCLE1BQU0sSUFBSTRCO0lBRW5ELHNEQUFzRDtJQUN0RCxPQUFPSixLQUFLeEIsTUFBTTtJQUNsQixPQUFRd0IsS0FBYXZCLE1BQU07SUFFM0IsNkNBQTZDO0lBQzdDLG9EQUFvRDtJQUNwRCxNQUFNb0Msa0JBQWtCLHdCQUF3QnJDO0lBRWhELElBQUlxQyxpQkFBaUI7UUFDbkIsSUFBSXhDLE9BQU9HLE1BQU0sS0FBSyxVQUFVO1lBQzlCLE1BQU0scUJBR0wsQ0FISyxJQUFJb0MsTUFDUCxxQkFBa0I3RSxNQUFJLGdDQUNwQiw0RUFGQzt1QkFBQTs0QkFBQTs4QkFBQTtZQUdOO1FBQ0Y7SUFDRixPQUFPO1FBQ0wsOENBQThDO1FBQzlDLCtDQUErQztRQUMvQyxpREFBaUQ7UUFDakQsTUFBTStFLG9CQUFvQnRDO1FBQzFCQSxTQUFTLENBQUN1QztZQUNSLE1BQU0sRUFBRTFDLFFBQVEyQyxDQUFDLEVBQUUsR0FBR0MsTUFBTSxHQUFHRjtZQUMvQixPQUFPRCxrQkFBa0JHO1FBQzNCO0lBQ0Y7SUFFQSxJQUFJdEIsUUFBUTtRQUNWLElBQUlBLFdBQVcsUUFBUTtZQUNyQlQsT0FBTztRQUNUO1FBQ0EsTUFBTWdDLGdCQUFvRTtZQUN4RUMsV0FBVztnQkFBRUMsVUFBVTtnQkFBUW5DLFFBQVE7WUFBTztZQUM5Q29DLFlBQVk7Z0JBQUV2RSxPQUFPO2dCQUFRbUMsUUFBUTtZQUFPO1FBQzlDO1FBQ0EsTUFBTXFDLGdCQUFvRDtZQUN4REQsWUFBWTtZQUNabkMsTUFBTTtRQUNSO1FBQ0EsTUFBTXFDLGNBQWNMLGFBQWEsQ0FBQ3ZCLE9BQU87UUFDekMsSUFBSTRCLGFBQWE7WUFDZnBDLFFBQVE7Z0JBQUUsR0FBR0EsS0FBSztnQkFBRSxHQUFHb0MsV0FBVztZQUFDO1FBQ3JDO1FBQ0EsTUFBTUMsY0FBY0YsYUFBYSxDQUFDM0IsT0FBTztRQUN6QyxJQUFJNkIsZUFBZSxDQUFDekUsT0FBTztZQUN6QkEsUUFBUXlFO1FBQ1Y7SUFDRjtJQUVBLElBQUlDLFlBQVk7SUFDaEIsSUFBSUMsV0FBV3BGLE9BQU9RO0lBQ3RCLElBQUk2RSxZQUFZckYsT0FBTzJDO0lBQ3ZCLElBQUkyQztJQUNKLElBQUlDO0lBQ0osSUFBSTNGLGVBQWVILE1BQU07UUFDdkIsTUFBTStGLGtCQUFrQmhHLGdCQUFnQkMsT0FBT0EsSUFBSUMsT0FBTyxHQUFHRDtRQUU3RCxJQUFJLENBQUMrRixnQkFBZ0IvRixHQUFHLEVBQUU7WUFDeEIsTUFBTSxxQkFJTCxDQUpLLElBQUk2RSxNQUNQLGdKQUE2SW1CLEtBQUtDLFNBQVMsQ0FDMUpGLG1CQUZFO3VCQUFBOzRCQUFBOzhCQUFBO1lBSU47UUFDRjtRQUNBLElBQUksQ0FBQ0EsZ0JBQWdCN0MsTUFBTSxJQUFJLENBQUM2QyxnQkFBZ0JoRixLQUFLLEVBQUU7WUFDckQsTUFBTSxxQkFJTCxDQUpLLElBQUk4RCxNQUNQLDZKQUEwSm1CLEtBQUtDLFNBQVMsQ0FDdktGLG1CQUZFO3VCQUFBOzRCQUFBOzhCQUFBO1lBSU47UUFDRjtRQUVBRixZQUFZRSxnQkFBZ0JGLFNBQVM7UUFDckNDLGFBQWFDLGdCQUFnQkQsVUFBVTtRQUN2Q3JDLGNBQWNBLGVBQWVzQyxnQkFBZ0J0QyxXQUFXO1FBQ3hEaUMsWUFBWUssZ0JBQWdCL0YsR0FBRztRQUUvQixJQUFJLENBQUNtRCxNQUFNO1lBQ1QsSUFBSSxDQUFDd0MsWUFBWSxDQUFDQyxXQUFXO2dCQUMzQkQsV0FBV0ksZ0JBQWdCaEYsS0FBSztnQkFDaEM2RSxZQUFZRyxnQkFBZ0I3QyxNQUFNO1lBQ3BDLE9BQU8sSUFBSXlDLFlBQVksQ0FBQ0MsV0FBVztnQkFDakMsTUFBTU0sUUFBUVAsV0FBV0ksZ0JBQWdCaEYsS0FBSztnQkFDOUM2RSxZQUFZbEUsS0FBS3lFLEtBQUssQ0FBQ0osZ0JBQWdCN0MsTUFBTSxHQUFHZ0Q7WUFDbEQsT0FBTyxJQUFJLENBQUNQLFlBQVlDLFdBQVc7Z0JBQ2pDLE1BQU1NLFFBQVFOLFlBQVlHLGdCQUFnQjdDLE1BQU07Z0JBQ2hEeUMsV0FBV2pFLEtBQUt5RSxLQUFLLENBQUNKLGdCQUFnQmhGLEtBQUssR0FBR21GO1lBQ2hEO1FBQ0Y7SUFDRjtJQUNBbEcsTUFBTSxPQUFPQSxRQUFRLFdBQVdBLE1BQU0wRjtJQUV0QyxJQUFJVSxTQUNGLENBQUNyRCxZQUFhQyxhQUFZLFVBQVUsT0FBT0EsWUFBWSxZQUFVO0lBQ25FLElBQUksQ0FBQ2hELE9BQU9BLElBQUlxRyxVQUFVLENBQUMsWUFBWXJHLElBQUlxRyxVQUFVLENBQUMsVUFBVTtRQUM5RCx1RUFBdUU7UUFDdkU5RCxjQUFjO1FBQ2Q2RCxTQUFTO0lBQ1g7SUFDQSxJQUFJOUQsT0FBT0MsV0FBVyxFQUFFO1FBQ3RCQSxjQUFjO0lBQ2hCO0lBQ0EsSUFDRXVDLG1CQUNBLENBQUN4QyxPQUFPZ0UsbUJBQW1CLElBQzNCdEcsSUFBSXVHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUNDLFFBQVEsQ0FBQyxTQUM5QjtRQUNBLHlEQUF5RDtRQUN6RCwrQ0FBK0M7UUFDL0NqRSxjQUFjO0lBQ2hCO0lBRUEsTUFBTWtFLGFBQWFsRyxPQUFPaUM7SUFFMUIsSUFBSWtFLElBQW9CLEVBQW1CO1FBQ3pDLElBQUlwRSxPQUFPdUUsTUFBTSxLQUFLLFlBQVkvQixtQkFBbUIsQ0FBQ3ZDLGFBQWE7WUFDakUsTUFBTSxxQkFNTCxDQU5LLElBQUlzQyxNQUNQLDJaQURHO3VCQUFBOzRCQUFBOzhCQUFBO1lBTU47UUFDRjtRQUNBLElBQUksQ0FBQzdFLEtBQUs7WUFDUixpREFBaUQ7WUFDakQsK0NBQStDO1lBQy9DLDJDQUEyQztZQUMzQ3VDLGNBQWM7UUFDaEIsT0FBTztZQUNMLElBQUlZLE1BQU07Z0JBQ1IsSUFBSXBDLE9BQU87b0JBQ1QsTUFBTSxxQkFFTCxDQUZLLElBQUk4RCxNQUNQLHFCQUFrQjdFLE1BQUksdUVBRG5COytCQUFBO29DQUFBO3NDQUFBO29CQUVOO2dCQUNGO2dCQUNBLElBQUlrRCxRQUFRO29CQUNWLE1BQU0scUJBRUwsQ0FGSyxJQUFJMkIsTUFDUCxxQkFBa0I3RSxNQUFJLHdFQURuQjsrQkFBQTtvQ0FBQTtzQ0FBQTtvQkFFTjtnQkFDRjtnQkFDQSxJQUFJb0QsQ0FBQUEsU0FBQUEsT0FBQUEsS0FBQUEsSUFBQUEsTUFBTzBELFFBQUFBLEtBQVkxRCxNQUFNMEQsUUFBUSxLQUFLLFlBQVk7b0JBQ3BELE1BQU0scUJBRUwsQ0FGSyxJQUFJakMsTUFDUCxxQkFBa0I3RSxNQUFJLGdJQURuQjsrQkFBQTtvQ0FBQTtzQ0FBQTtvQkFFTjtnQkFDRjtnQkFDQSxJQUFJb0QsVUFBQUEsT0FBQUEsS0FBQUEsSUFBQUEsTUFBT3JDLEtBQUFBLEtBQVNxQyxNQUFNckMsS0FBSyxLQUFLLFFBQVE7b0JBQzFDLE1BQU0scUJBRUwsQ0FGSyxJQUFJOEQsTUFDUCxxQkFBa0I3RSxNQUFJLHNIQURuQjsrQkFBQTtvQ0FBQTtzQ0FBQTtvQkFFTjtnQkFDRjtnQkFDQSxJQUFJb0QsQ0FBQUEsU0FBQUEsT0FBQUEsS0FBQUEsSUFBQUEsTUFBT0YsTUFBQUEsS0FBVUUsTUFBTUYsTUFBTSxLQUFLLFFBQVE7b0JBQzVDLE1BQU0scUJBRUwsQ0FGSyxJQUFJMkIsTUFDUCxxQkFBa0I3RSxNQUFJLHdIQURuQjsrQkFBQTtvQ0FBQTtzQ0FBQTtvQkFFTjtnQkFDRjtZQUNGLE9BQU87Z0JBQ0wsSUFBSSxPQUFPMkYsYUFBYSxhQUFhO29CQUNuQyxNQUFNLHFCQUVMLENBRkssSUFBSWQsTUFDUCxxQkFBa0I3RSxNQUFJLDRDQURuQjsrQkFBQTtvQ0FBQTtzQ0FBQTtvQkFFTjtnQkFDRixPQUFPLElBQUkrRyxNQUFNcEIsV0FBVztvQkFDMUIsTUFBTSxxQkFFTCxDQUZLLElBQUlkLE1BQ1AscUJBQWtCN0UsTUFBSSxzRkFBbUZlLFFBQU0sT0FENUc7K0JBQUE7b0NBQUE7c0NBQUE7b0JBRU47Z0JBQ0Y7Z0JBQ0EsSUFBSSxPQUFPNkUsY0FBYyxhQUFhO29CQUNwQyxNQUFNLHFCQUVMLENBRkssSUFBSWYsTUFDUCxxQkFBa0I3RSxNQUFJLDZDQURuQjsrQkFBQTtvQ0FBQTtzQ0FBQTtvQkFFTjtnQkFDRixPQUFPLElBQUkrRyxNQUFNbkIsWUFBWTtvQkFDM0IsTUFBTSxxQkFFTCxDQUZLLElBQUlmLE1BQ1AscUJBQWtCN0UsTUFBSSx1RkFBb0ZrRCxTQUFPLE9BRDlHOytCQUFBO29DQUFBO3NDQUFBO29CQUVOO2dCQUNGO2dCQUNBLDRDQUE0QztnQkFDNUMsSUFBSSxlQUFldEMsSUFBSSxDQUFDWixNQUFNO29CQUM1QixNQUFNLHFCQUVMLENBRkssSUFBSTZFLE1BQ1AscUJBQWtCN0UsTUFBSSw4SEFEbkI7K0JBQUE7b0NBQUE7c0NBQUE7b0JBRU47Z0JBQ0Y7Z0JBQ0EsNENBQTRDO2dCQUM1QyxJQUFJLGVBQWVZLElBQUksQ0FBQ1osTUFBTTtvQkFDNUIsTUFBTSxxQkFFTCxDQUZLLElBQUk2RSxNQUNQLHFCQUFrQjdFLE1BQUksMEhBRG5COytCQUFBO29DQUFBO3NDQUFBO29CQUVOO2dCQUNGO1lBQ0Y7UUFDRjtRQUNBLElBQUksQ0FBQ0gscUJBQXFCbUgsUUFBUSxDQUFDaEUsVUFBVTtZQUMzQyxNQUFNLHFCQUlMLENBSkssSUFBSTZCLE1BQ1AscUJBQWtCN0UsTUFBSSxpREFBOENnRCxVQUFRLHdCQUFxQm5ELHFCQUFxQm9DLEdBQUcsQ0FDeEhnRixRQUNBcEUsSUFBSSxDQUFDLE9BQUssTUFIUjt1QkFBQTs0QkFBQTs4QkFBQTtZQUlOO1FBQ0Y7UUFDQSxJQUFJRSxZQUFZQyxZQUFZLFFBQVE7WUFDbEMsTUFBTSxxQkFFTCxDQUZLLElBQUk2QixNQUNQLHFCQUFrQjdFLE1BQUksc0ZBRG5CO3VCQUFBOzRCQUFBOzhCQUFBO1lBRU47UUFDRjtRQUNBLElBQ0V3RCxnQkFBZ0IsV0FDaEJBLGdCQUFnQixVQUNoQixDQUFDQSxZQUFZNkMsVUFBVSxDQUFDLGdCQUN4QjtZQUNBLE1BQU0scUJBRUwsQ0FGSyxJQUFJeEIsTUFDUCxxQkFBa0I3RSxNQUFJLDJDQUF3Q3dELGNBQVksT0FEdkU7dUJBQUE7NEJBQUE7OEJBQUE7WUFFTjtRQUNGO1FBQ0EsSUFBSUEsZ0JBQWdCLFNBQVM7WUFDM0IsSUFBSW1DLFlBQVlDLGFBQWFELFdBQVdDLFlBQVksTUFBTTtnQkFDeERzQixDQUFBQSxHQUFBQSxVQUFBQSxRQUFBQSxFQUNHLHFCQUFrQmxILE1BQUk7WUFFM0I7UUFDRjtRQUNBLElBQUl3RCxnQkFBZ0IsVUFBVSxDQUFDQyxhQUFhO1lBQzFDLE1BQU0wRCxpQkFBaUI7Z0JBQUM7Z0JBQVE7Z0JBQU87Z0JBQVE7YUFBTyxDQUFDLGlDQUFpQzs7WUFFeEYsTUFBTSxxQkFTTCxDQVRLLElBQUl0QyxNQUNQLHFCQUFrQjdFLE1BQUksNlRBR2tFbUgsZUFBZXRFLElBQUksQ0FDeEcsT0FDQSwrTEFOQTt1QkFBQTs0QkFBQTs4QkFBQTtZQVNOO1FBQ0Y7UUFDQSxJQUFJLFNBQVNvQixNQUFNO1lBQ2pCaUQsQ0FBQUEsR0FBQUEsVUFBQUEsUUFBQUEsRUFDRyxxQkFBa0JsSCxNQUFJO1FBRTNCO1FBRUEsSUFBSSxDQUFDdUMsZUFBZSxDQUFDdUMsaUJBQWlCO1lBQ3BDLE1BQU1zQyxTQUFTM0UsT0FBTztnQkFDcEJIO2dCQUNBdEM7Z0JBQ0FlLE9BQU80RSxZQUFZO2dCQUNuQm5ELFNBQVNpRSxjQUFjO1lBQ3pCO1lBQ0EsSUFBSVk7WUFDSixJQUFJO2dCQUNGQSxNQUFNLElBQUlDLElBQUlGO1lBQ2hCLEVBQUUsT0FBT0csS0FBSyxDQUFDO1lBQ2YsSUFBSUgsV0FBV3BILE9BQVFxSCxPQUFPQSxJQUFJRyxRQUFRLEtBQUt4SCxPQUFPLENBQUNxSCxJQUFJSSxNQUFNLEVBQUc7Z0JBQ2xFUCxDQUFBQSxHQUFBQSxVQUFBQSxRQUFBQSxFQUNHLHFCQUFrQmxILE1BQUksNEhBQ3BCO1lBRVA7UUFDRjtRQUVBLElBQUl1RCxtQkFBbUI7WUFDckIyRCxDQUFBQSxHQUFBQSxVQUFBQSxRQUFBQSxFQUNHLHFCQUFrQmxILE1BQUk7UUFFM0I7UUFFQSxLQUFLLE1BQU0sQ0FBQzBILFdBQVdDLFlBQVksSUFBSUMsT0FBT0MsT0FBTyxDQUFDO1lBQ3BEakU7WUFDQUM7WUFDQUM7WUFDQUM7WUFDQUM7UUFDRixHQUFJO1lBQ0YsSUFBSTJELGFBQWE7Z0JBQ2ZULENBQUFBLEdBQUFBLFVBQUFBLFFBQUFBLEVBQ0cscUJBQWtCbEgsTUFBSSx3QkFBcUIwSCxZQUFVLDBDQUNuRDtZQUVQO1FBQ0Y7UUFFQSxJQUNFLEtBQTZCLElBQzdCLENBQUNwSCxnQkFDRHdILE9BQU9DLG1CQUFtQixFQUMxQjtZQUNBekgsZUFBZSxJQUFJeUgsb0JBQW9CLENBQUNDO2dCQUN0QyxLQUFLLE1BQU1DLFNBQVNELFVBQVVFLFVBQVUsR0FBSTt3QkFFM0JEO29CQURmLDBFQUEwRTtvQkFDMUUsTUFBTUUsU0FBU0YsQ0FBQUEsU0FBQUEsT0FBQUEsS0FBQUEsSUFBQUEsQ0FBQUEsaUJBQUFBLE1BQU9HLE9BQUFBLEtBQU8sZ0JBQWRILGVBQWdCakksR0FBRyxLQUFJO29CQUN0QyxNQUFNcUksV0FBV2pJLFFBQVFrSSxHQUFHLENBQUNIO29CQUM3QixJQUNFRSxZQUNBLENBQUNBLFNBQVN0RixRQUFRLElBQ2xCc0YsU0FBUzdFLFdBQVcsS0FBSyxXQUN6QixDQUFDNkUsU0FBU3JJLEdBQUcsQ0FBQ3FHLFVBQVUsQ0FBQyxZQUN6QixDQUFDZ0MsU0FBU3JJLEdBQUcsQ0FBQ3FHLFVBQVUsQ0FBQyxVQUN6Qjt3QkFDQSxpREFBaUQ7d0JBQ2pEYSxDQUFBQSxHQUFBQSxVQUFBQSxRQUFBQSxFQUNHLHFCQUFrQm1CLFNBQVNySSxHQUFHLEdBQUMsOEhBQzdCO29CQUVQO2dCQUNGO1lBQ0Y7WUFDQSxJQUFJO2dCQUNGTSxhQUFhaUksT0FBTyxDQUFDO29CQUNuQkMsTUFBTTtvQkFDTkMsVUFBVTtnQkFDWjtZQUNGLEVBQUUsT0FBT2xCLEtBQUs7Z0JBQ1osb0NBQW9DO2dCQUNwQ21CLFFBQVFDLEtBQUssQ0FBQ3BCO1lBQ2hCO1FBQ0Y7SUFDRjtJQUNBLE1BQU1xQixXQUFXaEIsT0FBT2lCLE1BQU0sQ0FDNUIxRixPQUNJO1FBQ0UyRCxVQUFVO1FBQ1Y1RCxRQUFRO1FBQ1JuQyxPQUFPO1FBQ1ArSCxNQUFNO1FBQ05DLEtBQUs7UUFDTEMsT0FBTztRQUNQQyxRQUFRO1FBQ1JwRjtRQUNBQztJQUNGLElBQ0EsQ0FBQyxHQUNMSyxjQUFjLENBQUMsSUFBSTtRQUFFK0UsT0FBTztJQUFjLEdBQzFDOUY7SUFHRixNQUFNK0Ysa0JBQ0osQ0FBQy9FLGdCQUFnQlosZ0JBQWdCLFVBQzdCQSxnQkFBZ0IsU0FDYiwyQ0FBd0M0RixDQUFBQSxHQUFBQSxjQUFBQSxlQUFBQSxFQUFnQjtRQUN2RHpEO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FyQyxhQUFhQSxlQUFlO1FBQzVCSSxXQUFXK0UsU0FBUy9FLFNBQVM7SUFDL0IsS0FBRyxPQUNGLFVBQU9MLGNBQVksS0FBSSx1QkFBdUI7T0FDakQ7SUFFTixJQUFJNkYsbUJBQW1CRixrQkFDbkI7UUFDRUcsZ0JBQWdCVixTQUFTL0UsU0FBUyxJQUFJO1FBQ3RDMEYsb0JBQW9CWCxTQUFTOUUsY0FBYyxJQUFJO1FBQy9DMEYsa0JBQWtCO1FBQ2xCTDtJQUNGLElBQ0EsQ0FBQztJQUVMLElBQUl6QyxJQUFvQixFQUFvQjtRQUMxQyxJQUNFMkMsaUJBQWlCRixlQUFlLElBQ2hDM0YsZ0JBQWdCLFdBQ2hCQyxlQUFBQSxPQUFBQSxLQUFBQSxJQUFBQSxZQUFhNEMsVUFBVSxDQUFDLE9BQ3hCO1lBQ0EsOEVBQThFO1lBQzlFLGdGQUFnRjtZQUNoRixxRkFBcUY7WUFDckZnRCxpQkFBaUJGLGVBQWUsR0FBSSxVQUFPMUYsY0FBWTtRQUN6RDtJQUNGO0lBRUEsTUFBTWdHLGdCQUFnQnBILGlCQUFpQjtRQUNyQ0M7UUFDQXRDO1FBQ0F1QztRQUNBeEIsT0FBTzRFO1FBQ1BuRCxTQUFTaUU7UUFDVHpGO1FBQ0F5QjtJQUNGO0lBRUEsSUFBSWlFLElBQW9CLEVBQW1CO1FBQ3pDLElBQUksSUFBNkIsRUFBRTtZQUNqQyxJQUFJZ0Q7WUFDSixJQUFJO2dCQUNGQSxVQUFVLElBQUlwQyxJQUFJbUMsY0FBY3pKLEdBQUc7WUFDckMsRUFBRSxPQUFPMkosR0FBRztnQkFDVkQsVUFBVSxJQUFJcEMsSUFBSW1DLGNBQWN6SixHQUFHLEVBQUU4SCxPQUFPOEIsUUFBUSxDQUFDQyxJQUFJO1lBQzNEO1lBQ0F6SixRQUFRMEosR0FBRyxDQUFDSixRQUFRRyxJQUFJLEVBQUU7Z0JBQUU3SjtnQkFBSytDO2dCQUFVUztZQUFZO1FBQ3pEO0lBQ0Y7SUFFQSxNQUFNdUcsUUFBa0I7UUFDdEIsR0FBRzlGLElBQUk7UUFDUGpCLFNBQVNvRCxTQUFTLFNBQVNwRDtRQUMzQlU7UUFDQTNDLE9BQU80RTtRQUNQekMsUUFBUTBDO1FBQ1JqQztRQUNBVjtRQUNBRyxPQUFPO1lBQUUsR0FBR3dGLFFBQVE7WUFBRSxHQUFHUyxnQkFBZ0I7UUFBQztRQUMxQ3JJLE9BQU95SSxjQUFjekksS0FBSztRQUMxQjBCLFFBQVErRyxjQUFjL0csTUFBTTtRQUM1QjFDLEtBQUtxRCxlQUFlb0csY0FBY3pKLEdBQUc7SUFDdkM7SUFDQSxNQUFNZ0ssT0FBTztRQUFFekg7UUFBYVE7UUFBVVM7UUFBYUw7SUFBSztJQUN4RCxPQUFPO1FBQUU0RztRQUFPQztJQUFLO0FBQ3ZCIiwic291cmNlcyI6WyIvVXNlcnMvc3JjL3NoYXJlZC9saWIvZ2V0LWltZy1wcm9wcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3YXJuT25jZSB9IGZyb20gJy4vdXRpbHMvd2Fybi1vbmNlJ1xuaW1wb3J0IHsgZ2V0SW1hZ2VCbHVyU3ZnIH0gZnJvbSAnLi9pbWFnZS1ibHVyLXN2ZydcbmltcG9ydCB7IGltYWdlQ29uZmlnRGVmYXVsdCB9IGZyb20gJy4vaW1hZ2UtY29uZmlnJ1xuaW1wb3J0IHR5cGUge1xuICBJbWFnZUNvbmZpZ0NvbXBsZXRlLFxuICBJbWFnZUxvYWRlclByb3BzLFxuICBJbWFnZUxvYWRlclByb3BzV2l0aENvbmZpZyxcbn0gZnJvbSAnLi9pbWFnZS1jb25maWcnXG5cbmltcG9ydCB0eXBlIHsgSlNYIH0gZnJvbSAncmVhY3QnXG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdGljSW1hZ2VEYXRhIHtcbiAgc3JjOiBzdHJpbmdcbiAgaGVpZ2h0OiBudW1iZXJcbiAgd2lkdGg6IG51bWJlclxuICBibHVyRGF0YVVSTD86IHN0cmluZ1xuICBibHVyV2lkdGg/OiBudW1iZXJcbiAgYmx1ckhlaWdodD86IG51bWJlclxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRpY1JlcXVpcmUge1xuICBkZWZhdWx0OiBTdGF0aWNJbWFnZURhdGFcbn1cblxuZXhwb3J0IHR5cGUgU3RhdGljSW1wb3J0ID0gU3RhdGljUmVxdWlyZSB8IFN0YXRpY0ltYWdlRGF0YVxuXG5leHBvcnQgdHlwZSBJbWFnZVByb3BzID0gT21pdDxcbiAgSlNYLkludHJpbnNpY0VsZW1lbnRzWydpbWcnXSxcbiAgJ3NyYycgfCAnc3JjU2V0JyB8ICdyZWYnIHwgJ2FsdCcgfCAnd2lkdGgnIHwgJ2hlaWdodCcgfCAnbG9hZGluZydcbj4gJiB7XG4gIHNyYzogc3RyaW5nIHwgU3RhdGljSW1wb3J0XG4gIGFsdDogc3RyaW5nXG4gIHdpZHRoPzogbnVtYmVyIHwgYCR7bnVtYmVyfWBcbiAgaGVpZ2h0PzogbnVtYmVyIHwgYCR7bnVtYmVyfWBcbiAgZmlsbD86IGJvb2xlYW5cbiAgbG9hZGVyPzogSW1hZ2VMb2FkZXJcbiAgcXVhbGl0eT86IG51bWJlciB8IGAke251bWJlcn1gXG4gIHByaW9yaXR5PzogYm9vbGVhblxuICBsb2FkaW5nPzogTG9hZGluZ1ZhbHVlXG4gIHBsYWNlaG9sZGVyPzogUGxhY2Vob2xkZXJWYWx1ZVxuICBibHVyRGF0YVVSTD86IHN0cmluZ1xuICB1bm9wdGltaXplZD86IGJvb2xlYW5cbiAgb3ZlcnJpZGVTcmM/OiBzdHJpbmdcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgb25Mb2FkYCBpbnN0ZWFkLlxuICAgKiBAc2VlIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwcC9hcGktcmVmZXJlbmNlL2NvbXBvbmVudHMvaW1hZ2Ujb25sb2FkXG4gICAqL1xuICBvbkxvYWRpbmdDb21wbGV0ZT86IE9uTG9hZGluZ0NvbXBsZXRlXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYGZpbGxgIHByb3AgaW5zdGVhZCBvZiBgbGF5b3V0PVwiZmlsbFwiYCBvciBjaGFuZ2UgaW1wb3J0IHRvIGBuZXh0L2xlZ2FjeS9pbWFnZWAuXG4gICAqIEBzZWUgaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9uZXh0L2xlZ2FjeS9pbWFnZVxuICAgKi9cbiAgbGF5b3V0Pzogc3RyaW5nXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYHN0eWxlYCBwcm9wIGluc3RlYWQuXG4gICAqL1xuICBvYmplY3RGaXQ/OiBzdHJpbmdcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgc3R5bGVgIHByb3AgaW5zdGVhZC5cbiAgICovXG4gIG9iamVjdFBvc2l0aW9uPzogc3RyaW5nXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBUaGlzIHByb3AgZG9lcyBub3QgZG8gYW55dGhpbmcuXG4gICAqL1xuICBsYXp5Qm91bmRhcnk/OiBzdHJpbmdcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFRoaXMgcHJvcCBkb2VzIG5vdCBkbyBhbnl0aGluZy5cbiAgICovXG4gIGxhenlSb290Pzogc3RyaW5nXG59XG5cbmV4cG9ydCB0eXBlIEltZ1Byb3BzID0gT21pdDxJbWFnZVByb3BzLCAnc3JjJyB8ICdsb2FkZXInPiAmIHtcbiAgbG9hZGluZzogTG9hZGluZ1ZhbHVlXG4gIHdpZHRoOiBudW1iZXIgfCB1bmRlZmluZWRcbiAgaGVpZ2h0OiBudW1iZXIgfCB1bmRlZmluZWRcbiAgc3R5bGU6IE5vbk51bGxhYmxlPEpTWC5JbnRyaW5zaWNFbGVtZW50c1snaW1nJ11bJ3N0eWxlJ10+XG4gIHNpemVzOiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgc3JjU2V0OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgc3JjOiBzdHJpbmdcbn1cblxuY29uc3QgVkFMSURfTE9BRElOR19WQUxVRVMgPSBbJ2xhenknLCAnZWFnZXInLCB1bmRlZmluZWRdIGFzIGNvbnN0XG50eXBlIExvYWRpbmdWYWx1ZSA9ICh0eXBlb2YgVkFMSURfTE9BRElOR19WQUxVRVMpW251bWJlcl1cbnR5cGUgSW1hZ2VDb25maWcgPSBJbWFnZUNvbmZpZ0NvbXBsZXRlICYge1xuICBhbGxTaXplczogbnVtYmVyW11cbiAgb3V0cHV0PzogJ3N0YW5kYWxvbmUnIHwgJ2V4cG9ydCdcbn1cblxuZXhwb3J0IHR5cGUgSW1hZ2VMb2FkZXIgPSAocDogSW1hZ2VMb2FkZXJQcm9wcykgPT4gc3RyaW5nXG5cbi8vIERvIG5vdCBleHBvcnQgLSB0aGlzIGlzIGFuIGludGVybmFsIHR5cGUgb25seVxuLy8gYmVjYXVzZSBgbmV4dC5jb25maWcuanNgIGlzIG9ubHkgbWVhbnQgZm9yIHRoZVxuLy8gYnVpbHQtaW4gbG9hZGVycywgbm90IGZvciBhIGN1c3RvbSBsb2FkZXIoKSBwcm9wLlxudHlwZSBJbWFnZUxvYWRlcldpdGhDb25maWcgPSAocDogSW1hZ2VMb2FkZXJQcm9wc1dpdGhDb25maWcpID0+IHN0cmluZ1xuXG5leHBvcnQgdHlwZSBQbGFjZWhvbGRlclZhbHVlID0gJ2JsdXInIHwgJ2VtcHR5JyB8IGBkYXRhOmltYWdlLyR7c3RyaW5nfWBcbmV4cG9ydCB0eXBlIE9uTG9hZCA9IFJlYWN0LlJlYWN0RXZlbnRIYW5kbGVyPEhUTUxJbWFnZUVsZW1lbnQ+IHwgdW5kZWZpbmVkXG5leHBvcnQgdHlwZSBPbkxvYWRpbmdDb21wbGV0ZSA9IChpbWc6IEhUTUxJbWFnZUVsZW1lbnQpID0+IHZvaWRcblxuZnVuY3Rpb24gaXNTdGF0aWNSZXF1aXJlKFxuICBzcmM6IFN0YXRpY1JlcXVpcmUgfCBTdGF0aWNJbWFnZURhdGFcbik6IHNyYyBpcyBTdGF0aWNSZXF1aXJlIHtcbiAgcmV0dXJuIChzcmMgYXMgU3RhdGljUmVxdWlyZSkuZGVmYXVsdCAhPT0gdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzU3RhdGljSW1hZ2VEYXRhKFxuICBzcmM6IFN0YXRpY1JlcXVpcmUgfCBTdGF0aWNJbWFnZURhdGFcbik6IHNyYyBpcyBTdGF0aWNJbWFnZURhdGEge1xuICByZXR1cm4gKHNyYyBhcyBTdGF0aWNJbWFnZURhdGEpLnNyYyAhPT0gdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzU3RhdGljSW1wb3J0KHNyYzogc3RyaW5nIHwgU3RhdGljSW1wb3J0KTogc3JjIGlzIFN0YXRpY0ltcG9ydCB7XG4gIHJldHVybiAoXG4gICAgISFzcmMgJiZcbiAgICB0eXBlb2Ygc3JjID09PSAnb2JqZWN0JyAmJlxuICAgIChpc1N0YXRpY1JlcXVpcmUoc3JjIGFzIFN0YXRpY0ltcG9ydCkgfHxcbiAgICAgIGlzU3RhdGljSW1hZ2VEYXRhKHNyYyBhcyBTdGF0aWNJbXBvcnQpKVxuICApXG59XG5cbmNvbnN0IGFsbEltZ3MgPSBuZXcgTWFwPFxuICBzdHJpbmcsXG4gIHsgc3JjOiBzdHJpbmc7IHByaW9yaXR5OiBib29sZWFuOyBwbGFjZWhvbGRlcjogUGxhY2Vob2xkZXJWYWx1ZSB9XG4+KClcbmxldCBwZXJmT2JzZXJ2ZXI6IFBlcmZvcm1hbmNlT2JzZXJ2ZXIgfCB1bmRlZmluZWRcblxuZnVuY3Rpb24gZ2V0SW50KHg6IHVua25vd24pOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICBpZiAodHlwZW9mIHggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHhcbiAgfVxuICBpZiAodHlwZW9mIHggPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIE51bWJlci5pc0Zpbml0ZSh4KSA/IHggOiBOYU5cbiAgfVxuICBpZiAodHlwZW9mIHggPT09ICdzdHJpbmcnICYmIC9eWzAtOV0rJC8udGVzdCh4KSkge1xuICAgIHJldHVybiBwYXJzZUludCh4LCAxMClcbiAgfVxuICByZXR1cm4gTmFOXG59XG5cbmZ1bmN0aW9uIGdldFdpZHRocyhcbiAgeyBkZXZpY2VTaXplcywgYWxsU2l6ZXMgfTogSW1hZ2VDb25maWcsXG4gIHdpZHRoOiBudW1iZXIgfCB1bmRlZmluZWQsXG4gIHNpemVzOiBzdHJpbmcgfCB1bmRlZmluZWRcbik6IHsgd2lkdGhzOiBudW1iZXJbXTsga2luZDogJ3cnIHwgJ3gnIH0ge1xuICBpZiAoc2l6ZXMpIHtcbiAgICAvLyBGaW5kIGFsbCB0aGUgXCJ2d1wiIHBlcmNlbnQgc2l6ZXMgdXNlZCBpbiB0aGUgc2l6ZXMgcHJvcFxuICAgIGNvbnN0IHZpZXdwb3J0V2lkdGhSZSA9IC8oXnxcXHMpKDE/XFxkP1xcZCl2dy9nXG4gICAgY29uc3QgcGVyY2VudFNpemVzID0gW11cbiAgICBmb3IgKGxldCBtYXRjaDsgKG1hdGNoID0gdmlld3BvcnRXaWR0aFJlLmV4ZWMoc2l6ZXMpKTsgbWF0Y2gpIHtcbiAgICAgIHBlcmNlbnRTaXplcy5wdXNoKHBhcnNlSW50KG1hdGNoWzJdKSlcbiAgICB9XG4gICAgaWYgKHBlcmNlbnRTaXplcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHNtYWxsZXN0UmF0aW8gPSBNYXRoLm1pbiguLi5wZXJjZW50U2l6ZXMpICogMC4wMVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGhzOiBhbGxTaXplcy5maWx0ZXIoKHMpID0+IHMgPj0gZGV2aWNlU2l6ZXNbMF0gKiBzbWFsbGVzdFJhdGlvKSxcbiAgICAgICAga2luZDogJ3cnLFxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyB3aWR0aHM6IGFsbFNpemVzLCBraW5kOiAndycgfVxuICB9XG4gIGlmICh0eXBlb2Ygd2lkdGggIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHsgd2lkdGhzOiBkZXZpY2VTaXplcywga2luZDogJ3cnIH1cbiAgfVxuXG4gIGNvbnN0IHdpZHRocyA9IFtcbiAgICAuLi5uZXcgU2V0KFxuICAgICAgLy8gPiBUaGlzIG1lYW5zIHRoYXQgbW9zdCBPTEVEIHNjcmVlbnMgdGhhdCBzYXkgdGhleSBhcmUgM3ggcmVzb2x1dGlvbixcbiAgICAgIC8vID4gYXJlIGFjdHVhbGx5IDN4IGluIHRoZSBncmVlbiBjb2xvciwgYnV0IG9ubHkgMS41eCBpbiB0aGUgcmVkIGFuZFxuICAgICAgLy8gPiBibHVlIGNvbG9ycy4gU2hvd2luZyBhIDN4IHJlc29sdXRpb24gaW1hZ2UgaW4gdGhlIGFwcCB2cyBhIDJ4XG4gICAgICAvLyA+IHJlc29sdXRpb24gaW1hZ2Ugd2lsbCBiZSB2aXN1YWxseSB0aGUgc2FtZSwgdGhvdWdoIHRoZSAzeCBpbWFnZVxuICAgICAgLy8gPiB0YWtlcyBzaWduaWZpY2FudGx5IG1vcmUgZGF0YS4gRXZlbiB0cnVlIDN4IHJlc29sdXRpb24gc2NyZWVucyBhcmVcbiAgICAgIC8vID4gd2FzdGVmdWwgYXMgdGhlIGh1bWFuIGV5ZSBjYW5ub3Qgc2VlIHRoYXQgbGV2ZWwgb2YgZGV0YWlsIHdpdGhvdXRcbiAgICAgIC8vID4gc29tZXRoaW5nIGxpa2UgYSBtYWduaWZ5aW5nIGdsYXNzLlxuICAgICAgLy8gaHR0cHM6Ly9ibG9nLnR3aXR0ZXIuY29tL2VuZ2luZWVyaW5nL2VuX3VzL3RvcGljcy9pbmZyYXN0cnVjdHVyZS8yMDE5L2NhcHBpbmctaW1hZ2UtZmlkZWxpdHktb24tdWx0cmEtaGlnaC1yZXNvbHV0aW9uLWRldmljZXMuaHRtbFxuICAgICAgW3dpZHRoLCB3aWR0aCAqIDIgLyosIHdpZHRoICogMyovXS5tYXAoXG4gICAgICAgICh3KSA9PiBhbGxTaXplcy5maW5kKChwKSA9PiBwID49IHcpIHx8IGFsbFNpemVzW2FsbFNpemVzLmxlbmd0aCAtIDFdXG4gICAgICApXG4gICAgKSxcbiAgXVxuICByZXR1cm4geyB3aWR0aHMsIGtpbmQ6ICd4JyB9XG59XG5cbnR5cGUgR2VuSW1nQXR0cnNEYXRhID0ge1xuICBjb25maWc6IEltYWdlQ29uZmlnXG4gIHNyYzogc3RyaW5nXG4gIHVub3B0aW1pemVkOiBib29sZWFuXG4gIGxvYWRlcjogSW1hZ2VMb2FkZXJXaXRoQ29uZmlnXG4gIHdpZHRoPzogbnVtYmVyXG4gIHF1YWxpdHk/OiBudW1iZXJcbiAgc2l6ZXM/OiBzdHJpbmdcbn1cblxudHlwZSBHZW5JbWdBdHRyc1Jlc3VsdCA9IHtcbiAgc3JjOiBzdHJpbmdcbiAgc3JjU2V0OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgc2l6ZXM6IHN0cmluZyB8IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUltZ0F0dHJzKHtcbiAgY29uZmlnLFxuICBzcmMsXG4gIHVub3B0aW1pemVkLFxuICB3aWR0aCxcbiAgcXVhbGl0eSxcbiAgc2l6ZXMsXG4gIGxvYWRlcixcbn06IEdlbkltZ0F0dHJzRGF0YSk6IEdlbkltZ0F0dHJzUmVzdWx0IHtcbiAgaWYgKHVub3B0aW1pemVkKSB7XG4gICAgcmV0dXJuIHsgc3JjLCBzcmNTZXQ6IHVuZGVmaW5lZCwgc2l6ZXM6IHVuZGVmaW5lZCB9XG4gIH1cblxuICBjb25zdCB7IHdpZHRocywga2luZCB9ID0gZ2V0V2lkdGhzKGNvbmZpZywgd2lkdGgsIHNpemVzKVxuICBjb25zdCBsYXN0ID0gd2lkdGhzLmxlbmd0aCAtIDFcblxuICByZXR1cm4ge1xuICAgIHNpemVzOiAhc2l6ZXMgJiYga2luZCA9PT0gJ3cnID8gJzEwMHZ3JyA6IHNpemVzLFxuICAgIHNyY1NldDogd2lkdGhzXG4gICAgICAubWFwKFxuICAgICAgICAodywgaSkgPT5cbiAgICAgICAgICBgJHtsb2FkZXIoeyBjb25maWcsIHNyYywgcXVhbGl0eSwgd2lkdGg6IHcgfSl9ICR7XG4gICAgICAgICAgICBraW5kID09PSAndycgPyB3IDogaSArIDFcbiAgICAgICAgICB9JHtraW5kfWBcbiAgICAgIClcbiAgICAgIC5qb2luKCcsICcpLFxuXG4gICAgLy8gSXQncyBpbnRlbmRlZCB0byBrZWVwIGBzcmNgIHRoZSBsYXN0IGF0dHJpYnV0ZSBiZWNhdXNlIFJlYWN0IHVwZGF0ZXNcbiAgICAvLyBhdHRyaWJ1dGVzIGluIG9yZGVyLiBJZiB3ZSBrZWVwIGBzcmNgIHRoZSBmaXJzdCBvbmUsIFNhZmFyaSB3aWxsXG4gICAgLy8gaW1tZWRpYXRlbHkgc3RhcnQgdG8gZmV0Y2ggYHNyY2AsIGJlZm9yZSBgc2l6ZXNgIGFuZCBgc3JjU2V0YCBhcmUgZXZlblxuICAgIC8vIHVwZGF0ZWQgYnkgUmVhY3QuIFRoYXQgY2F1c2VzIG11bHRpcGxlIHVubmVjZXNzYXJ5IHJlcXVlc3RzIGlmIGBzcmNTZXRgXG4gICAgLy8gYW5kIGBzaXplc2AgYXJlIGRlZmluZWQuXG4gICAgLy8gVGhpcyBidWcgY2Fubm90IGJlIHJlcHJvZHVjZWQgaW4gQ2hyb21lIG9yIEZpcmVmb3guXG4gICAgc3JjOiBsb2FkZXIoeyBjb25maWcsIHNyYywgcXVhbGl0eSwgd2lkdGg6IHdpZHRoc1tsYXN0XSB9KSxcbiAgfVxufVxuXG4vKipcbiAqIEEgc2hhcmVkIGZ1bmN0aW9uLCB1c2VkIG9uIGJvdGggY2xpZW50IGFuZCBzZXJ2ZXIsIHRvIGdlbmVyYXRlIHRoZSBwcm9wcyBmb3IgPGltZz4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbWdQcm9wcyhcbiAge1xuICAgIHNyYyxcbiAgICBzaXplcyxcbiAgICB1bm9wdGltaXplZCA9IGZhbHNlLFxuICAgIHByaW9yaXR5ID0gZmFsc2UsXG4gICAgbG9hZGluZyxcbiAgICBjbGFzc05hbWUsXG4gICAgcXVhbGl0eSxcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgZmlsbCA9IGZhbHNlLFxuICAgIHN0eWxlLFxuICAgIG92ZXJyaWRlU3JjLFxuICAgIG9uTG9hZCxcbiAgICBvbkxvYWRpbmdDb21wbGV0ZSxcbiAgICBwbGFjZWhvbGRlciA9ICdlbXB0eScsXG4gICAgYmx1ckRhdGFVUkwsXG4gICAgZmV0Y2hQcmlvcml0eSxcbiAgICBkZWNvZGluZyA9ICdhc3luYycsXG4gICAgbGF5b3V0LFxuICAgIG9iamVjdEZpdCxcbiAgICBvYmplY3RQb3NpdGlvbixcbiAgICBsYXp5Qm91bmRhcnksXG4gICAgbGF6eVJvb3QsXG4gICAgLi4ucmVzdFxuICB9OiBJbWFnZVByb3BzLFxuICBfc3RhdGU6IHtcbiAgICBkZWZhdWx0TG9hZGVyOiBJbWFnZUxvYWRlcldpdGhDb25maWdcbiAgICBpbWdDb25mOiBJbWFnZUNvbmZpZ0NvbXBsZXRlXG4gICAgc2hvd0FsdFRleHQ/OiBib29sZWFuXG4gICAgYmx1ckNvbXBsZXRlPzogYm9vbGVhblxuICB9XG4pOiB7XG4gIHByb3BzOiBJbWdQcm9wc1xuICBtZXRhOiB7XG4gICAgdW5vcHRpbWl6ZWQ6IGJvb2xlYW5cbiAgICBwcmlvcml0eTogYm9vbGVhblxuICAgIHBsYWNlaG9sZGVyOiBOb25OdWxsYWJsZTxJbWFnZVByb3BzWydwbGFjZWhvbGRlciddPlxuICAgIGZpbGw6IGJvb2xlYW5cbiAgfVxufSB7XG4gIGNvbnN0IHsgaW1nQ29uZiwgc2hvd0FsdFRleHQsIGJsdXJDb21wbGV0ZSwgZGVmYXVsdExvYWRlciB9ID0gX3N0YXRlXG4gIGxldCBjb25maWc6IEltYWdlQ29uZmlnXG4gIGxldCBjID0gaW1nQ29uZiB8fCBpbWFnZUNvbmZpZ0RlZmF1bHRcbiAgaWYgKCdhbGxTaXplcycgaW4gYykge1xuICAgIGNvbmZpZyA9IGMgYXMgSW1hZ2VDb25maWdcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBhbGxTaXplcyA9IFsuLi5jLmRldmljZVNpemVzLCAuLi5jLmltYWdlU2l6ZXNdLnNvcnQoKGEsIGIpID0+IGEgLSBiKVxuICAgIGNvbnN0IGRldmljZVNpemVzID0gYy5kZXZpY2VTaXplcy5zb3J0KChhLCBiKSA9PiBhIC0gYilcbiAgICBjb25zdCBxdWFsaXRpZXMgPSBjLnF1YWxpdGllcz8uc29ydCgoYSwgYikgPT4gYSAtIGIpXG4gICAgY29uZmlnID0geyAuLi5jLCBhbGxTaXplcywgZGV2aWNlU2l6ZXMsIHF1YWxpdGllcyB9XG4gIH1cblxuICBpZiAodHlwZW9mIGRlZmF1bHRMb2FkZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ2ltYWdlcy5sb2FkZXJGaWxlIGRldGVjdGVkIGJ1dCB0aGUgZmlsZSBpcyBtaXNzaW5nIGRlZmF1bHQgZXhwb3J0LlxcblJlYWQgbW9yZTogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvaW52YWxpZC1pbWFnZXMtY29uZmlnJ1xuICAgIClcbiAgfVxuICBsZXQgbG9hZGVyOiBJbWFnZUxvYWRlcldpdGhDb25maWcgPSByZXN0LmxvYWRlciB8fCBkZWZhdWx0TG9hZGVyXG5cbiAgLy8gUmVtb3ZlIHByb3BlcnR5IHNvIGl0J3Mgbm90IHNwcmVhZCBvbiA8aW1nPiBlbGVtZW50XG4gIGRlbGV0ZSByZXN0LmxvYWRlclxuICBkZWxldGUgKHJlc3QgYXMgYW55KS5zcmNTZXRcblxuICAvLyBUaGlzIHNwZWNpYWwgdmFsdWUgaW5kaWNhdGVzIHRoYXQgdGhlIHVzZXJcbiAgLy8gZGlkbid0IGRlZmluZSBhIFwibG9hZGVyXCIgcHJvcCBvciBcImxvYWRlclwiIGNvbmZpZy5cbiAgY29uc3QgaXNEZWZhdWx0TG9hZGVyID0gJ19fbmV4dF9pbWdfZGVmYXVsdCcgaW4gbG9hZGVyXG5cbiAgaWYgKGlzRGVmYXVsdExvYWRlcikge1xuICAgIGlmIChjb25maWcubG9hZGVyID09PSAnY3VzdG9tJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW1hZ2Ugd2l0aCBzcmMgXCIke3NyY31cIiBpcyBtaXNzaW5nIFwibG9hZGVyXCIgcHJvcC5gICtcbiAgICAgICAgICBgXFxuUmVhZCBtb3JlOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9uZXh0LWltYWdlLW1pc3NpbmctbG9hZGVyYFxuICAgICAgKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBUaGUgdXNlciBkZWZpbmVkIGEgXCJsb2FkZXJcIiBwcm9wIG9yIGNvbmZpZy5cbiAgICAvLyBTaW5jZSB0aGUgY29uZmlnIG9iamVjdCBpcyBpbnRlcm5hbCBvbmx5LCB3ZVxuICAgIC8vIG11c3Qgbm90IHBhc3MgaXQgdG8gdGhlIHVzZXItZGVmaW5lZCBcImxvYWRlclwiLlxuICAgIGNvbnN0IGN1c3RvbUltYWdlTG9hZGVyID0gbG9hZGVyIGFzIEltYWdlTG9hZGVyXG4gICAgbG9hZGVyID0gKG9iaikgPT4ge1xuICAgICAgY29uc3QgeyBjb25maWc6IF8sIC4uLm9wdHMgfSA9IG9ialxuICAgICAgcmV0dXJuIGN1c3RvbUltYWdlTG9hZGVyKG9wdHMpXG4gICAgfVxuICB9XG5cbiAgaWYgKGxheW91dCkge1xuICAgIGlmIChsYXlvdXQgPT09ICdmaWxsJykge1xuICAgICAgZmlsbCA9IHRydWVcbiAgICB9XG4gICAgY29uc3QgbGF5b3V0VG9TdHlsZTogUmVjb3JkPHN0cmluZywgUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IHVuZGVmaW5lZD4gPSB7XG4gICAgICBpbnRyaW5zaWM6IHsgbWF4V2lkdGg6ICcxMDAlJywgaGVpZ2h0OiAnYXV0bycgfSxcbiAgICAgIHJlc3BvbnNpdmU6IHsgd2lkdGg6ICcxMDAlJywgaGVpZ2h0OiAnYXV0bycgfSxcbiAgICB9XG4gICAgY29uc3QgbGF5b3V0VG9TaXplczogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgdW5kZWZpbmVkPiA9IHtcbiAgICAgIHJlc3BvbnNpdmU6ICcxMDB2dycsXG4gICAgICBmaWxsOiAnMTAwdncnLFxuICAgIH1cbiAgICBjb25zdCBsYXlvdXRTdHlsZSA9IGxheW91dFRvU3R5bGVbbGF5b3V0XVxuICAgIGlmIChsYXlvdXRTdHlsZSkge1xuICAgICAgc3R5bGUgPSB7IC4uLnN0eWxlLCAuLi5sYXlvdXRTdHlsZSB9XG4gICAgfVxuICAgIGNvbnN0IGxheW91dFNpemVzID0gbGF5b3V0VG9TaXplc1tsYXlvdXRdXG4gICAgaWYgKGxheW91dFNpemVzICYmICFzaXplcykge1xuICAgICAgc2l6ZXMgPSBsYXlvdXRTaXplc1xuICAgIH1cbiAgfVxuXG4gIGxldCBzdGF0aWNTcmMgPSAnJ1xuICBsZXQgd2lkdGhJbnQgPSBnZXRJbnQod2lkdGgpXG4gIGxldCBoZWlnaHRJbnQgPSBnZXRJbnQoaGVpZ2h0KVxuICBsZXQgYmx1cldpZHRoOiBudW1iZXIgfCB1bmRlZmluZWRcbiAgbGV0IGJsdXJIZWlnaHQ6IG51bWJlciB8IHVuZGVmaW5lZFxuICBpZiAoaXNTdGF0aWNJbXBvcnQoc3JjKSkge1xuICAgIGNvbnN0IHN0YXRpY0ltYWdlRGF0YSA9IGlzU3RhdGljUmVxdWlyZShzcmMpID8gc3JjLmRlZmF1bHQgOiBzcmNcblxuICAgIGlmICghc3RhdGljSW1hZ2VEYXRhLnNyYykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgQW4gb2JqZWN0IHNob3VsZCBvbmx5IGJlIHBhc3NlZCB0byB0aGUgaW1hZ2UgY29tcG9uZW50IHNyYyBwYXJhbWV0ZXIgaWYgaXQgY29tZXMgZnJvbSBhIHN0YXRpYyBpbWFnZSBpbXBvcnQuIEl0IG11c3QgaW5jbHVkZSBzcmMuIFJlY2VpdmVkICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgc3RhdGljSW1hZ2VEYXRhXG4gICAgICAgICl9YFxuICAgICAgKVxuICAgIH1cbiAgICBpZiAoIXN0YXRpY0ltYWdlRGF0YS5oZWlnaHQgfHwgIXN0YXRpY0ltYWdlRGF0YS53aWR0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgQW4gb2JqZWN0IHNob3VsZCBvbmx5IGJlIHBhc3NlZCB0byB0aGUgaW1hZ2UgY29tcG9uZW50IHNyYyBwYXJhbWV0ZXIgaWYgaXQgY29tZXMgZnJvbSBhIHN0YXRpYyBpbWFnZSBpbXBvcnQuIEl0IG11c3QgaW5jbHVkZSBoZWlnaHQgYW5kIHdpZHRoLiBSZWNlaXZlZCAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgIHN0YXRpY0ltYWdlRGF0YVxuICAgICAgICApfWBcbiAgICAgIClcbiAgICB9XG5cbiAgICBibHVyV2lkdGggPSBzdGF0aWNJbWFnZURhdGEuYmx1cldpZHRoXG4gICAgYmx1ckhlaWdodCA9IHN0YXRpY0ltYWdlRGF0YS5ibHVySGVpZ2h0XG4gICAgYmx1ckRhdGFVUkwgPSBibHVyRGF0YVVSTCB8fCBzdGF0aWNJbWFnZURhdGEuYmx1ckRhdGFVUkxcbiAgICBzdGF0aWNTcmMgPSBzdGF0aWNJbWFnZURhdGEuc3JjXG5cbiAgICBpZiAoIWZpbGwpIHtcbiAgICAgIGlmICghd2lkdGhJbnQgJiYgIWhlaWdodEludCkge1xuICAgICAgICB3aWR0aEludCA9IHN0YXRpY0ltYWdlRGF0YS53aWR0aFxuICAgICAgICBoZWlnaHRJbnQgPSBzdGF0aWNJbWFnZURhdGEuaGVpZ2h0XG4gICAgICB9IGVsc2UgaWYgKHdpZHRoSW50ICYmICFoZWlnaHRJbnQpIHtcbiAgICAgICAgY29uc3QgcmF0aW8gPSB3aWR0aEludCAvIHN0YXRpY0ltYWdlRGF0YS53aWR0aFxuICAgICAgICBoZWlnaHRJbnQgPSBNYXRoLnJvdW5kKHN0YXRpY0ltYWdlRGF0YS5oZWlnaHQgKiByYXRpbylcbiAgICAgIH0gZWxzZSBpZiAoIXdpZHRoSW50ICYmIGhlaWdodEludCkge1xuICAgICAgICBjb25zdCByYXRpbyA9IGhlaWdodEludCAvIHN0YXRpY0ltYWdlRGF0YS5oZWlnaHRcbiAgICAgICAgd2lkdGhJbnQgPSBNYXRoLnJvdW5kKHN0YXRpY0ltYWdlRGF0YS53aWR0aCAqIHJhdGlvKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBzcmMgPSB0eXBlb2Ygc3JjID09PSAnc3RyaW5nJyA/IHNyYyA6IHN0YXRpY1NyY1xuXG4gIGxldCBpc0xhenkgPVxuICAgICFwcmlvcml0eSAmJiAobG9hZGluZyA9PT0gJ2xhenknIHx8IHR5cGVvZiBsb2FkaW5nID09PSAndW5kZWZpbmVkJylcbiAgaWYgKCFzcmMgfHwgc3JjLnN0YXJ0c1dpdGgoJ2RhdGE6JykgfHwgc3JjLnN0YXJ0c1dpdGgoJ2Jsb2I6JykpIHtcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVFRQL0Jhc2ljc19vZl9IVFRQL0RhdGFfVVJJc1xuICAgIHVub3B0aW1pemVkID0gdHJ1ZVxuICAgIGlzTGF6eSA9IGZhbHNlXG4gIH1cbiAgaWYgKGNvbmZpZy51bm9wdGltaXplZCkge1xuICAgIHVub3B0aW1pemVkID0gdHJ1ZVxuICB9XG4gIGlmIChcbiAgICBpc0RlZmF1bHRMb2FkZXIgJiZcbiAgICAhY29uZmlnLmRhbmdlcm91c2x5QWxsb3dTVkcgJiZcbiAgICBzcmMuc3BsaXQoJz8nLCAxKVswXS5lbmRzV2l0aCgnLnN2ZycpXG4gICkge1xuICAgIC8vIFNwZWNpYWwgY2FzZSB0byBtYWtlIHN2ZyBzZXJ2ZSBhcy1pcyB0byBhdm9pZCBwcm94eWluZ1xuICAgIC8vIHRocm91Z2ggdGhlIGJ1aWx0LWluIEltYWdlIE9wdGltaXphdGlvbiBBUEkuXG4gICAgdW5vcHRpbWl6ZWQgPSB0cnVlXG4gIH1cblxuICBjb25zdCBxdWFsaXR5SW50ID0gZ2V0SW50KHF1YWxpdHkpXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoY29uZmlnLm91dHB1dCA9PT0gJ2V4cG9ydCcgJiYgaXNEZWZhdWx0TG9hZGVyICYmICF1bm9wdGltaXplZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW1hZ2UgT3B0aW1pemF0aW9uIHVzaW5nIHRoZSBkZWZhdWx0IGxvYWRlciBpcyBub3QgY29tcGF0aWJsZSB3aXRoIFxcYHsgb3V0cHV0OiAnZXhwb3J0JyB9XFxgLlxuICBQb3NzaWJsZSBzb2x1dGlvbnM6XG4gICAgLSBSZW1vdmUgXFxgeyBvdXRwdXQ6ICdleHBvcnQnIH1cXGAgYW5kIHJ1biBcIm5leHQgc3RhcnRcIiB0byBydW4gc2VydmVyIG1vZGUgaW5jbHVkaW5nIHRoZSBJbWFnZSBPcHRpbWl6YXRpb24gQVBJLlxuICAgIC0gQ29uZmlndXJlIFxcYHsgaW1hZ2VzOiB7IHVub3B0aW1pemVkOiB0cnVlIH0gfVxcYCBpbiBcXGBuZXh0LmNvbmZpZy5qc1xcYCB0byBkaXNhYmxlIHRoZSBJbWFnZSBPcHRpbWl6YXRpb24gQVBJLlxuICBSZWFkIG1vcmU6IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL2V4cG9ydC1pbWFnZS1hcGlgXG4gICAgICApXG4gICAgfVxuICAgIGlmICghc3JjKSB7XG4gICAgICAvLyBSZWFjdCBkb2Vzbid0IHNob3cgdGhlIHN0YWNrIHRyYWNlIGFuZCB0aGVyZSdzXG4gICAgICAvLyBubyBgc3JjYCB0byBoZWxwIGlkZW50aWZ5IHdoaWNoIGltYWdlLCBzbyB3ZVxuICAgICAgLy8gaW5zdGVhZCBjb25zb2xlLmVycm9yKHJlZikgZHVyaW5nIG1vdW50LlxuICAgICAgdW5vcHRpbWl6ZWQgPSB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChmaWxsKSB7XG4gICAgICAgIGlmICh3aWR0aCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBJbWFnZSB3aXRoIHNyYyBcIiR7c3JjfVwiIGhhcyBib3RoIFwid2lkdGhcIiBhbmQgXCJmaWxsXCIgcHJvcGVydGllcy4gT25seSBvbmUgc2hvdWxkIGJlIHVzZWQuYFxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVpZ2h0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYEltYWdlIHdpdGggc3JjIFwiJHtzcmN9XCIgaGFzIGJvdGggXCJoZWlnaHRcIiBhbmQgXCJmaWxsXCIgcHJvcGVydGllcy4gT25seSBvbmUgc2hvdWxkIGJlIHVzZWQuYFxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3R5bGU/LnBvc2l0aW9uICYmIHN0eWxlLnBvc2l0aW9uICE9PSAnYWJzb2x1dGUnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYEltYWdlIHdpdGggc3JjIFwiJHtzcmN9XCIgaGFzIGJvdGggXCJmaWxsXCIgYW5kIFwic3R5bGUucG9zaXRpb25cIiBwcm9wZXJ0aWVzLiBJbWFnZXMgd2l0aCBcImZpbGxcIiBhbHdheXMgdXNlIHBvc2l0aW9uIGFic29sdXRlIC0gaXQgY2Fubm90IGJlIG1vZGlmaWVkLmBcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0eWxlPy53aWR0aCAmJiBzdHlsZS53aWR0aCAhPT0gJzEwMCUnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYEltYWdlIHdpdGggc3JjIFwiJHtzcmN9XCIgaGFzIGJvdGggXCJmaWxsXCIgYW5kIFwic3R5bGUud2lkdGhcIiBwcm9wZXJ0aWVzLiBJbWFnZXMgd2l0aCBcImZpbGxcIiBhbHdheXMgdXNlIHdpZHRoIDEwMCUgLSBpdCBjYW5ub3QgYmUgbW9kaWZpZWQuYFxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3R5bGU/LmhlaWdodCAmJiBzdHlsZS5oZWlnaHQgIT09ICcxMDAlJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBJbWFnZSB3aXRoIHNyYyBcIiR7c3JjfVwiIGhhcyBib3RoIFwiZmlsbFwiIGFuZCBcInN0eWxlLmhlaWdodFwiIHByb3BlcnRpZXMuIEltYWdlcyB3aXRoIFwiZmlsbFwiIGFsd2F5cyB1c2UgaGVpZ2h0IDEwMCUgLSBpdCBjYW5ub3QgYmUgbW9kaWZpZWQuYFxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aWR0aEludCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgSW1hZ2Ugd2l0aCBzcmMgXCIke3NyY31cIiBpcyBtaXNzaW5nIHJlcXVpcmVkIFwid2lkdGhcIiBwcm9wZXJ0eS5gXG4gICAgICAgICAgKVxuICAgICAgICB9IGVsc2UgaWYgKGlzTmFOKHdpZHRoSW50KSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBJbWFnZSB3aXRoIHNyYyBcIiR7c3JjfVwiIGhhcyBpbnZhbGlkIFwid2lkdGhcIiBwcm9wZXJ0eS4gRXhwZWN0ZWQgYSBudW1lcmljIHZhbHVlIGluIHBpeGVscyBidXQgcmVjZWl2ZWQgXCIke3dpZHRofVwiLmBcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBoZWlnaHRJbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYEltYWdlIHdpdGggc3JjIFwiJHtzcmN9XCIgaXMgbWlzc2luZyByZXF1aXJlZCBcImhlaWdodFwiIHByb3BlcnR5LmBcbiAgICAgICAgICApXG4gICAgICAgIH0gZWxzZSBpZiAoaXNOYU4oaGVpZ2h0SW50KSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBJbWFnZSB3aXRoIHNyYyBcIiR7c3JjfVwiIGhhcyBpbnZhbGlkIFwiaGVpZ2h0XCIgcHJvcGVydHkuIEV4cGVjdGVkIGEgbnVtZXJpYyB2YWx1ZSBpbiBwaXhlbHMgYnV0IHJlY2VpdmVkIFwiJHtoZWlnaHR9XCIuYFxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxuICAgICAgICBpZiAoL15bXFx4MDAtXFx4MjBdLy50ZXN0KHNyYykpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgSW1hZ2Ugd2l0aCBzcmMgXCIke3NyY31cIiBjYW5ub3Qgc3RhcnQgd2l0aCBhIHNwYWNlIG9yIGNvbnRyb2wgY2hhcmFjdGVyLiBVc2Ugc3JjLnRyaW1TdGFydCgpIHRvIHJlbW92ZSBpdCBvciBlbmNvZGVVUklDb21wb25lbnQoc3JjKSB0byBrZWVwIGl0LmBcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbiAgICAgICAgaWYgKC9bXFx4MDAtXFx4MjBdJC8udGVzdChzcmMpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYEltYWdlIHdpdGggc3JjIFwiJHtzcmN9XCIgY2Fubm90IGVuZCB3aXRoIGEgc3BhY2Ugb3IgY29udHJvbCBjaGFyYWN0ZXIuIFVzZSBzcmMudHJpbUVuZCgpIHRvIHJlbW92ZSBpdCBvciBlbmNvZGVVUklDb21wb25lbnQoc3JjKSB0byBrZWVwIGl0LmBcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFWQUxJRF9MT0FESU5HX1ZBTFVFUy5pbmNsdWRlcyhsb2FkaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW1hZ2Ugd2l0aCBzcmMgXCIke3NyY31cIiBoYXMgaW52YWxpZCBcImxvYWRpbmdcIiBwcm9wZXJ0eS4gUHJvdmlkZWQgXCIke2xvYWRpbmd9XCIgc2hvdWxkIGJlIG9uZSBvZiAke1ZBTElEX0xPQURJTkdfVkFMVUVTLm1hcChcbiAgICAgICAgICBTdHJpbmdcbiAgICAgICAgKS5qb2luKCcsJyl9LmBcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKHByaW9yaXR5ICYmIGxvYWRpbmcgPT09ICdsYXp5Jykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW1hZ2Ugd2l0aCBzcmMgXCIke3NyY31cIiBoYXMgYm90aCBcInByaW9yaXR5XCIgYW5kIFwibG9hZGluZz0nbGF6eSdcIiBwcm9wZXJ0aWVzLiBPbmx5IG9uZSBzaG91bGQgYmUgdXNlZC5gXG4gICAgICApXG4gICAgfVxuICAgIGlmIChcbiAgICAgIHBsYWNlaG9sZGVyICE9PSAnZW1wdHknICYmXG4gICAgICBwbGFjZWhvbGRlciAhPT0gJ2JsdXInICYmXG4gICAgICAhcGxhY2Vob2xkZXIuc3RhcnRzV2l0aCgnZGF0YTppbWFnZS8nKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW1hZ2Ugd2l0aCBzcmMgXCIke3NyY31cIiBoYXMgaW52YWxpZCBcInBsYWNlaG9sZGVyXCIgcHJvcGVydHkgXCIke3BsYWNlaG9sZGVyfVwiLmBcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKHBsYWNlaG9sZGVyICE9PSAnZW1wdHknKSB7XG4gICAgICBpZiAod2lkdGhJbnQgJiYgaGVpZ2h0SW50ICYmIHdpZHRoSW50ICogaGVpZ2h0SW50IDwgMTYwMCkge1xuICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICBgSW1hZ2Ugd2l0aCBzcmMgXCIke3NyY31cIiBpcyBzbWFsbGVyIHRoYW4gNDB4NDAuIENvbnNpZGVyIHJlbW92aW5nIHRoZSBcInBsYWNlaG9sZGVyXCIgcHJvcGVydHkgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZS5gXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBsYWNlaG9sZGVyID09PSAnYmx1cicgJiYgIWJsdXJEYXRhVVJMKSB7XG4gICAgICBjb25zdCBWQUxJRF9CTFVSX0VYVCA9IFsnanBlZycsICdwbmcnLCAnd2VicCcsICdhdmlmJ10gLy8gc2hvdWxkIG1hdGNoIG5leHQtaW1hZ2UtbG9hZGVyXG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEltYWdlIHdpdGggc3JjIFwiJHtzcmN9XCIgaGFzIFwicGxhY2Vob2xkZXI9J2JsdXInXCIgcHJvcGVydHkgYnV0IGlzIG1pc3NpbmcgdGhlIFwiYmx1ckRhdGFVUkxcIiBwcm9wZXJ0eS5cbiAgICAgICAgUG9zc2libGUgc29sdXRpb25zOlxuICAgICAgICAgIC0gQWRkIGEgXCJibHVyRGF0YVVSTFwiIHByb3BlcnR5LCB0aGUgY29udGVudHMgc2hvdWxkIGJlIGEgc21hbGwgRGF0YSBVUkwgdG8gcmVwcmVzZW50IHRoZSBpbWFnZVxuICAgICAgICAgIC0gQ2hhbmdlIHRoZSBcInNyY1wiIHByb3BlcnR5IHRvIGEgc3RhdGljIGltcG9ydCB3aXRoIG9uZSBvZiB0aGUgc3VwcG9ydGVkIGZpbGUgdHlwZXM6ICR7VkFMSURfQkxVUl9FWFQuam9pbihcbiAgICAgICAgICAgICcsJ1xuICAgICAgICAgICl9IChhbmltYXRlZCBpbWFnZXMgbm90IHN1cHBvcnRlZClcbiAgICAgICAgICAtIFJlbW92ZSB0aGUgXCJwbGFjZWhvbGRlclwiIHByb3BlcnR5LCBlZmZlY3RpdmVseSBubyBibHVyIGVmZmVjdFxuICAgICAgICBSZWFkIG1vcmU6IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL3BsYWNlaG9sZGVyLWJsdXItZGF0YS11cmxgXG4gICAgICApXG4gICAgfVxuICAgIGlmICgncmVmJyBpbiByZXN0KSB7XG4gICAgICB3YXJuT25jZShcbiAgICAgICAgYEltYWdlIHdpdGggc3JjIFwiJHtzcmN9XCIgaXMgdXNpbmcgdW5zdXBwb3J0ZWQgXCJyZWZcIiBwcm9wZXJ0eS4gQ29uc2lkZXIgdXNpbmcgdGhlIFwib25Mb2FkXCIgcHJvcGVydHkgaW5zdGVhZC5gXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKCF1bm9wdGltaXplZCAmJiAhaXNEZWZhdWx0TG9hZGVyKSB7XG4gICAgICBjb25zdCB1cmxTdHIgPSBsb2FkZXIoe1xuICAgICAgICBjb25maWcsXG4gICAgICAgIHNyYyxcbiAgICAgICAgd2lkdGg6IHdpZHRoSW50IHx8IDQwMCxcbiAgICAgICAgcXVhbGl0eTogcXVhbGl0eUludCB8fCA3NSxcbiAgICAgIH0pXG4gICAgICBsZXQgdXJsOiBVUkwgfCB1bmRlZmluZWRcbiAgICAgIHRyeSB7XG4gICAgICAgIHVybCA9IG5ldyBVUkwodXJsU3RyKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgICAgaWYgKHVybFN0ciA9PT0gc3JjIHx8ICh1cmwgJiYgdXJsLnBhdGhuYW1lID09PSBzcmMgJiYgIXVybC5zZWFyY2gpKSB7XG4gICAgICAgIHdhcm5PbmNlKFxuICAgICAgICAgIGBJbWFnZSB3aXRoIHNyYyBcIiR7c3JjfVwiIGhhcyBhIFwibG9hZGVyXCIgcHJvcGVydHkgdGhhdCBkb2VzIG5vdCBpbXBsZW1lbnQgd2lkdGguIFBsZWFzZSBpbXBsZW1lbnQgaXQgb3IgdXNlIHRoZSBcInVub3B0aW1pemVkXCIgcHJvcGVydHkgaW5zdGVhZC5gICtcbiAgICAgICAgICAgIGBcXG5SZWFkIG1vcmU6IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL25leHQtaW1hZ2UtbWlzc2luZy1sb2FkZXItd2lkdGhgXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob25Mb2FkaW5nQ29tcGxldGUpIHtcbiAgICAgIHdhcm5PbmNlKFxuICAgICAgICBgSW1hZ2Ugd2l0aCBzcmMgXCIke3NyY31cIiBpcyB1c2luZyBkZXByZWNhdGVkIFwib25Mb2FkaW5nQ29tcGxldGVcIiBwcm9wZXJ0eS4gUGxlYXNlIHVzZSB0aGUgXCJvbkxvYWRcIiBwcm9wZXJ0eSBpbnN0ZWFkLmBcbiAgICAgIClcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IFtsZWdhY3lLZXksIGxlZ2FjeVZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh7XG4gICAgICBsYXlvdXQsXG4gICAgICBvYmplY3RGaXQsXG4gICAgICBvYmplY3RQb3NpdGlvbixcbiAgICAgIGxhenlCb3VuZGFyeSxcbiAgICAgIGxhenlSb290LFxuICAgIH0pKSB7XG4gICAgICBpZiAobGVnYWN5VmFsdWUpIHtcbiAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgYEltYWdlIHdpdGggc3JjIFwiJHtzcmN9XCIgaGFzIGxlZ2FjeSBwcm9wIFwiJHtsZWdhY3lLZXl9XCIuIERpZCB5b3UgZm9yZ2V0IHRvIHJ1biB0aGUgY29kZW1vZD9gICtcbiAgICAgICAgICAgIGBcXG5SZWFkIG1vcmU6IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL25leHQtaW1hZ2UtdXBncmFkZS10by0xM2BcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAhcGVyZk9ic2VydmVyICYmXG4gICAgICB3aW5kb3cuUGVyZm9ybWFuY2VPYnNlcnZlclxuICAgICkge1xuICAgICAgcGVyZk9ic2VydmVyID0gbmV3IFBlcmZvcm1hbmNlT2JzZXJ2ZXIoKGVudHJ5TGlzdCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJ5TGlzdC5nZXRFbnRyaWVzKCkpIHtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlIC0gbWlzc2luZyBcIkxhcmdlc3RDb250ZW50ZnVsUGFpbnRcIiBjbGFzcyB3aXRoIFwiZWxlbWVudFwiIHByb3BcbiAgICAgICAgICBjb25zdCBpbWdTcmMgPSBlbnRyeT8uZWxlbWVudD8uc3JjIHx8ICcnXG4gICAgICAgICAgY29uc3QgbGNwSW1hZ2UgPSBhbGxJbWdzLmdldChpbWdTcmMpXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgbGNwSW1hZ2UgJiZcbiAgICAgICAgICAgICFsY3BJbWFnZS5wcmlvcml0eSAmJlxuICAgICAgICAgICAgbGNwSW1hZ2UucGxhY2Vob2xkZXIgPT09ICdlbXB0eScgJiZcbiAgICAgICAgICAgICFsY3BJbWFnZS5zcmMuc3RhcnRzV2l0aCgnZGF0YTonKSAmJlxuICAgICAgICAgICAgIWxjcEltYWdlLnNyYy5zdGFydHNXaXRoKCdibG9iOicpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBodHRwczovL3dlYi5kZXYvbGNwLyNtZWFzdXJlLWxjcC1pbi1qYXZhc2NyaXB0XG4gICAgICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAgICAgYEltYWdlIHdpdGggc3JjIFwiJHtsY3BJbWFnZS5zcmN9XCIgd2FzIGRldGVjdGVkIGFzIHRoZSBMYXJnZXN0IENvbnRlbnRmdWwgUGFpbnQgKExDUCkuIFBsZWFzZSBhZGQgdGhlIFwicHJpb3JpdHlcIiBwcm9wZXJ0eSBpZiB0aGlzIGltYWdlIGlzIGFib3ZlIHRoZSBmb2xkLmAgK1xuICAgICAgICAgICAgICAgIGBcXG5SZWFkIG1vcmU6IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC9pbWFnZSNwcmlvcml0eWBcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICB0cnkge1xuICAgICAgICBwZXJmT2JzZXJ2ZXIub2JzZXJ2ZSh7XG4gICAgICAgICAgdHlwZTogJ2xhcmdlc3QtY29udGVudGZ1bC1wYWludCcsXG4gICAgICAgICAgYnVmZmVyZWQ6IHRydWUsXG4gICAgICAgIH0pXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gTG9nIGVycm9yIGJ1dCBkb24ndCBjcmFzaCB0aGUgYXBwXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25zdCBpbWdTdHlsZSA9IE9iamVjdC5hc3NpZ24oXG4gICAgZmlsbFxuICAgICAgPyB7XG4gICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICBib3R0b206IDAsXG4gICAgICAgICAgb2JqZWN0Rml0LFxuICAgICAgICAgIG9iamVjdFBvc2l0aW9uLFxuICAgICAgICB9XG4gICAgICA6IHt9LFxuICAgIHNob3dBbHRUZXh0ID8ge30gOiB7IGNvbG9yOiAndHJhbnNwYXJlbnQnIH0sXG4gICAgc3R5bGVcbiAgKVxuXG4gIGNvbnN0IGJhY2tncm91bmRJbWFnZSA9XG4gICAgIWJsdXJDb21wbGV0ZSAmJiBwbGFjZWhvbGRlciAhPT0gJ2VtcHR5J1xuICAgICAgPyBwbGFjZWhvbGRlciA9PT0gJ2JsdXInXG4gICAgICAgID8gYHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0Zi04LCR7Z2V0SW1hZ2VCbHVyU3ZnKHtcbiAgICAgICAgICAgIHdpZHRoSW50LFxuICAgICAgICAgICAgaGVpZ2h0SW50LFxuICAgICAgICAgICAgYmx1cldpZHRoLFxuICAgICAgICAgICAgYmx1ckhlaWdodCxcbiAgICAgICAgICAgIGJsdXJEYXRhVVJMOiBibHVyRGF0YVVSTCB8fCAnJywgLy8gYXNzdW1lIG5vdCB1bmRlZmluZWRcbiAgICAgICAgICAgIG9iamVjdEZpdDogaW1nU3R5bGUub2JqZWN0Rml0LFxuICAgICAgICAgIH0pfVwiKWBcbiAgICAgICAgOiBgdXJsKFwiJHtwbGFjZWhvbGRlcn1cIilgIC8vIGFzc3VtZSBgZGF0YTppbWFnZS9gXG4gICAgICA6IG51bGxcblxuICBsZXQgcGxhY2Vob2xkZXJTdHlsZSA9IGJhY2tncm91bmRJbWFnZVxuICAgID8ge1xuICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogaW1nU3R5bGUub2JqZWN0Rml0IHx8ICdjb3ZlcicsXG4gICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogaW1nU3R5bGUub2JqZWN0UG9zaXRpb24gfHwgJzUwJSA1MCUnLFxuICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiAnbm8tcmVwZWF0JyxcbiAgICAgICAgYmFja2dyb3VuZEltYWdlLFxuICAgICAgfVxuICAgIDoge31cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICBpZiAoXG4gICAgICBwbGFjZWhvbGRlclN0eWxlLmJhY2tncm91bmRJbWFnZSAmJlxuICAgICAgcGxhY2Vob2xkZXIgPT09ICdibHVyJyAmJlxuICAgICAgYmx1ckRhdGFVUkw/LnN0YXJ0c1dpdGgoJy8nKVxuICAgICkge1xuICAgICAgLy8gRHVyaW5nIGBuZXh0IGRldmAsIHdlIGRvbid0IHdhbnQgdG8gZ2VuZXJhdGUgYmx1ciBwbGFjZWhvbGRlcnMgd2l0aCB3ZWJwYWNrXG4gICAgICAvLyBiZWNhdXNlIGl0IGNhbiBkZWxheSBzdGFydGluZyB0aGUgZGV2IHNlcnZlci4gSW5zdGVhZCwgYG5leHQtaW1hZ2UtbG9hZGVyLmpzYFxuICAgICAgLy8gd2lsbCBpbmxpbmUgYSBzcGVjaWFsIHVybCB0byBsYXppbHkgZ2VuZXJhdGUgdGhlIGJsdXIgcGxhY2Vob2xkZXIgYXQgcmVxdWVzdCB0aW1lLlxuICAgICAgcGxhY2Vob2xkZXJTdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgdXJsKFwiJHtibHVyRGF0YVVSTH1cIilgXG4gICAgfVxuICB9XG5cbiAgY29uc3QgaW1nQXR0cmlidXRlcyA9IGdlbmVyYXRlSW1nQXR0cnMoe1xuICAgIGNvbmZpZyxcbiAgICBzcmMsXG4gICAgdW5vcHRpbWl6ZWQsXG4gICAgd2lkdGg6IHdpZHRoSW50LFxuICAgIHF1YWxpdHk6IHF1YWxpdHlJbnQsXG4gICAgc2l6ZXMsXG4gICAgbG9hZGVyLFxuICB9KVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBsZXQgZnVsbFVybDogVVJMXG4gICAgICB0cnkge1xuICAgICAgICBmdWxsVXJsID0gbmV3IFVSTChpbWdBdHRyaWJ1dGVzLnNyYylcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZnVsbFVybCA9IG5ldyBVUkwoaW1nQXR0cmlidXRlcy5zcmMsIHdpbmRvdy5sb2NhdGlvbi5ocmVmKVxuICAgICAgfVxuICAgICAgYWxsSW1ncy5zZXQoZnVsbFVybC5ocmVmLCB7IHNyYywgcHJpb3JpdHksIHBsYWNlaG9sZGVyIH0pXG4gICAgfVxuICB9XG5cbiAgY29uc3QgcHJvcHM6IEltZ1Byb3BzID0ge1xuICAgIC4uLnJlc3QsXG4gICAgbG9hZGluZzogaXNMYXp5ID8gJ2xhenknIDogbG9hZGluZyxcbiAgICBmZXRjaFByaW9yaXR5LFxuICAgIHdpZHRoOiB3aWR0aEludCxcbiAgICBoZWlnaHQ6IGhlaWdodEludCxcbiAgICBkZWNvZGluZyxcbiAgICBjbGFzc05hbWUsXG4gICAgc3R5bGU6IHsgLi4uaW1nU3R5bGUsIC4uLnBsYWNlaG9sZGVyU3R5bGUgfSxcbiAgICBzaXplczogaW1nQXR0cmlidXRlcy5zaXplcyxcbiAgICBzcmNTZXQ6IGltZ0F0dHJpYnV0ZXMuc3JjU2V0LFxuICAgIHNyYzogb3ZlcnJpZGVTcmMgfHwgaW1nQXR0cmlidXRlcy5zcmMsXG4gIH1cbiAgY29uc3QgbWV0YSA9IHsgdW5vcHRpbWl6ZWQsIHByaW9yaXR5LCBwbGFjZWhvbGRlciwgZmlsbCB9XG4gIHJldHVybiB7IHByb3BzLCBtZXRhIH1cbn1cbiJdLCJuYW1lcyI6WyJnZXRJbWdQcm9wcyIsIlZBTElEX0xPQURJTkdfVkFMVUVTIiwidW5kZWZpbmVkIiwiaXNTdGF0aWNSZXF1aXJlIiwic3JjIiwiZGVmYXVsdCIsImlzU3RhdGljSW1hZ2VEYXRhIiwiaXNTdGF0aWNJbXBvcnQiLCJhbGxJbWdzIiwiTWFwIiwicGVyZk9ic2VydmVyIiwiZ2V0SW50IiwieCIsIk51bWJlciIsImlzRmluaXRlIiwiTmFOIiwidGVzdCIsInBhcnNlSW50IiwiZ2V0V2lkdGhzIiwid2lkdGgiLCJzaXplcyIsImRldmljZVNpemVzIiwiYWxsU2l6ZXMiLCJ2aWV3cG9ydFdpZHRoUmUiLCJwZXJjZW50U2l6ZXMiLCJtYXRjaCIsImV4ZWMiLCJwdXNoIiwibGVuZ3RoIiwic21hbGxlc3RSYXRpbyIsIk1hdGgiLCJtaW4iLCJ3aWR0aHMiLCJmaWx0ZXIiLCJzIiwia2luZCIsIlNldCIsIm1hcCIsInciLCJmaW5kIiwicCIsImdlbmVyYXRlSW1nQXR0cnMiLCJjb25maWciLCJ1bm9wdGltaXplZCIsInF1YWxpdHkiLCJsb2FkZXIiLCJzcmNTZXQiLCJsYXN0IiwiaSIsImpvaW4iLCJfc3RhdGUiLCJwcmlvcml0eSIsImxvYWRpbmciLCJjbGFzc05hbWUiLCJoZWlnaHQiLCJmaWxsIiwic3R5bGUiLCJvdmVycmlkZVNyYyIsIm9uTG9hZCIsIm9uTG9hZGluZ0NvbXBsZXRlIiwicGxhY2Vob2xkZXIiLCJibHVyRGF0YVVSTCIsImZldGNoUHJpb3JpdHkiLCJkZWNvZGluZyIsImxheW91dCIsIm9iamVjdEZpdCIsIm9iamVjdFBvc2l0aW9uIiwibGF6eUJvdW5kYXJ5IiwibGF6eVJvb3QiLCJyZXN0IiwiaW1nQ29uZiIsInNob3dBbHRUZXh0IiwiYmx1ckNvbXBsZXRlIiwiZGVmYXVsdExvYWRlciIsImMiLCJpbWFnZUNvbmZpZ0RlZmF1bHQiLCJpbWFnZVNpemVzIiwic29ydCIsImEiLCJiIiwicXVhbGl0aWVzIiwiRXJyb3IiLCJpc0RlZmF1bHRMb2FkZXIiLCJjdXN0b21JbWFnZUxvYWRlciIsIm9iaiIsIl8iLCJvcHRzIiwibGF5b3V0VG9TdHlsZSIsImludHJpbnNpYyIsIm1heFdpZHRoIiwicmVzcG9uc2l2ZSIsImxheW91dFRvU2l6ZXMiLCJsYXlvdXRTdHlsZSIsImxheW91dFNpemVzIiwic3RhdGljU3JjIiwid2lkdGhJbnQiLCJoZWlnaHRJbnQiLCJibHVyV2lkdGgiLCJibHVySGVpZ2h0Iiwic3RhdGljSW1hZ2VEYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsInJhdGlvIiwicm91bmQiLCJpc0xhenkiLCJzdGFydHNXaXRoIiwiZGFuZ2Vyb3VzbHlBbGxvd1NWRyIsInNwbGl0IiwiZW5kc1dpdGgiLCJxdWFsaXR5SW50IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwib3V0cHV0IiwicG9zaXRpb24iLCJpc05hTiIsImluY2x1ZGVzIiwiU3RyaW5nIiwid2Fybk9uY2UiLCJWQUxJRF9CTFVSX0VYVCIsInVybFN0ciIsInVybCIsIlVSTCIsImVyciIsInBhdGhuYW1lIiwic2VhcmNoIiwibGVnYWN5S2V5IiwibGVnYWN5VmFsdWUiLCJPYmplY3QiLCJlbnRyaWVzIiwid2luZG93IiwiUGVyZm9ybWFuY2VPYnNlcnZlciIsImVudHJ5TGlzdCIsImVudHJ5IiwiZ2V0RW50cmllcyIsImltZ1NyYyIsImVsZW1lbnQiLCJsY3BJbWFnZSIsImdldCIsIm9ic2VydmUiLCJ0eXBlIiwiYnVmZmVyZWQiLCJjb25zb2xlIiwiZXJyb3IiLCJpbWdTdHlsZSIsImFzc2lnbiIsImxlZnQiLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImNvbG9yIiwiYmFja2dyb3VuZEltYWdlIiwiZ2V0SW1hZ2VCbHVyU3ZnIiwicGxhY2Vob2xkZXJTdHlsZSIsImJhY2tncm91bmRTaXplIiwiYmFja2dyb3VuZFBvc2l0aW9uIiwiYmFja2dyb3VuZFJlcGVhdCIsImltZ0F0dHJpYnV0ZXMiLCJmdWxsVXJsIiwiZSIsImxvY2F0aW9uIiwiaHJlZiIsInNldCIsInByb3BzIiwibWV0YSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/get-img-props.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/head.js":
/*!***************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/head.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/* __next_internal_client_entry_do_not_use__  cjs */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    default: function() {\n        return _default;\n    },\n    defaultHead: function() {\n        return defaultHead;\n    }\n});\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_wildcard.js\");\nconst _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\nconst _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nconst _sideeffect = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./side-effect */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/side-effect.js\"));\nconst _ampcontextsharedruntime = __webpack_require__(/*! ./amp-context.shared-runtime */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/amp-context.shared-runtime.js\");\nconst _headmanagercontextsharedruntime = __webpack_require__(/*! ./head-manager-context.shared-runtime */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/head-manager-context.shared-runtime.js\");\nconst _ampmode = __webpack_require__(/*! ./amp-mode */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/amp-mode.js\");\nconst _warnonce = __webpack_require__(/*! ./utils/warn-once */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/utils/warn-once.js\");\nfunction defaultHead(inAmpMode) {\n    if (inAmpMode === void 0) inAmpMode = false;\n    const head = [\n        /*#__PURE__*/ (0, _jsxruntime.jsx)(\"meta\", {\n            charSet: \"utf-8\"\n        }, \"charset\")\n    ];\n    if (!inAmpMode) {\n        head.push(/*#__PURE__*/ (0, _jsxruntime.jsx)(\"meta\", {\n            name: \"viewport\",\n            content: \"width=device-width\"\n        }, \"viewport\"));\n    }\n    return head;\n}\nfunction onlyReactElement(list, child) {\n    // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n    if (typeof child === 'string' || typeof child === 'number') {\n        return list;\n    }\n    // Adds support for React.Fragment\n    if (child.type === _react.default.Fragment) {\n        return list.concat(_react.default.Children.toArray(child.props.children).reduce((fragmentList, fragmentChild)=>{\n            if (typeof fragmentChild === 'string' || typeof fragmentChild === 'number') {\n                return fragmentList;\n            }\n            return fragmentList.concat(fragmentChild);\n        }, []));\n    }\n    return list.concat(child);\n}\nconst METATYPES = [\n    'name',\n    'httpEquiv',\n    'charSet',\n    'itemProp'\n];\n/*\n returns a function for filtering head child elements\n which shouldn't be duplicated, like <title/>\n Also adds support for deduplicated `key` properties\n*/ function unique() {\n    const keys = new Set();\n    const tags = new Set();\n    const metaTypes = new Set();\n    const metaCategories = {};\n    return (h)=>{\n        let isUnique = true;\n        let hasKey = false;\n        if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\n            hasKey = true;\n            const key = h.key.slice(h.key.indexOf('$') + 1);\n            if (keys.has(key)) {\n                isUnique = false;\n            } else {\n                keys.add(key);\n            }\n        }\n        // eslint-disable-next-line default-case\n        switch(h.type){\n            case 'title':\n            case 'base':\n                if (tags.has(h.type)) {\n                    isUnique = false;\n                } else {\n                    tags.add(h.type);\n                }\n                break;\n            case 'meta':\n                for(let i = 0, len = METATYPES.length; i < len; i++){\n                    const metatype = METATYPES[i];\n                    if (!h.props.hasOwnProperty(metatype)) continue;\n                    if (metatype === 'charSet') {\n                        if (metaTypes.has(metatype)) {\n                            isUnique = false;\n                        } else {\n                            metaTypes.add(metatype);\n                        }\n                    } else {\n                        const category = h.props[metatype];\n                        const categories = metaCategories[metatype] || new Set();\n                        if ((metatype !== 'name' || !hasKey) && categories.has(category)) {\n                            isUnique = false;\n                        } else {\n                            categories.add(category);\n                            metaCategories[metatype] = categories;\n                        }\n                    }\n                }\n                break;\n        }\n        return isUnique;\n    };\n}\n/**\n *\n * @param headChildrenElements List of children of <Head>\n */ function reduceComponents(headChildrenElements, props) {\n    const { inAmpMode } = props;\n    return headChildrenElements.reduce(onlyReactElement, []).reverse().concat(defaultHead(inAmpMode).reverse()).filter(unique()).reverse().map((c, i)=>{\n        const key = c.key || i;\n        if (false) {}\n        if (true) {\n            // omit JSON-LD structured data snippets from the warning\n            if (c.type === 'script' && c.props['type'] !== 'application/ld+json') {\n                const srcMessage = c.props['src'] ? '<script> tag with src=\"' + c.props['src'] + '\"' : \"inline <script>\";\n                (0, _warnonce.warnOnce)(\"Do not add <script> tags using next/head (see \" + srcMessage + \"). Use next/script instead. \\nSee more info here: https://nextjs.org/docs/messages/no-script-tags-in-head-component\");\n            } else if (c.type === 'link' && c.props['rel'] === 'stylesheet') {\n                (0, _warnonce.warnOnce)('Do not add stylesheets using next/head (see <link rel=\"stylesheet\"> tag with href=\"' + c.props['href'] + '\"). Use Document instead. \\nSee more info here: https://nextjs.org/docs/messages/no-stylesheets-in-head-component');\n            }\n        }\n        return /*#__PURE__*/ _react.default.cloneElement(c, {\n            key\n        });\n    });\n}\n/**\n * This component injects elements to `<head>` of your page.\n * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\n */ function Head(param) {\n    let { children } = param;\n    const ampState = (0, _react.useContext)(_ampcontextsharedruntime.AmpStateContext);\n    const headManager = (0, _react.useContext)(_headmanagercontextsharedruntime.HeadManagerContext);\n    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_sideeffect.default, {\n        reduceComponentsToState: reduceComponents,\n        headManager: headManager,\n        inAmpMode: (0, _ampmode.isInAmpMode)(ampState),\n        children: children\n    });\n}\n_c = Head;\nconst _default = Head;\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n    Object.defineProperty(exports.default, '__esModule', {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=head.js.map\nvar _c;\n$RefreshReg$(_c, \"Head\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/head.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/image-blur-svg.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/image-blur-svg.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/**\n * A shared function, used on both client and server, to generate a SVG blur placeholder.\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getImageBlurSvg\", ({\n    enumerable: true,\n    get: function() {\n        return getImageBlurSvg;\n    }\n}));\nfunction getImageBlurSvg(param) {\n    let { widthInt, heightInt, blurWidth, blurHeight, blurDataURL, objectFit } = param;\n    const std = 20;\n    const svgWidth = blurWidth ? blurWidth * 40 : widthInt;\n    const svgHeight = blurHeight ? blurHeight * 40 : heightInt;\n    const viewBox = svgWidth && svgHeight ? \"viewBox='0 0 \" + svgWidth + \" \" + svgHeight + \"'\" : '';\n    const preserveAspectRatio = viewBox ? 'none' : objectFit === 'contain' ? 'xMidYMid' : objectFit === 'cover' ? 'xMidYMid slice' : 'none';\n    return \"%3Csvg xmlns='http://www.w3.org/2000/svg' \" + viewBox + \"%3E%3Cfilter id='b' color-interpolation-filters='sRGB'%3E%3CfeGaussianBlur stdDeviation='\" + std + \"'/%3E%3CfeColorMatrix values='1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 100 -1' result='s'/%3E%3CfeFlood x='0' y='0' width='100%25' height='100%25'/%3E%3CfeComposite operator='out' in='s'/%3E%3CfeComposite in2='SourceGraphic'/%3E%3CfeGaussianBlur stdDeviation='\" + std + \"'/%3E%3C/filter%3E%3Cimage width='100%25' height='100%25' x='0' y='0' preserveAspectRatio='\" + preserveAspectRatio + \"' style='filter: url(%23b);' href='\" + blurDataURL + \"'/%3E%3C/svg%3E\";\n} //# sourceMappingURL=image-blur-svg.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9pbWFnZS1ibHVyLXN2Zy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Q0FFQzs7OzttREFDZUE7OztlQUFBQTs7O0FBQVQsU0FBU0EsZ0JBQWdCLEtBYy9CO0lBZCtCLE1BQzlCQyxRQUFRLEVBQ1JDLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyxVQUFVLEVBQ1ZDLFdBQVcsRUFDWEMsU0FBUyxFQVFWLEdBZCtCO0lBZTlCLE1BQU1DLE1BQU07SUFDWixNQUFNQyxXQUFXTCxZQUFZQSxZQUFZLEtBQUtGO0lBQzlDLE1BQU1RLFlBQVlMLGFBQWFBLGFBQWEsS0FBS0Y7SUFFakQsTUFBTVEsVUFDSkYsWUFBWUMsWUFBYSxrQkFBZUQsV0FBUyxNQUFHQyxZQUFVLE1BQUs7SUFDckUsTUFBTUUsc0JBQXNCRCxVQUN4QixTQUNBSixjQUFjLFlBQ1osYUFDQUEsY0FBYyxVQUNaLG1CQUNBO0lBRVIsT0FBUSwrQ0FBNENJLFVBQVEsOEZBQTJGSCxNQUFJLG9RQUFpUUEsTUFBSSxnR0FBNkZJLHNCQUFvQix3Q0FBcUNOLGNBQVk7QUFDcGtCIiwic291cmNlcyI6WyIvVXNlcnMvc3JjL3NoYXJlZC9saWIvaW1hZ2UtYmx1ci1zdmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIHNoYXJlZCBmdW5jdGlvbiwgdXNlZCBvbiBib3RoIGNsaWVudCBhbmQgc2VydmVyLCB0byBnZW5lcmF0ZSBhIFNWRyBibHVyIHBsYWNlaG9sZGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW1hZ2VCbHVyU3ZnKHtcbiAgd2lkdGhJbnQsXG4gIGhlaWdodEludCxcbiAgYmx1cldpZHRoLFxuICBibHVySGVpZ2h0LFxuICBibHVyRGF0YVVSTCxcbiAgb2JqZWN0Rml0LFxufToge1xuICB3aWR0aEludD86IG51bWJlclxuICBoZWlnaHRJbnQ/OiBudW1iZXJcbiAgYmx1cldpZHRoPzogbnVtYmVyXG4gIGJsdXJIZWlnaHQ/OiBudW1iZXJcbiAgYmx1ckRhdGFVUkw6IHN0cmluZ1xuICBvYmplY3RGaXQ/OiBzdHJpbmdcbn0pOiBzdHJpbmcge1xuICBjb25zdCBzdGQgPSAyMFxuICBjb25zdCBzdmdXaWR0aCA9IGJsdXJXaWR0aCA/IGJsdXJXaWR0aCAqIDQwIDogd2lkdGhJbnRcbiAgY29uc3Qgc3ZnSGVpZ2h0ID0gYmx1ckhlaWdodCA/IGJsdXJIZWlnaHQgKiA0MCA6IGhlaWdodEludFxuXG4gIGNvbnN0IHZpZXdCb3ggPVxuICAgIHN2Z1dpZHRoICYmIHN2Z0hlaWdodCA/IGB2aWV3Qm94PScwIDAgJHtzdmdXaWR0aH0gJHtzdmdIZWlnaHR9J2AgOiAnJ1xuICBjb25zdCBwcmVzZXJ2ZUFzcGVjdFJhdGlvID0gdmlld0JveFxuICAgID8gJ25vbmUnXG4gICAgOiBvYmplY3RGaXQgPT09ICdjb250YWluJ1xuICAgICAgPyAneE1pZFlNaWQnXG4gICAgICA6IG9iamVjdEZpdCA9PT0gJ2NvdmVyJ1xuICAgICAgICA/ICd4TWlkWU1pZCBzbGljZSdcbiAgICAgICAgOiAnbm9uZSdcblxuICByZXR1cm4gYCUzQ3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnICR7dmlld0JveH0lM0UlM0NmaWx0ZXIgaWQ9J2InIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycz0nc1JHQiclM0UlM0NmZUdhdXNzaWFuQmx1ciBzdGREZXZpYXRpb249JyR7c3RkfScvJTNFJTNDZmVDb2xvck1hdHJpeCB2YWx1ZXM9JzEgMCAwIDAgMCAwIDEgMCAwIDAgMCAwIDEgMCAwIDAgMCAwIDEwMCAtMScgcmVzdWx0PSdzJy8lM0UlM0NmZUZsb29kIHg9JzAnIHk9JzAnIHdpZHRoPScxMDAlMjUnIGhlaWdodD0nMTAwJTI1Jy8lM0UlM0NmZUNvbXBvc2l0ZSBvcGVyYXRvcj0nb3V0JyBpbj0ncycvJTNFJTNDZmVDb21wb3NpdGUgaW4yPSdTb3VyY2VHcmFwaGljJy8lM0UlM0NmZUdhdXNzaWFuQmx1ciBzdGREZXZpYXRpb249JyR7c3RkfScvJTNFJTNDL2ZpbHRlciUzRSUzQ2ltYWdlIHdpZHRoPScxMDAlMjUnIGhlaWdodD0nMTAwJTI1JyB4PScwJyB5PScwJyBwcmVzZXJ2ZUFzcGVjdFJhdGlvPScke3ByZXNlcnZlQXNwZWN0UmF0aW99JyBzdHlsZT0nZmlsdGVyOiB1cmwoJTIzYik7JyBocmVmPScke2JsdXJEYXRhVVJMfScvJTNFJTNDL3N2ZyUzRWBcbn1cbiJdLCJuYW1lcyI6WyJnZXRJbWFnZUJsdXJTdmciLCJ3aWR0aEludCIsImhlaWdodEludCIsImJsdXJXaWR0aCIsImJsdXJIZWlnaHQiLCJibHVyRGF0YVVSTCIsIm9iamVjdEZpdCIsInN0ZCIsInN2Z1dpZHRoIiwic3ZnSGVpZ2h0Iiwidmlld0JveCIsInByZXNlcnZlQXNwZWN0UmF0aW8iXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/image-blur-svg.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/image-config-context.shared-runtime.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/image-config-context.shared-runtime.js ***!
  \**********************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"ImageConfigContext\", ({\n    enumerable: true,\n    get: function() {\n        return ImageConfigContext;\n    }\n}));\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nconst _imageconfig = __webpack_require__(/*! ./image-config */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/image-config.js\");\nconst ImageConfigContext = _react.default.createContext(_imageconfig.imageConfigDefault);\nif (true) {\n    ImageConfigContext.displayName = 'ImageConfigContext';\n} //# sourceMappingURL=image-config-context.shared-runtime.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9pbWFnZS1jb25maWctY29udGV4dC5zaGFyZWQtcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiOzs7O3NEQUlhQTs7O2VBQUFBOzs7OzRFQUpLO3lDQUVpQjtBQUU1QixNQUFNQSxxQkFDWEMsT0FBQUEsT0FBSyxDQUFDQyxhQUFhLENBQXNCQyxhQUFBQSxrQkFBa0I7QUFFN0QsSUFBSUMsSUFBb0IsRUFBbUI7SUFDekNKLG1CQUFtQk8sV0FBVyxHQUFHO0FBQ25DIiwic291cmNlcyI6WyIvVXNlcnMvc3JjL3NoYXJlZC9saWIvaW1hZ2UtY29uZmlnLWNvbnRleHQuc2hhcmVkLXJ1bnRpbWUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHR5cGUgeyBJbWFnZUNvbmZpZ0NvbXBsZXRlIH0gZnJvbSAnLi9pbWFnZS1jb25maWcnXG5pbXBvcnQgeyBpbWFnZUNvbmZpZ0RlZmF1bHQgfSBmcm9tICcuL2ltYWdlLWNvbmZpZydcblxuZXhwb3J0IGNvbnN0IEltYWdlQ29uZmlnQ29udGV4dCA9XG4gIFJlYWN0LmNyZWF0ZUNvbnRleHQ8SW1hZ2VDb25maWdDb21wbGV0ZT4oaW1hZ2VDb25maWdEZWZhdWx0KVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBJbWFnZUNvbmZpZ0NvbnRleHQuZGlzcGxheU5hbWUgPSAnSW1hZ2VDb25maWdDb250ZXh0J1xufVxuIl0sIm5hbWVzIjpbIkltYWdlQ29uZmlnQ29udGV4dCIsIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsImltYWdlQ29uZmlnRGVmYXVsdCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImRpc3BsYXlOYW1lIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/image-config-context.shared-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/image-config.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/image-config.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    VALID_LOADERS: function() {\n        return VALID_LOADERS;\n    },\n    imageConfigDefault: function() {\n        return imageConfigDefault;\n    }\n});\nconst VALID_LOADERS = [\n    'default',\n    'imgix',\n    'cloudinary',\n    'akamai',\n    'custom'\n];\nconst imageConfigDefault = {\n    deviceSizes: [\n        640,\n        750,\n        828,\n        1080,\n        1200,\n        1920,\n        2048,\n        3840\n    ],\n    imageSizes: [\n        16,\n        32,\n        48,\n        64,\n        96,\n        128,\n        256,\n        384\n    ],\n    path: '/_next/image',\n    loader: 'default',\n    loaderFile: '',\n    domains: [],\n    disableStaticImages: false,\n    minimumCacheTTL: 60,\n    formats: [\n        'image/webp'\n    ],\n    dangerouslyAllowSVG: false,\n    contentSecurityPolicy: \"script-src 'none'; frame-src 'none'; sandbox;\",\n    contentDispositionType: 'attachment',\n    localPatterns: undefined,\n    remotePatterns: [],\n    qualities: undefined,\n    unoptimized: false\n}; //# sourceMappingURL=image-config.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9pbWFnZS1jb25maWcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0lBQWFBLGFBQWE7ZUFBYkE7O0lBaUlBQyxrQkFBa0I7ZUFBbEJBOzs7QUFqSU4sTUFBTUQsZ0JBQWdCO0lBQzNCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQTJITSxNQUFNQyxxQkFBMEM7SUFDckRDLGFBQWE7UUFBQztRQUFLO1FBQUs7UUFBSztRQUFNO1FBQU07UUFBTTtRQUFNO0tBQUs7SUFDMURDLFlBQVk7UUFBQztRQUFJO1FBQUk7UUFBSTtRQUFJO1FBQUk7UUFBSztRQUFLO0tBQUk7SUFDL0NDLE1BQU07SUFDTkMsUUFBUTtJQUNSQyxZQUFZO0lBQ1pDLFNBQVMsRUFBRTtJQUNYQyxxQkFBcUI7SUFDckJDLGlCQUFpQjtJQUNqQkMsU0FBUztRQUFDO0tBQWE7SUFDdkJDLHFCQUFxQjtJQUNyQkMsdUJBQXdCO0lBQ3hCQyx3QkFBd0I7SUFDeEJDLGVBQWVDO0lBQ2ZDLGdCQUFnQixFQUFFO0lBQ2xCQyxXQUFXRjtJQUNYRyxhQUFhO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zcmMvc2hhcmVkL2xpYi9pbWFnZS1jb25maWcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFZBTElEX0xPQURFUlMgPSBbXG4gICdkZWZhdWx0JyxcbiAgJ2ltZ2l4JyxcbiAgJ2Nsb3VkaW5hcnknLFxuICAnYWthbWFpJyxcbiAgJ2N1c3RvbScsXG5dIGFzIGNvbnN0XG5cbmV4cG9ydCB0eXBlIExvYWRlclZhbHVlID0gKHR5cGVvZiBWQUxJRF9MT0FERVJTKVtudW1iZXJdXG5cbmV4cG9ydCB0eXBlIEltYWdlTG9hZGVyUHJvcHMgPSB7XG4gIHNyYzogc3RyaW5nXG4gIHdpZHRoOiBudW1iZXJcbiAgcXVhbGl0eT86IG51bWJlclxufVxuXG5leHBvcnQgdHlwZSBJbWFnZUxvYWRlclByb3BzV2l0aENvbmZpZyA9IEltYWdlTG9hZGVyUHJvcHMgJiB7XG4gIGNvbmZpZzogUmVhZG9ubHk8SW1hZ2VDb25maWc+XG59XG5cbmV4cG9ydCB0eXBlIExvY2FsUGF0dGVybiA9IHtcbiAgLyoqXG4gICAqIENhbiBiZSBsaXRlcmFsIG9yIHdpbGRjYXJkLlxuICAgKiBTaW5nbGUgYCpgIG1hdGNoZXMgYSBzaW5nbGUgcGF0aCBzZWdtZW50LlxuICAgKiBEb3VibGUgYCoqYCBtYXRjaGVzIGFueSBudW1iZXIgb2YgcGF0aCBzZWdtZW50cy5cbiAgICovXG4gIHBhdGhuYW1lPzogc3RyaW5nXG5cbiAgLyoqXG4gICAqIENhbiBiZSBsaXRlcmFsIHF1ZXJ5IHN0cmluZyBzdWNoIGFzIGA/dj0xYCBvclxuICAgKiBlbXB0eSBzdHJpbmcgbWVhbmluZyBubyBxdWVyeSBzdHJpbmcuXG4gICAqL1xuICBzZWFyY2g/OiBzdHJpbmdcbn1cblxuZXhwb3J0IHR5cGUgUmVtb3RlUGF0dGVybiA9IHtcbiAgLyoqXG4gICAqIE11c3QgYmUgYGh0dHBgIG9yIGBodHRwc2AuXG4gICAqL1xuICBwcm90b2NvbD86ICdodHRwJyB8ICdodHRwcydcblxuICAvKipcbiAgICogQ2FuIGJlIGxpdGVyYWwgb3Igd2lsZGNhcmQuXG4gICAqIFNpbmdsZSBgKmAgbWF0Y2hlcyBhIHNpbmdsZSBzdWJkb21haW4uXG4gICAqIERvdWJsZSBgKipgIG1hdGNoZXMgYW55IG51bWJlciBvZiBzdWJkb21haW5zLlxuICAgKi9cbiAgaG9zdG5hbWU6IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBDYW4gYmUgbGl0ZXJhbCBwb3J0IHN1Y2ggYXMgYDgwODBgIG9yIGVtcHR5IHN0cmluZ1xuICAgKiBtZWFuaW5nIG5vIHBvcnQuXG4gICAqL1xuICBwb3J0Pzogc3RyaW5nXG5cbiAgLyoqXG4gICAqIENhbiBiZSBsaXRlcmFsIG9yIHdpbGRjYXJkLlxuICAgKiBTaW5nbGUgYCpgIG1hdGNoZXMgYSBzaW5nbGUgcGF0aCBzZWdtZW50LlxuICAgKiBEb3VibGUgYCoqYCBtYXRjaGVzIGFueSBudW1iZXIgb2YgcGF0aCBzZWdtZW50cy5cbiAgICovXG4gIHBhdGhuYW1lPzogc3RyaW5nXG5cbiAgLyoqXG4gICAqIENhbiBiZSBsaXRlcmFsIHF1ZXJ5IHN0cmluZyBzdWNoIGFzIGA/dj0xYCBvclxuICAgKiBlbXB0eSBzdHJpbmcgbWVhbmluZyBubyBxdWVyeSBzdHJpbmcuXG4gICAqL1xuICBzZWFyY2g/OiBzdHJpbmdcbn1cblxudHlwZSBJbWFnZUZvcm1hdCA9ICdpbWFnZS9hdmlmJyB8ICdpbWFnZS93ZWJwJ1xuXG4vKipcbiAqIEltYWdlIGNvbmZpZ3VyYXRpb25zXG4gKlxuICogQHNlZSBbSW1hZ2UgY29uZmlndXJhdGlvbiBvcHRpb25zXShodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL25leHQvaW1hZ2UjY29uZmlndXJhdGlvbi1vcHRpb25zKVxuICovXG5leHBvcnQgdHlwZSBJbWFnZUNvbmZpZ0NvbXBsZXRlID0ge1xuICAvKiogQHNlZSBbRGV2aWNlIHNpemVzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC9pbWFnZSNkZXZpY2Utc2l6ZXMpICovXG4gIGRldmljZVNpemVzOiBudW1iZXJbXVxuXG4gIC8qKiBAc2VlIFtJbWFnZSBzaXppbmcgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2J1aWxkaW5nLXlvdXItYXBwbGljYXRpb24vb3B0aW1pemluZy9pbWFnZXMjaW1hZ2Utc2l6aW5nKSAqL1xuICBpbWFnZVNpemVzOiBudW1iZXJbXVxuXG4gIC8qKiBAc2VlIFtJbWFnZSBsb2FkZXJzIGNvbmZpZ3VyYXRpb25dKGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC9sZWdhY3kvaW1hZ2UjbG9hZGVyKSAqL1xuICBsb2FkZXI6IExvYWRlclZhbHVlXG5cbiAgLyoqIEBzZWUgW0ltYWdlIGxvYWRlciBjb25maWd1cmF0aW9uXShodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL25leHQvbGVnYWN5L2ltYWdlI2xvYWRlci1jb25maWd1cmF0aW9uKSAqL1xuICBwYXRoOiBzdHJpbmdcblxuICAvKiogQHNlZSBbSW1hZ2UgbG9hZGVyIGNvbmZpZ3VyYXRpb25dKGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC9pbWFnZSNsb2FkZXItY29uZmlndXJhdGlvbikgKi9cbiAgbG9hZGVyRmlsZTogc3RyaW5nXG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgcmVtb3RlUGF0dGVybnNgIGluc3RlYWQuXG4gICAqL1xuICBkb21haW5zOiBzdHJpbmdbXVxuXG4gIC8qKiBAc2VlIFtEaXNhYmxlIHN0YXRpYyBpbWFnZSBpbXBvcnQgY29uZmlndXJhdGlvbl0oaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9uZXh0L2ltYWdlI2Rpc2FibGUtc3RhdGljLWltcG9ydHMpICovXG4gIGRpc2FibGVTdGF0aWNJbWFnZXM6IGJvb2xlYW5cblxuICAvKiogQHNlZSBbQ2FjaGUgYmVoYXZpb3JdKGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC9pbWFnZSNjYWNoaW5nLWJlaGF2aW9yKSAqL1xuICBtaW5pbXVtQ2FjaGVUVEw6IG51bWJlclxuXG4gIC8qKiBAc2VlIFtBY2NlcHRhYmxlIGZvcm1hdHNdKGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC9pbWFnZSNhY2NlcHRhYmxlLWZvcm1hdHMpICovXG4gIGZvcm1hdHM6IEltYWdlRm9ybWF0W11cblxuICAvKiogQHNlZSBbRGFuZ2Vyb3VzbHkgQWxsb3cgU1ZHXShodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL25leHQvaW1hZ2UjZGFuZ2Vyb3VzbHktYWxsb3ctc3ZnKSAqL1xuICBkYW5nZXJvdXNseUFsbG93U1ZHOiBib29sZWFuXG5cbiAgLyoqIEBzZWUgW0Rhbmdlcm91c2x5IEFsbG93IFNWR10oaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9uZXh0L2ltYWdlI2Rhbmdlcm91c2x5LWFsbG93LXN2ZykgKi9cbiAgY29udGVudFNlY3VyaXR5UG9saWN5OiBzdHJpbmdcblxuICAvKiogQHNlZSBbRGFuZ2Vyb3VzbHkgQWxsb3cgU1ZHXShodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL25leHQvaW1hZ2UjZGFuZ2Vyb3VzbHktYWxsb3ctc3ZnKSAqL1xuICBjb250ZW50RGlzcG9zaXRpb25UeXBlOiAnaW5saW5lJyB8ICdhdHRhY2htZW50J1xuXG4gIC8qKiBAc2VlIFtSZW1vdGUgUGF0dGVybnNdKGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC9pbWFnZSNyZW1vdGVwYXR0ZXJucykgKi9cbiAgcmVtb3RlUGF0dGVybnM6IFJlbW90ZVBhdHRlcm5bXVxuXG4gIC8qKiBAc2VlIFtSZW1vdGUgUGF0dGVybnNdKGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC9pbWFnZSNsb2NhbFBhdHRlcm5zKSAqL1xuICBsb2NhbFBhdHRlcm5zOiBMb2NhbFBhdHRlcm5bXSB8IHVuZGVmaW5lZFxuXG4gIC8qKiBAc2VlIFtRdWFsaXRpZXNdKGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC9pbWFnZSNxdWFsaXRpZXMpICovXG4gIHF1YWxpdGllczogbnVtYmVyW10gfCB1bmRlZmluZWRcblxuICAvKiogQHNlZSBbVW5vcHRpbWl6ZWRdKGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC9pbWFnZSN1bm9wdGltaXplZCkgKi9cbiAgdW5vcHRpbWl6ZWQ6IGJvb2xlYW5cbn1cblxuZXhwb3J0IHR5cGUgSW1hZ2VDb25maWcgPSBQYXJ0aWFsPEltYWdlQ29uZmlnQ29tcGxldGU+XG5cbmV4cG9ydCBjb25zdCBpbWFnZUNvbmZpZ0RlZmF1bHQ6IEltYWdlQ29uZmlnQ29tcGxldGUgPSB7XG4gIGRldmljZVNpemVzOiBbNjQwLCA3NTAsIDgyOCwgMTA4MCwgMTIwMCwgMTkyMCwgMjA0OCwgMzg0MF0sXG4gIGltYWdlU2l6ZXM6IFsxNiwgMzIsIDQ4LCA2NCwgOTYsIDEyOCwgMjU2LCAzODRdLFxuICBwYXRoOiAnL19uZXh0L2ltYWdlJyxcbiAgbG9hZGVyOiAnZGVmYXVsdCcsXG4gIGxvYWRlckZpbGU6ICcnLFxuICBkb21haW5zOiBbXSxcbiAgZGlzYWJsZVN0YXRpY0ltYWdlczogZmFsc2UsXG4gIG1pbmltdW1DYWNoZVRUTDogNjAsXG4gIGZvcm1hdHM6IFsnaW1hZ2Uvd2VicCddLFxuICBkYW5nZXJvdXNseUFsbG93U1ZHOiBmYWxzZSxcbiAgY29udGVudFNlY3VyaXR5UG9saWN5OiBgc2NyaXB0LXNyYyAnbm9uZSc7IGZyYW1lLXNyYyAnbm9uZSc7IHNhbmRib3g7YCxcbiAgY29udGVudERpc3Bvc2l0aW9uVHlwZTogJ2F0dGFjaG1lbnQnLFxuICBsb2NhbFBhdHRlcm5zOiB1bmRlZmluZWQsIC8vIGRlZmF1bHQ6IGFsbG93IGFsbCBsb2NhbCBpbWFnZXNcbiAgcmVtb3RlUGF0dGVybnM6IFtdLCAvLyBkZWZhdWx0OiBhbGxvdyBubyByZW1vdGUgaW1hZ2VzXG4gIHF1YWxpdGllczogdW5kZWZpbmVkLCAvLyBkZWZhdWx0OiBhbGxvdyBhbGwgcXVhbGl0aWVzXG4gIHVub3B0aW1pemVkOiBmYWxzZSxcbn1cbiJdLCJuYW1lcyI6WyJWQUxJRF9MT0FERVJTIiwiaW1hZ2VDb25maWdEZWZhdWx0IiwiZGV2aWNlU2l6ZXMiLCJpbWFnZVNpemVzIiwicGF0aCIsImxvYWRlciIsImxvYWRlckZpbGUiLCJkb21haW5zIiwiZGlzYWJsZVN0YXRpY0ltYWdlcyIsIm1pbmltdW1DYWNoZVRUTCIsImZvcm1hdHMiLCJkYW5nZXJvdXNseUFsbG93U1ZHIiwiY29udGVudFNlY3VyaXR5UG9saWN5IiwiY29udGVudERpc3Bvc2l0aW9uVHlwZSIsImxvY2FsUGF0dGVybnMiLCJ1bmRlZmluZWQiLCJyZW1vdGVQYXR0ZXJucyIsInF1YWxpdGllcyIsInVub3B0aW1pemVkIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/image-config.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/image-external.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/image-external.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    default: function() {\n        return _default;\n    },\n    getImageProps: function() {\n        return getImageProps;\n    }\n});\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _getimgprops = __webpack_require__(/*! ./get-img-props */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/get-img-props.js\");\nconst _imagecomponent = __webpack_require__(/*! ../../client/image-component */ \"(app-pages-browser)/./node_modules/next/dist/client/image-component.js\");\nconst _imageloader = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! next/dist/shared/lib/image-loader */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/image-loader.js\"));\nfunction getImageProps(imgProps) {\n    const { props } = (0, _getimgprops.getImgProps)(imgProps, {\n        defaultLoader: _imageloader.default,\n        // This is replaced by webpack define plugin\n        imgConf: {\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"dangerouslyAllowSVG\":false,\"unoptimized\":false,\"domains\":[],\"remotePatterns\":[]}\n    });\n    // Normally we don't care about undefined props because we pass to JSX,\n    // but this exported function could be used by the end user for anything\n    // so we delete undefined props to clean it up a little.\n    for (const [key, value] of Object.entries(props)){\n        if (value === undefined) {\n            delete props[key];\n        }\n    }\n    return {\n        props\n    };\n}\nconst _default = _imagecomponent.Image; //# sourceMappingURL=image-external.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9pbWFnZS1leHRlcm5hbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7SUFpQ0EsT0FBb0I7ZUFBcEI7O0lBakJnQkEsYUFBYTtlQUFiQTs7Ozt5Q0FiWTs0Q0FDTjtrRkFHSTtBQVNuQixTQUFTQSxjQUFjQyxRQUFvQjtJQUNoRCxNQUFNLEVBQUVDLEtBQUssRUFBRSxHQUFHQyxDQUFBQSxHQUFBQSxhQUFBQSxXQUFBQSxFQUFZRixVQUFVO1FBQ3RDRyxlQUFBQSxhQUFBQSxPQUFhO1FBQ2IsNENBQTRDO1FBQzVDQyxTQUFTQywwTkFBNkI7SUFDeEM7SUFDQSx1RUFBdUU7SUFDdkUsd0VBQXdFO0lBQ3hFLHdEQUF3RDtJQUN4RCxLQUFLLE1BQU0sQ0FBQ0csS0FBS0MsTUFBTSxJQUFJQyxPQUFPQyxPQUFPLENBQUNWLE9BQVE7UUFDaEQsSUFBSVEsVUFBVUcsV0FBVztZQUN2QixPQUFPWCxLQUFLLENBQUNPLElBQTBCO1FBQ3pDO0lBQ0Y7SUFDQSxPQUFPO1FBQUVQO0lBQU07QUFDakI7TUFFQSxXQUFlWSxnQkFBQUEsS0FBSyIsInNvdXJjZXMiOlsiL1VzZXJzL3NyYy9zaGFyZWQvbGliL2ltYWdlLWV4dGVybmFsLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEltYWdlQ29uZmlnQ29tcGxldGUsIEltYWdlTG9hZGVyUHJvcHMgfSBmcm9tICcuL2ltYWdlLWNvbmZpZydcbmltcG9ydCB0eXBlIHsgSW1hZ2VQcm9wcywgSW1hZ2VMb2FkZXIsIFN0YXRpY0ltYWdlRGF0YSB9IGZyb20gJy4vZ2V0LWltZy1wcm9wcydcblxuaW1wb3J0IHsgZ2V0SW1nUHJvcHMgfSBmcm9tICcuL2dldC1pbWctcHJvcHMnXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uLy4uL2NsaWVudC9pbWFnZS1jb21wb25lbnQnXG5cbi8vIEB0cy1pZ25vcmUgLSBUaGlzIGlzIHJlcGxhY2VkIGJ5IHdlYnBhY2sgYWxpYXNcbmltcG9ydCBkZWZhdWx0TG9hZGVyIGZyb20gJ25leHQvZGlzdC9zaGFyZWQvbGliL2ltYWdlLWxvYWRlcidcblxuLyoqXG4gKiBGb3IgbW9yZSBhZHZhbmNlZCB1c2UgY2FzZXMsIHlvdSBjYW4gY2FsbCBgZ2V0SW1hZ2VQcm9wcygpYFxuICogdG8gZ2V0IHRoZSBwcm9wcyB0aGF0IHdvdWxkIGJlIHBhc3NlZCB0byB0aGUgdW5kZXJseWluZyBgPGltZz5gIGVsZW1lbnQsXG4gKiBhbmQgaW5zdGVhZCBwYXNzIHRvIHRoZW0gdG8gYW5vdGhlciBjb21wb25lbnQsIHN0eWxlLCBjYW52YXMsIGV0Yy5cbiAqXG4gKiBSZWFkIG1vcmU6IFtOZXh0LmpzIGRvY3M6IGBnZXRJbWFnZVByb3BzYF0oaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2FwaS1yZWZlcmVuY2UvY29tcG9uZW50cy9pbWFnZSNnZXRpbWFnZXByb3BzKVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW1hZ2VQcm9wcyhpbWdQcm9wczogSW1hZ2VQcm9wcykge1xuICBjb25zdCB7IHByb3BzIH0gPSBnZXRJbWdQcm9wcyhpbWdQcm9wcywge1xuICAgIGRlZmF1bHRMb2FkZXIsXG4gICAgLy8gVGhpcyBpcyByZXBsYWNlZCBieSB3ZWJwYWNrIGRlZmluZSBwbHVnaW5cbiAgICBpbWdDb25mOiBwcm9jZXNzLmVudi5fX05FWFRfSU1BR0VfT1BUUyBhcyBhbnkgYXMgSW1hZ2VDb25maWdDb21wbGV0ZSxcbiAgfSlcbiAgLy8gTm9ybWFsbHkgd2UgZG9uJ3QgY2FyZSBhYm91dCB1bmRlZmluZWQgcHJvcHMgYmVjYXVzZSB3ZSBwYXNzIHRvIEpTWCxcbiAgLy8gYnV0IHRoaXMgZXhwb3J0ZWQgZnVuY3Rpb24gY291bGQgYmUgdXNlZCBieSB0aGUgZW5kIHVzZXIgZm9yIGFueXRoaW5nXG4gIC8vIHNvIHdlIGRlbGV0ZSB1bmRlZmluZWQgcHJvcHMgdG8gY2xlYW4gaXQgdXAgYSBsaXR0bGUuXG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BzKSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBkZWxldGUgcHJvcHNba2V5IGFzIGtleW9mIHR5cGVvZiBwcm9wc11cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHsgcHJvcHMgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbWFnZVxuXG5leHBvcnQgdHlwZSB7IEltYWdlUHJvcHMsIEltYWdlTG9hZGVyUHJvcHMsIEltYWdlTG9hZGVyLCBTdGF0aWNJbWFnZURhdGEgfVxuIl0sIm5hbWVzIjpbImdldEltYWdlUHJvcHMiLCJpbWdQcm9wcyIsInByb3BzIiwiZ2V0SW1nUHJvcHMiLCJkZWZhdWx0TG9hZGVyIiwiaW1nQ29uZiIsInByb2Nlc3MiLCJlbnYiLCJfX05FWFRfSU1BR0VfT1BUUyIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZW50cmllcyIsInVuZGVmaW5lZCIsIkltYWdlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/image-external.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/image-loader.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/image-loader.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return _default;\n    }\n}));\nconst DEFAULT_Q = 75;\nfunction defaultLoader(param) {\n    let { config, src, width, quality } = param;\n    var _config_qualities;\n    if (true) {\n        const missingValues = [];\n        // these should always be provided but make sure they are\n        if (!src) missingValues.push('src');\n        if (!width) missingValues.push('width');\n        if (missingValues.length > 0) {\n            throw Object.defineProperty(new Error(\"Next Image Optimization requires \" + missingValues.join(', ') + \" to be provided. Make sure you pass them as props to the `next/image` component. Received: \" + JSON.stringify({\n                src,\n                width,\n                quality\n            })), \"__NEXT_ERROR_CODE\", {\n                value: \"E188\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (src.startsWith('//')) {\n            throw Object.defineProperty(new Error('Failed to parse src \"' + src + '\" on `next/image`, protocol-relative URL (//) must be changed to an absolute URL (http:// or https://)'), \"__NEXT_ERROR_CODE\", {\n                value: \"E360\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (src.startsWith('/') && config.localPatterns) {\n            if (true) {\n                // We use dynamic require because this should only error in development\n                const { hasLocalMatch } = __webpack_require__(/*! ./match-local-pattern */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/match-local-pattern.js\");\n                if (!hasLocalMatch(config.localPatterns, src)) {\n                    throw Object.defineProperty(new Error(\"Invalid src prop (\" + src + \") on `next/image` does not match `images.localPatterns` configured in your `next.config.js`\\n\" + \"See more info: https://nextjs.org/docs/messages/next-image-unconfigured-localpatterns\"), \"__NEXT_ERROR_CODE\", {\n                        value: \"E426\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n            }\n        }\n        if (!src.startsWith('/') && (config.domains || config.remotePatterns)) {\n            let parsedSrc;\n            try {\n                parsedSrc = new URL(src);\n            } catch (err) {\n                console.error(err);\n                throw Object.defineProperty(new Error('Failed to parse src \"' + src + '\" on `next/image`, if using relative image it must start with a leading slash \"/\" or be an absolute URL (http:// or https://)'), \"__NEXT_ERROR_CODE\", {\n                    value: \"E63\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (true) {\n                // We use dynamic require because this should only error in development\n                const { hasRemoteMatch } = __webpack_require__(/*! ./match-remote-pattern */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/match-remote-pattern.js\");\n                if (!hasRemoteMatch(config.domains, config.remotePatterns, parsedSrc)) {\n                    throw Object.defineProperty(new Error(\"Invalid src prop (\" + src + ') on `next/image`, hostname \"' + parsedSrc.hostname + '\" is not configured under images in your `next.config.js`\\n' + \"See more info: https://nextjs.org/docs/messages/next-image-unconfigured-host\"), \"__NEXT_ERROR_CODE\", {\n                        value: \"E231\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n            }\n        }\n        if (quality && config.qualities && !config.qualities.includes(quality)) {\n            throw Object.defineProperty(new Error(\"Invalid quality prop (\" + quality + \") on `next/image` does not match `images.qualities` configured in your `next.config.js`\\n\" + \"See more info: https://nextjs.org/docs/messages/next-image-unconfigured-qualities\"), \"__NEXT_ERROR_CODE\", {\n                value: \"E623\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }\n    const q = quality || ((_config_qualities = config.qualities) == null ? void 0 : _config_qualities.reduce((prev, cur)=>Math.abs(cur - DEFAULT_Q) < Math.abs(prev - DEFAULT_Q) ? cur : prev)) || DEFAULT_Q;\n    return config.path + \"?url=\" + encodeURIComponent(src) + \"&w=\" + width + \"&q=\" + q + (src.startsWith('/_next/static/media/') && false ? 0 : '');\n}\n// We use this to determine if the import is the default loader\n// or a custom loader defined by the user in next.config.js\ndefaultLoader.__next_img_default = true;\nconst _default = defaultLoader; //# sourceMappingURL=image-loader.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/image-loader.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/match-local-pattern.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/match-local-pattern.js ***!
  \******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    hasLocalMatch: function() {\n        return hasLocalMatch;\n    },\n    matchLocalPattern: function() {\n        return matchLocalPattern;\n    }\n});\nconst _picomatch = __webpack_require__(/*! next/dist/compiled/picomatch */ \"(app-pages-browser)/./node_modules/next/dist/compiled/picomatch/index.js\");\nfunction matchLocalPattern(pattern, url) {\n    if (pattern.search !== undefined) {\n        if (pattern.search !== url.search) {\n            return false;\n        }\n    }\n    var _pattern_pathname;\n    if (!(0, _picomatch.makeRe)((_pattern_pathname = pattern.pathname) != null ? _pattern_pathname : '**', {\n        dot: true\n    }).test(url.pathname)) {\n        return false;\n    }\n    return true;\n}\nfunction hasLocalMatch(localPatterns, urlPathAndQuery) {\n    if (!localPatterns) {\n        // if the user didn't define \"localPatterns\", we allow all local images\n        return true;\n    }\n    const url = new URL(urlPathAndQuery, 'http://n');\n    return localPatterns.some((p)=>matchLocalPattern(p, url));\n} //# sourceMappingURL=match-local-pattern.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9tYXRjaC1sb2NhbC1wYXR0ZXJuLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztJQWtCZ0JBLGFBQWE7ZUFBYkE7O0lBZEFDLGlCQUFpQjtlQUFqQkE7Ozt1Q0FITztBQUdoQixTQUFTQSxrQkFBa0JDLE9BQXFCLEVBQUVDLEdBQVE7SUFDL0QsSUFBSUQsUUFBUUUsTUFBTSxLQUFLQyxXQUFXO1FBQ2hDLElBQUlILFFBQVFFLE1BQU0sS0FBS0QsSUFBSUMsTUFBTSxFQUFFO1lBQ2pDLE9BQU87UUFDVDtJQUNGO1FBRVlGO0lBQVosSUFBSSxDQUFDSSxDQUFBQSxHQUFBQSxXQUFBQSxNQUFBQSxFQUFPSixDQUFBQSxvQkFBQUEsUUFBUUssUUFBQUEsS0FBUSxPQUFoQkwsb0JBQW9CLE1BQU07UUFBRU0sS0FBSztJQUFLLEdBQUdDLElBQUksQ0FBQ04sSUFBSUksUUFBUSxHQUFHO1FBQ3ZFLE9BQU87SUFDVDtJQUVBLE9BQU87QUFDVDtBQUVPLFNBQVNQLGNBQ2RVLGFBQXlDLEVBQ3pDQyxlQUF1QjtJQUV2QixJQUFJLENBQUNELGVBQWU7UUFDbEIsdUVBQXVFO1FBQ3ZFLE9BQU87SUFDVDtJQUNBLE1BQU1QLE1BQU0sSUFBSVMsSUFBSUQsaUJBQWlCO0lBQ3JDLE9BQU9ELGNBQWNHLElBQUksQ0FBQyxDQUFDQyxJQUFNYixrQkFBa0JhLEdBQUdYO0FBQ3hEIiwic291cmNlcyI6WyIvVXNlcnMvc3JjL3NoYXJlZC9saWIvbWF0Y2gtbG9jYWwtcGF0dGVybi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IExvY2FsUGF0dGVybiB9IGZyb20gJy4vaW1hZ2UtY29uZmlnJ1xuaW1wb3J0IHsgbWFrZVJlIH0gZnJvbSAnbmV4dC9kaXN0L2NvbXBpbGVkL3BpY29tYXRjaCdcblxuLy8gTW9kaWZ5aW5nIHRoaXMgZnVuY3Rpb24gc2hvdWxkIGFsc28gbW9kaWZ5IHdyaXRlSW1hZ2VzTWFuaWZlc3QoKVxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoTG9jYWxQYXR0ZXJuKHBhdHRlcm46IExvY2FsUGF0dGVybiwgdXJsOiBVUkwpOiBib29sZWFuIHtcbiAgaWYgKHBhdHRlcm4uc2VhcmNoICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAocGF0dGVybi5zZWFyY2ggIT09IHVybC5zZWFyY2gpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIGlmICghbWFrZVJlKHBhdHRlcm4ucGF0aG5hbWUgPz8gJyoqJywgeyBkb3Q6IHRydWUgfSkudGVzdCh1cmwucGF0aG5hbWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzTG9jYWxNYXRjaChcbiAgbG9jYWxQYXR0ZXJuczogTG9jYWxQYXR0ZXJuW10gfCB1bmRlZmluZWQsXG4gIHVybFBhdGhBbmRRdWVyeTogc3RyaW5nXG4pOiBib29sZWFuIHtcbiAgaWYgKCFsb2NhbFBhdHRlcm5zKSB7XG4gICAgLy8gaWYgdGhlIHVzZXIgZGlkbid0IGRlZmluZSBcImxvY2FsUGF0dGVybnNcIiwgd2UgYWxsb3cgYWxsIGxvY2FsIGltYWdlc1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgY29uc3QgdXJsID0gbmV3IFVSTCh1cmxQYXRoQW5kUXVlcnksICdodHRwOi8vbicpXG4gIHJldHVybiBsb2NhbFBhdHRlcm5zLnNvbWUoKHApID0+IG1hdGNoTG9jYWxQYXR0ZXJuKHAsIHVybCkpXG59XG4iXSwibmFtZXMiOlsiaGFzTG9jYWxNYXRjaCIsIm1hdGNoTG9jYWxQYXR0ZXJuIiwicGF0dGVybiIsInVybCIsInNlYXJjaCIsInVuZGVmaW5lZCIsIm1ha2VSZSIsInBhdGhuYW1lIiwiZG90IiwidGVzdCIsImxvY2FsUGF0dGVybnMiLCJ1cmxQYXRoQW5kUXVlcnkiLCJVUkwiLCJzb21lIiwicCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/match-local-pattern.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/match-remote-pattern.js":
/*!*******************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/match-remote-pattern.js ***!
  \*******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    hasRemoteMatch: function() {\n        return hasRemoteMatch;\n    },\n    matchRemotePattern: function() {\n        return matchRemotePattern;\n    }\n});\nconst _picomatch = __webpack_require__(/*! next/dist/compiled/picomatch */ \"(app-pages-browser)/./node_modules/next/dist/compiled/picomatch/index.js\");\nfunction matchRemotePattern(pattern, url) {\n    if (pattern.protocol !== undefined) {\n        const actualProto = url.protocol.slice(0, -1);\n        if (pattern.protocol !== actualProto) {\n            return false;\n        }\n    }\n    if (pattern.port !== undefined) {\n        if (pattern.port !== url.port) {\n            return false;\n        }\n    }\n    if (pattern.hostname === undefined) {\n        throw Object.defineProperty(new Error(\"Pattern should define hostname but found\\n\" + JSON.stringify(pattern)), \"__NEXT_ERROR_CODE\", {\n            value: \"E410\",\n            enumerable: false,\n            configurable: true\n        });\n    } else {\n        if (!(0, _picomatch.makeRe)(pattern.hostname).test(url.hostname)) {\n            return false;\n        }\n    }\n    if (pattern.search !== undefined) {\n        if (pattern.search !== url.search) {\n            return false;\n        }\n    }\n    var _pattern_pathname;\n    // Should be the same as writeImagesManifest()\n    if (!(0, _picomatch.makeRe)((_pattern_pathname = pattern.pathname) != null ? _pattern_pathname : '**', {\n        dot: true\n    }).test(url.pathname)) {\n        return false;\n    }\n    return true;\n}\nfunction hasRemoteMatch(domains, remotePatterns, url) {\n    return domains.some((domain)=>url.hostname === domain) || remotePatterns.some((p)=>matchRemotePattern(p, url));\n} //# sourceMappingURL=match-remote-pattern.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9tYXRjaC1yZW1vdGUtcGF0dGVybi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7SUF5Q2dCQSxjQUFjO2VBQWRBOztJQXJDQUMsa0JBQWtCO2VBQWxCQTs7O3VDQUhPO0FBR2hCLFNBQVNBLG1CQUFtQkMsT0FBc0IsRUFBRUMsR0FBUTtJQUNqRSxJQUFJRCxRQUFRRSxRQUFRLEtBQUtDLFdBQVc7UUFDbEMsTUFBTUMsY0FBY0gsSUFBSUMsUUFBUSxDQUFDRyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQzNDLElBQUlMLFFBQVFFLFFBQVEsS0FBS0UsYUFBYTtZQUNwQyxPQUFPO1FBQ1Q7SUFDRjtJQUNBLElBQUlKLFFBQVFNLElBQUksS0FBS0gsV0FBVztRQUM5QixJQUFJSCxRQUFRTSxJQUFJLEtBQUtMLElBQUlLLElBQUksRUFBRTtZQUM3QixPQUFPO1FBQ1Q7SUFDRjtJQUVBLElBQUlOLFFBQVFPLFFBQVEsS0FBS0osV0FBVztRQUNsQyxNQUFNLHFCQUVMLENBRkssSUFBSUssTUFDUCwrQ0FBNENDLEtBQUtDLFNBQVMsQ0FBQ1YsV0FEeEQ7bUJBQUE7d0JBQUE7MEJBQUE7UUFFTjtJQUNGLE9BQU87UUFDTCxJQUFJLENBQUNXLENBQUFBLEdBQUFBLFdBQUFBLE1BQUFBLEVBQU9YLFFBQVFPLFFBQVEsRUFBRUssSUFBSSxDQUFDWCxJQUFJTSxRQUFRLEdBQUc7WUFDaEQsT0FBTztRQUNUO0lBQ0Y7SUFFQSxJQUFJUCxRQUFRYSxNQUFNLEtBQUtWLFdBQVc7UUFDaEMsSUFBSUgsUUFBUWEsTUFBTSxLQUFLWixJQUFJWSxNQUFNLEVBQUU7WUFDakMsT0FBTztRQUNUO0lBQ0Y7UUFHWWI7SUFEWiw4Q0FBOEM7SUFDOUMsSUFBSSxDQUFDVyxDQUFBQSxHQUFBQSxXQUFBQSxNQUFBQSxFQUFPWCxDQUFBQSxvQkFBQUEsUUFBUWMsUUFBQUEsS0FBUSxPQUFoQmQsb0JBQW9CLE1BQU07UUFBRWUsS0FBSztJQUFLLEdBQUdILElBQUksQ0FBQ1gsSUFBSWEsUUFBUSxHQUFHO1FBQ3ZFLE9BQU87SUFDVDtJQUVBLE9BQU87QUFDVDtBQUVPLFNBQVNoQixlQUNka0IsT0FBaUIsRUFDakJDLGNBQStCLEVBQy9CaEIsR0FBUTtJQUVSLE9BQ0VlLFFBQVFFLElBQUksQ0FBQyxDQUFDQyxTQUFXbEIsSUFBSU0sUUFBUSxLQUFLWSxXQUMxQ0YsZUFBZUMsSUFBSSxDQUFDLENBQUNFLElBQU1yQixtQkFBbUJxQixHQUFHbkI7QUFFckQiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zcmMvc2hhcmVkL2xpYi9tYXRjaC1yZW1vdGUtcGF0dGVybi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlbW90ZVBhdHRlcm4gfSBmcm9tICcuL2ltYWdlLWNvbmZpZydcbmltcG9ydCB7IG1ha2VSZSB9IGZyb20gJ25leHQvZGlzdC9jb21waWxlZC9waWNvbWF0Y2gnXG5cbi8vIE1vZGlmeWluZyB0aGlzIGZ1bmN0aW9uIHNob3VsZCBhbHNvIG1vZGlmeSB3cml0ZUltYWdlc01hbmlmZXN0KClcbmV4cG9ydCBmdW5jdGlvbiBtYXRjaFJlbW90ZVBhdHRlcm4ocGF0dGVybjogUmVtb3RlUGF0dGVybiwgdXJsOiBVUkwpOiBib29sZWFuIHtcbiAgaWYgKHBhdHRlcm4ucHJvdG9jb2wgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGFjdHVhbFByb3RvID0gdXJsLnByb3RvY29sLnNsaWNlKDAsIC0xKVxuICAgIGlmIChwYXR0ZXJuLnByb3RvY29sICE9PSBhY3R1YWxQcm90bykge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIGlmIChwYXR0ZXJuLnBvcnQgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChwYXR0ZXJuLnBvcnQgIT09IHVybC5wb3J0KSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICBpZiAocGF0dGVybi5ob3N0bmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFBhdHRlcm4gc2hvdWxkIGRlZmluZSBob3N0bmFtZSBidXQgZm91bmRcXG4ke0pTT04uc3RyaW5naWZ5KHBhdHRlcm4pfWBcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgaWYgKCFtYWtlUmUocGF0dGVybi5ob3N0bmFtZSkudGVzdCh1cmwuaG9zdG5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICBpZiAocGF0dGVybi5zZWFyY2ggIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChwYXR0ZXJuLnNlYXJjaCAhPT0gdXJsLnNlYXJjaCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLy8gU2hvdWxkIGJlIHRoZSBzYW1lIGFzIHdyaXRlSW1hZ2VzTWFuaWZlc3QoKVxuICBpZiAoIW1ha2VSZShwYXR0ZXJuLnBhdGhuYW1lID8/ICcqKicsIHsgZG90OiB0cnVlIH0pLnRlc3QodXJsLnBhdGhuYW1lKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIHRydWVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1JlbW90ZU1hdGNoKFxuICBkb21haW5zOiBzdHJpbmdbXSxcbiAgcmVtb3RlUGF0dGVybnM6IFJlbW90ZVBhdHRlcm5bXSxcbiAgdXJsOiBVUkxcbik6IGJvb2xlYW4ge1xuICByZXR1cm4gKFxuICAgIGRvbWFpbnMuc29tZSgoZG9tYWluKSA9PiB1cmwuaG9zdG5hbWUgPT09IGRvbWFpbikgfHxcbiAgICByZW1vdGVQYXR0ZXJucy5zb21lKChwKSA9PiBtYXRjaFJlbW90ZVBhdHRlcm4ocCwgdXJsKSlcbiAgKVxufVxuIl0sIm5hbWVzIjpbImhhc1JlbW90ZU1hdGNoIiwibWF0Y2hSZW1vdGVQYXR0ZXJuIiwicGF0dGVybiIsInVybCIsInByb3RvY29sIiwidW5kZWZpbmVkIiwiYWN0dWFsUHJvdG8iLCJzbGljZSIsInBvcnQiLCJob3N0bmFtZSIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1ha2VSZSIsInRlc3QiLCJzZWFyY2giLCJwYXRobmFtZSIsImRvdCIsImRvbWFpbnMiLCJyZW1vdGVQYXR0ZXJucyIsInNvbWUiLCJkb21haW4iLCJwIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/match-remote-pattern.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router-context.shared-runtime.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router-context.shared-runtime.js ***!
  \****************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"RouterContext\", ({\n    enumerable: true,\n    get: function() {\n        return RouterContext;\n    }\n}));\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nconst RouterContext = _react.default.createContext(null);\nif (true) {\n    RouterContext.displayName = 'RouterContext';\n} //# sourceMappingURL=router-context.shared-runtime.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXItY29udGV4dC5zaGFyZWQtcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiOzs7O2lEQUdhQTs7O2VBQUFBOzs7OzRFQUhLO0FBR1gsTUFBTUEsZ0JBQWdCQyxPQUFBQSxPQUFLLENBQUNDLGFBQWEsQ0FBb0I7QUFFcEUsSUFBSUMsSUFBb0IsRUFBbUI7SUFDekNILGNBQWNNLFdBQVcsR0FBRztBQUM5QiIsInNvdXJjZXMiOlsiL1VzZXJzL3NyYy9zaGFyZWQvbGliL3JvdXRlci1jb250ZXh0LnNoYXJlZC1ydW50aW1lLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB0eXBlIHsgTmV4dFJvdXRlciB9IGZyb20gJy4vcm91dGVyL3JvdXRlcidcblxuZXhwb3J0IGNvbnN0IFJvdXRlckNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PE5leHRSb3V0ZXIgfCBudWxsPihudWxsKVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSb3V0ZXJDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1JvdXRlckNvbnRleHQnXG59XG4iXSwibmFtZXMiOlsiUm91dGVyQ29udGV4dCIsIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImRpc3BsYXlOYW1lIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router-context.shared-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/side-effect.js":
/*!**********************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/side-effect.js ***!
  \**********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nvar _s = $RefreshSig$();\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return SideEffect;\n    }\n}));\nconst _react = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nconst isServer = \"object\" === 'undefined';\nconst useClientOnlyLayoutEffect = isServer ? ()=>{} : _react.useLayoutEffect;\nconst useClientOnlyEffect = isServer ? ()=>{} : _react.useEffect;\nfunction SideEffect(props) {\n    _s();\n    const { headManager, reduceComponentsToState } = props;\n    function emitChange() {\n        if (headManager && headManager.mountedInstances) {\n            const headElements = _react.Children.toArray(Array.from(headManager.mountedInstances).filter(Boolean));\n            headManager.updateHead(reduceComponentsToState(headElements, props));\n        }\n    }\n    if (isServer) {\n        var _headManager_mountedInstances;\n        headManager == null ? void 0 : (_headManager_mountedInstances = headManager.mountedInstances) == null ? void 0 : _headManager_mountedInstances.add(props.children);\n        emitChange();\n    }\n    useClientOnlyLayoutEffect({\n        \"SideEffect.useClientOnlyLayoutEffect\": ()=>{\n            var _headManager_mountedInstances;\n            headManager == null ? void 0 : (_headManager_mountedInstances = headManager.mountedInstances) == null ? void 0 : _headManager_mountedInstances.add(props.children);\n            return ({\n                \"SideEffect.useClientOnlyLayoutEffect\": ()=>{\n                    var _headManager_mountedInstances;\n                    headManager == null ? void 0 : (_headManager_mountedInstances = headManager.mountedInstances) == null ? void 0 : _headManager_mountedInstances.delete(props.children);\n                }\n            })[\"SideEffect.useClientOnlyLayoutEffect\"];\n        }\n    }[\"SideEffect.useClientOnlyLayoutEffect\"]);\n    // We need to call `updateHead` method whenever the `SideEffect` is trigger in all\n    // life-cycles: mount, update, unmount. However, if there are multiple `SideEffect`s\n    // being rendered, we only trigger the method from the last one.\n    // This is ensured by keeping the last unflushed `updateHead` in the `_pendingUpdate`\n    // singleton in the layout effect pass, and actually trigger it in the effect pass.\n    useClientOnlyLayoutEffect({\n        \"SideEffect.useClientOnlyLayoutEffect\": ()=>{\n            if (headManager) {\n                headManager._pendingUpdate = emitChange;\n            }\n            return ({\n                \"SideEffect.useClientOnlyLayoutEffect\": ()=>{\n                    if (headManager) {\n                        headManager._pendingUpdate = emitChange;\n                    }\n                }\n            })[\"SideEffect.useClientOnlyLayoutEffect\"];\n        }\n    }[\"SideEffect.useClientOnlyLayoutEffect\"]);\n    useClientOnlyEffect({\n        \"SideEffect.useClientOnlyEffect\": ()=>{\n            if (headManager && headManager._pendingUpdate) {\n                headManager._pendingUpdate();\n                headManager._pendingUpdate = null;\n            }\n            return ({\n                \"SideEffect.useClientOnlyEffect\": ()=>{\n                    if (headManager && headManager._pendingUpdate) {\n                        headManager._pendingUpdate();\n                        headManager._pendingUpdate = null;\n                    }\n                }\n            })[\"SideEffect.useClientOnlyEffect\"];\n        }\n    }[\"SideEffect.useClientOnlyEffect\"]);\n    return null;\n} //# sourceMappingURL=side-effect.js.map\n_s(SideEffect, \"gHVkikNHNxjVdD11eJBzaqkCiPY=\", false, function() {\n    return [\n        useClientOnlyLayoutEffect,\n        useClientOnlyLayoutEffect,\n        useClientOnlyEffect\n    ];\n});\n_c = SideEffect;\nvar _c;\n$RefreshReg$(_c, \"SideEffect\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9zaWRlLWVmZmVjdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7MkNBb0JBOzs7ZUFBd0JBOzs7bUNBbkJ1QztBQWUvRCxNQUFNQyxXQUFXLE9BQU9DLE1BQVc7QUFDbkMsTUFBTUMsNEJBQTRCRixXQUFXLEtBQU8sSUFBSUcsT0FBQUEsZUFBZTtBQUN2RSxNQUFNQyxzQkFBc0JKLFdBQVcsS0FBTyxJQUFJSyxPQUFBQSxTQUFTO0FBRTVDLG9CQUFvQkMsS0FBc0I7O0lBQ3ZELE1BQU0sRUFBRUMsV0FBVyxFQUFFQyx1QkFBdUIsRUFBRSxHQUFHRjtJQUVqRCxTQUFTRztRQUNQLElBQUlGLGVBQWVBLFlBQVlHLGdCQUFnQixFQUFFO1lBQy9DLE1BQU1DLGVBQWVDLE9BQUFBLFFBQVEsQ0FBQ0MsT0FBTyxDQUNuQ0MsTUFBTUMsSUFBSSxDQUFDUixZQUFZRyxnQkFBZ0IsRUFBMEJNLE1BQU0sQ0FDckVDO1lBR0pWLFlBQVlXLFVBQVUsQ0FBQ1Ysd0JBQXdCRyxjQUFjTDtRQUMvRDtJQUNGO0lBRUEsSUFBSU4sVUFBVTtZQUNaTztRQUFBQSxlQUFBQSxPQUFBQSxLQUFBQSxJQUFBQSxDQUFBQSxnQ0FBQUEsWUFBYUcsZ0JBQUFBLEtBQWdCLGdCQUE3QkgsOEJBQStCWSxHQUFHLENBQUNiLE1BQU1jLFFBQVE7UUFDakRYO0lBQ0Y7O2dEQUUwQjtnQkFDeEJGO1lBQUFBLGVBQUFBLE9BQUFBLEtBQUFBLElBQUFBLENBQUFBLGdDQUFBQSxZQUFhRyxnQkFBQUEsS0FBZ0IsZ0JBQTdCSCw4QkFBK0JZLEdBQUcsQ0FBQ2IsTUFBTWMsUUFBUTtZQUNqRDt3REFBTzt3QkFDTGI7b0JBQUFBLGVBQUFBLE9BQUFBLEtBQUFBLElBQUFBLENBQUFBLGdDQUFBQSxZQUFhRyxnQkFBQUEsS0FBZ0IsZ0JBQTdCSCw4QkFBK0JjLE1BQU0sQ0FBQ2YsTUFBTWMsUUFBUTtnQkFDdEQ7O1FBQ0Y7O0lBRUEsa0ZBQWtGO0lBQ2xGLG9GQUFvRjtJQUNwRixnRUFBZ0U7SUFDaEUscUZBQXFGO0lBQ3JGLG1GQUFtRjs7Z0RBQ3pEO1lBQ3hCLElBQUliLGFBQWE7Z0JBQ2ZBLFlBQVllLGNBQWMsR0FBR2I7WUFDL0I7WUFDQTt3REFBTztvQkFDTCxJQUFJRixhQUFhO3dCQUNmQSxZQUFZZSxjQUFjLEdBQUdiO29CQUMvQjtnQkFDRjs7UUFDRjs7OzBDQUVvQjtZQUNsQixJQUFJRixlQUFlQSxZQUFZZSxjQUFjLEVBQUU7Z0JBQzdDZixZQUFZZSxjQUFjO2dCQUMxQmYsWUFBWWUsY0FBYyxHQUFHO1lBQy9CO1lBQ0E7a0RBQU87b0JBQ0wsSUFBSWYsZUFBZUEsWUFBWWUsY0FBYyxFQUFFO3dCQUM3Q2YsWUFBWWUsY0FBYzt3QkFDMUJmLFlBQVllLGNBQWMsR0FBRztvQkFDL0I7Z0JBQ0Y7O1FBQ0Y7O0lBRUEsT0FBTztBQUNUOzs7UUFyQ0VwQjtRQVlBQTtRQVdBRTs7O0tBMUNzQkwiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zcmMvc2hhcmVkL2xpYi9zaWRlLWVmZmVjdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBDaGlsZHJlbiwgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QsIHR5cGUgSlNYIH0gZnJvbSAncmVhY3QnXG5cbnR5cGUgU3RhdGUgPSBKU1guRWxlbWVudFtdIHwgdW5kZWZpbmVkXG5cbmV4cG9ydCB0eXBlIFNpZGVFZmZlY3RQcm9wcyA9IHtcbiAgcmVkdWNlQ29tcG9uZW50c1RvU3RhdGU6IDxUIGV4dGVuZHMge30+KFxuICAgIGNvbXBvbmVudHM6IEFycmF5PFJlYWN0LlJlYWN0RWxlbWVudDxhbnk+PixcbiAgICBwcm9wczogVFxuICApID0+IFN0YXRlXG4gIGhhbmRsZVN0YXRlQ2hhbmdlPzogKHN0YXRlOiBTdGF0ZSkgPT4gdm9pZFxuICBoZWFkTWFuYWdlcjogYW55XG4gIGluQW1wTW9kZT86IGJvb2xlYW5cbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZVxufVxuXG5jb25zdCBpc1NlcnZlciA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnXG5jb25zdCB1c2VDbGllbnRPbmx5TGF5b3V0RWZmZWN0ID0gaXNTZXJ2ZXIgPyAoKSA9PiB7fSA6IHVzZUxheW91dEVmZmVjdFxuY29uc3QgdXNlQ2xpZW50T25seUVmZmVjdCA9IGlzU2VydmVyID8gKCkgPT4ge30gOiB1c2VFZmZlY3RcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2lkZUVmZmVjdChwcm9wczogU2lkZUVmZmVjdFByb3BzKSB7XG4gIGNvbnN0IHsgaGVhZE1hbmFnZXIsIHJlZHVjZUNvbXBvbmVudHNUb1N0YXRlIH0gPSBwcm9wc1xuXG4gIGZ1bmN0aW9uIGVtaXRDaGFuZ2UoKSB7XG4gICAgaWYgKGhlYWRNYW5hZ2VyICYmIGhlYWRNYW5hZ2VyLm1vdW50ZWRJbnN0YW5jZXMpIHtcbiAgICAgIGNvbnN0IGhlYWRFbGVtZW50cyA9IENoaWxkcmVuLnRvQXJyYXkoXG4gICAgICAgIEFycmF5LmZyb20oaGVhZE1hbmFnZXIubW91bnRlZEluc3RhbmNlcyBhcyBTZXQ8UmVhY3QuUmVhY3ROb2RlPikuZmlsdGVyKFxuICAgICAgICAgIEJvb2xlYW5cbiAgICAgICAgKVxuICAgICAgKSBhcyBSZWFjdC5SZWFjdEVsZW1lbnRbXVxuICAgICAgaGVhZE1hbmFnZXIudXBkYXRlSGVhZChyZWR1Y2VDb21wb25lbnRzVG9TdGF0ZShoZWFkRWxlbWVudHMsIHByb3BzKSlcbiAgICB9XG4gIH1cblxuICBpZiAoaXNTZXJ2ZXIpIHtcbiAgICBoZWFkTWFuYWdlcj8ubW91bnRlZEluc3RhbmNlcz8uYWRkKHByb3BzLmNoaWxkcmVuKVxuICAgIGVtaXRDaGFuZ2UoKVxuICB9XG5cbiAgdXNlQ2xpZW50T25seUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaGVhZE1hbmFnZXI/Lm1vdW50ZWRJbnN0YW5jZXM/LmFkZChwcm9wcy5jaGlsZHJlbilcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaGVhZE1hbmFnZXI/Lm1vdW50ZWRJbnN0YW5jZXM/LmRlbGV0ZShwcm9wcy5jaGlsZHJlbilcbiAgICB9XG4gIH0pXG5cbiAgLy8gV2UgbmVlZCB0byBjYWxsIGB1cGRhdGVIZWFkYCBtZXRob2Qgd2hlbmV2ZXIgdGhlIGBTaWRlRWZmZWN0YCBpcyB0cmlnZ2VyIGluIGFsbFxuICAvLyBsaWZlLWN5Y2xlczogbW91bnQsIHVwZGF0ZSwgdW5tb3VudC4gSG93ZXZlciwgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGBTaWRlRWZmZWN0YHNcbiAgLy8gYmVpbmcgcmVuZGVyZWQsIHdlIG9ubHkgdHJpZ2dlciB0aGUgbWV0aG9kIGZyb20gdGhlIGxhc3Qgb25lLlxuICAvLyBUaGlzIGlzIGVuc3VyZWQgYnkga2VlcGluZyB0aGUgbGFzdCB1bmZsdXNoZWQgYHVwZGF0ZUhlYWRgIGluIHRoZSBgX3BlbmRpbmdVcGRhdGVgXG4gIC8vIHNpbmdsZXRvbiBpbiB0aGUgbGF5b3V0IGVmZmVjdCBwYXNzLCBhbmQgYWN0dWFsbHkgdHJpZ2dlciBpdCBpbiB0aGUgZWZmZWN0IHBhc3MuXG4gIHVzZUNsaWVudE9ubHlMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChoZWFkTWFuYWdlcikge1xuICAgICAgaGVhZE1hbmFnZXIuX3BlbmRpbmdVcGRhdGUgPSBlbWl0Q2hhbmdlXG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoaGVhZE1hbmFnZXIpIHtcbiAgICAgICAgaGVhZE1hbmFnZXIuX3BlbmRpbmdVcGRhdGUgPSBlbWl0Q2hhbmdlXG4gICAgICB9XG4gICAgfVxuICB9KVxuXG4gIHVzZUNsaWVudE9ubHlFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChoZWFkTWFuYWdlciAmJiBoZWFkTWFuYWdlci5fcGVuZGluZ1VwZGF0ZSkge1xuICAgICAgaGVhZE1hbmFnZXIuX3BlbmRpbmdVcGRhdGUoKVxuICAgICAgaGVhZE1hbmFnZXIuX3BlbmRpbmdVcGRhdGUgPSBudWxsXG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoaGVhZE1hbmFnZXIgJiYgaGVhZE1hbmFnZXIuX3BlbmRpbmdVcGRhdGUpIHtcbiAgICAgICAgaGVhZE1hbmFnZXIuX3BlbmRpbmdVcGRhdGUoKVxuICAgICAgICBoZWFkTWFuYWdlci5fcGVuZGluZ1VwZGF0ZSA9IG51bGxcbiAgICAgIH1cbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIG51bGxcbn1cbiJdLCJuYW1lcyI6WyJTaWRlRWZmZWN0IiwiaXNTZXJ2ZXIiLCJ3aW5kb3ciLCJ1c2VDbGllbnRPbmx5TGF5b3V0RWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlQ2xpZW50T25seUVmZmVjdCIsInVzZUVmZmVjdCIsInByb3BzIiwiaGVhZE1hbmFnZXIiLCJyZWR1Y2VDb21wb25lbnRzVG9TdGF0ZSIsImVtaXRDaGFuZ2UiLCJtb3VudGVkSW5zdGFuY2VzIiwiaGVhZEVsZW1lbnRzIiwiQ2hpbGRyZW4iLCJ0b0FycmF5IiwiQXJyYXkiLCJmcm9tIiwiZmlsdGVyIiwiQm9vbGVhbiIsInVwZGF0ZUhlYWQiLCJhZGQiLCJjaGlsZHJlbiIsImRlbGV0ZSIsIl9wZW5kaW5nVXBkYXRlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/side-effect.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/pkijs/build/index.es.js":
/*!**********************************************!*\
  !*** ./node_modules/pkijs/build/index.es.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractCryptoEngine: () => (/* binding */ AbstractCryptoEngine),\n/* harmony export */   AccessDescription: () => (/* binding */ AccessDescription),\n/* harmony export */   Accuracy: () => (/* binding */ Accuracy),\n/* harmony export */   AlgorithmIdentifier: () => (/* binding */ AlgorithmIdentifier),\n/* harmony export */   AltName: () => (/* binding */ AltName),\n/* harmony export */   ArgumentError: () => (/* binding */ ArgumentError),\n/* harmony export */   AsnError: () => (/* binding */ AsnError),\n/* harmony export */   AttCertValidityPeriod: () => (/* binding */ AttCertValidityPeriod),\n/* harmony export */   Attribute: () => (/* binding */ Attribute),\n/* harmony export */   AttributeCertificateInfoV1: () => (/* binding */ AttributeCertificateInfoV1),\n/* harmony export */   AttributeCertificateInfoV2: () => (/* binding */ AttributeCertificateInfoV2),\n/* harmony export */   AttributeCertificateV1: () => (/* binding */ AttributeCertificateV1),\n/* harmony export */   AttributeCertificateV2: () => (/* binding */ AttributeCertificateV2),\n/* harmony export */   AttributeTypeAndValue: () => (/* binding */ AttributeTypeAndValue),\n/* harmony export */   AuthenticatedSafe: () => (/* binding */ AuthenticatedSafe),\n/* harmony export */   AuthorityKeyIdentifier: () => (/* binding */ AuthorityKeyIdentifier),\n/* harmony export */   BasicConstraints: () => (/* binding */ BasicConstraints),\n/* harmony export */   BasicOCSPResponse: () => (/* binding */ BasicOCSPResponse),\n/* harmony export */   CAVersion: () => (/* binding */ CAVersion),\n/* harmony export */   CRLBag: () => (/* binding */ CRLBag),\n/* harmony export */   CRLDistributionPoints: () => (/* binding */ CRLDistributionPoints),\n/* harmony export */   CertBag: () => (/* binding */ CertBag),\n/* harmony export */   CertID: () => (/* binding */ CertID),\n/* harmony export */   Certificate: () => (/* binding */ Certificate),\n/* harmony export */   CertificateChainValidationEngine: () => (/* binding */ CertificateChainValidationEngine),\n/* harmony export */   CertificatePolicies: () => (/* binding */ CertificatePolicies),\n/* harmony export */   CertificateRevocationList: () => (/* binding */ CertificateRevocationList),\n/* harmony export */   CertificateSet: () => (/* binding */ CertificateSet),\n/* harmony export */   CertificateTemplate: () => (/* binding */ CertificateTemplate),\n/* harmony export */   CertificationRequest: () => (/* binding */ CertificationRequest),\n/* harmony export */   ChainValidationCode: () => (/* binding */ ChainValidationCode),\n/* harmony export */   ChainValidationError: () => (/* binding */ ChainValidationError),\n/* harmony export */   ContentInfo: () => (/* binding */ ContentInfo),\n/* harmony export */   CryptoEngine: () => (/* binding */ CryptoEngine),\n/* harmony export */   DigestInfo: () => (/* binding */ DigestInfo),\n/* harmony export */   DistributionPoint: () => (/* binding */ DistributionPoint),\n/* harmony export */   ECCCMSSharedInfo: () => (/* binding */ ECCCMSSharedInfo),\n/* harmony export */   ECNamedCurves: () => (/* binding */ ECNamedCurves),\n/* harmony export */   ECPrivateKey: () => (/* binding */ ECPrivateKey),\n/* harmony export */   ECPublicKey: () => (/* binding */ ECPublicKey),\n/* harmony export */   EncapsulatedContentInfo: () => (/* binding */ EncapsulatedContentInfo),\n/* harmony export */   EncryptedContentInfo: () => (/* binding */ EncryptedContentInfo),\n/* harmony export */   EncryptedData: () => (/* binding */ EncryptedData),\n/* harmony export */   EnvelopedData: () => (/* binding */ EnvelopedData),\n/* harmony export */   ExtKeyUsage: () => (/* binding */ ExtKeyUsage),\n/* harmony export */   Extension: () => (/* binding */ Extension),\n/* harmony export */   ExtensionValueFactory: () => (/* binding */ ExtensionValueFactory),\n/* harmony export */   Extensions: () => (/* binding */ Extensions),\n/* harmony export */   GeneralName: () => (/* binding */ GeneralName),\n/* harmony export */   GeneralNames: () => (/* binding */ GeneralNames),\n/* harmony export */   GeneralSubtree: () => (/* binding */ GeneralSubtree),\n/* harmony export */   HASHED_MESSAGE: () => (/* binding */ HASHED_MESSAGE),\n/* harmony export */   HASH_ALGORITHM: () => (/* binding */ HASH_ALGORITHM),\n/* harmony export */   Holder: () => (/* binding */ Holder),\n/* harmony export */   InfoAccess: () => (/* binding */ InfoAccess),\n/* harmony export */   IssuerAndSerialNumber: () => (/* binding */ IssuerAndSerialNumber),\n/* harmony export */   IssuerSerial: () => (/* binding */ IssuerSerial),\n/* harmony export */   IssuingDistributionPoint: () => (/* binding */ IssuingDistributionPoint),\n/* harmony export */   KEKIdentifier: () => (/* binding */ KEKIdentifier),\n/* harmony export */   KEKRecipientInfo: () => (/* binding */ KEKRecipientInfo),\n/* harmony export */   KeyAgreeRecipientIdentifier: () => (/* binding */ KeyAgreeRecipientIdentifier),\n/* harmony export */   KeyAgreeRecipientInfo: () => (/* binding */ KeyAgreeRecipientInfo),\n/* harmony export */   KeyBag: () => (/* binding */ KeyBag),\n/* harmony export */   KeyTransRecipientInfo: () => (/* binding */ KeyTransRecipientInfo),\n/* harmony export */   MICROS: () => (/* binding */ MICROS),\n/* harmony export */   MILLIS: () => (/* binding */ MILLIS),\n/* harmony export */   MacData: () => (/* binding */ MacData),\n/* harmony export */   MessageImprint: () => (/* binding */ MessageImprint),\n/* harmony export */   NameConstraints: () => (/* binding */ NameConstraints),\n/* harmony export */   OCSPRequest: () => (/* binding */ OCSPRequest),\n/* harmony export */   OCSPResponse: () => (/* binding */ OCSPResponse),\n/* harmony export */   ObjectDigestInfo: () => (/* binding */ ObjectDigestInfo),\n/* harmony export */   OriginatorIdentifierOrKey: () => (/* binding */ OriginatorIdentifierOrKey),\n/* harmony export */   OriginatorInfo: () => (/* binding */ OriginatorInfo),\n/* harmony export */   OriginatorPublicKey: () => (/* binding */ OriginatorPublicKey),\n/* harmony export */   OtherCertificateFormat: () => (/* binding */ OtherCertificateFormat),\n/* harmony export */   OtherKeyAttribute: () => (/* binding */ OtherKeyAttribute),\n/* harmony export */   OtherPrimeInfo: () => (/* binding */ OtherPrimeInfo),\n/* harmony export */   OtherRecipientInfo: () => (/* binding */ OtherRecipientInfo),\n/* harmony export */   OtherRevocationInfoFormat: () => (/* binding */ OtherRevocationInfoFormat),\n/* harmony export */   PBES2Params: () => (/* binding */ PBES2Params),\n/* harmony export */   PBKDF2Params: () => (/* binding */ PBKDF2Params),\n/* harmony export */   PFX: () => (/* binding */ PFX),\n/* harmony export */   PKCS8ShroudedKeyBag: () => (/* binding */ PKCS8ShroudedKeyBag),\n/* harmony export */   PKIStatus: () => (/* binding */ PKIStatus),\n/* harmony export */   PKIStatusInfo: () => (/* binding */ PKIStatusInfo),\n/* harmony export */   POLICY_IDENTIFIER: () => (/* binding */ POLICY_IDENTIFIER),\n/* harmony export */   POLICY_QUALIFIERS: () => (/* binding */ POLICY_QUALIFIERS),\n/* harmony export */   ParameterError: () => (/* binding */ ParameterError),\n/* harmony export */   PasswordRecipientinfo: () => (/* binding */ PasswordRecipientinfo),\n/* harmony export */   PkiObject: () => (/* binding */ PkiObject),\n/* harmony export */   PolicyConstraints: () => (/* binding */ PolicyConstraints),\n/* harmony export */   PolicyInformation: () => (/* binding */ PolicyInformation),\n/* harmony export */   PolicyMapping: () => (/* binding */ PolicyMapping),\n/* harmony export */   PolicyMappings: () => (/* binding */ PolicyMappings),\n/* harmony export */   PolicyQualifierInfo: () => (/* binding */ PolicyQualifierInfo),\n/* harmony export */   PrivateKeyInfo: () => (/* binding */ PrivateKeyInfo),\n/* harmony export */   PrivateKeyUsagePeriod: () => (/* binding */ PrivateKeyUsagePeriod),\n/* harmony export */   PublicKeyInfo: () => (/* binding */ PublicKeyInfo),\n/* harmony export */   QCStatement: () => (/* binding */ QCStatement),\n/* harmony export */   QCStatements: () => (/* binding */ QCStatements),\n/* harmony export */   RDN: () => (/* binding */ RDN),\n/* harmony export */   RSAESOAEPParams: () => (/* binding */ RSAESOAEPParams),\n/* harmony export */   RSAPrivateKey: () => (/* binding */ RSAPrivateKey),\n/* harmony export */   RSAPublicKey: () => (/* binding */ RSAPublicKey),\n/* harmony export */   RSASSAPSSParams: () => (/* binding */ RSASSAPSSParams),\n/* harmony export */   RecipientEncryptedKey: () => (/* binding */ RecipientEncryptedKey),\n/* harmony export */   RecipientEncryptedKeys: () => (/* binding */ RecipientEncryptedKeys),\n/* harmony export */   RecipientIdentifier: () => (/* binding */ RecipientIdentifier),\n/* harmony export */   RecipientInfo: () => (/* binding */ RecipientInfo),\n/* harmony export */   RecipientKeyIdentifier: () => (/* binding */ RecipientKeyIdentifier),\n/* harmony export */   RelativeDistinguishedNames: () => (/* binding */ RelativeDistinguishedNames),\n/* harmony export */   Request: () => (/* binding */ Request),\n/* harmony export */   ResponseBytes: () => (/* binding */ ResponseBytes),\n/* harmony export */   ResponseData: () => (/* binding */ ResponseData),\n/* harmony export */   RevocationInfoChoices: () => (/* binding */ RevocationInfoChoices),\n/* harmony export */   RevokedCertificate: () => (/* binding */ RevokedCertificate),\n/* harmony export */   SECONDS: () => (/* binding */ SECONDS),\n/* harmony export */   SafeBag: () => (/* binding */ SafeBag),\n/* harmony export */   SafeBagValueFactory: () => (/* binding */ SafeBagValueFactory),\n/* harmony export */   SafeContents: () => (/* binding */ SafeContents),\n/* harmony export */   SecretBag: () => (/* binding */ SecretBag),\n/* harmony export */   Signature: () => (/* binding */ Signature),\n/* harmony export */   SignedAndUnsignedAttributes: () => (/* binding */ SignedAndUnsignedAttributes),\n/* harmony export */   SignedCertificateTimestamp: () => (/* binding */ SignedCertificateTimestamp),\n/* harmony export */   SignedCertificateTimestampList: () => (/* binding */ SignedCertificateTimestampList),\n/* harmony export */   SignedData: () => (/* binding */ SignedData),\n/* harmony export */   SignedDataVerifyError: () => (/* binding */ SignedDataVerifyError),\n/* harmony export */   SignerInfo: () => (/* binding */ SignerInfo),\n/* harmony export */   SingleResponse: () => (/* binding */ SingleResponse),\n/* harmony export */   SubjectDirectoryAttributes: () => (/* binding */ SubjectDirectoryAttributes),\n/* harmony export */   TBSRequest: () => (/* binding */ TBSRequest),\n/* harmony export */   TSTInfo: () => (/* binding */ TSTInfo),\n/* harmony export */   TYPE: () => (/* binding */ TYPE$4),\n/* harmony export */   TYPE_AND_VALUES: () => (/* binding */ TYPE_AND_VALUES),\n/* harmony export */   Time: () => (/* binding */ Time),\n/* harmony export */   TimeStampReq: () => (/* binding */ TimeStampReq),\n/* harmony export */   TimeStampResp: () => (/* binding */ TimeStampResp),\n/* harmony export */   TimeType: () => (/* binding */ TimeType),\n/* harmony export */   V2Form: () => (/* binding */ V2Form),\n/* harmony export */   VALUE: () => (/* binding */ VALUE$5),\n/* harmony export */   VALUE_BEFORE_DECODE: () => (/* binding */ VALUE_BEFORE_DECODE),\n/* harmony export */   checkCA: () => (/* binding */ checkCA),\n/* harmony export */   createCMSECDSASignature: () => (/* binding */ createCMSECDSASignature),\n/* harmony export */   createECDSASignatureFromCMS: () => (/* binding */ createECDSASignatureFromCMS),\n/* harmony export */   engine: () => (/* binding */ engine),\n/* harmony export */   getAlgorithmByOID: () => (/* binding */ getAlgorithmByOID),\n/* harmony export */   getAlgorithmParameters: () => (/* binding */ getAlgorithmParameters),\n/* harmony export */   getCrypto: () => (/* binding */ getCrypto),\n/* harmony export */   getEngine: () => (/* binding */ getEngine),\n/* harmony export */   getHashAlgorithm: () => (/* binding */ getHashAlgorithm),\n/* harmony export */   getOIDByAlgorithm: () => (/* binding */ getOIDByAlgorithm),\n/* harmony export */   getRandomValues: () => (/* binding */ getRandomValues),\n/* harmony export */   id_AnyPolicy: () => (/* binding */ id_AnyPolicy),\n/* harmony export */   id_AuthorityInfoAccess: () => (/* binding */ id_AuthorityInfoAccess),\n/* harmony export */   id_AuthorityKeyIdentifier: () => (/* binding */ id_AuthorityKeyIdentifier),\n/* harmony export */   id_BaseCRLNumber: () => (/* binding */ id_BaseCRLNumber),\n/* harmony export */   id_BasicConstraints: () => (/* binding */ id_BasicConstraints),\n/* harmony export */   id_CRLBag_X509CRL: () => (/* binding */ id_CRLBag_X509CRL),\n/* harmony export */   id_CRLDistributionPoints: () => (/* binding */ id_CRLDistributionPoints),\n/* harmony export */   id_CRLNumber: () => (/* binding */ id_CRLNumber),\n/* harmony export */   id_CRLReason: () => (/* binding */ id_CRLReason),\n/* harmony export */   id_CertBag_AttributeCertificate: () => (/* binding */ id_CertBag_AttributeCertificate),\n/* harmony export */   id_CertBag_SDSICertificate: () => (/* binding */ id_CertBag_SDSICertificate),\n/* harmony export */   id_CertBag_X509Certificate: () => (/* binding */ id_CertBag_X509Certificate),\n/* harmony export */   id_CertificateIssuer: () => (/* binding */ id_CertificateIssuer),\n/* harmony export */   id_CertificatePolicies: () => (/* binding */ id_CertificatePolicies),\n/* harmony export */   id_ContentType_Data: () => (/* binding */ id_ContentType_Data),\n/* harmony export */   id_ContentType_EncryptedData: () => (/* binding */ id_ContentType_EncryptedData),\n/* harmony export */   id_ContentType_EnvelopedData: () => (/* binding */ id_ContentType_EnvelopedData),\n/* harmony export */   id_ContentType_SignedData: () => (/* binding */ id_ContentType_SignedData),\n/* harmony export */   id_ExtKeyUsage: () => (/* binding */ id_ExtKeyUsage),\n/* harmony export */   id_FreshestCRL: () => (/* binding */ id_FreshestCRL),\n/* harmony export */   id_InhibitAnyPolicy: () => (/* binding */ id_InhibitAnyPolicy),\n/* harmony export */   id_InvalidityDate: () => (/* binding */ id_InvalidityDate),\n/* harmony export */   id_IssuerAltName: () => (/* binding */ id_IssuerAltName),\n/* harmony export */   id_IssuingDistributionPoint: () => (/* binding */ id_IssuingDistributionPoint),\n/* harmony export */   id_KeyUsage: () => (/* binding */ id_KeyUsage),\n/* harmony export */   id_MicrosoftAppPolicies: () => (/* binding */ id_MicrosoftAppPolicies),\n/* harmony export */   id_MicrosoftCaVersion: () => (/* binding */ id_MicrosoftCaVersion),\n/* harmony export */   id_MicrosoftCertTemplateV1: () => (/* binding */ id_MicrosoftCertTemplateV1),\n/* harmony export */   id_MicrosoftCertTemplateV2: () => (/* binding */ id_MicrosoftCertTemplateV2),\n/* harmony export */   id_MicrosoftPrevCaCertHash: () => (/* binding */ id_MicrosoftPrevCaCertHash),\n/* harmony export */   id_NameConstraints: () => (/* binding */ id_NameConstraints),\n/* harmony export */   id_PKIX_OCSP_Basic: () => (/* binding */ id_PKIX_OCSP_Basic),\n/* harmony export */   id_PolicyConstraints: () => (/* binding */ id_PolicyConstraints),\n/* harmony export */   id_PolicyMappings: () => (/* binding */ id_PolicyMappings),\n/* harmony export */   id_PrivateKeyUsagePeriod: () => (/* binding */ id_PrivateKeyUsagePeriod),\n/* harmony export */   id_QCStatements: () => (/* binding */ id_QCStatements),\n/* harmony export */   id_SignedCertificateTimestampList: () => (/* binding */ id_SignedCertificateTimestampList),\n/* harmony export */   id_SubjectAltName: () => (/* binding */ id_SubjectAltName),\n/* harmony export */   id_SubjectDirectoryAttributes: () => (/* binding */ id_SubjectDirectoryAttributes),\n/* harmony export */   id_SubjectInfoAccess: () => (/* binding */ id_SubjectInfoAccess),\n/* harmony export */   id_SubjectKeyIdentifier: () => (/* binding */ id_SubjectKeyIdentifier),\n/* harmony export */   id_ad: () => (/* binding */ id_ad),\n/* harmony export */   id_ad_caIssuers: () => (/* binding */ id_ad_caIssuers),\n/* harmony export */   id_ad_ocsp: () => (/* binding */ id_ad_ocsp),\n/* harmony export */   id_eContentType_TSTInfo: () => (/* binding */ id_eContentType_TSTInfo),\n/* harmony export */   id_pkix: () => (/* binding */ id_pkix),\n/* harmony export */   id_sha1: () => (/* binding */ id_sha1),\n/* harmony export */   id_sha256: () => (/* binding */ id_sha256),\n/* harmony export */   id_sha384: () => (/* binding */ id_sha384),\n/* harmony export */   id_sha512: () => (/* binding */ id_sha512),\n/* harmony export */   kdf: () => (/* binding */ kdf),\n/* harmony export */   setEngine: () => (/* binding */ setEngine),\n/* harmony export */   stringPrep: () => (/* binding */ stringPrep),\n/* harmony export */   verifySCTsForCertificate: () => (/* binding */ verifySCTsForCertificate)\n/* harmony export */ });\n/* harmony import */ var asn1js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! asn1js */ \"(app-pages-browser)/./node_modules/asn1js/build/index.es.js\");\n/* harmony import */ var pvtsutils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pvtsutils */ \"(app-pages-browser)/./node_modules/pvtsutils/build/index.js\");\n/* harmony import */ var pvutils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! pvutils */ \"(app-pages-browser)/./node_modules/pvutils/build/utils.es.js\");\n/* harmony import */ var bytestreamjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! bytestreamjs */ \"(app-pages-browser)/./node_modules/bytestreamjs/build/mjs/index.js\");\n/* harmony import */ var _noble_hashes_sha1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/sha1 */ \"(app-pages-browser)/./node_modules/@noble/hashes/esm/sha1.js\");\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(app-pages-browser)/./node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @noble/hashes/sha512 */ \"(app-pages-browser)/./node_modules/@noble/hashes/esm/sha512.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/*!\n * Copyright (c) 2014, GlobalSign\n * Copyright (c) 2015-2019, Peculiar Ventures\n * All rights reserved.\n * \n * Author 2014-2019, Yury Strozhevsky\n * \n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * \n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n * \n * * Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n * \n * * Neither the name of the {organization} nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n * \n */\n\n\n\n\n\n\n\n\n\n\nconst EMPTY_BUFFER = new ArrayBuffer(0);\nconst EMPTY_STRING = \"\";\n\nclass ArgumentError extends TypeError {\n    constructor() {\n        super(...arguments);\n        this.name = ArgumentError.NAME;\n    }\n    static isType(value, type) {\n        if (typeof type === \"string\") {\n            if (type === \"Array\" && Array.isArray(value)) {\n                return true;\n            }\n            else if (type === \"ArrayBuffer\" && value instanceof ArrayBuffer) {\n                return true;\n            }\n            else if (type === \"ArrayBufferView\" && ArrayBuffer.isView(value)) {\n                return true;\n            }\n            else if (typeof value === type) {\n                return true;\n            }\n        }\n        else if (value instanceof type) {\n            return true;\n        }\n        return false;\n    }\n    static assert(value, name, ...types) {\n        for (const type of types) {\n            if (this.isType(value, type)) {\n                return;\n            }\n        }\n        const typeNames = types.map(o => o instanceof Function && \"name\" in o ? o.name : `${o}`);\n        throw new ArgumentError(`Parameter '${name}' is not of type ${typeNames.length > 1 ? `(${typeNames.join(\" or \")})` : typeNames[0]}`);\n    }\n}\nArgumentError.NAME = \"ArgumentError\";\n\nclass ParameterError extends TypeError {\n    static assert(...args) {\n        let target = null;\n        let params;\n        let fields;\n        if (typeof args[0] === \"string\") {\n            target = args[0];\n            params = args[1];\n            fields = args.slice(2);\n        }\n        else {\n            params = args[0];\n            fields = args.slice(1);\n        }\n        ArgumentError.assert(params, \"parameters\", \"object\");\n        for (const field of fields) {\n            const value = params[field];\n            if (value === undefined || value === null) {\n                throw new ParameterError(field, target);\n            }\n        }\n    }\n    static assertEmpty(value, name, target) {\n        if (value === undefined || value === null) {\n            throw new ParameterError(name, target);\n        }\n    }\n    constructor(field, target = null, message) {\n        super();\n        this.name = ParameterError.NAME;\n        this.field = field;\n        if (target) {\n            this.target = target;\n        }\n        if (message) {\n            this.message = message;\n        }\n        else {\n            this.message = `Absent mandatory parameter '${field}' ${target ? ` in '${target}'` : EMPTY_STRING}`;\n        }\n    }\n}\nParameterError.NAME = \"ParameterError\";\n\nclass AsnError extends Error {\n    static assertSchema(asn1, target) {\n        if (!asn1.verified) {\n            throw new Error(`Object's schema was not verified against input data for ${target}`);\n        }\n    }\n    static assert(asn, target) {\n        if (asn.offset === -1) {\n            throw new AsnError(`Error during parsing of ASN.1 data. Data is not correct for '${target}'.`);\n        }\n    }\n    constructor(message) {\n        super(message);\n        this.name = \"AsnError\";\n    }\n}\n\nclass PkiObject {\n    static blockName() {\n        return this.CLASS_NAME;\n    }\n    static fromBER(raw) {\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(raw);\n        AsnError.assert(asn1, this.name);\n        try {\n            return new this({ schema: asn1.result });\n        }\n        catch (e) {\n            throw new AsnError(`Cannot create '${this.CLASS_NAME}' from ASN.1 object`);\n        }\n    }\n    static defaultValues(memberName) {\n        throw new Error(`Invalid member name for ${this.CLASS_NAME} class: ${memberName}`);\n    }\n    static schema(parameters = {}) {\n        throw new Error(`Method '${this.CLASS_NAME}.schema' should be overridden`);\n    }\n    get className() {\n        return this.constructor.CLASS_NAME;\n    }\n    toString(encoding = \"hex\") {\n        let schema;\n        try {\n            schema = this.toSchema();\n        }\n        catch {\n            schema = this.toSchema(true);\n        }\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToString(schema.toBER(), encoding);\n    }\n}\nPkiObject.CLASS_NAME = \"PkiObject\";\n\nfunction stringPrep(inputString) {\n    let isSpace = false;\n    let cutResult = EMPTY_STRING;\n    const result = inputString.trim();\n    for (let i = 0; i < result.length; i++) {\n        if (result.charCodeAt(i) === 32) {\n            if (isSpace === false)\n                isSpace = true;\n        }\n        else {\n            if (isSpace) {\n                cutResult += \" \";\n                isSpace = false;\n            }\n            cutResult += result[i];\n        }\n    }\n    return cutResult.toLowerCase();\n}\n\nconst TYPE$5 = \"type\";\nconst VALUE$6 = \"value\";\nclass AttributeTypeAndValue extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TYPE$5, AttributeTypeAndValue.defaultValues(TYPE$5));\n        this.value = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUE$6, AttributeTypeAndValue.defaultValues(VALUE$6));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE$5:\n                return EMPTY_STRING;\n            case VALUE$6:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.type || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.value || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            TYPE$5,\n            \"typeValue\"\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AttributeTypeAndValue.schema({\n            names: {\n                type: TYPE$5,\n                value: \"typeValue\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.type = asn1.result.type.valueBlock.toString();\n        this.value = asn1.result.typeValue;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.type }),\n                this.value\n            ]\n        }));\n    }\n    toJSON() {\n        const _object = {\n            type: this.type\n        };\n        if (Object.keys(this.value).length !== 0) {\n            _object.value = (this.value).toJSON();\n        }\n        else {\n            _object.value = this.value;\n        }\n        return _object;\n    }\n    isEqual(compareTo) {\n        const stringBlockNames = [\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.Utf8String.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.BmpString.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.UniversalString.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.NumericString.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.TeletexString.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.VideotexString.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.IA5String.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.GraphicString.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.VisibleString.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralString.blockName(),\n            asn1js__WEBPACK_IMPORTED_MODULE_0__.CharacterString.blockName()\n        ];\n        if (compareTo instanceof ArrayBuffer) {\n            return pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(this.value.valueBeforeDecodeView, compareTo);\n        }\n        if (compareTo.constructor.blockName() === AttributeTypeAndValue.blockName()) {\n            if (this.type !== compareTo.type)\n                return false;\n            const isStringPair = [false, false];\n            const thisName = this.value.constructor.blockName();\n            for (const name of stringBlockNames) {\n                if (thisName === name) {\n                    isStringPair[0] = true;\n                }\n                if (compareTo.value.constructor.blockName() === name) {\n                    isStringPair[1] = true;\n                }\n            }\n            if (isStringPair[0] !== isStringPair[1]) {\n                return false;\n            }\n            const isString = (isStringPair[0] && isStringPair[1]);\n            if (isString) {\n                const value1 = stringPrep(this.value.valueBlock.value);\n                const value2 = stringPrep(compareTo.value.valueBlock.value);\n                if (value1.localeCompare(value2) !== 0)\n                    return false;\n            }\n            else {\n                if (!pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(this.value.valueBeforeDecodeView, compareTo.value.valueBeforeDecodeView))\n                    return false;\n            }\n            return true;\n        }\n        return false;\n    }\n}\nAttributeTypeAndValue.CLASS_NAME = \"AttributeTypeAndValue\";\n\nconst TYPE_AND_VALUES = \"typesAndValues\";\nconst VALUE_BEFORE_DECODE = \"valueBeforeDecode\";\nconst RDN = \"RDN\";\nclass RelativeDistinguishedNames extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.typesAndValues = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TYPE_AND_VALUES, RelativeDistinguishedNames.defaultValues(TYPE_AND_VALUES));\n        this.valueBeforeDecode = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUE_BEFORE_DECODE, RelativeDistinguishedNames.defaultValues(VALUE_BEFORE_DECODE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE_AND_VALUES:\n                return [];\n            case VALUE_BEFORE_DECODE:\n                return EMPTY_BUFFER;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TYPE_AND_VALUES:\n                return (memberValue.length === 0);\n            case VALUE_BEFORE_DECODE:\n                return (memberValue.byteLength === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.repeatedSequence || EMPTY_STRING),\n                    value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                        value: [\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                                name: (names.repeatedSet || EMPTY_STRING),\n                                value: AttributeTypeAndValue.schema(names.typeAndValue || {})\n                            })\n                        ]\n                    })\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            RDN,\n            TYPE_AND_VALUES\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RelativeDistinguishedNames.schema({\n            names: {\n                blockName: RDN,\n                repeatedSet: TYPE_AND_VALUES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (TYPE_AND_VALUES in asn1.result) {\n            this.typesAndValues = Array.from(asn1.result.typesAndValues, element => new AttributeTypeAndValue({ schema: element }));\n        }\n        this.valueBeforeDecode = asn1.result.RDN.valueBeforeDecodeView.slice().buffer;\n    }\n    toSchema() {\n        if (this.valueBeforeDecode.byteLength === 0) {\n            return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                        value: Array.from(this.typesAndValues, o => o.toSchema())\n                    })]\n            }));\n        }\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.valueBeforeDecode);\n        AsnError.assert(asn1, \"RelativeDistinguishedNames\");\n        if (!(asn1.result instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence)) {\n            throw new Error(\"ASN.1 result should be SEQUENCE\");\n        }\n        return asn1.result;\n    }\n    toJSON() {\n        return {\n            typesAndValues: Array.from(this.typesAndValues, o => o.toJSON())\n        };\n    }\n    isEqual(compareTo) {\n        if (compareTo instanceof RelativeDistinguishedNames) {\n            if (this.typesAndValues.length !== compareTo.typesAndValues.length)\n                return false;\n            for (const [index, typeAndValue] of this.typesAndValues.entries()) {\n                if (typeAndValue.isEqual(compareTo.typesAndValues[index]) === false)\n                    return false;\n            }\n            return true;\n        }\n        if (compareTo instanceof ArrayBuffer) {\n            return pvutils__WEBPACK_IMPORTED_MODULE_2__.isEqualBuffer(this.valueBeforeDecode, compareTo);\n        }\n        return false;\n    }\n}\nRelativeDistinguishedNames.CLASS_NAME = \"RelativeDistinguishedNames\";\n\nconst TYPE$4 = \"type\";\nconst VALUE$5 = \"value\";\nfunction builtInStandardAttributes(parameters = {}, optional = false) {\n    const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n    return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n        optional,\n        value: [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 2,\n                    tagNumber: 1\n                },\n                name: (names.country_name || EMPTY_STRING),\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                        value: [\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.NumericString(),\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString()\n                        ]\n                    })\n                ]\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 2,\n                    tagNumber: 2\n                },\n                name: (names.administration_domain_name || EMPTY_STRING),\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                        value: [\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.NumericString(),\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString()\n                        ]\n                    })\n                ]\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                name: (names.network_address || EMPTY_STRING),\n                isHexOnly: true\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                name: (names.terminal_identifier || EMPTY_STRING),\n                isHexOnly: true\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                name: (names.private_domain_name || EMPTY_STRING),\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                        value: [\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.NumericString(),\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString()\n                        ]\n                    })\n                ]\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                name: (names.organization_name || EMPTY_STRING),\n                isHexOnly: true\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                optional: true,\n                name: (names.numeric_user_identifier || EMPTY_STRING),\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 4\n                },\n                isHexOnly: true\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                name: (names.personal_name || EMPTY_STRING),\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 5\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: 0\n                        },\n                        isHexOnly: true\n                    }),\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                        optional: true,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: 1\n                        },\n                        isHexOnly: true\n                    }),\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                        optional: true,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: 2\n                        },\n                        isHexOnly: true\n                    }),\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                        optional: true,\n                        idBlock: {\n                            tagClass: 3,\n                            tagNumber: 3\n                        },\n                        isHexOnly: true\n                    })\n                ]\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                name: (names.organizational_unit_names || EMPTY_STRING),\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 6\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                        value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString()\n                    })\n                ]\n            })\n        ]\n    }));\n}\nfunction builtInDomainDefinedAttributes(optional = false) {\n    return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n        optional,\n        value: [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString(),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString()\n        ]\n    }));\n}\nfunction extensionAttributes(optional = false) {\n    return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n        optional,\n        value: [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                isHexOnly: true\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any()]\n            })\n        ]\n    }));\n}\nclass GeneralName extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TYPE$4, GeneralName.defaultValues(TYPE$4));\n        this.value = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUE$5, GeneralName.defaultValues(VALUE$5));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE$4:\n                return 9;\n            case VALUE$5:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TYPE$4:\n                return (memberValue === GeneralName.defaultValues(memberName));\n            case VALUE$5:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier(),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any()]\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 3\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: [\n                        builtInStandardAttributes((names.builtInStandardAttributes || {}), false),\n                        builtInDomainDefinedAttributes(true),\n                        extensionAttributes(true)\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 4\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: [RelativeDistinguishedNames.schema(names.directoryName || {})]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 5\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            optional: true,\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: [\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                                    value: [\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.TeletexString(),\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString(),\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.UniversalString(),\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Utf8String(),\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.BmpString()\n                                    ]\n                                })\n                            ]\n                        }),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: [\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                                    value: [\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.TeletexString(),\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.PrintableString(),\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.UniversalString(),\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Utf8String(),\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.BmpString()\n                                    ]\n                                })\n                            ]\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 6\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 7\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 8\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            \"blockName\",\n            \"otherName\",\n            \"rfc822Name\",\n            \"dNSName\",\n            \"x400Address\",\n            \"directoryName\",\n            \"ediPartyName\",\n            \"uniformResourceIdentifier\",\n            \"iPAddress\",\n            \"registeredID\"\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, GeneralName.schema({\n            names: {\n                blockName: \"blockName\",\n                otherName: \"otherName\",\n                rfc822Name: \"rfc822Name\",\n                dNSName: \"dNSName\",\n                x400Address: \"x400Address\",\n                directoryName: {\n                    names: {\n                        blockName: \"directoryName\"\n                    }\n                },\n                ediPartyName: \"ediPartyName\",\n                uniformResourceIdentifier: \"uniformResourceIdentifier\",\n                iPAddress: \"iPAddress\",\n                registeredID: \"registeredID\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.type = asn1.result.blockName.idBlock.tagNumber;\n        switch (this.type) {\n            case 0:\n                this.value = asn1.result.blockName;\n                break;\n            case 1:\n            case 2:\n            case 6:\n                {\n                    const value = asn1.result.blockName;\n                    value.idBlock.tagClass = 1;\n                    value.idBlock.tagNumber = 22;\n                    const valueBER = value.toBER(false);\n                    const asnValue = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(valueBER);\n                    AsnError.assert(asnValue, \"GeneralName value\");\n                    this.value = asnValue.result.valueBlock.value;\n                }\n                break;\n            case 3:\n                this.value = asn1.result.blockName;\n                break;\n            case 4:\n                this.value = new RelativeDistinguishedNames({ schema: asn1.result.directoryName });\n                break;\n            case 5:\n                this.value = asn1.result.ediPartyName;\n                break;\n            case 7:\n                this.value = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: asn1.result.blockName.valueBlock.valueHex });\n                break;\n            case 8:\n                {\n                    const value = asn1.result.blockName;\n                    value.idBlock.tagClass = 1;\n                    value.idBlock.tagNumber = 6;\n                    const valueBER = value.toBER(false);\n                    const asnValue = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(valueBER);\n                    AsnError.assert(asnValue, \"GeneralName registeredID\");\n                    this.value = asnValue.result.valueBlock.toString();\n                }\n                break;\n        }\n    }\n    toSchema() {\n        switch (this.type) {\n            case 0:\n            case 3:\n            case 5:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: this.type\n                    },\n                    value: [\n                        this.value\n                    ]\n                });\n            case 1:\n            case 2:\n            case 6:\n                {\n                    const value = new asn1js__WEBPACK_IMPORTED_MODULE_0__.IA5String({ value: this.value });\n                    value.idBlock.tagClass = 3;\n                    value.idBlock.tagNumber = this.type;\n                    return value;\n                }\n            case 4:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 4\n                    },\n                    value: [this.value.toSchema()]\n                });\n            case 7:\n                {\n                    const value = this.value;\n                    value.idBlock.tagClass = 3;\n                    value.idBlock.tagNumber = this.type;\n                    return value;\n                }\n            case 8:\n                {\n                    const value = new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.value });\n                    value.idBlock.tagClass = 3;\n                    value.idBlock.tagNumber = this.type;\n                    return value;\n                }\n            default:\n                return GeneralName.schema();\n        }\n    }\n    toJSON() {\n        const _object = {\n            type: this.type,\n            value: EMPTY_STRING\n        };\n        if ((typeof this.value) === \"string\")\n            _object.value = this.value;\n        else {\n            try {\n                _object.value = this.value.toJSON();\n            }\n            catch (ex) {\n            }\n        }\n        return _object;\n    }\n}\nGeneralName.CLASS_NAME = \"GeneralName\";\n\nconst ACCESS_METHOD = \"accessMethod\";\nconst ACCESS_LOCATION = \"accessLocation\";\nconst CLEAR_PROPS$1v = [\n    ACCESS_METHOD,\n    ACCESS_LOCATION,\n];\nclass AccessDescription extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.accessMethod = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ACCESS_METHOD, AccessDescription.defaultValues(ACCESS_METHOD));\n        this.accessLocation = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ACCESS_LOCATION, AccessDescription.defaultValues(ACCESS_LOCATION));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ACCESS_METHOD:\n                return EMPTY_STRING;\n            case ACCESS_LOCATION:\n                return new GeneralName();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.accessMethod || EMPTY_STRING) }),\n                GeneralName.schema(names.accessLocation || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1v);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AccessDescription.schema({\n            names: {\n                accessMethod: ACCESS_METHOD,\n                accessLocation: {\n                    names: {\n                        blockName: ACCESS_LOCATION\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.accessMethod = asn1.result.accessMethod.valueBlock.toString();\n        this.accessLocation = new GeneralName({ schema: asn1.result.accessLocation });\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.accessMethod }),\n                this.accessLocation.toSchema()\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            accessMethod: this.accessMethod,\n            accessLocation: this.accessLocation.toJSON()\n        };\n    }\n}\nAccessDescription.CLASS_NAME = \"AccessDescription\";\n\nconst SECONDS = \"seconds\";\nconst MILLIS = \"millis\";\nconst MICROS = \"micros\";\nclass Accuracy extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (SECONDS in parameters) {\n            this.seconds = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SECONDS, Accuracy.defaultValues(SECONDS));\n        }\n        if (MILLIS in parameters) {\n            this.millis = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MILLIS, Accuracy.defaultValues(MILLIS));\n        }\n        if (MICROS in parameters) {\n            this.micros = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MICROS, Accuracy.defaultValues(MICROS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SECONDS:\n            case MILLIS:\n            case MICROS:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SECONDS:\n            case MILLIS:\n            case MICROS:\n                return (memberValue === Accuracy.defaultValues(memberName));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            optional: true,\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n                    optional: true,\n                    name: (names.seconds || EMPTY_STRING)\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.millis || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.micros || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            SECONDS,\n            MILLIS,\n            MICROS,\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, Accuracy.schema({\n            names: {\n                seconds: SECONDS,\n                millis: MILLIS,\n                micros: MICROS,\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (\"seconds\" in asn1.result) {\n            this.seconds = asn1.result.seconds.valueBlock.valueDec;\n        }\n        if (\"millis\" in asn1.result) {\n            const intMillis = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: asn1.result.millis.valueBlock.valueHex });\n            this.millis = intMillis.valueBlock.valueDec;\n        }\n        if (\"micros\" in asn1.result) {\n            const intMicros = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: asn1.result.micros.valueBlock.valueHex });\n            this.micros = intMicros.valueBlock.valueDec;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.seconds !== undefined)\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.seconds }));\n        if (this.millis !== undefined) {\n            const intMillis = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.millis });\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                valueHex: intMillis.valueBlock.valueHexView\n            }));\n        }\n        if (this.micros !== undefined) {\n            const intMicros = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.micros });\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: intMicros.valueBlock.valueHexView\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const _object = {};\n        if (this.seconds !== undefined)\n            _object.seconds = this.seconds;\n        if (this.millis !== undefined)\n            _object.millis = this.millis;\n        if (this.micros !== undefined)\n            _object.micros = this.micros;\n        return _object;\n    }\n}\nAccuracy.CLASS_NAME = \"Accuracy\";\n\nconst ALGORITHM_ID = \"algorithmId\";\nconst ALGORITHM_PARAMS = \"algorithmParams\";\nconst ALGORITHM$2 = \"algorithm\";\nconst PARAMS = \"params\";\nconst CLEAR_PROPS$1u = [\n    ALGORITHM$2,\n    PARAMS\n];\nclass AlgorithmIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.algorithmId = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ALGORITHM_ID, AlgorithmIdentifier.defaultValues(ALGORITHM_ID));\n        if (ALGORITHM_PARAMS in parameters) {\n            this.algorithmParams = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ALGORITHM_PARAMS, AlgorithmIdentifier.defaultValues(ALGORITHM_PARAMS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ALGORITHM_ID:\n                return EMPTY_STRING;\n            case ALGORITHM_PARAMS:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ALGORITHM_ID:\n                return (memberValue === EMPTY_STRING);\n            case ALGORITHM_PARAMS:\n                return (memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            optional: (names.optional || false),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.algorithmIdentifier || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.algorithmParams || EMPTY_STRING), optional: true })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1u);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AlgorithmIdentifier.schema({\n            names: {\n                algorithmIdentifier: ALGORITHM$2,\n                algorithmParams: PARAMS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.algorithmId = asn1.result.algorithm.valueBlock.toString();\n        if (PARAMS in asn1.result) {\n            this.algorithmParams = asn1.result.params;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.algorithmId }));\n        if (this.algorithmParams && !(this.algorithmParams instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any)) {\n            outputArray.push(this.algorithmParams);\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {\n            algorithmId: this.algorithmId\n        };\n        if (this.algorithmParams && !(this.algorithmParams instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any)) {\n            object.algorithmParams = this.algorithmParams.toJSON();\n        }\n        return object;\n    }\n    isEqual(algorithmIdentifier) {\n        if (!(algorithmIdentifier instanceof AlgorithmIdentifier)) {\n            return false;\n        }\n        if (this.algorithmId !== algorithmIdentifier.algorithmId) {\n            return false;\n        }\n        if (this.algorithmParams) {\n            if (algorithmIdentifier.algorithmParams) {\n                return JSON.stringify(this.algorithmParams) === JSON.stringify(algorithmIdentifier.algorithmParams);\n            }\n            return false;\n        }\n        if (algorithmIdentifier.algorithmParams) {\n            return false;\n        }\n        return true;\n    }\n}\nAlgorithmIdentifier.CLASS_NAME = \"AlgorithmIdentifier\";\n\nconst ALT_NAMES = \"altNames\";\nconst CLEAR_PROPS$1t = [\n    ALT_NAMES\n];\nclass AltName extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.altNames = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ALT_NAMES, AltName.defaultValues(ALT_NAMES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ALT_NAMES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.altNames || EMPTY_STRING),\n                    value: GeneralName.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1t);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AltName.schema({\n            names: {\n                altNames: ALT_NAMES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (ALT_NAMES in asn1.result) {\n            this.altNames = Array.from(asn1.result.altNames, element => new GeneralName({ schema: element }));\n        }\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.altNames, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            altNames: Array.from(this.altNames, o => o.toJSON())\n        };\n    }\n}\nAltName.CLASS_NAME = \"AltName\";\n\nconst TYPE$3 = \"type\";\nconst VALUES$1 = \"values\";\nconst CLEAR_PROPS$1s = [\n    TYPE$3,\n    VALUES$1\n];\nclass Attribute extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TYPE$3, Attribute.defaultValues(TYPE$3));\n        this.values = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUES$1, Attribute.defaultValues(VALUES$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE$3:\n                return EMPTY_STRING;\n            case VALUES$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TYPE$3:\n                return (memberValue === EMPTY_STRING);\n            case VALUES$1:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.type || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    name: (names.setName || EMPTY_STRING),\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.values || EMPTY_STRING),\n                            value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1s);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, Attribute.schema({\n            names: {\n                type: TYPE$3,\n                values: VALUES$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.type = asn1.result.type.valueBlock.toString();\n        this.values = asn1.result.values;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.type }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    value: this.values\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            type: this.type,\n            values: Array.from(this.values, o => o.toJSON())\n        };\n    }\n}\nAttribute.CLASS_NAME = \"Attribute\";\n\nconst NOT_BEFORE_TIME = \"notBeforeTime\";\nconst NOT_AFTER_TIME = \"notAfterTime\";\nconst CLEAR_PROPS$1r = [\n    NOT_BEFORE_TIME,\n    NOT_AFTER_TIME,\n];\nclass AttCertValidityPeriod extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.notBeforeTime = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NOT_BEFORE_TIME, AttCertValidityPeriod.defaultValues(NOT_BEFORE_TIME));\n        this.notAfterTime = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NOT_AFTER_TIME, AttCertValidityPeriod.defaultValues(NOT_AFTER_TIME));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case NOT_BEFORE_TIME:\n            case NOT_AFTER_TIME:\n                return new Date(0, 0, 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ name: (names.notBeforeTime || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ name: (names.notAfterTime || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1r);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AttCertValidityPeriod.schema({\n            names: {\n                notBeforeTime: NOT_BEFORE_TIME,\n                notAfterTime: NOT_AFTER_TIME\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.notBeforeTime = asn1.result.notBeforeTime.toDate();\n        this.notAfterTime = asn1.result.notAfterTime.toDate();\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueDate: this.notBeforeTime }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueDate: this.notAfterTime }),\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            notBeforeTime: this.notBeforeTime,\n            notAfterTime: this.notAfterTime\n        };\n    }\n}\nAttCertValidityPeriod.CLASS_NAME = \"AttCertValidityPeriod\";\n\nconst NAMES = \"names\";\nconst GENERAL_NAMES = \"generalNames\";\nclass GeneralNames extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NAMES, GeneralNames.defaultValues(NAMES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case \"names\":\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}, optional = false) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NAMES, {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            optional,\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.generalNames || EMPTY_STRING),\n                    value: GeneralName.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            NAMES,\n            GENERAL_NAMES\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, GeneralNames.schema({\n            names: {\n                blockName: NAMES,\n                generalNames: GENERAL_NAMES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.names = Array.from(asn1.result.generalNames, element => new GeneralName({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.names, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            names: Array.from(this.names, o => o.toJSON())\n        };\n    }\n}\nGeneralNames.CLASS_NAME = \"GeneralNames\";\n\nconst id_SubjectDirectoryAttributes = \"2.5.29.9\";\nconst id_SubjectKeyIdentifier = \"2.5.29.14\";\nconst id_KeyUsage = \"2.5.29.15\";\nconst id_PrivateKeyUsagePeriod = \"2.5.29.16\";\nconst id_SubjectAltName = \"2.5.29.17\";\nconst id_IssuerAltName = \"2.5.29.18\";\nconst id_BasicConstraints = \"2.5.29.19\";\nconst id_CRLNumber = \"2.5.29.20\";\nconst id_BaseCRLNumber = \"2.5.29.27\";\nconst id_CRLReason = \"2.5.29.21\";\nconst id_InvalidityDate = \"2.5.29.24\";\nconst id_IssuingDistributionPoint = \"2.5.29.28\";\nconst id_CertificateIssuer = \"2.5.29.29\";\nconst id_NameConstraints = \"2.5.29.30\";\nconst id_CRLDistributionPoints = \"2.5.29.31\";\nconst id_FreshestCRL = \"2.5.29.46\";\nconst id_CertificatePolicies = \"2.5.29.32\";\nconst id_AnyPolicy = \"2.5.29.32.0\";\nconst id_MicrosoftAppPolicies = \"1.3.6.1.4.1.311.21.10\";\nconst id_PolicyMappings = \"2.5.29.33\";\nconst id_AuthorityKeyIdentifier = \"2.5.29.35\";\nconst id_PolicyConstraints = \"2.5.29.36\";\nconst id_ExtKeyUsage = \"2.5.29.37\";\nconst id_InhibitAnyPolicy = \"2.5.29.54\";\nconst id_AuthorityInfoAccess = \"1.3.6.1.5.5.7.1.1\";\nconst id_SubjectInfoAccess = \"1.3.6.1.5.5.7.1.11\";\nconst id_SignedCertificateTimestampList = \"1.3.6.1.4.1.11129.2.4.2\";\nconst id_MicrosoftCertTemplateV1 = \"1.3.6.1.4.1.311.20.2\";\nconst id_MicrosoftPrevCaCertHash = \"1.3.6.1.4.1.311.21.2\";\nconst id_MicrosoftCertTemplateV2 = \"1.3.6.1.4.1.311.21.7\";\nconst id_MicrosoftCaVersion = \"1.3.6.1.4.1.311.21.1\";\nconst id_QCStatements = \"1.3.6.1.5.5.7.1.3\";\nconst id_ContentType_Data = \"1.2.840.113549.1.7.1\";\nconst id_ContentType_SignedData = \"1.2.840.113549.1.7.2\";\nconst id_ContentType_EnvelopedData = \"1.2.840.113549.1.7.3\";\nconst id_ContentType_EncryptedData = \"1.2.840.113549.1.7.6\";\nconst id_eContentType_TSTInfo = \"1.2.840.113549.1.9.16.1.4\";\nconst id_CertBag_X509Certificate = \"1.2.840.113549.1.9.22.1\";\nconst id_CertBag_SDSICertificate = \"1.2.840.113549.1.9.22.2\";\nconst id_CertBag_AttributeCertificate = \"1.2.840.113549.1.9.22.3\";\nconst id_CRLBag_X509CRL = \"1.2.840.113549.1.9.23.1\";\nconst id_pkix = \"1.3.6.1.5.5.7\";\nconst id_ad = `${id_pkix}.48`;\nconst id_PKIX_OCSP_Basic = `${id_ad}.1.1`;\nconst id_ad_caIssuers = `${id_ad}.2`;\nconst id_ad_ocsp = `${id_ad}.1`;\nconst id_sha1 = \"1.3.14.3.2.26\";\nconst id_sha256 = \"2.16.840.1.101.3.4.2.1\";\nconst id_sha384 = \"2.16.840.1.101.3.4.2.2\";\nconst id_sha512 = \"2.16.840.1.101.3.4.2.3\";\n\nconst KEY_IDENTIFIER$1 = \"keyIdentifier\";\nconst AUTHORITY_CERT_ISSUER = \"authorityCertIssuer\";\nconst AUTHORITY_CERT_SERIAL_NUMBER = \"authorityCertSerialNumber\";\nconst CLEAR_PROPS$1q = [\n    KEY_IDENTIFIER$1,\n    AUTHORITY_CERT_ISSUER,\n    AUTHORITY_CERT_SERIAL_NUMBER,\n];\nclass AuthorityKeyIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (KEY_IDENTIFIER$1 in parameters) {\n            this.keyIdentifier = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_IDENTIFIER$1, AuthorityKeyIdentifier.defaultValues(KEY_IDENTIFIER$1));\n        }\n        if (AUTHORITY_CERT_ISSUER in parameters) {\n            this.authorityCertIssuer = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, AUTHORITY_CERT_ISSUER, AuthorityKeyIdentifier.defaultValues(AUTHORITY_CERT_ISSUER));\n        }\n        if (AUTHORITY_CERT_SERIAL_NUMBER in parameters) {\n            this.authorityCertSerialNumber = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, AUTHORITY_CERT_SERIAL_NUMBER, AuthorityKeyIdentifier.defaultValues(AUTHORITY_CERT_SERIAL_NUMBER));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_IDENTIFIER$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case AUTHORITY_CERT_ISSUER:\n                return [];\n            case AUTHORITY_CERT_SERIAL_NUMBER:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.keyIdentifier || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.authorityCertIssuer || EMPTY_STRING),\n                            value: GeneralName.schema()\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.authorityCertSerialNumber || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1q);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AuthorityKeyIdentifier.schema({\n            names: {\n                keyIdentifier: KEY_IDENTIFIER$1,\n                authorityCertIssuer: AUTHORITY_CERT_ISSUER,\n                authorityCertSerialNumber: AUTHORITY_CERT_SERIAL_NUMBER\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (KEY_IDENTIFIER$1 in asn1.result)\n            this.keyIdentifier = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: asn1.result.keyIdentifier.valueBlock.valueHex });\n        if (AUTHORITY_CERT_ISSUER in asn1.result)\n            this.authorityCertIssuer = Array.from(asn1.result.authorityCertIssuer, o => new GeneralName({ schema: o }));\n        if (AUTHORITY_CERT_SERIAL_NUMBER in asn1.result)\n            this.authorityCertSerialNumber = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: asn1.result.authorityCertSerialNumber.valueBlock.valueHex });\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.keyIdentifier) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                valueHex: this.keyIdentifier.valueBlock.valueHexView\n            }));\n        }\n        if (this.authorityCertIssuer) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.authorityCertIssuer, o => o.toSchema())\n            }));\n        }\n        if (this.authorityCertSerialNumber) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                valueHex: this.authorityCertSerialNumber.valueBlock.valueHexView\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {};\n        if (this.keyIdentifier) {\n            object.keyIdentifier = this.keyIdentifier.toJSON();\n        }\n        if (this.authorityCertIssuer) {\n            object.authorityCertIssuer = Array.from(this.authorityCertIssuer, o => o.toJSON());\n        }\n        if (this.authorityCertSerialNumber) {\n            object.authorityCertSerialNumber = this.authorityCertSerialNumber.toJSON();\n        }\n        return object;\n    }\n}\nAuthorityKeyIdentifier.CLASS_NAME = \"AuthorityKeyIdentifier\";\n\nconst PATH_LENGTH_CONSTRAINT = \"pathLenConstraint\";\nconst CA = \"cA\";\nclass BasicConstraints extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.cA = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CA, false);\n        if (PATH_LENGTH_CONSTRAINT in parameters) {\n            this.pathLenConstraint = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PATH_LENGTH_CONSTRAINT, 0);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CA:\n                return false;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Boolean({\n                    optional: true,\n                    name: (names.cA || EMPTY_STRING)\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n                    optional: true,\n                    name: (names.pathLenConstraint || EMPTY_STRING)\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            CA,\n            PATH_LENGTH_CONSTRAINT\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, BasicConstraints.schema({\n            names: {\n                cA: CA,\n                pathLenConstraint: PATH_LENGTH_CONSTRAINT\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (CA in asn1.result) {\n            this.cA = asn1.result.cA.valueBlock.value;\n        }\n        if (PATH_LENGTH_CONSTRAINT in asn1.result) {\n            if (asn1.result.pathLenConstraint.valueBlock.isHexOnly) {\n                this.pathLenConstraint = asn1.result.pathLenConstraint;\n            }\n            else {\n                this.pathLenConstraint = asn1.result.pathLenConstraint.valueBlock.valueDec;\n            }\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.cA !== BasicConstraints.defaultValues(CA))\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Boolean({ value: this.cA }));\n        if (PATH_LENGTH_CONSTRAINT in this) {\n            if (this.pathLenConstraint instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer) {\n                outputArray.push(this.pathLenConstraint);\n            }\n            else {\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.pathLenConstraint }));\n            }\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {};\n        if (this.cA !== BasicConstraints.defaultValues(CA)) {\n            object.cA = this.cA;\n        }\n        if (PATH_LENGTH_CONSTRAINT in this) {\n            if (this.pathLenConstraint instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer) {\n                object.pathLenConstraint = this.pathLenConstraint.toJSON();\n            }\n            else {\n                object.pathLenConstraint = this.pathLenConstraint;\n            }\n        }\n        return object;\n    }\n}\nBasicConstraints.CLASS_NAME = \"BasicConstraints\";\n\nconst CERTIFICATE_INDEX = \"certificateIndex\";\nconst KEY_INDEX = \"keyIndex\";\nclass CAVersion extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certificateIndex = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERTIFICATE_INDEX, CAVersion.defaultValues(CERTIFICATE_INDEX));\n        this.keyIndex = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_INDEX, CAVersion.defaultValues(KEY_INDEX));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERTIFICATE_INDEX:\n            case KEY_INDEX:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer());\n    }\n    fromSchema(schema) {\n        if (schema.constructor.blockName() !== asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer.blockName()) {\n            throw new Error(\"Object's schema was not verified against input data for CAVersion\");\n        }\n        let value = schema.valueBlock.valueHex.slice(0);\n        const valueView = new Uint8Array(value);\n        switch (true) {\n            case (value.byteLength < 4):\n                {\n                    const tempValue = new ArrayBuffer(4);\n                    const tempValueView = new Uint8Array(tempValue);\n                    tempValueView.set(valueView, 4 - value.byteLength);\n                    value = tempValue.slice(0);\n                }\n                break;\n            case (value.byteLength > 4):\n                {\n                    const tempValue = new ArrayBuffer(4);\n                    const tempValueView = new Uint8Array(tempValue);\n                    tempValueView.set(valueView.slice(0, 4));\n                    value = tempValue.slice(0);\n                }\n                break;\n        }\n        const keyIndexBuffer = value.slice(0, 2);\n        const keyIndexView8 = new Uint8Array(keyIndexBuffer);\n        let temp = keyIndexView8[0];\n        keyIndexView8[0] = keyIndexView8[1];\n        keyIndexView8[1] = temp;\n        const keyIndexView16 = new Uint16Array(keyIndexBuffer);\n        this.keyIndex = keyIndexView16[0];\n        const certificateIndexBuffer = value.slice(2);\n        const certificateIndexView8 = new Uint8Array(certificateIndexBuffer);\n        temp = certificateIndexView8[0];\n        certificateIndexView8[0] = certificateIndexView8[1];\n        certificateIndexView8[1] = temp;\n        const certificateIndexView16 = new Uint16Array(certificateIndexBuffer);\n        this.certificateIndex = certificateIndexView16[0];\n    }\n    toSchema() {\n        const certificateIndexBuffer = new ArrayBuffer(2);\n        const certificateIndexView = new Uint16Array(certificateIndexBuffer);\n        certificateIndexView[0] = this.certificateIndex;\n        const certificateIndexView8 = new Uint8Array(certificateIndexBuffer);\n        let temp = certificateIndexView8[0];\n        certificateIndexView8[0] = certificateIndexView8[1];\n        certificateIndexView8[1] = temp;\n        const keyIndexBuffer = new ArrayBuffer(2);\n        const keyIndexView = new Uint16Array(keyIndexBuffer);\n        keyIndexView[0] = this.keyIndex;\n        const keyIndexView8 = new Uint8Array(keyIndexBuffer);\n        temp = keyIndexView8[0];\n        keyIndexView8[0] = keyIndexView8[1];\n        keyIndexView8[1] = temp;\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n            valueHex: pvutils__WEBPACK_IMPORTED_MODULE_2__.utilConcatBuf(keyIndexBuffer, certificateIndexBuffer)\n        }));\n    }\n    toJSON() {\n        return {\n            certificateIndex: this.certificateIndex,\n            keyIndex: this.keyIndex\n        };\n    }\n}\nCAVersion.CLASS_NAME = \"CAVersion\";\n\nconst POLICY_QUALIFIER_ID = \"policyQualifierId\";\nconst QUALIFIER = \"qualifier\";\nconst CLEAR_PROPS$1p = [\n    POLICY_QUALIFIER_ID,\n    QUALIFIER\n];\nclass PolicyQualifierInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.policyQualifierId = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, POLICY_QUALIFIER_ID, PolicyQualifierInfo.defaultValues(POLICY_QUALIFIER_ID));\n        this.qualifier = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, QUALIFIER, PolicyQualifierInfo.defaultValues(QUALIFIER));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case POLICY_QUALIFIER_ID:\n                return EMPTY_STRING;\n            case QUALIFIER:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.policyQualifierId || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.qualifier || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1p);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PolicyQualifierInfo.schema({\n            names: {\n                policyQualifierId: POLICY_QUALIFIER_ID,\n                qualifier: QUALIFIER\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.policyQualifierId = asn1.result.policyQualifierId.valueBlock.toString();\n        this.qualifier = asn1.result.qualifier;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.policyQualifierId }),\n                this.qualifier\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            policyQualifierId: this.policyQualifierId,\n            qualifier: this.qualifier.toJSON()\n        };\n    }\n}\nPolicyQualifierInfo.CLASS_NAME = \"PolicyQualifierInfo\";\n\nconst POLICY_IDENTIFIER = \"policyIdentifier\";\nconst POLICY_QUALIFIERS = \"policyQualifiers\";\nconst CLEAR_PROPS$1o = [\n    POLICY_IDENTIFIER,\n    POLICY_QUALIFIERS\n];\nclass PolicyInformation extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.policyIdentifier = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, POLICY_IDENTIFIER, PolicyInformation.defaultValues(POLICY_IDENTIFIER));\n        if (POLICY_QUALIFIERS in parameters) {\n            this.policyQualifiers = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, POLICY_QUALIFIERS, PolicyInformation.defaultValues(POLICY_QUALIFIERS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case POLICY_IDENTIFIER:\n                return EMPTY_STRING;\n            case POLICY_QUALIFIERS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.policyIdentifier || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    optional: true,\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.policyQualifiers || EMPTY_STRING),\n                            value: PolicyQualifierInfo.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1o);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PolicyInformation.schema({\n            names: {\n                policyIdentifier: POLICY_IDENTIFIER,\n                policyQualifiers: POLICY_QUALIFIERS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.policyIdentifier = asn1.result.policyIdentifier.valueBlock.toString();\n        if (POLICY_QUALIFIERS in asn1.result) {\n            this.policyQualifiers = Array.from(asn1.result.policyQualifiers, element => new PolicyQualifierInfo({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.policyIdentifier }));\n        if (this.policyQualifiers) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: Array.from(this.policyQualifiers, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            policyIdentifier: this.policyIdentifier\n        };\n        if (this.policyQualifiers)\n            res.policyQualifiers = Array.from(this.policyQualifiers, o => o.toJSON());\n        return res;\n    }\n}\nPolicyInformation.CLASS_NAME = \"PolicyInformation\";\n\nconst CERTIFICATE_POLICIES = \"certificatePolicies\";\nconst CLEAR_PROPS$1n = [\n    CERTIFICATE_POLICIES,\n];\nclass CertificatePolicies extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certificatePolicies = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERTIFICATE_POLICIES, CertificatePolicies.defaultValues(CERTIFICATE_POLICIES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERTIFICATE_POLICIES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.certificatePolicies || EMPTY_STRING),\n                    value: PolicyInformation.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1n);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, CertificatePolicies.schema({\n            names: {\n                certificatePolicies: CERTIFICATE_POLICIES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.certificatePolicies = Array.from(asn1.result.certificatePolicies, element => new PolicyInformation({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.certificatePolicies, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            certificatePolicies: Array.from(this.certificatePolicies, o => o.toJSON())\n        };\n    }\n}\nCertificatePolicies.CLASS_NAME = \"CertificatePolicies\";\n\nconst TEMPLATE_ID = \"templateID\";\nconst TEMPLATE_MAJOR_VERSION = \"templateMajorVersion\";\nconst TEMPLATE_MINOR_VERSION = \"templateMinorVersion\";\nconst CLEAR_PROPS$1m = [\n    TEMPLATE_ID,\n    TEMPLATE_MAJOR_VERSION,\n    TEMPLATE_MINOR_VERSION\n];\nclass CertificateTemplate extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.templateID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TEMPLATE_ID, CertificateTemplate.defaultValues(TEMPLATE_ID));\n        if (TEMPLATE_MAJOR_VERSION in parameters) {\n            this.templateMajorVersion = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TEMPLATE_MAJOR_VERSION, CertificateTemplate.defaultValues(TEMPLATE_MAJOR_VERSION));\n        }\n        if (TEMPLATE_MINOR_VERSION in parameters) {\n            this.templateMinorVersion = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TEMPLATE_MINOR_VERSION, CertificateTemplate.defaultValues(TEMPLATE_MINOR_VERSION));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TEMPLATE_ID:\n                return EMPTY_STRING;\n            case TEMPLATE_MAJOR_VERSION:\n            case TEMPLATE_MINOR_VERSION:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.templateID || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n                    name: (names.templateMajorVersion || EMPTY_STRING),\n                    optional: true\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n                    name: (names.templateMinorVersion || EMPTY_STRING),\n                    optional: true\n                }),\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1m);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, CertificateTemplate.schema({\n            names: {\n                templateID: TEMPLATE_ID,\n                templateMajorVersion: TEMPLATE_MAJOR_VERSION,\n                templateMinorVersion: TEMPLATE_MINOR_VERSION\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.templateID = asn1.result.templateID.valueBlock.toString();\n        if (TEMPLATE_MAJOR_VERSION in asn1.result) {\n            this.templateMajorVersion = asn1.result.templateMajorVersion.valueBlock.valueDec;\n        }\n        if (TEMPLATE_MINOR_VERSION in asn1.result) {\n            this.templateMinorVersion = asn1.result.templateMinorVersion.valueBlock.valueDec;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.templateID }));\n        if (TEMPLATE_MAJOR_VERSION in this) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.templateMajorVersion }));\n        }\n        if (TEMPLATE_MINOR_VERSION in this) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.templateMinorVersion }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            templateID: this.templateID\n        };\n        if (TEMPLATE_MAJOR_VERSION in this)\n            res.templateMajorVersion = this.templateMajorVersion;\n        if (TEMPLATE_MINOR_VERSION in this)\n            res.templateMinorVersion = this.templateMinorVersion;\n        return res;\n    }\n}\n\nconst DISTRIBUTION_POINT$1 = \"distributionPoint\";\nconst DISTRIBUTION_POINT_NAMES$1 = \"distributionPointNames\";\nconst REASONS = \"reasons\";\nconst CRL_ISSUER = \"cRLIssuer\";\nconst CRL_ISSUER_NAMES = \"cRLIssuerNames\";\nconst CLEAR_PROPS$1l = [\n    DISTRIBUTION_POINT$1,\n    DISTRIBUTION_POINT_NAMES$1,\n    REASONS,\n    CRL_ISSUER,\n    CRL_ISSUER_NAMES,\n];\nclass DistributionPoint extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (DISTRIBUTION_POINT$1 in parameters) {\n            this.distributionPoint = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DISTRIBUTION_POINT$1, DistributionPoint.defaultValues(DISTRIBUTION_POINT$1));\n        }\n        if (REASONS in parameters) {\n            this.reasons = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, REASONS, DistributionPoint.defaultValues(REASONS));\n        }\n        if (CRL_ISSUER in parameters) {\n            this.cRLIssuer = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRL_ISSUER, DistributionPoint.defaultValues(CRL_ISSUER));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DISTRIBUTION_POINT$1:\n                return [];\n            case REASONS:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            case CRL_ISSUER:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                            value: [\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                    name: (names.distributionPoint || EMPTY_STRING),\n                                    optional: true,\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    },\n                                    value: [\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                                            name: (names.distributionPointNames || EMPTY_STRING),\n                                            value: GeneralName.schema()\n                                        })\n                                    ]\n                                }),\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                    name: (names.distributionPoint || EMPTY_STRING),\n                                    optional: true,\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 1\n                                    },\n                                    value: RelativeDistinguishedNames.schema().valueBlock.value\n                                })\n                            ]\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.reasons || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.cRLIssuer || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.cRLIssuerNames || EMPTY_STRING),\n                            value: GeneralName.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1l);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, DistributionPoint.schema({\n            names: {\n                distributionPoint: DISTRIBUTION_POINT$1,\n                distributionPointNames: DISTRIBUTION_POINT_NAMES$1,\n                reasons: REASONS,\n                cRLIssuer: CRL_ISSUER,\n                cRLIssuerNames: CRL_ISSUER_NAMES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (DISTRIBUTION_POINT$1 in asn1.result) {\n            if (asn1.result.distributionPoint.idBlock.tagNumber === 0) {\n                this.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({ schema: element }));\n            }\n            if (asn1.result.distributionPoint.idBlock.tagNumber === 1) {\n                this.distributionPoint = new RelativeDistinguishedNames({\n                    schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                        value: asn1.result.distributionPoint.valueBlock.value\n                    })\n                });\n            }\n        }\n        if (REASONS in asn1.result) {\n            this.reasons = new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ valueHex: asn1.result.reasons.valueBlock.valueHex });\n        }\n        if (CRL_ISSUER in asn1.result) {\n            this.cRLIssuer = Array.from(asn1.result.cRLIssuerNames, element => new GeneralName({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.distributionPoint) {\n            let internalValue;\n            if (this.distributionPoint instanceof Array) {\n                internalValue = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: Array.from(this.distributionPoint, o => o.toSchema())\n                });\n            }\n            else {\n                internalValue = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [this.distributionPoint.toSchema()]\n                });\n            }\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [internalValue]\n            }));\n        }\n        if (this.reasons) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: this.reasons.valueBlock.valueHexView\n            }));\n        }\n        if (this.cRLIssuer) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                value: Array.from(this.cRLIssuer, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {};\n        if (this.distributionPoint) {\n            if (this.distributionPoint instanceof Array) {\n                object.distributionPoint = Array.from(this.distributionPoint, o => o.toJSON());\n            }\n            else {\n                object.distributionPoint = this.distributionPoint.toJSON();\n            }\n        }\n        if (this.reasons) {\n            object.reasons = this.reasons.toJSON();\n        }\n        if (this.cRLIssuer) {\n            object.cRLIssuer = Array.from(this.cRLIssuer, o => o.toJSON());\n        }\n        return object;\n    }\n}\nDistributionPoint.CLASS_NAME = \"DistributionPoint\";\n\nconst DISTRIBUTION_POINTS = \"distributionPoints\";\nconst CLEAR_PROPS$1k = [\n    DISTRIBUTION_POINTS\n];\nclass CRLDistributionPoints extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.distributionPoints = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DISTRIBUTION_POINTS, CRLDistributionPoints.defaultValues(DISTRIBUTION_POINTS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DISTRIBUTION_POINTS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.distributionPoints || EMPTY_STRING),\n                    value: DistributionPoint.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1k);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, CRLDistributionPoints.schema({\n            names: {\n                distributionPoints: DISTRIBUTION_POINTS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.distributionPoints = Array.from(asn1.result.distributionPoints, element => new DistributionPoint({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.distributionPoints, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            distributionPoints: Array.from(this.distributionPoints, o => o.toJSON())\n        };\n    }\n}\nCRLDistributionPoints.CLASS_NAME = \"CRLDistributionPoints\";\n\nconst KEY_PURPOSES = \"keyPurposes\";\nconst CLEAR_PROPS$1j = [\n    KEY_PURPOSES,\n];\nclass ExtKeyUsage extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyPurposes = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_PURPOSES, ExtKeyUsage.defaultValues(KEY_PURPOSES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_PURPOSES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.keyPurposes || EMPTY_STRING),\n                    value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1j);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, ExtKeyUsage.schema({\n            names: {\n                keyPurposes: KEY_PURPOSES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyPurposes = Array.from(asn1.result.keyPurposes, (element) => element.valueBlock.toString());\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.keyPurposes, element => new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: element }))\n        }));\n    }\n    toJSON() {\n        return {\n            keyPurposes: Array.from(this.keyPurposes)\n        };\n    }\n}\nExtKeyUsage.CLASS_NAME = \"ExtKeyUsage\";\n\nconst ACCESS_DESCRIPTIONS = \"accessDescriptions\";\nclass InfoAccess extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.accessDescriptions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ACCESS_DESCRIPTIONS, InfoAccess.defaultValues(ACCESS_DESCRIPTIONS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ACCESS_DESCRIPTIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.accessDescriptions || EMPTY_STRING),\n                    value: AccessDescription.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            ACCESS_DESCRIPTIONS\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, InfoAccess.schema({\n            names: {\n                accessDescriptions: ACCESS_DESCRIPTIONS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.accessDescriptions = Array.from(asn1.result.accessDescriptions, element => new AccessDescription({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.accessDescriptions, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            accessDescriptions: Array.from(this.accessDescriptions, o => o.toJSON())\n        };\n    }\n}\nInfoAccess.CLASS_NAME = \"InfoAccess\";\n\nconst DISTRIBUTION_POINT = \"distributionPoint\";\nconst DISTRIBUTION_POINT_NAMES = \"distributionPointNames\";\nconst ONLY_CONTAINS_USER_CERTS = \"onlyContainsUserCerts\";\nconst ONLY_CONTAINS_CA_CERTS = \"onlyContainsCACerts\";\nconst ONLY_SOME_REASON = \"onlySomeReasons\";\nconst INDIRECT_CRL = \"indirectCRL\";\nconst ONLY_CONTAINS_ATTRIBUTE_CERTS = \"onlyContainsAttributeCerts\";\nconst CLEAR_PROPS$1i = [\n    DISTRIBUTION_POINT,\n    DISTRIBUTION_POINT_NAMES,\n    ONLY_CONTAINS_USER_CERTS,\n    ONLY_CONTAINS_CA_CERTS,\n    ONLY_SOME_REASON,\n    INDIRECT_CRL,\n    ONLY_CONTAINS_ATTRIBUTE_CERTS,\n];\nclass IssuingDistributionPoint extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (DISTRIBUTION_POINT in parameters) {\n            this.distributionPoint = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DISTRIBUTION_POINT, IssuingDistributionPoint.defaultValues(DISTRIBUTION_POINT));\n        }\n        this.onlyContainsUserCerts = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ONLY_CONTAINS_USER_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS));\n        this.onlyContainsCACerts = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ONLY_CONTAINS_CA_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS));\n        if (ONLY_SOME_REASON in parameters) {\n            this.onlySomeReasons = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ONLY_SOME_REASON, IssuingDistributionPoint.defaultValues(ONLY_SOME_REASON));\n        }\n        this.indirectCRL = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, INDIRECT_CRL, IssuingDistributionPoint.defaultValues(INDIRECT_CRL));\n        this.onlyContainsAttributeCerts = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ONLY_CONTAINS_ATTRIBUTE_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DISTRIBUTION_POINT:\n                return [];\n            case ONLY_CONTAINS_USER_CERTS:\n                return false;\n            case ONLY_CONTAINS_CA_CERTS:\n                return false;\n            case ONLY_SOME_REASON:\n                return 0;\n            case INDIRECT_CRL:\n                return false;\n            case ONLY_CONTAINS_ATTRIBUTE_CERTS:\n                return false;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                            value: [\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                    name: (names.distributionPoint || EMPTY_STRING),\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    },\n                                    value: [\n                                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                                            name: (names.distributionPointNames || EMPTY_STRING),\n                                            value: GeneralName.schema()\n                                        })\n                                    ]\n                                }),\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                    name: (names.distributionPoint || EMPTY_STRING),\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 1\n                                    },\n                                    value: RelativeDistinguishedNames.schema().valueBlock.value\n                                })\n                            ]\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.onlyContainsUserCerts || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.onlyContainsCACerts || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.onlySomeReasons || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 3\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.indirectCRL || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 4\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.onlyContainsAttributeCerts || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 5\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1i);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, IssuingDistributionPoint.schema({\n            names: {\n                distributionPoint: DISTRIBUTION_POINT,\n                distributionPointNames: DISTRIBUTION_POINT_NAMES,\n                onlyContainsUserCerts: ONLY_CONTAINS_USER_CERTS,\n                onlyContainsCACerts: ONLY_CONTAINS_CA_CERTS,\n                onlySomeReasons: ONLY_SOME_REASON,\n                indirectCRL: INDIRECT_CRL,\n                onlyContainsAttributeCerts: ONLY_CONTAINS_ATTRIBUTE_CERTS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (DISTRIBUTION_POINT in asn1.result) {\n            switch (true) {\n                case (asn1.result.distributionPoint.idBlock.tagNumber === 0):\n                    this.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({ schema: element }));\n                    break;\n                case (asn1.result.distributionPoint.idBlock.tagNumber === 1):\n                    {\n                        this.distributionPoint = new RelativeDistinguishedNames({\n                            schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                                value: asn1.result.distributionPoint.valueBlock.value\n                            })\n                        });\n                    }\n                    break;\n                default:\n                    throw new Error(\"Unknown tagNumber for distributionPoint: {$asn1.result.distributionPoint.idBlock.tagNumber}\");\n            }\n        }\n        if (ONLY_CONTAINS_USER_CERTS in asn1.result) {\n            const view = new Uint8Array(asn1.result.onlyContainsUserCerts.valueBlock.valueHex);\n            this.onlyContainsUserCerts = (view[0] !== 0x00);\n        }\n        if (ONLY_CONTAINS_CA_CERTS in asn1.result) {\n            const view = new Uint8Array(asn1.result.onlyContainsCACerts.valueBlock.valueHex);\n            this.onlyContainsCACerts = (view[0] !== 0x00);\n        }\n        if (ONLY_SOME_REASON in asn1.result) {\n            const view = new Uint8Array(asn1.result.onlySomeReasons.valueBlock.valueHex);\n            this.onlySomeReasons = view[0];\n        }\n        if (INDIRECT_CRL in asn1.result) {\n            const view = new Uint8Array(asn1.result.indirectCRL.valueBlock.valueHex);\n            this.indirectCRL = (view[0] !== 0x00);\n        }\n        if (ONLY_CONTAINS_ATTRIBUTE_CERTS in asn1.result) {\n            const view = new Uint8Array(asn1.result.onlyContainsAttributeCerts.valueBlock.valueHex);\n            this.onlyContainsAttributeCerts = (view[0] !== 0x00);\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.distributionPoint) {\n            let value;\n            if (this.distributionPoint instanceof Array) {\n                value = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: Array.from(this.distributionPoint, o => o.toSchema())\n                });\n            }\n            else {\n                value = this.distributionPoint.toSchema();\n                value.idBlock.tagClass = 3;\n                value.idBlock.tagNumber = 1;\n            }\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [value]\n            }));\n        }\n        if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS)) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: (new Uint8Array([0xFF])).buffer\n            }));\n        }\n        if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS)) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                valueHex: (new Uint8Array([0xFF])).buffer\n            }));\n        }\n        if (this.onlySomeReasons !== undefined) {\n            const buffer = new ArrayBuffer(1);\n            const view = new Uint8Array(buffer);\n            view[0] = this.onlySomeReasons;\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                valueHex: buffer\n            }));\n        }\n        if (this.indirectCRL !== IssuingDistributionPoint.defaultValues(INDIRECT_CRL)) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 4\n                },\n                valueHex: (new Uint8Array([0xFF])).buffer\n            }));\n        }\n        if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS)) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 5\n                },\n                valueHex: (new Uint8Array([0xFF])).buffer\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const obj = {};\n        if (this.distributionPoint) {\n            if (this.distributionPoint instanceof Array) {\n                obj.distributionPoint = Array.from(this.distributionPoint, o => o.toJSON());\n            }\n            else {\n                obj.distributionPoint = this.distributionPoint.toJSON();\n            }\n        }\n        if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS)) {\n            obj.onlyContainsUserCerts = this.onlyContainsUserCerts;\n        }\n        if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS)) {\n            obj.onlyContainsCACerts = this.onlyContainsCACerts;\n        }\n        if (ONLY_SOME_REASON in this) {\n            obj.onlySomeReasons = this.onlySomeReasons;\n        }\n        if (this.indirectCRL !== IssuingDistributionPoint.defaultValues(INDIRECT_CRL)) {\n            obj.indirectCRL = this.indirectCRL;\n        }\n        if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS)) {\n            obj.onlyContainsAttributeCerts = this.onlyContainsAttributeCerts;\n        }\n        return obj;\n    }\n}\nIssuingDistributionPoint.CLASS_NAME = \"IssuingDistributionPoint\";\n\nconst BASE = \"base\";\nconst MINIMUM = \"minimum\";\nconst MAXIMUM = \"maximum\";\nconst CLEAR_PROPS$1h = [\n    BASE,\n    MINIMUM,\n    MAXIMUM\n];\nclass GeneralSubtree extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.base = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, BASE, GeneralSubtree.defaultValues(BASE));\n        this.minimum = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MINIMUM, GeneralSubtree.defaultValues(MINIMUM));\n        if (MAXIMUM in parameters) {\n            this.maximum = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MAXIMUM, GeneralSubtree.defaultValues(MAXIMUM));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case BASE:\n                return new GeneralName();\n            case MINIMUM:\n                return 0;\n            case MAXIMUM:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                GeneralName.schema(names.base || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.minimum || EMPTY_STRING) })]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.maximum || EMPTY_STRING) })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1h);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, GeneralSubtree.schema({\n            names: {\n                base: {\n                    names: {\n                        blockName: BASE\n                    }\n                },\n                minimum: MINIMUM,\n                maximum: MAXIMUM\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.base = new GeneralName({ schema: asn1.result.base });\n        if (MINIMUM in asn1.result) {\n            if (asn1.result.minimum.valueBlock.isHexOnly)\n                this.minimum = asn1.result.minimum;\n            else\n                this.minimum = asn1.result.minimum.valueBlock.valueDec;\n        }\n        if (MAXIMUM in asn1.result) {\n            if (asn1.result.maximum.valueBlock.isHexOnly)\n                this.maximum = asn1.result.maximum;\n            else\n                this.maximum = asn1.result.maximum.valueBlock.valueDec;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.base.toSchema());\n        if (this.minimum !== 0) {\n            let valueMinimum = 0;\n            if (this.minimum instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer) {\n                valueMinimum = this.minimum;\n            }\n            else {\n                valueMinimum = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.minimum });\n            }\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [valueMinimum]\n            }));\n        }\n        if (MAXIMUM in this) {\n            let valueMaximum = 0;\n            if (this.maximum instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer) {\n                valueMaximum = this.maximum;\n            }\n            else {\n                valueMaximum = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.maximum });\n            }\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [valueMaximum]\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            base: this.base.toJSON()\n        };\n        if (this.minimum !== 0) {\n            if (typeof this.minimum === \"number\") {\n                res.minimum = this.minimum;\n            }\n            else {\n                res.minimum = this.minimum.toJSON();\n            }\n        }\n        if (this.maximum !== undefined) {\n            if (typeof this.maximum === \"number\") {\n                res.maximum = this.maximum;\n            }\n            else {\n                res.maximum = this.maximum.toJSON();\n            }\n        }\n        return res;\n    }\n}\nGeneralSubtree.CLASS_NAME = \"GeneralSubtree\";\n\nconst PERMITTED_SUBTREES = \"permittedSubtrees\";\nconst EXCLUDED_SUBTREES = \"excludedSubtrees\";\nconst CLEAR_PROPS$1g = [\n    PERMITTED_SUBTREES,\n    EXCLUDED_SUBTREES\n];\nclass NameConstraints extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (PERMITTED_SUBTREES in parameters) {\n            this.permittedSubtrees = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PERMITTED_SUBTREES, NameConstraints.defaultValues(PERMITTED_SUBTREES));\n        }\n        if (EXCLUDED_SUBTREES in parameters) {\n            this.excludedSubtrees = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXCLUDED_SUBTREES, NameConstraints.defaultValues(EXCLUDED_SUBTREES));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case PERMITTED_SUBTREES:\n            case EXCLUDED_SUBTREES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.permittedSubtrees || EMPTY_STRING),\n                            value: GeneralSubtree.schema()\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.excludedSubtrees || EMPTY_STRING),\n                            value: GeneralSubtree.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1g);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, NameConstraints.schema({\n            names: {\n                permittedSubtrees: PERMITTED_SUBTREES,\n                excludedSubtrees: EXCLUDED_SUBTREES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (PERMITTED_SUBTREES in asn1.result)\n            this.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, element => new GeneralSubtree({ schema: element }));\n        if (EXCLUDED_SUBTREES in asn1.result)\n            this.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, element => new GeneralSubtree({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.permittedSubtrees) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: Array.from(this.permittedSubtrees, o => o.toSchema())\n            }));\n        }\n        if (this.excludedSubtrees) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.excludedSubtrees, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {};\n        if (this.permittedSubtrees) {\n            object.permittedSubtrees = Array.from(this.permittedSubtrees, o => o.toJSON());\n        }\n        if (this.excludedSubtrees) {\n            object.excludedSubtrees = Array.from(this.excludedSubtrees, o => o.toJSON());\n        }\n        return object;\n    }\n}\nNameConstraints.CLASS_NAME = \"NameConstraints\";\n\nconst REQUIRE_EXPLICIT_POLICY = \"requireExplicitPolicy\";\nconst INHIBIT_POLICY_MAPPING = \"inhibitPolicyMapping\";\nconst CLEAR_PROPS$1f = [\n    REQUIRE_EXPLICIT_POLICY,\n    INHIBIT_POLICY_MAPPING,\n];\nclass PolicyConstraints extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (REQUIRE_EXPLICIT_POLICY in parameters) {\n            this.requireExplicitPolicy = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, REQUIRE_EXPLICIT_POLICY, PolicyConstraints.defaultValues(REQUIRE_EXPLICIT_POLICY));\n        }\n        if (INHIBIT_POLICY_MAPPING in parameters) {\n            this.inhibitPolicyMapping = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, INHIBIT_POLICY_MAPPING, PolicyConstraints.defaultValues(INHIBIT_POLICY_MAPPING));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case REQUIRE_EXPLICIT_POLICY:\n                return 0;\n            case INHIBIT_POLICY_MAPPING:\n                return 0;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.requireExplicitPolicy || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.inhibitPolicyMapping || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1f);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PolicyConstraints.schema({\n            names: {\n                requireExplicitPolicy: REQUIRE_EXPLICIT_POLICY,\n                inhibitPolicyMapping: INHIBIT_POLICY_MAPPING\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (REQUIRE_EXPLICIT_POLICY in asn1.result) {\n            const field1 = asn1.result.requireExplicitPolicy;\n            field1.idBlock.tagClass = 1;\n            field1.idBlock.tagNumber = 2;\n            const ber1 = field1.toBER(false);\n            const int1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(ber1);\n            AsnError.assert(int1, \"Integer\");\n            this.requireExplicitPolicy = int1.result.valueBlock.valueDec;\n        }\n        if (INHIBIT_POLICY_MAPPING in asn1.result) {\n            const field2 = asn1.result.inhibitPolicyMapping;\n            field2.idBlock.tagClass = 1;\n            field2.idBlock.tagNumber = 2;\n            const ber2 = field2.toBER(false);\n            const int2 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(ber2);\n            AsnError.assert(int2, \"Integer\");\n            this.inhibitPolicyMapping = int2.result.valueBlock.valueDec;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (REQUIRE_EXPLICIT_POLICY in this) {\n            const int1 = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.requireExplicitPolicy });\n            int1.idBlock.tagClass = 3;\n            int1.idBlock.tagNumber = 0;\n            outputArray.push(int1);\n        }\n        if (INHIBIT_POLICY_MAPPING in this) {\n            const int2 = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.inhibitPolicyMapping });\n            int2.idBlock.tagClass = 3;\n            int2.idBlock.tagNumber = 1;\n            outputArray.push(int2);\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (REQUIRE_EXPLICIT_POLICY in this) {\n            res.requireExplicitPolicy = this.requireExplicitPolicy;\n        }\n        if (INHIBIT_POLICY_MAPPING in this) {\n            res.inhibitPolicyMapping = this.inhibitPolicyMapping;\n        }\n        return res;\n    }\n}\nPolicyConstraints.CLASS_NAME = \"PolicyConstraints\";\n\nconst ISSUER_DOMAIN_POLICY = \"issuerDomainPolicy\";\nconst SUBJECT_DOMAIN_POLICY = \"subjectDomainPolicy\";\nconst CLEAR_PROPS$1e = [\n    ISSUER_DOMAIN_POLICY,\n    SUBJECT_DOMAIN_POLICY\n];\nclass PolicyMapping extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.issuerDomainPolicy = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER_DOMAIN_POLICY, PolicyMapping.defaultValues(ISSUER_DOMAIN_POLICY));\n        this.subjectDomainPolicy = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SUBJECT_DOMAIN_POLICY, PolicyMapping.defaultValues(SUBJECT_DOMAIN_POLICY));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ISSUER_DOMAIN_POLICY:\n                return EMPTY_STRING;\n            case SUBJECT_DOMAIN_POLICY:\n                return EMPTY_STRING;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.issuerDomainPolicy || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.subjectDomainPolicy || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1e);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PolicyMapping.schema({\n            names: {\n                issuerDomainPolicy: ISSUER_DOMAIN_POLICY,\n                subjectDomainPolicy: SUBJECT_DOMAIN_POLICY\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.issuerDomainPolicy = asn1.result.issuerDomainPolicy.valueBlock.toString();\n        this.subjectDomainPolicy = asn1.result.subjectDomainPolicy.valueBlock.toString();\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.issuerDomainPolicy }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.subjectDomainPolicy })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            issuerDomainPolicy: this.issuerDomainPolicy,\n            subjectDomainPolicy: this.subjectDomainPolicy\n        };\n    }\n}\nPolicyMapping.CLASS_NAME = \"PolicyMapping\";\n\nconst MAPPINGS = \"mappings\";\nconst CLEAR_PROPS$1d = [\n    MAPPINGS,\n];\nclass PolicyMappings extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.mappings = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MAPPINGS, PolicyMappings.defaultValues(MAPPINGS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case MAPPINGS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.mappings || EMPTY_STRING),\n                    value: PolicyMapping.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1d);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PolicyMappings.schema({\n            names: {\n                mappings: MAPPINGS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.mappings = Array.from(asn1.result.mappings, element => new PolicyMapping({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.mappings, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            mappings: Array.from(this.mappings, o => o.toJSON())\n        };\n    }\n}\nPolicyMappings.CLASS_NAME = \"PolicyMappings\";\n\nconst NOT_BEFORE$1 = \"notBefore\";\nconst NOT_AFTER$1 = \"notAfter\";\nconst CLEAR_PROPS$1c = [\n    NOT_BEFORE$1,\n    NOT_AFTER$1\n];\nclass PrivateKeyUsagePeriod extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (NOT_BEFORE$1 in parameters) {\n            this.notBefore = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NOT_BEFORE$1, PrivateKeyUsagePeriod.defaultValues(NOT_BEFORE$1));\n        }\n        if (NOT_AFTER$1 in parameters) {\n            this.notAfter = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NOT_AFTER$1, PrivateKeyUsagePeriod.defaultValues(NOT_AFTER$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case NOT_BEFORE$1:\n                return new Date();\n            case NOT_AFTER$1:\n                return new Date();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.notBefore || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.notAfter || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1c);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PrivateKeyUsagePeriod.schema({\n            names: {\n                notBefore: NOT_BEFORE$1,\n                notAfter: NOT_AFTER$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (NOT_BEFORE$1 in asn1.result) {\n            const localNotBefore = new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime();\n            localNotBefore.fromBuffer(asn1.result.notBefore.valueBlock.valueHex);\n            this.notBefore = localNotBefore.toDate();\n        }\n        if (NOT_AFTER$1 in asn1.result) {\n            const localNotAfter = new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueHex: asn1.result.notAfter.valueBlock.valueHex });\n            localNotAfter.fromBuffer(asn1.result.notAfter.valueBlock.valueHex);\n            this.notAfter = localNotAfter.toDate();\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        if (NOT_BEFORE$1 in this) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                valueHex: (new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueDate: this.notBefore })).valueBlock.valueHexView\n            }));\n        }\n        if (NOT_AFTER$1 in this) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: (new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueDate: this.notAfter })).valueBlock.valueHexView\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (this.notBefore) {\n            res.notBefore = this.notBefore;\n        }\n        if (this.notAfter) {\n            res.notAfter = this.notAfter;\n        }\n        return res;\n    }\n}\nPrivateKeyUsagePeriod.CLASS_NAME = \"PrivateKeyUsagePeriod\";\n\nconst ID = \"id\";\nconst TYPE$2 = \"type\";\nconst VALUES = \"values\";\nconst QC_STATEMENT_CLEAR_PROPS = [\n    ID,\n    TYPE$2\n];\nconst QC_STATEMENTS_CLEAR_PROPS = [\n    VALUES\n];\nclass QCStatement extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.id = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ID, QCStatement.defaultValues(ID));\n        if (TYPE$2 in parameters) {\n            this.type = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TYPE$2, QCStatement.defaultValues(TYPE$2));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ID:\n                return EMPTY_STRING;\n            case TYPE$2:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ID:\n                return (memberValue === EMPTY_STRING);\n            case TYPE$2:\n                return (memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Null);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.id || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({\n                    name: (names.type || EMPTY_STRING),\n                    optional: true\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, QC_STATEMENT_CLEAR_PROPS);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, QCStatement.schema({\n            names: {\n                id: ID,\n                type: TYPE$2\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.id = asn1.result.id.valueBlock.toString();\n        if (TYPE$2 in asn1.result)\n            this.type = asn1.result.type;\n    }\n    toSchema() {\n        const value = [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.id })\n        ];\n        if (TYPE$2 in this)\n            value.push(this.type);\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value,\n        }));\n    }\n    toJSON() {\n        const object = {\n            id: this.id\n        };\n        if (this.type) {\n            object.type = this.type.toJSON();\n        }\n        return object;\n    }\n}\nQCStatement.CLASS_NAME = \"QCStatement\";\nclass QCStatements extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.values = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUES, QCStatements.defaultValues(VALUES));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VALUES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VALUES:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.values || EMPTY_STRING),\n                    value: QCStatement.schema(names.value || {})\n                }),\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, QC_STATEMENTS_CLEAR_PROPS);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, QCStatements.schema({\n            names: {\n                values: VALUES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.values = Array.from(asn1.result.values, element => new QCStatement({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.values, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            values: Array.from(this.values, o => o.toJSON())\n        };\n    }\n}\nQCStatements.CLASS_NAME = \"QCStatements\";\n\nvar _a;\nclass ECNamedCurves {\n    static register(name, id, size) {\n        this.namedCurves[name.toLowerCase()] = this.namedCurves[id] = { name, id, size };\n    }\n    static find(nameOrId) {\n        return this.namedCurves[nameOrId.toLowerCase()] || null;\n    }\n}\n_a = ECNamedCurves;\nECNamedCurves.namedCurves = {};\n(() => {\n    _a.register(\"P-256\", \"1.2.840.10045.3.1.7\", 32);\n    _a.register(\"P-384\", \"1.3.132.0.34\", 48);\n    _a.register(\"P-521\", \"1.3.132.0.35\", 66);\n    _a.register(\"brainpoolP256r1\", \"1.3.36.3.3.2.8.1.1.7\", 32);\n    _a.register(\"brainpoolP384r1\", \"1.3.36.3.3.2.8.1.1.11\", 48);\n    _a.register(\"brainpoolP512r1\", \"1.3.36.3.3.2.8.1.1.13\", 64);\n})();\n\nconst X = \"x\";\nconst Y = \"y\";\nconst NAMED_CURVE$1 = \"namedCurve\";\nclass ECPublicKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.x = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, X, ECPublicKey.defaultValues(X));\n        this.y = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, Y, ECPublicKey.defaultValues(Y));\n        this.namedCurve = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NAMED_CURVE$1, ECPublicKey.defaultValues(NAMED_CURVE$1));\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case X:\n            case Y:\n                return EMPTY_BUFFER;\n            case NAMED_CURVE$1:\n                return EMPTY_STRING;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case X:\n            case Y:\n                return memberValue instanceof ArrayBuffer &&\n                    (pvutils__WEBPACK_IMPORTED_MODULE_2__.isEqualBuffer(memberValue, ECPublicKey.defaultValues(memberName)));\n            case NAMED_CURVE$1:\n                return typeof memberValue === \"string\" &&\n                    memberValue === ECPublicKey.defaultValues(memberName);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema() {\n        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.RawData();\n    }\n    fromSchema(schema1) {\n        const view = pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toUint8Array(schema1);\n        if (view[0] !== 0x04) {\n            throw new Error(\"Object's schema was not verified against input data for ECPublicKey\");\n        }\n        const namedCurve = ECNamedCurves.find(this.namedCurve);\n        if (!namedCurve) {\n            throw new Error(`Incorrect curve OID: ${this.namedCurve}`);\n        }\n        const coordinateLength = namedCurve.size;\n        if (view.byteLength !== (coordinateLength * 2 + 1)) {\n            throw new Error(\"Object's schema was not verified against input data for ECPublicKey\");\n        }\n        this.namedCurve = namedCurve.name;\n        this.x = view.slice(1, coordinateLength + 1).buffer;\n        this.y = view.slice(1 + coordinateLength, coordinateLength * 2 + 1).buffer;\n    }\n    toSchema() {\n        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.RawData({\n            data: pvutils__WEBPACK_IMPORTED_MODULE_2__.utilConcatBuf((new Uint8Array([0x04])).buffer, this.x, this.y)\n        });\n    }\n    toJSON() {\n        const namedCurve = ECNamedCurves.find(this.namedCurve);\n        return {\n            crv: namedCurve ? namedCurve.name : this.namedCurve,\n            x: pvutils__WEBPACK_IMPORTED_MODULE_2__.toBase64(pvutils__WEBPACK_IMPORTED_MODULE_2__.arrayBufferToString(this.x), true, true, false),\n            y: pvutils__WEBPACK_IMPORTED_MODULE_2__.toBase64(pvutils__WEBPACK_IMPORTED_MODULE_2__.arrayBufferToString(this.y), true, true, false)\n        };\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"crv\", \"x\", \"y\");\n        let coordinateLength = 0;\n        const namedCurve = ECNamedCurves.find(json.crv);\n        if (namedCurve) {\n            this.namedCurve = namedCurve.id;\n            coordinateLength = namedCurve.size;\n        }\n        const xConvertBuffer = pvutils__WEBPACK_IMPORTED_MODULE_2__.stringToArrayBuffer(pvutils__WEBPACK_IMPORTED_MODULE_2__.fromBase64(json.x, true));\n        if (xConvertBuffer.byteLength < coordinateLength) {\n            this.x = new ArrayBuffer(coordinateLength);\n            const view = new Uint8Array(this.x);\n            const convertBufferView = new Uint8Array(xConvertBuffer);\n            view.set(convertBufferView, 1);\n        }\n        else {\n            this.x = xConvertBuffer.slice(0, coordinateLength);\n        }\n        const yConvertBuffer = pvutils__WEBPACK_IMPORTED_MODULE_2__.stringToArrayBuffer(pvutils__WEBPACK_IMPORTED_MODULE_2__.fromBase64(json.y, true));\n        if (yConvertBuffer.byteLength < coordinateLength) {\n            this.y = new ArrayBuffer(coordinateLength);\n            const view = new Uint8Array(this.y);\n            const convertBufferView = new Uint8Array(yConvertBuffer);\n            view.set(convertBufferView, 1);\n        }\n        else {\n            this.y = yConvertBuffer.slice(0, coordinateLength);\n        }\n    }\n}\nECPublicKey.CLASS_NAME = \"ECPublicKey\";\n\nconst MODULUS$1 = \"modulus\";\nconst PUBLIC_EXPONENT$1 = \"publicExponent\";\nconst CLEAR_PROPS$1b = [MODULUS$1, PUBLIC_EXPONENT$1];\nclass RSAPublicKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.modulus = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MODULUS$1, RSAPublicKey.defaultValues(MODULUS$1));\n        this.publicExponent = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PUBLIC_EXPONENT$1, RSAPublicKey.defaultValues(PUBLIC_EXPONENT$1));\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case MODULUS$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case PUBLIC_EXPONENT$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.modulus || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.publicExponent || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1b);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RSAPublicKey.schema({\n            names: {\n                modulus: MODULUS$1,\n                publicExponent: PUBLIC_EXPONENT$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.modulus = asn1.result.modulus.convertFromDER(256);\n        this.publicExponent = asn1.result.publicExponent;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.modulus.convertToDER(),\n                this.publicExponent\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            n: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.modulus.valueBlock.valueHexView),\n            e: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.publicExponent.valueBlock.valueHexView),\n        };\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"n\", \"e\");\n        const array = pvutils__WEBPACK_IMPORTED_MODULE_2__.stringToArrayBuffer(pvutils__WEBPACK_IMPORTED_MODULE_2__.fromBase64(json.n, true));\n        this.modulus = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: array.slice(0, Math.pow(2, pvutils__WEBPACK_IMPORTED_MODULE_2__.nearestPowerOf2(array.byteLength))) });\n        this.publicExponent = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvutils__WEBPACK_IMPORTED_MODULE_2__.stringToArrayBuffer(pvutils__WEBPACK_IMPORTED_MODULE_2__.fromBase64(json.e, true)).slice(0, 3) });\n    }\n}\nRSAPublicKey.CLASS_NAME = \"RSAPublicKey\";\n\nconst ALGORITHM$1 = \"algorithm\";\nconst SUBJECT_PUBLIC_KEY = \"subjectPublicKey\";\nconst CLEAR_PROPS$1a = [ALGORITHM$1, SUBJECT_PUBLIC_KEY];\nclass PublicKeyInfo extends PkiObject {\n    get parsedKey() {\n        if (this._parsedKey === undefined) {\n            switch (this.algorithm.algorithmId) {\n                case \"1.2.840.10045.2.1\":\n                    if (\"algorithmParams\" in this.algorithm) {\n                        if (this.algorithm.algorithmParams.constructor.blockName() === asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier.blockName()) {\n                            try {\n                                this._parsedKey = new ECPublicKey({\n                                    namedCurve: this.algorithm.algorithmParams.valueBlock.toString(),\n                                    schema: this.subjectPublicKey.valueBlock.valueHexView\n                                });\n                            }\n                            catch (ex) {\n                            }\n                        }\n                    }\n                    break;\n                case \"1.2.840.113549.1.1.1\":\n                    {\n                        const publicKeyASN1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.subjectPublicKey.valueBlock.valueHexView);\n                        if (publicKeyASN1.offset !== -1) {\n                            try {\n                                this._parsedKey = new RSAPublicKey({ schema: publicKeyASN1.result });\n                            }\n                            catch (ex) {\n                            }\n                        }\n                    }\n                    break;\n            }\n            this._parsedKey || (this._parsedKey = null);\n        }\n        return this._parsedKey || undefined;\n    }\n    set parsedKey(value) {\n        this._parsedKey = value;\n    }\n    constructor(parameters = {}) {\n        super();\n        this.algorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ALGORITHM$1, PublicKeyInfo.defaultValues(ALGORITHM$1));\n        this.subjectPublicKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SUBJECT_PUBLIC_KEY, PublicKeyInfo.defaultValues(SUBJECT_PUBLIC_KEY));\n        const parsedKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"parsedKey\", null);\n        if (parsedKey) {\n            this.parsedKey = parsedKey;\n        }\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case SUBJECT_PUBLIC_KEY:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.algorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.subjectPublicKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1a);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PublicKeyInfo.schema({\n            names: {\n                algorithm: {\n                    names: {\n                        blockName: ALGORITHM$1\n                    }\n                },\n                subjectPublicKey: SUBJECT_PUBLIC_KEY\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\n        this.subjectPublicKey = asn1.result.subjectPublicKey;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.algorithm.toSchema(),\n                this.subjectPublicKey\n            ]\n        }));\n    }\n    toJSON() {\n        if (!this.parsedKey) {\n            return {\n                algorithm: this.algorithm.toJSON(),\n                subjectPublicKey: this.subjectPublicKey.toJSON(),\n            };\n        }\n        const jwk = {};\n        switch (this.algorithm.algorithmId) {\n            case \"1.2.840.10045.2.1\":\n                jwk.kty = \"EC\";\n                break;\n            case \"1.2.840.113549.1.1.1\":\n                jwk.kty = \"RSA\";\n                break;\n        }\n        const publicKeyJWK = this.parsedKey.toJSON();\n        Object.assign(jwk, publicKeyJWK);\n        return jwk;\n    }\n    fromJSON(json) {\n        if (\"kty\" in json) {\n            switch (json.kty.toUpperCase()) {\n                case \"EC\":\n                    this.parsedKey = new ECPublicKey({ json });\n                    this.algorithm = new AlgorithmIdentifier({\n                        algorithmId: \"1.2.840.10045.2.1\",\n                        algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.parsedKey.namedCurve })\n                    });\n                    break;\n                case \"RSA\":\n                    this.parsedKey = new RSAPublicKey({ json });\n                    this.algorithm = new AlgorithmIdentifier({\n                        algorithmId: \"1.2.840.113549.1.1.1\",\n                        algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                    });\n                    break;\n                default:\n                    throw new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\n            }\n            this.subjectPublicKey = new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ valueHex: this.parsedKey.toSchema().toBER(false) });\n        }\n    }\n    async importKey(publicKey, crypto = getCrypto(true)) {\n        try {\n            if (!publicKey) {\n                throw new Error(\"Need to provide publicKey input parameter\");\n            }\n            const exportedKey = await crypto.exportKey(\"spki\", publicKey);\n            const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(exportedKey);\n            try {\n                this.fromSchema(asn1.result);\n            }\n            catch (exception) {\n                throw new Error(\"Error during initializing object from schema\");\n            }\n        }\n        catch (e) {\n            const message = e instanceof Error ? e.message : `${e}`;\n            throw new Error(`Error during exporting public key: ${message}`);\n        }\n    }\n}\nPublicKeyInfo.CLASS_NAME = \"PublicKeyInfo\";\n\nconst VERSION$l = \"version\";\nconst PRIVATE_KEY$1 = \"privateKey\";\nconst NAMED_CURVE = \"namedCurve\";\nconst PUBLIC_KEY$1 = \"publicKey\";\nconst CLEAR_PROPS$19 = [\n    VERSION$l,\n    PRIVATE_KEY$1,\n    NAMED_CURVE,\n    PUBLIC_KEY$1\n];\nclass ECPrivateKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$l, ECPrivateKey.defaultValues(VERSION$l));\n        this.privateKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PRIVATE_KEY$1, ECPrivateKey.defaultValues(PRIVATE_KEY$1));\n        if (NAMED_CURVE in parameters) {\n            this.namedCurve = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NAMED_CURVE, ECPrivateKey.defaultValues(NAMED_CURVE));\n        }\n        if (PUBLIC_KEY$1 in parameters) {\n            this.publicKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PUBLIC_KEY$1, ECPrivateKey.defaultValues(PUBLIC_KEY$1));\n        }\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$l:\n                return 1;\n            case PRIVATE_KEY$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case NAMED_CURVE:\n                return EMPTY_STRING;\n            case PUBLIC_KEY$1:\n                return new ECPublicKey();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$l:\n                return (memberValue === ECPrivateKey.defaultValues(memberName));\n            case PRIVATE_KEY$1:\n                return (memberValue.isEqual(ECPrivateKey.defaultValues(memberName)));\n            case NAMED_CURVE:\n                return (memberValue === EMPTY_STRING);\n            case PUBLIC_KEY$1:\n                return ((ECPublicKey.compareWithDefault(NAMED_CURVE, memberValue.namedCurve)) &&\n                    (ECPublicKey.compareWithDefault(\"x\", memberValue.x)) &&\n                    (ECPublicKey.compareWithDefault(\"y\", memberValue.y)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.privateKey || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.namedCurve || EMPTY_STRING) })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.publicKey || EMPTY_STRING) })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$19);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, ECPrivateKey.schema({\n            names: {\n                version: VERSION$l,\n                privateKey: PRIVATE_KEY$1,\n                namedCurve: NAMED_CURVE,\n                publicKey: PUBLIC_KEY$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.privateKey = asn1.result.privateKey;\n        if (NAMED_CURVE in asn1.result) {\n            this.namedCurve = asn1.result.namedCurve.valueBlock.toString();\n        }\n        if (PUBLIC_KEY$1 in asn1.result) {\n            const publicKeyData = { schema: asn1.result.publicKey.valueBlock.valueHex };\n            if (NAMED_CURVE in this) {\n                publicKeyData.namedCurve = this.namedCurve;\n            }\n            this.publicKey = new ECPublicKey(publicKeyData);\n        }\n    }\n    toSchema() {\n        const outputArray = [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }),\n            this.privateKey\n        ];\n        if (this.namedCurve) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.namedCurve })\n                ]\n            }));\n        }\n        if (this.publicKey) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ valueHex: this.publicKey.toSchema().toBER(false) })\n                ]\n            }));\n        }\n        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        });\n    }\n    toJSON() {\n        if (!this.namedCurve || ECPrivateKey.compareWithDefault(NAMED_CURVE, this.namedCurve)) {\n            throw new Error(\"Not enough information for making JSON: absent \\\"namedCurve\\\" value\");\n        }\n        const curve = ECNamedCurves.find(this.namedCurve);\n        const privateKeyJSON = {\n            crv: curve ? curve.name : this.namedCurve,\n            d: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.privateKey.valueBlock.valueHexView),\n        };\n        if (this.publicKey) {\n            const publicKeyJSON = this.publicKey.toJSON();\n            privateKeyJSON.x = publicKeyJSON.x;\n            privateKeyJSON.y = publicKeyJSON.y;\n        }\n        return privateKeyJSON;\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"crv\", \"d\");\n        let coordinateLength = 0;\n        const curve = ECNamedCurves.find(json.crv);\n        if (curve) {\n            this.namedCurve = curve.id;\n            coordinateLength = curve.size;\n        }\n        const convertBuffer = pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.d);\n        if (convertBuffer.byteLength < coordinateLength) {\n            const buffer = new ArrayBuffer(coordinateLength);\n            const view = new Uint8Array(buffer);\n            const convertBufferView = new Uint8Array(convertBuffer);\n            view.set(convertBufferView, 1);\n            this.privateKey = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: buffer });\n        }\n        else {\n            this.privateKey = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: convertBuffer.slice(0, coordinateLength) });\n        }\n        if (json.x && json.y) {\n            this.publicKey = new ECPublicKey({ json });\n        }\n    }\n}\nECPrivateKey.CLASS_NAME = \"ECPrivateKey\";\n\nconst PRIME = \"prime\";\nconst EXPONENT = \"exponent\";\nconst COEFFICIENT$1 = \"coefficient\";\nconst CLEAR_PROPS$18 = [\n    PRIME,\n    EXPONENT,\n    COEFFICIENT$1,\n];\nclass OtherPrimeInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.prime = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PRIME, OtherPrimeInfo.defaultValues(PRIME));\n        this.exponent = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXPONENT, OtherPrimeInfo.defaultValues(EXPONENT));\n        this.coefficient = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, COEFFICIENT$1, OtherPrimeInfo.defaultValues(COEFFICIENT$1));\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case PRIME:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case EXPONENT:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case COEFFICIENT$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.prime || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.exponent || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.coefficient || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$18);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OtherPrimeInfo.schema({\n            names: {\n                prime: PRIME,\n                exponent: EXPONENT,\n                coefficient: COEFFICIENT$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.prime = asn1.result.prime.convertFromDER();\n        this.exponent = asn1.result.exponent.convertFromDER();\n        this.coefficient = asn1.result.coefficient.convertFromDER();\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.prime.convertToDER(),\n                this.exponent.convertToDER(),\n                this.coefficient.convertToDER()\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            r: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.prime.valueBlock.valueHexView),\n            d: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.exponent.valueBlock.valueHexView),\n            t: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.coefficient.valueBlock.valueHexView),\n        };\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"r\", \"d\", \"r\");\n        this.prime = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.r) });\n        this.exponent = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.d) });\n        this.coefficient = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.t) });\n    }\n}\nOtherPrimeInfo.CLASS_NAME = \"OtherPrimeInfo\";\n\nconst VERSION$k = \"version\";\nconst MODULUS = \"modulus\";\nconst PUBLIC_EXPONENT = \"publicExponent\";\nconst PRIVATE_EXPONENT = \"privateExponent\";\nconst PRIME1 = \"prime1\";\nconst PRIME2 = \"prime2\";\nconst EXPONENT1 = \"exponent1\";\nconst EXPONENT2 = \"exponent2\";\nconst COEFFICIENT = \"coefficient\";\nconst OTHER_PRIME_INFOS = \"otherPrimeInfos\";\nconst CLEAR_PROPS$17 = [\n    VERSION$k,\n    MODULUS,\n    PUBLIC_EXPONENT,\n    PRIVATE_EXPONENT,\n    PRIME1,\n    PRIME2,\n    EXPONENT1,\n    EXPONENT2,\n    COEFFICIENT,\n    OTHER_PRIME_INFOS\n];\nclass RSAPrivateKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$k, RSAPrivateKey.defaultValues(VERSION$k));\n        this.modulus = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MODULUS, RSAPrivateKey.defaultValues(MODULUS));\n        this.publicExponent = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PUBLIC_EXPONENT, RSAPrivateKey.defaultValues(PUBLIC_EXPONENT));\n        this.privateExponent = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PRIVATE_EXPONENT, RSAPrivateKey.defaultValues(PRIVATE_EXPONENT));\n        this.prime1 = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PRIME1, RSAPrivateKey.defaultValues(PRIME1));\n        this.prime2 = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PRIME2, RSAPrivateKey.defaultValues(PRIME2));\n        this.exponent1 = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXPONENT1, RSAPrivateKey.defaultValues(EXPONENT1));\n        this.exponent2 = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXPONENT2, RSAPrivateKey.defaultValues(EXPONENT2));\n        this.coefficient = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, COEFFICIENT, RSAPrivateKey.defaultValues(COEFFICIENT));\n        if (OTHER_PRIME_INFOS in parameters) {\n            this.otherPrimeInfos = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OTHER_PRIME_INFOS, RSAPrivateKey.defaultValues(OTHER_PRIME_INFOS));\n        }\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$k:\n                return 0;\n            case MODULUS:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case PUBLIC_EXPONENT:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case PRIVATE_EXPONENT:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case PRIME1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case PRIME2:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case EXPONENT1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case EXPONENT2:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case COEFFICIENT:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case OTHER_PRIME_INFOS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.modulus || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.publicExponent || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.privateExponent || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.prime1 || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.prime2 || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.exponent1 || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.exponent2 || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.coefficient || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    optional: true,\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.otherPrimeInfosName || EMPTY_STRING),\n                            value: OtherPrimeInfo.schema(names.otherPrimeInfo || {})\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$17);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RSAPrivateKey.schema({\n            names: {\n                version: VERSION$k,\n                modulus: MODULUS,\n                publicExponent: PUBLIC_EXPONENT,\n                privateExponent: PRIVATE_EXPONENT,\n                prime1: PRIME1,\n                prime2: PRIME2,\n                exponent1: EXPONENT1,\n                exponent2: EXPONENT2,\n                coefficient: COEFFICIENT,\n                otherPrimeInfo: {\n                    names: {\n                        blockName: OTHER_PRIME_INFOS\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.modulus = asn1.result.modulus.convertFromDER(256);\n        this.publicExponent = asn1.result.publicExponent;\n        this.privateExponent = asn1.result.privateExponent.convertFromDER(256);\n        this.prime1 = asn1.result.prime1.convertFromDER(128);\n        this.prime2 = asn1.result.prime2.convertFromDER(128);\n        this.exponent1 = asn1.result.exponent1.convertFromDER(128);\n        this.exponent2 = asn1.result.exponent2.convertFromDER(128);\n        this.coefficient = asn1.result.coefficient.convertFromDER(128);\n        if (OTHER_PRIME_INFOS in asn1.result)\n            this.otherPrimeInfos = Array.from(asn1.result.otherPrimeInfos, element => new OtherPrimeInfo({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        outputArray.push(this.modulus.convertToDER());\n        outputArray.push(this.publicExponent);\n        outputArray.push(this.privateExponent.convertToDER());\n        outputArray.push(this.prime1.convertToDER());\n        outputArray.push(this.prime2.convertToDER());\n        outputArray.push(this.exponent1.convertToDER());\n        outputArray.push(this.exponent2.convertToDER());\n        outputArray.push(this.coefficient.convertToDER());\n        if (this.otherPrimeInfos) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: Array.from(this.otherPrimeInfos, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const jwk = {\n            n: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.modulus.valueBlock.valueHexView),\n            e: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.publicExponent.valueBlock.valueHexView),\n            d: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.privateExponent.valueBlock.valueHexView),\n            p: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.prime1.valueBlock.valueHexView),\n            q: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.prime2.valueBlock.valueHexView),\n            dp: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.exponent1.valueBlock.valueHexView),\n            dq: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.exponent2.valueBlock.valueHexView),\n            qi: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToBase64Url(this.coefficient.valueBlock.valueHexView),\n        };\n        if (this.otherPrimeInfos) {\n            jwk.oth = Array.from(this.otherPrimeInfos, o => o.toJSON());\n        }\n        return jwk;\n    }\n    fromJSON(json) {\n        ParameterError.assert(\"json\", json, \"n\", \"e\", \"d\", \"p\", \"q\", \"dp\", \"dq\", \"qi\");\n        this.modulus = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.n) });\n        this.publicExponent = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.e) });\n        this.privateExponent = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.d) });\n        this.prime1 = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.p) });\n        this.prime2 = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.q) });\n        this.exponent1 = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.dp) });\n        this.exponent2 = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.dq) });\n        this.coefficient = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.FromBase64Url(json.qi) });\n        if (json.oth) {\n            this.otherPrimeInfos = Array.from(json.oth, (element) => new OtherPrimeInfo({ json: element }));\n        }\n    }\n}\nRSAPrivateKey.CLASS_NAME = \"RSAPrivateKey\";\n\nconst VERSION$j = \"version\";\nconst PRIVATE_KEY_ALGORITHM = \"privateKeyAlgorithm\";\nconst PRIVATE_KEY = \"privateKey\";\nconst ATTRIBUTES$5 = \"attributes\";\nconst PARSED_KEY = \"parsedKey\";\nconst CLEAR_PROPS$16 = [\n    VERSION$j,\n    PRIVATE_KEY_ALGORITHM,\n    PRIVATE_KEY,\n    ATTRIBUTES$5\n];\nclass PrivateKeyInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$j, PrivateKeyInfo.defaultValues(VERSION$j));\n        this.privateKeyAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PRIVATE_KEY_ALGORITHM, PrivateKeyInfo.defaultValues(PRIVATE_KEY_ALGORITHM));\n        this.privateKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PRIVATE_KEY, PrivateKeyInfo.defaultValues(PRIVATE_KEY));\n        if (ATTRIBUTES$5 in parameters) {\n            this.attributes = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ATTRIBUTES$5, PrivateKeyInfo.defaultValues(ATTRIBUTES$5));\n        }\n        if (PARSED_KEY in parameters) {\n            this.parsedKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PARSED_KEY, PrivateKeyInfo.defaultValues(PARSED_KEY));\n        }\n        if (parameters.json) {\n            this.fromJSON(parameters.json);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$j:\n                return 0;\n            case PRIVATE_KEY_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case PRIVATE_KEY:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case ATTRIBUTES$5:\n                return [];\n            case PARSED_KEY:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                AlgorithmIdentifier.schema(names.privateKeyAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.privateKey || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.attributes || EMPTY_STRING),\n                            value: Attribute.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$16);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PrivateKeyInfo.schema({\n            names: {\n                version: VERSION$j,\n                privateKeyAlgorithm: {\n                    names: {\n                        blockName: PRIVATE_KEY_ALGORITHM\n                    }\n                },\n                privateKey: PRIVATE_KEY,\n                attributes: ATTRIBUTES$5\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.privateKeyAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.privateKeyAlgorithm });\n        this.privateKey = asn1.result.privateKey;\n        if (ATTRIBUTES$5 in asn1.result)\n            this.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\n        switch (this.privateKeyAlgorithm.algorithmId) {\n            case \"1.2.840.113549.1.1.1\":\n                {\n                    const privateKeyASN1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.privateKey.valueBlock.valueHexView);\n                    if (privateKeyASN1.offset !== -1)\n                        this.parsedKey = new RSAPrivateKey({ schema: privateKeyASN1.result });\n                }\n                break;\n            case \"1.2.840.10045.2.1\":\n                if (\"algorithmParams\" in this.privateKeyAlgorithm) {\n                    if (this.privateKeyAlgorithm.algorithmParams instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier) {\n                        const privateKeyASN1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.privateKey.valueBlock.valueHexView);\n                        if (privateKeyASN1.offset !== -1) {\n                            this.parsedKey = new ECPrivateKey({\n                                namedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),\n                                schema: privateKeyASN1.result\n                            });\n                        }\n                    }\n                }\n                break;\n        }\n    }\n    toSchema() {\n        const outputArray = [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }),\n            this.privateKeyAlgorithm.toSchema(),\n            this.privateKey\n        ];\n        if (this.attributes) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: Array.from(this.attributes, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        if (!this.parsedKey) {\n            const object = {\n                version: this.version,\n                privateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),\n                privateKey: this.privateKey.toJSON(),\n            };\n            if (this.attributes) {\n                object.attributes = Array.from(this.attributes, o => o.toJSON());\n            }\n            return object;\n        }\n        const jwk = {};\n        switch (this.privateKeyAlgorithm.algorithmId) {\n            case \"1.2.840.10045.2.1\":\n                jwk.kty = \"EC\";\n                break;\n            case \"1.2.840.113549.1.1.1\":\n                jwk.kty = \"RSA\";\n                break;\n        }\n        const publicKeyJWK = this.parsedKey.toJSON();\n        Object.assign(jwk, publicKeyJWK);\n        return jwk;\n    }\n    fromJSON(json) {\n        if (\"kty\" in json) {\n            switch (json.kty.toUpperCase()) {\n                case \"EC\":\n                    this.parsedKey = new ECPrivateKey({ json });\n                    this.privateKeyAlgorithm = new AlgorithmIdentifier({\n                        algorithmId: \"1.2.840.10045.2.1\",\n                        algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.parsedKey.namedCurve })\n                    });\n                    break;\n                case \"RSA\":\n                    this.parsedKey = new RSAPrivateKey({ json });\n                    this.privateKeyAlgorithm = new AlgorithmIdentifier({\n                        algorithmId: \"1.2.840.113549.1.1.1\",\n                        algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                    });\n                    break;\n                default:\n                    throw new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\n            }\n            this.privateKey = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: this.parsedKey.toSchema().toBER(false) });\n        }\n    }\n}\nPrivateKeyInfo.CLASS_NAME = \"PrivateKeyInfo\";\n\nconst CONTENT_TYPE$1 = \"contentType\";\nconst CONTENT_ENCRYPTION_ALGORITHM = \"contentEncryptionAlgorithm\";\nconst ENCRYPTED_CONTENT = \"encryptedContent\";\nconst CLEAR_PROPS$15 = [\n    CONTENT_TYPE$1,\n    CONTENT_ENCRYPTION_ALGORITHM,\n    ENCRYPTED_CONTENT,\n];\nconst PIECE_SIZE = 1024;\nclass EncryptedContentInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.contentType = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CONTENT_TYPE$1, EncryptedContentInfo.defaultValues(CONTENT_TYPE$1));\n        this.contentEncryptionAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CONTENT_ENCRYPTION_ALGORITHM, EncryptedContentInfo.defaultValues(CONTENT_ENCRYPTION_ALGORITHM));\n        if (ENCRYPTED_CONTENT in parameters && parameters.encryptedContent) {\n            this.encryptedContent = parameters.encryptedContent;\n            if ((this.encryptedContent.idBlock.tagClass === 1) &&\n                (this.encryptedContent.idBlock.tagNumber === 4)) {\n                if (this.encryptedContent.idBlock.isConstructed === false && !parameters.disableSplit) {\n                    const constrString = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({\n                        idBlock: { isConstructed: true },\n                        isConstructed: true\n                    });\n                    let offset = 0;\n                    const valueHex = this.encryptedContent.valueBlock.valueHexView.slice().buffer;\n                    let length = valueHex.byteLength;\n                    while (length > 0) {\n                        const pieceView = new Uint8Array(valueHex, offset, ((offset + PIECE_SIZE) > valueHex.byteLength) ? (valueHex.byteLength - offset) : PIECE_SIZE);\n                        const _array = new ArrayBuffer(pieceView.length);\n                        const _view = new Uint8Array(_array);\n                        for (let i = 0; i < _view.length; i++)\n                            _view[i] = pieceView[i];\n                        constrString.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: _array }));\n                        length -= pieceView.length;\n                        offset += pieceView.length;\n                    }\n                    this.encryptedContent = constrString;\n                }\n            }\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CONTENT_TYPE$1:\n                return EMPTY_STRING;\n            case CONTENT_ENCRYPTION_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case ENCRYPTED_CONTENT:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CONTENT_TYPE$1:\n                return (memberValue === EMPTY_STRING);\n            case CONTENT_ENCRYPTION_ALGORITHM:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case ENCRYPTED_CONTENT:\n                return (memberValue.isEqual(EncryptedContentInfo.defaultValues(ENCRYPTED_CONTENT)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.contentType || EMPTY_STRING) }),\n                AlgorithmIdentifier.schema(names.contentEncryptionAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            name: (names.encryptedContent || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: [\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                                    value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString()\n                                })\n                            ]\n                        }),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                            name: (names.encryptedContent || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            }\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$15);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, EncryptedContentInfo.schema({\n            names: {\n                contentType: CONTENT_TYPE$1,\n                contentEncryptionAlgorithm: {\n                    names: {\n                        blockName: CONTENT_ENCRYPTION_ALGORITHM\n                    }\n                },\n                encryptedContent: ENCRYPTED_CONTENT\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.contentType = asn1.result.contentType.valueBlock.toString();\n        this.contentEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.contentEncryptionAlgorithm });\n        if (ENCRYPTED_CONTENT in asn1.result) {\n            this.encryptedContent = asn1.result.encryptedContent;\n            this.encryptedContent.idBlock.tagClass = 1;\n            this.encryptedContent.idBlock.tagNumber = 4;\n        }\n    }\n    toSchema() {\n        const sequenceLengthBlock = {\n            isIndefiniteForm: false\n        };\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.contentType }));\n        outputArray.push(this.contentEncryptionAlgorithm.toSchema());\n        if (this.encryptedContent) {\n            sequenceLengthBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\n            const encryptedValue = this.encryptedContent;\n            encryptedValue.idBlock.tagClass = 3;\n            encryptedValue.idBlock.tagNumber = 0;\n            encryptedValue.lenBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\n            outputArray.push(encryptedValue);\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            lenBlock: sequenceLengthBlock,\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            contentType: this.contentType,\n            contentEncryptionAlgorithm: this.contentEncryptionAlgorithm.toJSON()\n        };\n        if (this.encryptedContent) {\n            res.encryptedContent = this.encryptedContent.toJSON();\n        }\n        return res;\n    }\n    getEncryptedContent() {\n        if (!this.encryptedContent) {\n            throw new Error(\"Parameter 'encryptedContent' is undefined\");\n        }\n        return asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString.prototype.getValue.call(this.encryptedContent);\n    }\n}\nEncryptedContentInfo.CLASS_NAME = \"EncryptedContentInfo\";\n\nconst HASH_ALGORITHM$4 = \"hashAlgorithm\";\nconst MASK_GEN_ALGORITHM$1 = \"maskGenAlgorithm\";\nconst SALT_LENGTH = \"saltLength\";\nconst TRAILER_FIELD = \"trailerField\";\nconst CLEAR_PROPS$14 = [\n    HASH_ALGORITHM$4,\n    MASK_GEN_ALGORITHM$1,\n    SALT_LENGTH,\n    TRAILER_FIELD\n];\nclass RSASSAPSSParams extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.hashAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, HASH_ALGORITHM$4, RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4));\n        this.maskGenAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MASK_GEN_ALGORITHM$1, RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1));\n        this.saltLength = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SALT_LENGTH, RSASSAPSSParams.defaultValues(SALT_LENGTH));\n        this.trailerField = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TRAILER_FIELD, RSASSAPSSParams.defaultValues(TRAILER_FIELD));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case HASH_ALGORITHM$4:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.3.14.3.2.26\",\n                    algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                });\n            case MASK_GEN_ALGORITHM$1:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.2.840.113549.1.1.8\",\n                    algorithmParams: (new AlgorithmIdentifier({\n                        algorithmId: \"1.3.14.3.2.26\",\n                        algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                    })).toSchema()\n                });\n            case SALT_LENGTH:\n                return 20;\n            case TRAILER_FIELD:\n                return 1;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.hashAlgorithm || {})]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    optional: true,\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.saltLength || EMPTY_STRING) })]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 3\n                    },\n                    optional: true,\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.trailerField || EMPTY_STRING) })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$14);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RSASSAPSSParams.schema({\n            names: {\n                hashAlgorithm: {\n                    names: {\n                        blockName: HASH_ALGORITHM$4\n                    }\n                },\n                maskGenAlgorithm: {\n                    names: {\n                        blockName: MASK_GEN_ALGORITHM$1\n                    }\n                },\n                saltLength: SALT_LENGTH,\n                trailerField: TRAILER_FIELD\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (HASH_ALGORITHM$4 in asn1.result)\n            this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\n        if (MASK_GEN_ALGORITHM$1 in asn1.result)\n            this.maskGenAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.maskGenAlgorithm });\n        if (SALT_LENGTH in asn1.result)\n            this.saltLength = asn1.result.saltLength.valueBlock.valueDec;\n        if (TRAILER_FIELD in asn1.result)\n            this.trailerField = asn1.result.trailerField.valueBlock.valueDec;\n    }\n    toSchema() {\n        const outputArray = [];\n        if (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4))) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.hashAlgorithm.toSchema()]\n            }));\n        }\n        if (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1))) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [this.maskGenAlgorithm.toSchema()]\n            }));\n        }\n        if (this.saltLength !== RSASSAPSSParams.defaultValues(SALT_LENGTH)) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.saltLength })]\n            }));\n        }\n        if (this.trailerField !== RSASSAPSSParams.defaultValues(TRAILER_FIELD)) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.trailerField })]\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4))) {\n            res.hashAlgorithm = this.hashAlgorithm.toJSON();\n        }\n        if (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1))) {\n            res.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();\n        }\n        if (this.saltLength !== RSASSAPSSParams.defaultValues(SALT_LENGTH)) {\n            res.saltLength = this.saltLength;\n        }\n        if (this.trailerField !== RSASSAPSSParams.defaultValues(TRAILER_FIELD)) {\n            res.trailerField = this.trailerField;\n        }\n        return res;\n    }\n}\nRSASSAPSSParams.CLASS_NAME = \"RSASSAPSSParams\";\n\nconst SALT = \"salt\";\nconst ITERATION_COUNT = \"iterationCount\";\nconst KEY_LENGTH = \"keyLength\";\nconst PRF = \"prf\";\nconst CLEAR_PROPS$13 = [\n    SALT,\n    ITERATION_COUNT,\n    KEY_LENGTH,\n    PRF\n];\nclass PBKDF2Params extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.salt = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SALT, PBKDF2Params.defaultValues(SALT));\n        this.iterationCount = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ITERATION_COUNT, PBKDF2Params.defaultValues(ITERATION_COUNT));\n        if (KEY_LENGTH in parameters) {\n            this.keyLength = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_LENGTH, PBKDF2Params.defaultValues(KEY_LENGTH));\n        }\n        if (PRF in parameters) {\n            this.prf = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PRF, PBKDF2Params.defaultValues(PRF));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SALT:\n                return {};\n            case ITERATION_COUNT:\n                return (-1);\n            case KEY_LENGTH:\n                return 0;\n            case PRF:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.3.14.3.2.26\",\n                    algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                });\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.saltPrimitive || EMPTY_STRING) }),\n                        AlgorithmIdentifier.schema(names.saltConstructed || {})\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.iterationCount || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n                    name: (names.keyLength || EMPTY_STRING),\n                    optional: true\n                }),\n                AlgorithmIdentifier.schema(names.prf || {\n                    names: {\n                        optional: true\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$13);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PBKDF2Params.schema({\n            names: {\n                saltPrimitive: SALT,\n                saltConstructed: {\n                    names: {\n                        blockName: SALT\n                    }\n                },\n                iterationCount: ITERATION_COUNT,\n                keyLength: KEY_LENGTH,\n                prf: {\n                    names: {\n                        blockName: PRF,\n                        optional: true\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.salt = asn1.result.salt;\n        this.iterationCount = asn1.result.iterationCount.valueBlock.valueDec;\n        if (KEY_LENGTH in asn1.result)\n            this.keyLength = asn1.result.keyLength.valueBlock.valueDec;\n        if (PRF in asn1.result)\n            this.prf = new AlgorithmIdentifier({ schema: asn1.result.prf });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.salt);\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.iterationCount }));\n        if (KEY_LENGTH in this) {\n            if (PBKDF2Params.defaultValues(KEY_LENGTH) !== this.keyLength)\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.keyLength }));\n        }\n        if (this.prf) {\n            if (PBKDF2Params.defaultValues(PRF).isEqual(this.prf) === false)\n                outputArray.push(this.prf.toSchema());\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            salt: this.salt.toJSON(),\n            iterationCount: this.iterationCount\n        };\n        if (KEY_LENGTH in this) {\n            if (PBKDF2Params.defaultValues(KEY_LENGTH) !== this.keyLength)\n                res.keyLength = this.keyLength;\n        }\n        if (this.prf) {\n            if (PBKDF2Params.defaultValues(PRF).isEqual(this.prf) === false)\n                res.prf = this.prf.toJSON();\n        }\n        return res;\n    }\n}\nPBKDF2Params.CLASS_NAME = \"PBKDF2Params\";\n\nconst KEY_DERIVATION_FUNC = \"keyDerivationFunc\";\nconst ENCRYPTION_SCHEME = \"encryptionScheme\";\nconst CLEAR_PROPS$12 = [\n    KEY_DERIVATION_FUNC,\n    ENCRYPTION_SCHEME\n];\nclass PBES2Params extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyDerivationFunc = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_DERIVATION_FUNC, PBES2Params.defaultValues(KEY_DERIVATION_FUNC));\n        this.encryptionScheme = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTION_SCHEME, PBES2Params.defaultValues(ENCRYPTION_SCHEME));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_DERIVATION_FUNC:\n                return new AlgorithmIdentifier();\n            case ENCRYPTION_SCHEME:\n                return new AlgorithmIdentifier();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.keyDerivationFunc || {}),\n                AlgorithmIdentifier.schema(names.encryptionScheme || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$12);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PBES2Params.schema({\n            names: {\n                keyDerivationFunc: {\n                    names: {\n                        blockName: KEY_DERIVATION_FUNC\n                    }\n                },\n                encryptionScheme: {\n                    names: {\n                        blockName: ENCRYPTION_SCHEME\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyDerivationFunc = new AlgorithmIdentifier({ schema: asn1.result.keyDerivationFunc });\n        this.encryptionScheme = new AlgorithmIdentifier({ schema: asn1.result.encryptionScheme });\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.keyDerivationFunc.toSchema(),\n                this.encryptionScheme.toSchema()\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            keyDerivationFunc: this.keyDerivationFunc.toJSON(),\n            encryptionScheme: this.encryptionScheme.toJSON()\n        };\n    }\n}\nPBES2Params.CLASS_NAME = \"PBES2Params\";\n\nclass AbstractCryptoEngine {\n    constructor(parameters) {\n        this.crypto = parameters.crypto;\n        this.subtle = \"webkitSubtle\" in parameters.crypto\n            ? parameters.crypto.webkitSubtle\n            : parameters.crypto.subtle;\n        this.name = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"name\", EMPTY_STRING);\n    }\n    async encrypt(...args) {\n        return this.subtle.encrypt(...args);\n    }\n    async decrypt(...args) {\n        return this.subtle.decrypt(...args);\n    }\n    sign(...args) {\n        return this.subtle.sign(...args);\n    }\n    async verify(...args) {\n        return this.subtle.verify(...args);\n    }\n    async digest(...args) {\n        return this.subtle.digest(...args);\n    }\n    async generateKey(...args) {\n        return this.subtle.generateKey(...args);\n    }\n    async deriveKey(...args) {\n        return this.subtle.deriveKey(...args);\n    }\n    async deriveBits(...args) {\n        return this.subtle.deriveBits(...args);\n    }\n    async wrapKey(...args) {\n        return this.subtle.wrapKey(...args);\n    }\n    async unwrapKey(...args) {\n        return this.subtle.unwrapKey(...args);\n    }\n    exportKey(...args) {\n        return this.subtle.exportKey(...args);\n    }\n    importKey(...args) {\n        return this.subtle.importKey(...args);\n    }\n    getRandomValues(array) {\n        return this.crypto.getRandomValues(array);\n    }\n}\n\nasync function makePKCS12B2Key(hashAlgorithm, keyLength, password, salt, iterationCount) {\n    let u;\n    let v;\n    let md;\n    switch (hashAlgorithm.toUpperCase()) {\n        case \"SHA-1\":\n            u = 20;\n            v = 64;\n            md = _noble_hashes_sha1__WEBPACK_IMPORTED_MODULE_4__.sha1;\n            break;\n        case \"SHA-256\":\n            u = 32;\n            v = 64;\n            md = _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_5__.sha256;\n            break;\n        case \"SHA-384\":\n            u = 48;\n            v = 128;\n            md = _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_6__.sha384;\n            break;\n        case \"SHA-512\":\n            u = 64;\n            v = 128;\n            md = _noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_6__.sha512;\n            break;\n        default:\n            throw new Error(\"Unsupported hashing algorithm\");\n    }\n    const originalPassword = new Uint8Array(password);\n    let decodedPassword = new TextDecoder().decode(password);\n    const encodedPassword = new TextEncoder().encode(decodedPassword);\n    if (encodedPassword.some((byte, i) => byte !== originalPassword[i])) {\n        decodedPassword = String.fromCharCode(...originalPassword);\n    }\n    const passwordTransformed = new Uint8Array(decodedPassword.length * 2 + 2);\n    const passwordView = new DataView(passwordTransformed.buffer);\n    for (let i = 0; i < decodedPassword.length; i++) {\n        passwordView.setUint16(i * 2, decodedPassword.charCodeAt(i), false);\n    }\n    passwordView.setUint16(decodedPassword.length * 2, 0, false);\n    const D = new Uint8Array(v).fill(3);\n    const saltView = new Uint8Array(salt);\n    const S = new Uint8Array(v * Math.ceil(saltView.length / v)).map((_, i) => saltView[i % saltView.length]);\n    const P = new Uint8Array(v * Math.ceil(passwordTransformed.length / v)).map((_, i) => passwordTransformed[i % passwordTransformed.length]);\n    let I = new Uint8Array(S.length + P.length);\n    I.set(S);\n    I.set(P, S.length);\n    const c = Math.ceil((keyLength >> 3) / u);\n    const result = [];\n    for (let i = 0; i < c; i++) {\n        let A = new Uint8Array(D.length + I.length);\n        A.set(D);\n        A.set(I, D.length);\n        for (let j = 0; j < iterationCount; j++) {\n            A = md(A);\n        }\n        const B = new Uint8Array(v).map((_, i) => A[i % A.length]);\n        const k = Math.ceil(saltView.length / v) + Math.ceil(passwordTransformed.length / v);\n        const iRound = [];\n        for (let j = 0; j < k; j++) {\n            const chunk = Array.from(I.slice(j * v, (j + 1) * v));\n            let x = 0x1ff;\n            for (let l = B.length - 1; l >= 0; l--) {\n                x >>= 8;\n                x += B[l] + (chunk[l] || 0);\n                chunk[l] = x & 0xff;\n            }\n            iRound.push(...chunk);\n        }\n        I = new Uint8Array(iRound);\n        result.push(...A);\n    }\n    return new Uint8Array(result.slice(0, keyLength >> 3)).buffer;\n}\nfunction prepareAlgorithm(data) {\n    const res = typeof data === \"string\"\n        ? { name: data }\n        : data;\n    if (\"hash\" in res) {\n        return {\n            ...res,\n            hash: prepareAlgorithm(res.hash)\n        };\n    }\n    return res;\n}\nclass CryptoEngine extends AbstractCryptoEngine {\n    async importKey(format, keyData, algorithm, extractable, keyUsages) {\n        var _a, _b, _c, _d, _e, _f;\n        let jwk = {};\n        const alg = prepareAlgorithm(algorithm);\n        switch (format.toLowerCase()) {\n            case \"raw\":\n                return this.subtle.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\n            case \"spki\":\n                {\n                    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(keyData));\n                    AsnError.assert(asn1, \"keyData\");\n                    const publicKeyInfo = new PublicKeyInfo();\n                    try {\n                        publicKeyInfo.fromSchema(asn1.result);\n                    }\n                    catch {\n                        throw new ArgumentError(\"Incorrect keyData\");\n                    }\n                    switch (alg.name.toUpperCase()) {\n                        case \"RSA-PSS\":\n                            {\n                                if (!alg.hash) {\n                                    throw new ParameterError(\"hash\", \"algorithm.hash\", \"Incorrect hash algorithm: Hash algorithm is missed\");\n                                }\n                                switch (alg.hash.name.toUpperCase()) {\n                                    case \"SHA-1\":\n                                        jwk.alg = \"PS1\";\n                                        break;\n                                    case \"SHA-256\":\n                                        jwk.alg = \"PS256\";\n                                        break;\n                                    case \"SHA-384\":\n                                        jwk.alg = \"PS384\";\n                                        break;\n                                    case \"SHA-512\":\n                                        jwk.alg = \"PS512\";\n                                        break;\n                                    default:\n                                        throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);\n                                }\n                            }\n                        case \"RSASSA-PKCS1-V1_5\":\n                            {\n                                keyUsages = [\"verify\"];\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                if (publicKeyInfo.algorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\n                                    throw new Error(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\n                                if (!jwk.alg) {\n                                    if (!alg.hash) {\n                                        throw new ParameterError(\"hash\", \"algorithm.hash\", \"Incorrect hash algorithm: Hash algorithm is missed\");\n                                    }\n                                    switch (alg.hash.name.toUpperCase()) {\n                                        case \"SHA-1\":\n                                            jwk.alg = \"RS1\";\n                                            break;\n                                        case \"SHA-256\":\n                                            jwk.alg = \"RS256\";\n                                            break;\n                                        case \"SHA-384\":\n                                            jwk.alg = \"RS384\";\n                                            break;\n                                        case \"SHA-512\":\n                                            jwk.alg = \"RS512\";\n                                            break;\n                                        default:\n                                            throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);\n                                    }\n                                }\n                                const publicKeyJSON = publicKeyInfo.toJSON();\n                                Object.assign(jwk, publicKeyJSON);\n                            }\n                            break;\n                        case \"ECDSA\":\n                            keyUsages = [\"verify\"];\n                        case \"ECDH\":\n                            {\n                                jwk = {\n                                    kty: \"EC\",\n                                    ext: extractable,\n                                    key_ops: keyUsages\n                                };\n                                if (publicKeyInfo.algorithm.algorithmId !== \"1.2.840.10045.2.1\") {\n                                    throw new Error(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\n                                }\n                                const publicKeyJSON = publicKeyInfo.toJSON();\n                                Object.assign(jwk, publicKeyJSON);\n                            }\n                            break;\n                        case \"RSA-OAEP\":\n                            {\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                if (this.name.toLowerCase() === \"safari\")\n                                    jwk.alg = \"RSA-OAEP\";\n                                else {\n                                    if (!alg.hash) {\n                                        throw new ParameterError(\"hash\", \"algorithm.hash\", \"Incorrect hash algorithm: Hash algorithm is missed\");\n                                    }\n                                    switch (alg.hash.name.toUpperCase()) {\n                                        case \"SHA-1\":\n                                            jwk.alg = \"RSA-OAEP\";\n                                            break;\n                                        case \"SHA-256\":\n                                            jwk.alg = \"RSA-OAEP-256\";\n                                            break;\n                                        case \"SHA-384\":\n                                            jwk.alg = \"RSA-OAEP-384\";\n                                            break;\n                                        case \"SHA-512\":\n                                            jwk.alg = \"RSA-OAEP-512\";\n                                            break;\n                                        default:\n                                            throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);\n                                    }\n                                }\n                                const publicKeyJSON = publicKeyInfo.toJSON();\n                                Object.assign(jwk, publicKeyJSON);\n                            }\n                            break;\n                        case \"RSAES-PKCS1-V1_5\":\n                            {\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                jwk.alg = \"PS1\";\n                                const publicKeyJSON = publicKeyInfo.toJSON();\n                                Object.assign(jwk, publicKeyJSON);\n                            }\n                            break;\n                        default:\n                            throw new Error(`Incorrect algorithm name: ${alg.name.toUpperCase()}`);\n                    }\n                }\n                break;\n            case \"pkcs8\":\n                {\n                    const privateKeyInfo = new PrivateKeyInfo();\n                    const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(keyData));\n                    AsnError.assert(asn1, \"keyData\");\n                    try {\n                        privateKeyInfo.fromSchema(asn1.result);\n                    }\n                    catch (ex) {\n                        throw new Error(\"Incorrect keyData\");\n                    }\n                    if (!privateKeyInfo.parsedKey)\n                        throw new Error(\"Incorrect keyData\");\n                    switch (alg.name.toUpperCase()) {\n                        case \"RSA-PSS\":\n                            {\n                                switch ((_a = alg.hash) === null || _a === void 0 ? void 0 : _a.name.toUpperCase()) {\n                                    case \"SHA-1\":\n                                        jwk.alg = \"PS1\";\n                                        break;\n                                    case \"SHA-256\":\n                                        jwk.alg = \"PS256\";\n                                        break;\n                                    case \"SHA-384\":\n                                        jwk.alg = \"PS384\";\n                                        break;\n                                    case \"SHA-512\":\n                                        jwk.alg = \"PS512\";\n                                        break;\n                                    default:\n                                        throw new Error(`Incorrect hash algorithm: ${(_b = alg.hash) === null || _b === void 0 ? void 0 : _b.name.toUpperCase()}`);\n                                }\n                            }\n                        case \"RSASSA-PKCS1-V1_5\":\n                            {\n                                keyUsages = [\"sign\"];\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\n                                    throw new Error(`Incorrect private key algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\n                                if ((\"alg\" in jwk) === false) {\n                                    switch ((_c = alg.hash) === null || _c === void 0 ? void 0 : _c.name.toUpperCase()) {\n                                        case \"SHA-1\":\n                                            jwk.alg = \"RS1\";\n                                            break;\n                                        case \"SHA-256\":\n                                            jwk.alg = \"RS256\";\n                                            break;\n                                        case \"SHA-384\":\n                                            jwk.alg = \"RS384\";\n                                            break;\n                                        case \"SHA-512\":\n                                            jwk.alg = \"RS512\";\n                                            break;\n                                        default:\n                                            throw new Error(`Incorrect hash algorithm: ${(_d = alg.hash) === null || _d === void 0 ? void 0 : _d.name.toUpperCase()}`);\n                                    }\n                                }\n                                const privateKeyJSON = privateKeyInfo.toJSON();\n                                Object.assign(jwk, privateKeyJSON);\n                            }\n                            break;\n                        case \"ECDSA\":\n                            keyUsages = [\"sign\"];\n                        case \"ECDH\":\n                            {\n                                jwk = {\n                                    kty: \"EC\",\n                                    ext: extractable,\n                                    key_ops: keyUsages\n                                };\n                                if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.10045.2.1\")\n                                    throw new Error(`Incorrect algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\n                                const privateKeyJSON = privateKeyInfo.toJSON();\n                                Object.assign(jwk, privateKeyJSON);\n                            }\n                            break;\n                        case \"RSA-OAEP\":\n                            {\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                if (this.name.toLowerCase() === \"safari\")\n                                    jwk.alg = \"RSA-OAEP\";\n                                else {\n                                    switch ((_e = alg.hash) === null || _e === void 0 ? void 0 : _e.name.toUpperCase()) {\n                                        case \"SHA-1\":\n                                            jwk.alg = \"RSA-OAEP\";\n                                            break;\n                                        case \"SHA-256\":\n                                            jwk.alg = \"RSA-OAEP-256\";\n                                            break;\n                                        case \"SHA-384\":\n                                            jwk.alg = \"RSA-OAEP-384\";\n                                            break;\n                                        case \"SHA-512\":\n                                            jwk.alg = \"RSA-OAEP-512\";\n                                            break;\n                                        default:\n                                            throw new Error(`Incorrect hash algorithm: ${(_f = alg.hash) === null || _f === void 0 ? void 0 : _f.name.toUpperCase()}`);\n                                    }\n                                }\n                                const privateKeyJSON = privateKeyInfo.toJSON();\n                                Object.assign(jwk, privateKeyJSON);\n                            }\n                            break;\n                        case \"RSAES-PKCS1-V1_5\":\n                            {\n                                keyUsages = [\"decrypt\"];\n                                jwk.kty = \"RSA\";\n                                jwk.ext = extractable;\n                                jwk.key_ops = keyUsages;\n                                jwk.alg = \"PS1\";\n                                const privateKeyJSON = privateKeyInfo.toJSON();\n                                Object.assign(jwk, privateKeyJSON);\n                            }\n                            break;\n                        default:\n                            throw new Error(`Incorrect algorithm name: ${alg.name.toUpperCase()}`);\n                    }\n                }\n                break;\n            case \"jwk\":\n                jwk = keyData;\n                break;\n            default:\n                throw new Error(`Incorrect format: ${format}`);\n        }\n        if (this.name.toLowerCase() === \"safari\") {\n            try {\n                return this.subtle.importKey(\"jwk\", pvutils__WEBPACK_IMPORTED_MODULE_2__.stringToArrayBuffer(JSON.stringify(jwk)), algorithm, extractable, keyUsages);\n            }\n            catch {\n                return this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\n            }\n        }\n        return this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\n    }\n    async exportKey(format, key) {\n        let jwk = await this.subtle.exportKey(\"jwk\", key);\n        if (this.name.toLowerCase() === \"safari\") {\n            if (jwk instanceof ArrayBuffer) {\n                jwk = JSON.parse(pvutils__WEBPACK_IMPORTED_MODULE_2__.arrayBufferToString(jwk));\n            }\n        }\n        switch (format.toLowerCase()) {\n            case \"raw\":\n                return this.subtle.exportKey(\"raw\", key);\n            case \"spki\": {\n                const publicKeyInfo = new PublicKeyInfo();\n                try {\n                    publicKeyInfo.fromJSON(jwk);\n                }\n                catch (ex) {\n                    throw new Error(\"Incorrect key data\");\n                }\n                return publicKeyInfo.toSchema().toBER(false);\n            }\n            case \"pkcs8\": {\n                const privateKeyInfo = new PrivateKeyInfo();\n                try {\n                    privateKeyInfo.fromJSON(jwk);\n                }\n                catch (ex) {\n                    throw new Error(\"Incorrect key data\");\n                }\n                return privateKeyInfo.toSchema().toBER(false);\n            }\n            case \"jwk\":\n                return jwk;\n            default:\n                throw new Error(`Incorrect format: ${format}`);\n        }\n    }\n    async convert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages) {\n        if (inputFormat.toLowerCase() === outputFormat.toLowerCase()) {\n            return keyData;\n        }\n        const key = await this.importKey(inputFormat, keyData, algorithm, extractable, keyUsages);\n        return this.exportKey(outputFormat, key);\n    }\n    getAlgorithmByOID(oid, safety = false, target) {\n        switch (oid) {\n            case \"1.2.840.113549.1.1.1\":\n                return {\n                    name: \"RSAES-PKCS1-v1_5\"\n                };\n            case \"1.2.840.113549.1.1.5\":\n                return {\n                    name: \"RSASSA-PKCS1-v1_5\",\n                    hash: {\n                        name: \"SHA-1\"\n                    }\n                };\n            case \"1.2.840.113549.1.1.11\":\n                return {\n                    name: \"RSASSA-PKCS1-v1_5\",\n                    hash: {\n                        name: \"SHA-256\"\n                    }\n                };\n            case \"1.2.840.113549.1.1.12\":\n                return {\n                    name: \"RSASSA-PKCS1-v1_5\",\n                    hash: {\n                        name: \"SHA-384\"\n                    }\n                };\n            case \"1.2.840.113549.1.1.13\":\n                return {\n                    name: \"RSASSA-PKCS1-v1_5\",\n                    hash: {\n                        name: \"SHA-512\"\n                    }\n                };\n            case \"1.2.840.113549.1.1.10\":\n                return {\n                    name: \"RSA-PSS\"\n                };\n            case \"1.2.840.113549.1.1.7\":\n                return {\n                    name: \"RSA-OAEP\"\n                };\n            case \"1.2.840.10045.2.1\":\n            case \"1.2.840.10045.4.1\":\n                return {\n                    name: \"ECDSA\",\n                    hash: {\n                        name: \"SHA-1\"\n                    }\n                };\n            case \"1.2.840.10045.4.3.2\":\n                return {\n                    name: \"ECDSA\",\n                    hash: {\n                        name: \"SHA-256\"\n                    }\n                };\n            case \"1.2.840.10045.4.3.3\":\n                return {\n                    name: \"ECDSA\",\n                    hash: {\n                        name: \"SHA-384\"\n                    }\n                };\n            case \"1.2.840.10045.4.3.4\":\n                return {\n                    name: \"ECDSA\",\n                    hash: {\n                        name: \"SHA-512\"\n                    }\n                };\n            case \"1.3.133.16.840.63.0.2\":\n                return {\n                    name: \"ECDH\",\n                    kdf: \"SHA-1\"\n                };\n            case \"1.3.132.1.11.1\":\n                return {\n                    name: \"ECDH\",\n                    kdf: \"SHA-256\"\n                };\n            case \"1.3.132.1.11.2\":\n                return {\n                    name: \"ECDH\",\n                    kdf: \"SHA-384\"\n                };\n            case \"1.3.132.1.11.3\":\n                return {\n                    name: \"ECDH\",\n                    kdf: \"SHA-512\"\n                };\n            case \"2.16.840.1.101.3.4.1.2\":\n                return {\n                    name: \"AES-CBC\",\n                    length: 128\n                };\n            case \"2.16.840.1.101.3.4.1.22\":\n                return {\n                    name: \"AES-CBC\",\n                    length: 192\n                };\n            case \"2.16.840.1.101.3.4.1.42\":\n                return {\n                    name: \"AES-CBC\",\n                    length: 256\n                };\n            case \"2.16.840.1.101.3.4.1.6\":\n                return {\n                    name: \"AES-GCM\",\n                    length: 128\n                };\n            case \"2.16.840.1.101.3.4.1.26\":\n                return {\n                    name: \"AES-GCM\",\n                    length: 192\n                };\n            case \"2.16.840.1.101.3.4.1.46\":\n                return {\n                    name: \"AES-GCM\",\n                    length: 256\n                };\n            case \"2.16.840.1.101.3.4.1.4\":\n                return {\n                    name: \"AES-CFB\",\n                    length: 128\n                };\n            case \"2.16.840.1.101.3.4.1.24\":\n                return {\n                    name: \"AES-CFB\",\n                    length: 192\n                };\n            case \"2.16.840.1.101.3.4.1.44\":\n                return {\n                    name: \"AES-CFB\",\n                    length: 256\n                };\n            case \"2.16.840.1.101.3.4.1.5\":\n                return {\n                    name: \"AES-KW\",\n                    length: 128\n                };\n            case \"2.16.840.1.101.3.4.1.25\":\n                return {\n                    name: \"AES-KW\",\n                    length: 192\n                };\n            case \"2.16.840.1.101.3.4.1.45\":\n                return {\n                    name: \"AES-KW\",\n                    length: 256\n                };\n            case \"1.2.840.113549.2.7\":\n                return {\n                    name: \"HMAC\",\n                    hash: {\n                        name: \"SHA-1\"\n                    }\n                };\n            case \"1.2.840.113549.2.9\":\n                return {\n                    name: \"HMAC\",\n                    hash: {\n                        name: \"SHA-256\"\n                    }\n                };\n            case \"1.2.840.113549.2.10\":\n                return {\n                    name: \"HMAC\",\n                    hash: {\n                        name: \"SHA-384\"\n                    }\n                };\n            case \"1.2.840.113549.2.11\":\n                return {\n                    name: \"HMAC\",\n                    hash: {\n                        name: \"SHA-512\"\n                    }\n                };\n            case \"1.2.840.113549.1.9.16.3.5\":\n                return {\n                    name: \"DH\"\n                };\n            case \"1.3.14.3.2.26\":\n                return {\n                    name: \"SHA-1\"\n                };\n            case \"2.16.840.1.101.3.4.2.1\":\n                return {\n                    name: \"SHA-256\"\n                };\n            case \"2.16.840.1.101.3.4.2.2\":\n                return {\n                    name: \"SHA-384\"\n                };\n            case \"2.16.840.1.101.3.4.2.3\":\n                return {\n                    name: \"SHA-512\"\n                };\n            case \"1.2.840.113549.1.5.12\":\n                return {\n                    name: \"PBKDF2\"\n                };\n            case \"1.2.840.10045.3.1.7\":\n                return {\n                    name: \"P-256\"\n                };\n            case \"1.3.132.0.34\":\n                return {\n                    name: \"P-384\"\n                };\n            case \"1.3.132.0.35\":\n                return {\n                    name: \"P-521\"\n                };\n        }\n        if (safety) {\n            throw new Error(`Unsupported algorithm identifier ${target ? `for ${target} ` : EMPTY_STRING}: ${oid}`);\n        }\n        return {};\n    }\n    getOIDByAlgorithm(algorithm, safety = false, target) {\n        let result = EMPTY_STRING;\n        switch (algorithm.name.toUpperCase()) {\n            case \"RSAES-PKCS1-V1_5\":\n                result = \"1.2.840.113549.1.1.1\";\n                break;\n            case \"RSASSA-PKCS1-V1_5\":\n                switch (algorithm.hash.name.toUpperCase()) {\n                    case \"SHA-1\":\n                        result = \"1.2.840.113549.1.1.5\";\n                        break;\n                    case \"SHA-256\":\n                        result = \"1.2.840.113549.1.1.11\";\n                        break;\n                    case \"SHA-384\":\n                        result = \"1.2.840.113549.1.1.12\";\n                        break;\n                    case \"SHA-512\":\n                        result = \"1.2.840.113549.1.1.13\";\n                        break;\n                }\n                break;\n            case \"RSA-PSS\":\n                result = \"1.2.840.113549.1.1.10\";\n                break;\n            case \"RSA-OAEP\":\n                result = \"1.2.840.113549.1.1.7\";\n                break;\n            case \"ECDSA\":\n                switch (algorithm.hash.name.toUpperCase()) {\n                    case \"SHA-1\":\n                        result = \"1.2.840.10045.4.1\";\n                        break;\n                    case \"SHA-256\":\n                        result = \"1.2.840.10045.4.3.2\";\n                        break;\n                    case \"SHA-384\":\n                        result = \"1.2.840.10045.4.3.3\";\n                        break;\n                    case \"SHA-512\":\n                        result = \"1.2.840.10045.4.3.4\";\n                        break;\n                }\n                break;\n            case \"ECDH\":\n                switch (algorithm.kdf.toUpperCase()) {\n                    case \"SHA-1\":\n                        result = \"1.3.133.16.840.63.0.2\";\n                        break;\n                    case \"SHA-256\":\n                        result = \"1.3.132.1.11.1\";\n                        break;\n                    case \"SHA-384\":\n                        result = \"1.3.132.1.11.2\";\n                        break;\n                    case \"SHA-512\":\n                        result = \"1.3.132.1.11.3\";\n                        break;\n                }\n                break;\n            case \"AES-CTR\":\n                break;\n            case \"AES-CBC\":\n                switch (algorithm.length) {\n                    case 128:\n                        result = \"2.16.840.1.101.3.4.1.2\";\n                        break;\n                    case 192:\n                        result = \"2.16.840.1.101.3.4.1.22\";\n                        break;\n                    case 256:\n                        result = \"2.16.840.1.101.3.4.1.42\";\n                        break;\n                }\n                break;\n            case \"AES-CMAC\":\n                break;\n            case \"AES-GCM\":\n                switch (algorithm.length) {\n                    case 128:\n                        result = \"2.16.840.1.101.3.4.1.6\";\n                        break;\n                    case 192:\n                        result = \"2.16.840.1.101.3.4.1.26\";\n                        break;\n                    case 256:\n                        result = \"2.16.840.1.101.3.4.1.46\";\n                        break;\n                }\n                break;\n            case \"AES-CFB\":\n                switch (algorithm.length) {\n                    case 128:\n                        result = \"2.16.840.1.101.3.4.1.4\";\n                        break;\n                    case 192:\n                        result = \"2.16.840.1.101.3.4.1.24\";\n                        break;\n                    case 256:\n                        result = \"2.16.840.1.101.3.4.1.44\";\n                        break;\n                }\n                break;\n            case \"AES-KW\":\n                switch (algorithm.length) {\n                    case 128:\n                        result = \"2.16.840.1.101.3.4.1.5\";\n                        break;\n                    case 192:\n                        result = \"2.16.840.1.101.3.4.1.25\";\n                        break;\n                    case 256:\n                        result = \"2.16.840.1.101.3.4.1.45\";\n                        break;\n                }\n                break;\n            case \"HMAC\":\n                switch (algorithm.hash.name.toUpperCase()) {\n                    case \"SHA-1\":\n                        result = \"1.2.840.113549.2.7\";\n                        break;\n                    case \"SHA-256\":\n                        result = \"1.2.840.113549.2.9\";\n                        break;\n                    case \"SHA-384\":\n                        result = \"1.2.840.113549.2.10\";\n                        break;\n                    case \"SHA-512\":\n                        result = \"1.2.840.113549.2.11\";\n                        break;\n                }\n                break;\n            case \"DH\":\n                result = \"1.2.840.113549.1.9.16.3.5\";\n                break;\n            case \"SHA-1\":\n                result = \"1.3.14.3.2.26\";\n                break;\n            case \"SHA-256\":\n                result = \"2.16.840.1.101.3.4.2.1\";\n                break;\n            case \"SHA-384\":\n                result = \"2.16.840.1.101.3.4.2.2\";\n                break;\n            case \"SHA-512\":\n                result = \"2.16.840.1.101.3.4.2.3\";\n                break;\n            case \"CONCAT\":\n                break;\n            case \"HKDF\":\n                break;\n            case \"PBKDF2\":\n                result = \"1.2.840.113549.1.5.12\";\n                break;\n            case \"P-256\":\n                result = \"1.2.840.10045.3.1.7\";\n                break;\n            case \"P-384\":\n                result = \"1.3.132.0.34\";\n                break;\n            case \"P-521\":\n                result = \"1.3.132.0.35\";\n                break;\n        }\n        if (!result && safety) {\n            throw new Error(`Unsupported algorithm ${target ? `for ${target} ` : EMPTY_STRING}: ${algorithm.name}`);\n        }\n        return result;\n    }\n    getAlgorithmParameters(algorithmName, operation) {\n        let result = {\n            algorithm: {},\n            usages: []\n        };\n        switch (algorithmName.toUpperCase()) {\n            case \"RSAES-PKCS1-V1_5\":\n            case \"RSASSA-PKCS1-V1_5\":\n                switch (operation.toLowerCase()) {\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSASSA-PKCS1-v1_5\",\n                                modulusLength: 2048,\n                                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"verify\":\n                    case \"sign\":\n                    case \"importkey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSASSA-PKCS1-v1_5\",\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"verify\"]\n                        };\n                        break;\n                    case \"exportkey\":\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"RSASSA-PKCS1-v1_5\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"RSA-PSS\":\n                switch (operation.toLowerCase()) {\n                    case \"sign\":\n                    case \"verify\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-PSS\",\n                                hash: {\n                                    name: \"SHA-1\"\n                                },\n                                saltLength: 20\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-PSS\",\n                                modulusLength: 2048,\n                                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                                hash: {\n                                    name: \"SHA-1\"\n                                }\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"importkey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-PSS\",\n                                hash: {\n                                    name: \"SHA-1\"\n                                }\n                            },\n                            usages: [\"verify\"]\n                        };\n                        break;\n                    case \"exportkey\":\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"RSA-PSS\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"RSA-OAEP\":\n                switch (operation.toLowerCase()) {\n                    case \"encrypt\":\n                    case \"decrypt\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-OAEP\"\n                            },\n                            usages: [\"encrypt\", \"decrypt\"]\n                        };\n                        break;\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-OAEP\",\n                                modulusLength: 2048,\n                                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    case \"importkey\":\n                        result = {\n                            algorithm: {\n                                name: \"RSA-OAEP\",\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"encrypt\"]\n                        };\n                        break;\n                    case \"exportkey\":\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"RSA-OAEP\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"ECDSA\":\n                switch (operation.toLowerCase()) {\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDSA\",\n                                namedCurve: \"P-256\"\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"importkey\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDSA\",\n                                namedCurve: \"P-256\"\n                            },\n                            usages: [\"verify\"]\n                        };\n                        break;\n                    case \"verify\":\n                    case \"sign\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDSA\",\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"sign\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"ECDSA\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"ECDH\":\n                switch (operation.toLowerCase()) {\n                    case \"exportkey\":\n                    case \"importkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDH\",\n                                namedCurve: \"P-256\"\n                            },\n                            usages: [\"deriveKey\", \"deriveBits\"]\n                        };\n                        break;\n                    case \"derivekey\":\n                    case \"derivebits\":\n                        result = {\n                            algorithm: {\n                                name: \"ECDH\",\n                                namedCurve: \"P-256\",\n                                public: []\n                            },\n                            usages: [\"encrypt\", \"decrypt\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"ECDH\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"AES-CTR\":\n                switch (operation.toLowerCase()) {\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-CTR\",\n                                length: 256\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    case \"decrypt\":\n                    case \"encrypt\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-CTR\",\n                                counter: new Uint8Array(16),\n                                length: 10\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"AES-CTR\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"AES-CBC\":\n                switch (operation.toLowerCase()) {\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-CBC\",\n                                length: 256\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    case \"decrypt\":\n                    case \"encrypt\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-CBC\",\n                                iv: this.getRandomValues(new Uint8Array(16))\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"AES-CBC\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"AES-GCM\":\n                switch (operation.toLowerCase()) {\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-GCM\",\n                                length: 256\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    case \"decrypt\":\n                    case \"encrypt\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-GCM\",\n                                iv: this.getRandomValues(new Uint8Array(16))\n                            },\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"AES-GCM\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"AES-KW\":\n                switch (operation.toLowerCase()) {\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                    case \"wrapkey\":\n                    case \"unwrapkey\":\n                        result = {\n                            algorithm: {\n                                name: \"AES-KW\",\n                                length: 256\n                            },\n                            usages: [\"wrapKey\", \"unwrapKey\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"AES-KW\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"HMAC\":\n                switch (operation.toLowerCase()) {\n                    case \"sign\":\n                    case \"verify\":\n                        result = {\n                            algorithm: {\n                                name: \"HMAC\"\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    case \"importkey\":\n                    case \"exportkey\":\n                    case \"generatekey\":\n                        result = {\n                            algorithm: {\n                                name: \"HMAC\",\n                                length: 32,\n                                hash: {\n                                    name: \"SHA-256\"\n                                }\n                            },\n                            usages: [\"sign\", \"verify\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"HMAC\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"HKDF\":\n                switch (operation.toLowerCase()) {\n                    case \"derivekey\":\n                        result = {\n                            algorithm: {\n                                name: \"HKDF\",\n                                hash: \"SHA-256\",\n                                salt: new Uint8Array([]),\n                                info: new Uint8Array([])\n                            },\n                            usages: [\"encrypt\", \"decrypt\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"HKDF\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n            case \"PBKDF2\":\n                switch (operation.toLowerCase()) {\n                    case \"derivekey\":\n                        result = {\n                            algorithm: {\n                                name: \"PBKDF2\",\n                                hash: { name: \"SHA-256\" },\n                                salt: new Uint8Array([]),\n                                iterations: 10000\n                            },\n                            usages: [\"encrypt\", \"decrypt\"]\n                        };\n                        break;\n                    default:\n                        return {\n                            algorithm: {\n                                name: \"PBKDF2\"\n                            },\n                            usages: []\n                        };\n                }\n                break;\n        }\n        return result;\n    }\n    getHashAlgorithm(signatureAlgorithm) {\n        let result = EMPTY_STRING;\n        switch (signatureAlgorithm.algorithmId) {\n            case \"1.2.840.10045.4.1\":\n            case \"1.2.840.113549.1.1.5\":\n                result = \"SHA-1\";\n                break;\n            case \"1.2.840.10045.4.3.2\":\n            case \"1.2.840.113549.1.1.11\":\n                result = \"SHA-256\";\n                break;\n            case \"1.2.840.10045.4.3.3\":\n            case \"1.2.840.113549.1.1.12\":\n                result = \"SHA-384\";\n                break;\n            case \"1.2.840.10045.4.3.4\":\n            case \"1.2.840.113549.1.1.13\":\n                result = \"SHA-512\";\n                break;\n            case \"1.2.840.113549.1.1.10\":\n                {\n                    try {\n                        const params = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\n                        if (params.hashAlgorithm) {\n                            const algorithm = this.getAlgorithmByOID(params.hashAlgorithm.algorithmId);\n                            if (\"name\" in algorithm) {\n                                result = algorithm.name;\n                            }\n                            else {\n                                return EMPTY_STRING;\n                            }\n                        }\n                        else\n                            result = \"SHA-1\";\n                    }\n                    catch {\n                    }\n                }\n                break;\n        }\n        return result;\n    }\n    async encryptEncryptedContentInfo(parameters) {\n        ParameterError.assert(parameters, \"password\", \"contentEncryptionAlgorithm\", \"hmacHashAlgorithm\", \"iterationCount\", \"contentToEncrypt\", \"contentToEncrypt\", \"contentType\");\n        const contentEncryptionOID = this.getOIDByAlgorithm(parameters.contentEncryptionAlgorithm, true, \"contentEncryptionAlgorithm\");\n        const pbkdf2OID = this.getOIDByAlgorithm({\n            name: \"PBKDF2\"\n        }, true, \"PBKDF2\");\n        const hmacOID = this.getOIDByAlgorithm({\n            name: \"HMAC\",\n            hash: {\n                name: parameters.hmacHashAlgorithm\n            }\n        }, true, \"hmacHashAlgorithm\");\n        const ivBuffer = new ArrayBuffer(16);\n        const ivView = new Uint8Array(ivBuffer);\n        this.getRandomValues(ivView);\n        const saltBuffer = new ArrayBuffer(64);\n        const saltView = new Uint8Array(saltBuffer);\n        this.getRandomValues(saltView);\n        const contentView = new Uint8Array(parameters.contentToEncrypt);\n        const pbkdf2Params = new PBKDF2Params({\n            salt: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: saltBuffer }),\n            iterationCount: parameters.iterationCount,\n            prf: new AlgorithmIdentifier({\n                algorithmId: hmacOID,\n                algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n            })\n        });\n        const passwordView = new Uint8Array(parameters.password);\n        const pbkdfKey = await this.importKey(\"raw\", passwordView, \"PBKDF2\", false, [\"deriveKey\"]);\n        const derivedKey = await this.deriveKey({\n            name: \"PBKDF2\",\n            hash: {\n                name: parameters.hmacHashAlgorithm\n            },\n            salt: saltView,\n            iterations: parameters.iterationCount\n        }, pbkdfKey, parameters.contentEncryptionAlgorithm, false, [\"encrypt\"]);\n        const encryptedData = await this.encrypt({\n            name: parameters.contentEncryptionAlgorithm.name,\n            iv: ivView\n        }, derivedKey, contentView);\n        const pbes2Parameters = new PBES2Params({\n            keyDerivationFunc: new AlgorithmIdentifier({\n                algorithmId: pbkdf2OID,\n                algorithmParams: pbkdf2Params.toSchema()\n            }),\n            encryptionScheme: new AlgorithmIdentifier({\n                algorithmId: contentEncryptionOID,\n                algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: ivBuffer })\n            })\n        });\n        return new EncryptedContentInfo({\n            contentType: parameters.contentType,\n            contentEncryptionAlgorithm: new AlgorithmIdentifier({\n                algorithmId: \"1.2.840.113549.1.5.13\",\n                algorithmParams: pbes2Parameters.toSchema()\n            }),\n            encryptedContent: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: encryptedData })\n        });\n    }\n    async decryptEncryptedContentInfo(parameters) {\n        ParameterError.assert(parameters, \"password\", \"encryptedContentInfo\");\n        if (parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== \"1.2.840.113549.1.5.13\")\n            throw new Error(`Unknown \"contentEncryptionAlgorithm\": ${parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\n        let pbes2Parameters;\n        try {\n            pbes2Parameters = new PBES2Params({ schema: parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams });\n        }\n        catch (ex) {\n            throw new Error(\"Incorrectly encoded \\\"pbes2Parameters\\\"\");\n        }\n        let pbkdf2Params;\n        try {\n            pbkdf2Params = new PBKDF2Params({ schema: pbes2Parameters.keyDerivationFunc.algorithmParams });\n        }\n        catch (ex) {\n            throw new Error(\"Incorrectly encoded \\\"pbkdf2Params\\\"\");\n        }\n        const contentEncryptionAlgorithm = this.getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId, true);\n        const ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;\n        const ivView = new Uint8Array(ivBuffer);\n        const saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;\n        const saltView = new Uint8Array(saltBuffer);\n        const iterationCount = pbkdf2Params.iterationCount;\n        let hmacHashAlgorithm = \"SHA-1\";\n        if (pbkdf2Params.prf) {\n            const algorithm = this.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true);\n            hmacHashAlgorithm = algorithm.hash.name;\n        }\n        const pbkdfKey = await this.importKey(\"raw\", parameters.password, \"PBKDF2\", false, [\"deriveKey\"]);\n        const result = await this.deriveKey({\n            name: \"PBKDF2\",\n            hash: {\n                name: hmacHashAlgorithm\n            },\n            salt: saltView,\n            iterations: iterationCount\n        }, pbkdfKey, contentEncryptionAlgorithm, false, [\"decrypt\"]);\n        const dataBuffer = parameters.encryptedContentInfo.getEncryptedContent();\n        return this.decrypt({\n            name: contentEncryptionAlgorithm.name,\n            iv: ivView\n        }, result, dataBuffer);\n    }\n    async stampDataWithPassword(parameters) {\n        if ((parameters instanceof Object) === false)\n            throw new Error(\"Parameters must have type \\\"Object\\\"\");\n        ParameterError.assert(parameters, \"password\", \"hashAlgorithm\", \"iterationCount\", \"salt\", \"contentToStamp\");\n        let length;\n        switch (parameters.hashAlgorithm.toLowerCase()) {\n            case \"sha-1\":\n                length = 160;\n                break;\n            case \"sha-256\":\n                length = 256;\n                break;\n            case \"sha-384\":\n                length = 384;\n                break;\n            case \"sha-512\":\n                length = 512;\n                break;\n            default:\n                throw new Error(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\n        }\n        const hmacAlgorithm = {\n            name: \"HMAC\",\n            length,\n            hash: {\n                name: parameters.hashAlgorithm\n            }\n        };\n        const pkcsKey = await makePKCS12B2Key(parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount);\n        const hmacKey = await this.importKey(\"raw\", new Uint8Array(pkcsKey), hmacAlgorithm, false, [\"sign\"]);\n        return this.sign(hmacAlgorithm, hmacKey, new Uint8Array(parameters.contentToStamp));\n    }\n    async verifyDataStampedWithPassword(parameters) {\n        ParameterError.assert(parameters, \"password\", \"hashAlgorithm\", \"salt\", \"iterationCount\", \"contentToVerify\", \"signatureToVerify\");\n        let length = 0;\n        switch (parameters.hashAlgorithm.toLowerCase()) {\n            case \"sha-1\":\n                length = 160;\n                break;\n            case \"sha-256\":\n                length = 256;\n                break;\n            case \"sha-384\":\n                length = 384;\n                break;\n            case \"sha-512\":\n                length = 512;\n                break;\n            default:\n                throw new Error(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\n        }\n        const hmacAlgorithm = {\n            name: \"HMAC\",\n            length,\n            hash: {\n                name: parameters.hashAlgorithm\n            }\n        };\n        const pkcsKey = await makePKCS12B2Key(parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount);\n        const hmacKey = await this.importKey(\"raw\", new Uint8Array(pkcsKey), hmacAlgorithm, false, [\"verify\"]);\n        return this.verify(hmacAlgorithm, hmacKey, new Uint8Array(parameters.signatureToVerify), new Uint8Array(parameters.contentToVerify));\n    }\n    async getSignatureParameters(privateKey, hashAlgorithm = \"SHA-1\") {\n        this.getOIDByAlgorithm({ name: hashAlgorithm }, true, \"hashAlgorithm\");\n        const signatureAlgorithm = new AlgorithmIdentifier();\n        const parameters = this.getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\n        if (!Object.keys(parameters.algorithm).length) {\n            throw new Error(\"Parameter 'algorithm' is empty\");\n        }\n        const algorithm = parameters.algorithm;\n        if (\"hash\" in privateKey.algorithm && privateKey.algorithm.hash && privateKey.algorithm.hash.name) {\n            algorithm.hash.name = privateKey.algorithm.hash.name;\n        }\n        else {\n            algorithm.hash.name = hashAlgorithm;\n        }\n        switch (privateKey.algorithm.name.toUpperCase()) {\n            case \"RSASSA-PKCS1-V1_5\":\n            case \"ECDSA\":\n                signatureAlgorithm.algorithmId = this.getOIDByAlgorithm(algorithm, true);\n                break;\n            case \"RSA-PSS\":\n                {\n                    switch (algorithm.hash.name.toUpperCase()) {\n                        case \"SHA-256\":\n                            algorithm.saltLength = 32;\n                            break;\n                        case \"SHA-384\":\n                            algorithm.saltLength = 48;\n                            break;\n                        case \"SHA-512\":\n                            algorithm.saltLength = 64;\n                            break;\n                    }\n                    const paramsObject = {};\n                    if (algorithm.hash.name.toUpperCase() !== \"SHA-1\") {\n                        const hashAlgorithmOID = this.getOIDByAlgorithm({ name: algorithm.hash.name }, true, \"hashAlgorithm\");\n                        paramsObject.hashAlgorithm = new AlgorithmIdentifier({\n                            algorithmId: hashAlgorithmOID,\n                            algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                        });\n                        paramsObject.maskGenAlgorithm = new AlgorithmIdentifier({\n                            algorithmId: \"1.2.840.113549.1.1.8\",\n                            algorithmParams: paramsObject.hashAlgorithm.toSchema()\n                        });\n                    }\n                    if (algorithm.saltLength !== 20)\n                        paramsObject.saltLength = algorithm.saltLength;\n                    const pssParameters = new RSASSAPSSParams(paramsObject);\n                    signatureAlgorithm.algorithmId = \"1.2.840.113549.1.1.10\";\n                    signatureAlgorithm.algorithmParams = pssParameters.toSchema();\n                }\n                break;\n            default:\n                throw new Error(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\n        }\n        return {\n            signatureAlgorithm,\n            parameters\n        };\n    }\n    async signWithPrivateKey(data, privateKey, parameters) {\n        const signature = await this.sign(parameters.algorithm, privateKey, data);\n        if (parameters.algorithm.name === \"ECDSA\") {\n            return createCMSECDSASignature(signature);\n        }\n        return signature;\n    }\n    fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm) {\n        const parameters = {};\n        const shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\n        if (shaAlgorithm === EMPTY_STRING)\n            throw new Error(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\n        let algorithmId;\n        if (signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\n            algorithmId = signatureAlgorithm.algorithmId;\n        else\n            algorithmId = publicKeyInfo.algorithm.algorithmId;\n        const algorithmObject = this.getAlgorithmByOID(algorithmId, true);\n        parameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importKey\");\n        if (\"hash\" in parameters.algorithm.algorithm)\n            parameters.algorithm.algorithm.hash.name = shaAlgorithm;\n        if (algorithmObject.name === \"ECDSA\") {\n            const publicKeyAlgorithm = publicKeyInfo.algorithm;\n            if (!publicKeyAlgorithm.algorithmParams) {\n                throw new Error(\"Algorithm parameters for ECDSA public key are missed\");\n            }\n            const publicKeyAlgorithmParams = publicKeyAlgorithm.algorithmParams;\n            if (\"idBlock\" in publicKeyAlgorithm.algorithmParams) {\n                if (!((publicKeyAlgorithmParams.idBlock.tagClass === 1) && (publicKeyAlgorithmParams.idBlock.tagNumber === 6))) {\n                    throw new Error(\"Incorrect type for ECDSA public key parameters\");\n                }\n            }\n            const curveObject = this.getAlgorithmByOID(publicKeyAlgorithmParams.valueBlock.toString(), true);\n            parameters.algorithm.algorithm.namedCurve = curveObject.name;\n        }\n        return parameters;\n    }\n    async getPublicKey(publicKeyInfo, signatureAlgorithm, parameters) {\n        if (!parameters) {\n            parameters = this.fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm);\n        }\n        const publicKeyInfoBuffer = publicKeyInfo.toSchema().toBER(false);\n        return this.importKey(\"spki\", publicKeyInfoBuffer, parameters.algorithm.algorithm, true, parameters.algorithm.usages);\n    }\n    async verifyWithPublicKey(data, signature, publicKeyInfo, signatureAlgorithm, shaAlgorithm) {\n        let publicKey;\n        if (!shaAlgorithm) {\n            shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\n            if (!shaAlgorithm)\n                throw new Error(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\n            publicKey = await this.getPublicKey(publicKeyInfo, signatureAlgorithm);\n        }\n        else {\n            const parameters = {};\n            let algorithmId;\n            if (signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\n                algorithmId = signatureAlgorithm.algorithmId;\n            else\n                algorithmId = publicKeyInfo.algorithm.algorithmId;\n            const algorithmObject = this.getAlgorithmByOID(algorithmId, true);\n            parameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importKey\");\n            if (\"hash\" in parameters.algorithm.algorithm)\n                parameters.algorithm.algorithm.hash.name = shaAlgorithm;\n            if (algorithmObject.name === \"ECDSA\") {\n                let algorithmParamsChecked = false;\n                if ((\"algorithmParams\" in publicKeyInfo.algorithm) === true) {\n                    if (\"idBlock\" in publicKeyInfo.algorithm.algorithmParams) {\n                        if ((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\n                            algorithmParamsChecked = true;\n                    }\n                }\n                if (algorithmParamsChecked === false) {\n                    throw new Error(\"Incorrect type for ECDSA public key parameters\");\n                }\n                const curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString(), true);\n                parameters.algorithm.algorithm.namedCurve = curveObject.name;\n            }\n            publicKey = await this.getPublicKey(publicKeyInfo, null, parameters);\n        }\n        const algorithm = this.getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\n        if (\"hash\" in algorithm.algorithm)\n            algorithm.algorithm.hash.name = shaAlgorithm;\n        let signatureValue = signature.valueBlock.valueHexView;\n        if (publicKey.algorithm.name === \"ECDSA\") {\n            const namedCurve = ECNamedCurves.find(publicKey.algorithm.namedCurve);\n            if (!namedCurve) {\n                throw new Error(\"Unsupported named curve in use\");\n            }\n            const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(signatureValue);\n            AsnError.assert(asn1, \"Signature value\");\n            signatureValue = createECDSASignatureFromCMS(asn1.result, namedCurve.size);\n        }\n        if (publicKey.algorithm.name === \"RSA-PSS\") {\n            const pssParameters = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\n            if (\"saltLength\" in pssParameters)\n                algorithm.algorithm.saltLength = pssParameters.saltLength;\n            else\n                algorithm.algorithm.saltLength = 20;\n            let hashAlgo = \"SHA-1\";\n            if (\"hashAlgorithm\" in pssParameters) {\n                const hashAlgorithm = this.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId, true);\n                hashAlgo = hashAlgorithm.name;\n            }\n            algorithm.algorithm.hash.name = hashAlgo;\n        }\n        return this.verify(algorithm.algorithm, publicKey, signatureValue, data);\n    }\n}\n\nlet engine = {\n    name: \"none\",\n    crypto: null,\n};\nfunction isCryptoEngine(engine) {\n    return engine\n        && typeof engine === \"object\"\n        && \"crypto\" in engine\n        ? true\n        : false;\n}\nfunction setEngine(name, ...args) {\n    let crypto = null;\n    if (args.length < 2) {\n        if (args.length) {\n            crypto = args[0];\n        }\n        else {\n            crypto = typeof self !== \"undefined\" && self.crypto ? new CryptoEngine({ name: \"browser\", crypto: self.crypto }) : null;\n        }\n    }\n    else {\n        const cryptoArg = args[0];\n        const subtleArg = args[1];\n        if (isCryptoEngine(subtleArg)) {\n            crypto = subtleArg;\n        }\n        else if (isCryptoEngine(cryptoArg)) {\n            crypto = cryptoArg;\n        }\n        else if (\"subtle\" in cryptoArg && \"getRandomValues\" in cryptoArg) {\n            crypto = new CryptoEngine({\n                crypto: cryptoArg,\n            });\n        }\n    }\n    if ((typeof process !== \"undefined\") && (\"pid\" in process) && (typeof __webpack_require__.g !== \"undefined\") && (typeof window === \"undefined\")) {\n        if (typeof __webpack_require__.g[process.pid] === \"undefined\") {\n            __webpack_require__.g[process.pid] = {};\n        }\n        else {\n            if (typeof __webpack_require__.g[process.pid] !== \"object\") {\n                throw new Error(`Name global.${process.pid} already exists and it is not an object`);\n            }\n        }\n        if (typeof __webpack_require__.g[process.pid].pkijs === \"undefined\") {\n            __webpack_require__.g[process.pid].pkijs = {};\n        }\n        else {\n            if (typeof __webpack_require__.g[process.pid].pkijs !== \"object\") {\n                throw new Error(`Name global.${process.pid}.pkijs already exists and it is not an object`);\n            }\n        }\n        __webpack_require__.g[process.pid].pkijs.engine = {\n            name: name,\n            crypto,\n        };\n    }\n    else {\n        engine = {\n            name: name,\n            crypto,\n        };\n    }\n}\nfunction getEngine() {\n    if ((typeof process !== \"undefined\") && (\"pid\" in process) && (typeof __webpack_require__.g !== \"undefined\") && (typeof window === \"undefined\")) {\n        let _engine;\n        try {\n            _engine = __webpack_require__.g[process.pid].pkijs.engine;\n        }\n        catch (ex) {\n            throw new Error(\"Please call 'setEngine' before call to 'getEngine'\");\n        }\n        return _engine;\n    }\n    return engine;\n}\nfunction getCrypto(safety = false) {\n    const _engine = getEngine();\n    if (!_engine.crypto && safety) {\n        throw new Error(\"Unable to create WebCrypto object\");\n    }\n    return _engine.crypto;\n}\nfunction getRandomValues(view) {\n    return getCrypto(true).getRandomValues(view);\n}\nfunction getOIDByAlgorithm(algorithm, safety, target) {\n    return getCrypto(true).getOIDByAlgorithm(algorithm, safety, target);\n}\nfunction getAlgorithmParameters(algorithmName, operation) {\n    return getCrypto(true).getAlgorithmParameters(algorithmName, operation);\n}\nfunction createCMSECDSASignature(signatureBuffer) {\n    if ((signatureBuffer.byteLength % 2) !== 0)\n        return EMPTY_BUFFER;\n    const length = signatureBuffer.byteLength / 2;\n    const rBuffer = new ArrayBuffer(length);\n    const rView = new Uint8Array(rBuffer);\n    rView.set(new Uint8Array(signatureBuffer, 0, length));\n    const rInteger = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: rBuffer });\n    const sBuffer = new ArrayBuffer(length);\n    const sView = new Uint8Array(sBuffer);\n    sView.set(new Uint8Array(signatureBuffer, length, length));\n    const sInteger = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ valueHex: sBuffer });\n    return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n        value: [\n            rInteger.convertToDER(),\n            sInteger.convertToDER()\n        ]\n    })).toBER(false);\n}\nfunction createECDSASignatureFromCMS(cmsSignature, pointSize) {\n    if (!(cmsSignature instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence\n        && cmsSignature.valueBlock.value.length === 2\n        && cmsSignature.valueBlock.value[0] instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer\n        && cmsSignature.valueBlock.value[1] instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer))\n        return EMPTY_BUFFER;\n    const rValueView = cmsSignature.valueBlock.value[0].convertFromDER().valueBlock.valueHexView;\n    const sValueView = cmsSignature.valueBlock.value[1].convertFromDER().valueBlock.valueHexView;\n    const res = new Uint8Array(pointSize * 2);\n    res.set(rValueView, pointSize - rValueView.byteLength);\n    res.set(sValueView, (2 * pointSize) - sValueView.byteLength);\n    return res.buffer;\n}\nfunction getAlgorithmByOID(oid, safety = false, target) {\n    return getCrypto(true).getAlgorithmByOID(oid, safety, target);\n}\nfunction getHashAlgorithm(signatureAlgorithm) {\n    return getCrypto(true).getHashAlgorithm(signatureAlgorithm);\n}\nasync function kdfWithCounter(hashFunction, zBuffer, Counter, SharedInfo, crypto) {\n    switch (hashFunction.toUpperCase()) {\n        case \"SHA-1\":\n        case \"SHA-256\":\n        case \"SHA-384\":\n        case \"SHA-512\":\n            break;\n        default:\n            throw new ArgumentError(`Unknown hash function: ${hashFunction}`);\n    }\n    ArgumentError.assert(zBuffer, \"zBuffer\", \"ArrayBuffer\");\n    if (zBuffer.byteLength === 0)\n        throw new ArgumentError(\"'zBuffer' has zero length, error\");\n    ArgumentError.assert(SharedInfo, \"SharedInfo\", \"ArrayBuffer\");\n    if (Counter > 255)\n        throw new ArgumentError(\"Please set 'Counter' argument to value less or equal to 255\");\n    const counterBuffer = new ArrayBuffer(4);\n    const counterView = new Uint8Array(counterBuffer);\n    counterView[0] = 0x00;\n    counterView[1] = 0x00;\n    counterView[2] = 0x00;\n    counterView[3] = Counter;\n    let combinedBuffer = EMPTY_BUFFER;\n    combinedBuffer = pvutils__WEBPACK_IMPORTED_MODULE_2__.utilConcatBuf(combinedBuffer, zBuffer);\n    combinedBuffer = pvutils__WEBPACK_IMPORTED_MODULE_2__.utilConcatBuf(combinedBuffer, counterBuffer);\n    combinedBuffer = pvutils__WEBPACK_IMPORTED_MODULE_2__.utilConcatBuf(combinedBuffer, SharedInfo);\n    const result = await crypto.digest({ name: hashFunction }, combinedBuffer);\n    return {\n        counter: Counter,\n        result\n    };\n}\nasync function kdf(hashFunction, Zbuffer, keydatalen, SharedInfo, crypto = getCrypto(true)) {\n    let hashLength = 0;\n    let maxCounter = 1;\n    switch (hashFunction.toUpperCase()) {\n        case \"SHA-1\":\n            hashLength = 160;\n            break;\n        case \"SHA-256\":\n            hashLength = 256;\n            break;\n        case \"SHA-384\":\n            hashLength = 384;\n            break;\n        case \"SHA-512\":\n            hashLength = 512;\n            break;\n        default:\n            throw new ArgumentError(`Unknown hash function: ${hashFunction}`);\n    }\n    ArgumentError.assert(Zbuffer, \"Zbuffer\", \"ArrayBuffer\");\n    if (Zbuffer.byteLength === 0)\n        throw new ArgumentError(\"'Zbuffer' has zero length, error\");\n    ArgumentError.assert(SharedInfo, \"SharedInfo\", \"ArrayBuffer\");\n    const quotient = keydatalen / hashLength;\n    if (Math.floor(quotient) > 0) {\n        maxCounter = Math.floor(quotient);\n        if ((quotient - maxCounter) > 0)\n            maxCounter++;\n    }\n    const incomingResult = [];\n    for (let i = 1; i <= maxCounter; i++)\n        incomingResult.push(await kdfWithCounter(hashFunction, Zbuffer, i, SharedInfo, crypto));\n    let combinedBuffer = EMPTY_BUFFER;\n    let currentCounter = 1;\n    let found = true;\n    while (found) {\n        found = false;\n        for (const result of incomingResult) {\n            if (result.counter === currentCounter) {\n                combinedBuffer = pvutils__WEBPACK_IMPORTED_MODULE_2__.utilConcatBuf(combinedBuffer, result.result);\n                found = true;\n                break;\n            }\n        }\n        currentCounter++;\n    }\n    keydatalen >>= 3;\n    if (combinedBuffer.byteLength > keydatalen) {\n        const newBuffer = new ArrayBuffer(keydatalen);\n        const newView = new Uint8Array(newBuffer);\n        const combinedView = new Uint8Array(combinedBuffer);\n        for (let i = 0; i < keydatalen; i++)\n            newView[i] = combinedView[i];\n        return newBuffer;\n    }\n    return combinedBuffer;\n}\n\nconst VERSION$i = \"version\";\nconst LOG_ID = \"logID\";\nconst EXTENSIONS$6 = \"extensions\";\nconst TIMESTAMP = \"timestamp\";\nconst HASH_ALGORITHM$3 = \"hashAlgorithm\";\nconst SIGNATURE_ALGORITHM$8 = \"signatureAlgorithm\";\nconst SIGNATURE$7 = \"signature\";\nconst NONE = \"none\";\nconst MD5 = \"md5\";\nconst SHA1 = \"sha1\";\nconst SHA224 = \"sha224\";\nconst SHA256 = \"sha256\";\nconst SHA384 = \"sha384\";\nconst SHA512 = \"sha512\";\nconst ANONYMOUS = \"anonymous\";\nconst RSA = \"rsa\";\nconst DSA = \"dsa\";\nconst ECDSA = \"ecdsa\";\nclass SignedCertificateTimestamp extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$i, SignedCertificateTimestamp.defaultValues(VERSION$i));\n        this.logID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, LOG_ID, SignedCertificateTimestamp.defaultValues(LOG_ID));\n        this.timestamp = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TIMESTAMP, SignedCertificateTimestamp.defaultValues(TIMESTAMP));\n        this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXTENSIONS$6, SignedCertificateTimestamp.defaultValues(EXTENSIONS$6));\n        this.hashAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, HASH_ALGORITHM$3, SignedCertificateTimestamp.defaultValues(HASH_ALGORITHM$3));\n        this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_ALGORITHM$8, SignedCertificateTimestamp.defaultValues(SIGNATURE_ALGORITHM$8));\n        this.signature = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE$7, SignedCertificateTimestamp.defaultValues(SIGNATURE$7));\n        if (\"stream\" in parameters && parameters.stream) {\n            this.fromStream(parameters.stream);\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$i:\n                return 0;\n            case LOG_ID:\n            case EXTENSIONS$6:\n                return EMPTY_BUFFER;\n            case TIMESTAMP:\n                return new Date(0);\n            case HASH_ALGORITHM$3:\n            case SIGNATURE_ALGORITHM$8:\n                return EMPTY_STRING;\n            case SIGNATURE$7:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    fromSchema(schema) {\n        if ((schema instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.RawData) === false)\n            throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestamp\");\n        const seqStream = new bytestreamjs__WEBPACK_IMPORTED_MODULE_3__.SeqStream({\n            stream: new bytestreamjs__WEBPACK_IMPORTED_MODULE_3__.ByteStream({\n                buffer: schema.data\n            })\n        });\n        this.fromStream(seqStream);\n    }\n    fromStream(stream) {\n        const blockLength = stream.getUint16();\n        this.version = (stream.getBlock(1))[0];\n        if (this.version === 0) {\n            this.logID = (new Uint8Array(stream.getBlock(32))).buffer.slice(0);\n            this.timestamp = new Date(pvutils__WEBPACK_IMPORTED_MODULE_2__.utilFromBase(new Uint8Array(stream.getBlock(8)), 8));\n            const extensionsLength = stream.getUint16();\n            this.extensions = (new Uint8Array(stream.getBlock(extensionsLength))).buffer.slice(0);\n            switch ((stream.getBlock(1))[0]) {\n                case 0:\n                    this.hashAlgorithm = NONE;\n                    break;\n                case 1:\n                    this.hashAlgorithm = MD5;\n                    break;\n                case 2:\n                    this.hashAlgorithm = SHA1;\n                    break;\n                case 3:\n                    this.hashAlgorithm = SHA224;\n                    break;\n                case 4:\n                    this.hashAlgorithm = SHA256;\n                    break;\n                case 5:\n                    this.hashAlgorithm = SHA384;\n                    break;\n                case 6:\n                    this.hashAlgorithm = SHA512;\n                    break;\n                default:\n                    throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n            }\n            switch ((stream.getBlock(1))[0]) {\n                case 0:\n                    this.signatureAlgorithm = ANONYMOUS;\n                    break;\n                case 1:\n                    this.signatureAlgorithm = RSA;\n                    break;\n                case 2:\n                    this.signatureAlgorithm = DSA;\n                    break;\n                case 3:\n                    this.signatureAlgorithm = ECDSA;\n                    break;\n                default:\n                    throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n            }\n            const signatureLength = stream.getUint16();\n            const signatureData = new Uint8Array(stream.getBlock(signatureLength)).buffer.slice(0);\n            const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(signatureData);\n            AsnError.assert(asn1, \"SignedCertificateTimestamp\");\n            this.signature = asn1.result;\n            if (blockLength !== (47 + extensionsLength + signatureLength)) {\n                throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n            }\n        }\n    }\n    toSchema() {\n        const stream = this.toStream();\n        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.RawData({ data: stream.stream.buffer });\n    }\n    toStream() {\n        const stream = new bytestreamjs__WEBPACK_IMPORTED_MODULE_3__.SeqStream();\n        stream.appendUint16(47 + this.extensions.byteLength + this.signature.valueBeforeDecodeView.byteLength);\n        stream.appendChar(this.version);\n        stream.appendView(new Uint8Array(this.logID));\n        const timeBuffer = new ArrayBuffer(8);\n        const timeView = new Uint8Array(timeBuffer);\n        const baseArray = pvutils__WEBPACK_IMPORTED_MODULE_2__.utilToBase(this.timestamp.valueOf(), 8);\n        timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n        stream.appendView(timeView);\n        stream.appendUint16(this.extensions.byteLength);\n        if (this.extensions.byteLength)\n            stream.appendView(new Uint8Array(this.extensions));\n        let _hashAlgorithm;\n        switch (this.hashAlgorithm.toLowerCase()) {\n            case NONE:\n                _hashAlgorithm = 0;\n                break;\n            case MD5:\n                _hashAlgorithm = 1;\n                break;\n            case SHA1:\n                _hashAlgorithm = 2;\n                break;\n            case SHA224:\n                _hashAlgorithm = 3;\n                break;\n            case SHA256:\n                _hashAlgorithm = 4;\n                break;\n            case SHA384:\n                _hashAlgorithm = 5;\n                break;\n            case SHA512:\n                _hashAlgorithm = 6;\n                break;\n            default:\n                throw new Error(`Incorrect data for hashAlgorithm: ${this.hashAlgorithm}`);\n        }\n        stream.appendChar(_hashAlgorithm);\n        let _signatureAlgorithm;\n        switch (this.signatureAlgorithm.toLowerCase()) {\n            case ANONYMOUS:\n                _signatureAlgorithm = 0;\n                break;\n            case RSA:\n                _signatureAlgorithm = 1;\n                break;\n            case DSA:\n                _signatureAlgorithm = 2;\n                break;\n            case ECDSA:\n                _signatureAlgorithm = 3;\n                break;\n            default:\n                throw new Error(`Incorrect data for signatureAlgorithm: ${this.signatureAlgorithm}`);\n        }\n        stream.appendChar(_signatureAlgorithm);\n        const _signature = this.signature.toBER(false);\n        stream.appendUint16(_signature.byteLength);\n        stream.appendView(new Uint8Array(_signature));\n        return stream;\n    }\n    toJSON() {\n        return {\n            version: this.version,\n            logID: pvutils__WEBPACK_IMPORTED_MODULE_2__.bufferToHexCodes(this.logID),\n            timestamp: this.timestamp,\n            extensions: pvutils__WEBPACK_IMPORTED_MODULE_2__.bufferToHexCodes(this.extensions),\n            hashAlgorithm: this.hashAlgorithm,\n            signatureAlgorithm: this.signatureAlgorithm,\n            signature: this.signature.toJSON()\n        };\n    }\n    async verify(logs, data, dataType = 0, crypto = getCrypto(true)) {\n        const logId = pvutils__WEBPACK_IMPORTED_MODULE_2__.toBase64(pvutils__WEBPACK_IMPORTED_MODULE_2__.arrayBufferToString(this.logID));\n        let publicKeyBase64 = null;\n        const stream = new bytestreamjs__WEBPACK_IMPORTED_MODULE_3__.SeqStream();\n        for (const log of logs) {\n            if (log.log_id === logId) {\n                publicKeyBase64 = log.key;\n                break;\n            }\n        }\n        if (!publicKeyBase64) {\n            throw new Error(`Public key not found for CT with logId: ${logId}`);\n        }\n        const pki = pvutils__WEBPACK_IMPORTED_MODULE_2__.stringToArrayBuffer(pvutils__WEBPACK_IMPORTED_MODULE_2__.fromBase64(publicKeyBase64));\n        const publicKeyInfo = PublicKeyInfo.fromBER(pki);\n        stream.appendChar(0x00);\n        stream.appendChar(0x00);\n        const timeBuffer = new ArrayBuffer(8);\n        const timeView = new Uint8Array(timeBuffer);\n        const baseArray = pvutils__WEBPACK_IMPORTED_MODULE_2__.utilToBase(this.timestamp.valueOf(), 8);\n        timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n        stream.appendView(timeView);\n        stream.appendUint16(dataType);\n        if (dataType === 0)\n            stream.appendUint24(data.byteLength);\n        stream.appendView(new Uint8Array(data));\n        stream.appendUint16(this.extensions.byteLength);\n        if (this.extensions.byteLength !== 0)\n            stream.appendView(new Uint8Array(this.extensions));\n        return crypto.verifyWithPublicKey(stream.buffer.slice(0, stream.length), new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: this.signature.toBER(false) }), publicKeyInfo, { algorithmId: EMPTY_STRING }, \"SHA-256\");\n    }\n}\nSignedCertificateTimestamp.CLASS_NAME = \"SignedCertificateTimestamp\";\nasync function verifySCTsForCertificate(certificate, issuerCertificate, logs, index = (-1), crypto = getCrypto(true)) {\n    let parsedValue = null;\n    const stream = new bytestreamjs__WEBPACK_IMPORTED_MODULE_3__.SeqStream();\n    if (certificate.extensions) {\n        for (let i = certificate.extensions.length - 1; i >= 0; i--) {\n            switch (certificate.extensions[i].extnID) {\n                case id_SignedCertificateTimestampList:\n                    {\n                        parsedValue = certificate.extensions[i].parsedValue;\n                        if (!parsedValue || parsedValue.timestamps.length === 0)\n                            throw new Error(\"Nothing to verify in the certificate\");\n                        certificate.extensions.splice(i, 1);\n                    }\n                    break;\n            }\n        }\n    }\n    if (parsedValue === null)\n        throw new Error(\"No SignedCertificateTimestampList extension in the specified certificate\");\n    const tbs = certificate.encodeTBS().toBER();\n    const issuerId = await crypto.digest({ name: \"SHA-256\" }, new Uint8Array(issuerCertificate.subjectPublicKeyInfo.toSchema().toBER(false)));\n    stream.appendView(new Uint8Array(issuerId));\n    stream.appendUint24(tbs.byteLength);\n    stream.appendView(new Uint8Array(tbs));\n    const preCert = stream.stream.slice(0, stream.length);\n    if (index === (-1)) {\n        const verifyArray = [];\n        for (const timestamp of parsedValue.timestamps) {\n            const verifyResult = await timestamp.verify(logs, preCert.buffer, 1, crypto);\n            verifyArray.push(verifyResult);\n        }\n        return verifyArray;\n    }\n    if (index >= parsedValue.timestamps.length)\n        index = (parsedValue.timestamps.length - 1);\n    return [await parsedValue.timestamps[index].verify(logs, preCert.buffer, 1, crypto)];\n}\n\nconst TIMESTAMPS = \"timestamps\";\nclass SignedCertificateTimestampList extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.timestamps = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TIMESTAMPS, SignedCertificateTimestampList.defaultValues(TIMESTAMPS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TIMESTAMPS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TIMESTAMPS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        var _a;\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        (_a = names.optional) !== null && _a !== void 0 ? _a : (names.optional = false);\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({\n            name: (names.blockName || \"SignedCertificateTimestampList\"),\n            optional: names.optional\n        }));\n    }\n    fromSchema(schema) {\n        if ((schema instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString) === false) {\n            throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n        }\n        const seqStream = new bytestreamjs__WEBPACK_IMPORTED_MODULE_3__.SeqStream({\n            stream: new bytestreamjs__WEBPACK_IMPORTED_MODULE_3__.ByteStream({\n                buffer: schema.valueBlock.valueHex\n            })\n        });\n        const dataLength = seqStream.getUint16();\n        if (dataLength !== seqStream.length) {\n            throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n        }\n        while (seqStream.length) {\n            this.timestamps.push(new SignedCertificateTimestamp({ stream: seqStream }));\n        }\n    }\n    toSchema() {\n        const stream = new bytestreamjs__WEBPACK_IMPORTED_MODULE_3__.SeqStream();\n        let overallLength = 0;\n        const timestampsData = [];\n        for (const timestamp of this.timestamps) {\n            const timestampStream = timestamp.toStream();\n            timestampsData.push(timestampStream);\n            overallLength += timestampStream.stream.buffer.byteLength;\n        }\n        stream.appendUint16(overallLength);\n        for (const timestamp of timestampsData) {\n            stream.appendView(timestamp.stream.view);\n        }\n        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: stream.stream.buffer.slice(0) });\n    }\n    toJSON() {\n        return {\n            timestamps: Array.from(this.timestamps, o => o.toJSON())\n        };\n    }\n}\nSignedCertificateTimestampList.CLASS_NAME = \"SignedCertificateTimestampList\";\n\nconst ATTRIBUTES$4 = \"attributes\";\nconst CLEAR_PROPS$11 = [\n    ATTRIBUTES$4\n];\nclass SubjectDirectoryAttributes extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.attributes = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ATTRIBUTES$4, SubjectDirectoryAttributes.defaultValues(ATTRIBUTES$4));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ATTRIBUTES$4:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.attributes || EMPTY_STRING),\n                    value: Attribute.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$11);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, SubjectDirectoryAttributes.schema({\n            names: {\n                attributes: ATTRIBUTES$4\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.attributes, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            attributes: Array.from(this.attributes, o => o.toJSON())\n        };\n    }\n}\nSubjectDirectoryAttributes.CLASS_NAME = \"SubjectDirectoryAttributes\";\n\nclass ExtensionValueFactory {\n    static getItems() {\n        if (!this.types) {\n            this.types = {};\n            ExtensionValueFactory.register(id_SubjectAltName, \"SubjectAltName\", AltName);\n            ExtensionValueFactory.register(id_IssuerAltName, \"IssuerAltName\", AltName);\n            ExtensionValueFactory.register(id_AuthorityKeyIdentifier, \"AuthorityKeyIdentifier\", AuthorityKeyIdentifier);\n            ExtensionValueFactory.register(id_BasicConstraints, \"BasicConstraints\", BasicConstraints);\n            ExtensionValueFactory.register(id_MicrosoftCaVersion, \"MicrosoftCaVersion\", CAVersion);\n            ExtensionValueFactory.register(id_CertificatePolicies, \"CertificatePolicies\", CertificatePolicies);\n            ExtensionValueFactory.register(id_MicrosoftAppPolicies, \"CertificatePoliciesMicrosoft\", CertificatePolicies);\n            ExtensionValueFactory.register(id_MicrosoftCertTemplateV2, \"MicrosoftCertTemplateV2\", CertificateTemplate);\n            ExtensionValueFactory.register(id_CRLDistributionPoints, \"CRLDistributionPoints\", CRLDistributionPoints);\n            ExtensionValueFactory.register(id_FreshestCRL, \"FreshestCRL\", CRLDistributionPoints);\n            ExtensionValueFactory.register(id_ExtKeyUsage, \"ExtKeyUsage\", ExtKeyUsage);\n            ExtensionValueFactory.register(id_CertificateIssuer, \"CertificateIssuer\", GeneralNames);\n            ExtensionValueFactory.register(id_AuthorityInfoAccess, \"AuthorityInfoAccess\", InfoAccess);\n            ExtensionValueFactory.register(id_SubjectInfoAccess, \"SubjectInfoAccess\", InfoAccess);\n            ExtensionValueFactory.register(id_IssuingDistributionPoint, \"IssuingDistributionPoint\", IssuingDistributionPoint);\n            ExtensionValueFactory.register(id_NameConstraints, \"NameConstraints\", NameConstraints);\n            ExtensionValueFactory.register(id_PolicyConstraints, \"PolicyConstraints\", PolicyConstraints);\n            ExtensionValueFactory.register(id_PolicyMappings, \"PolicyMappings\", PolicyMappings);\n            ExtensionValueFactory.register(id_PrivateKeyUsagePeriod, \"PrivateKeyUsagePeriod\", PrivateKeyUsagePeriod);\n            ExtensionValueFactory.register(id_QCStatements, \"QCStatements\", QCStatements);\n            ExtensionValueFactory.register(id_SignedCertificateTimestampList, \"SignedCertificateTimestampList\", SignedCertificateTimestampList);\n            ExtensionValueFactory.register(id_SubjectDirectoryAttributes, \"SubjectDirectoryAttributes\", SubjectDirectoryAttributes);\n        }\n        return this.types;\n    }\n    static fromBER(id, raw) {\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(raw);\n        if (asn1.offset === -1) {\n            return null;\n        }\n        const item = this.find(id);\n        if (item) {\n            try {\n                return new item.type({ schema: asn1.result });\n            }\n            catch (ex) {\n                const res = new item.type();\n                res.parsingError = `Incorrectly formatted value of extension ${item.name} (${id})`;\n                return res;\n            }\n        }\n        return asn1.result;\n    }\n    static find(id) {\n        const types = this.getItems();\n        return types[id] || null;\n    }\n    static register(id, name, type) {\n        this.getItems()[id] = { name, type };\n    }\n}\n\nconst EXTN_ID = \"extnID\";\nconst CRITICAL = \"critical\";\nconst EXTN_VALUE = \"extnValue\";\nconst PARSED_VALUE$5 = \"parsedValue\";\nconst CLEAR_PROPS$10 = [\n    EXTN_ID,\n    CRITICAL,\n    EXTN_VALUE\n];\nclass Extension extends PkiObject {\n    get parsedValue() {\n        if (this._parsedValue === undefined) {\n            const parsedValue = ExtensionValueFactory.fromBER(this.extnID, this.extnValue.valueBlock.valueHexView);\n            this._parsedValue = parsedValue;\n        }\n        return this._parsedValue || undefined;\n    }\n    set parsedValue(value) {\n        this._parsedValue = value;\n    }\n    constructor(parameters = {}) {\n        super();\n        this.extnID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXTN_ID, Extension.defaultValues(EXTN_ID));\n        this.critical = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRITICAL, Extension.defaultValues(CRITICAL));\n        if (EXTN_VALUE in parameters) {\n            this.extnValue = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: parameters.extnValue });\n        }\n        else {\n            this.extnValue = Extension.defaultValues(EXTN_VALUE);\n        }\n        if (PARSED_VALUE$5 in parameters) {\n            this.parsedValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PARSED_VALUE$5, Extension.defaultValues(PARSED_VALUE$5));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case EXTN_ID:\n                return EMPTY_STRING;\n            case CRITICAL:\n                return false;\n            case EXTN_VALUE:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case PARSED_VALUE$5:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.extnID || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Boolean({\n                    name: (names.critical || EMPTY_STRING),\n                    optional: true\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.extnValue || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$10);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, Extension.schema({\n            names: {\n                extnID: EXTN_ID,\n                critical: CRITICAL,\n                extnValue: EXTN_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.extnID = asn1.result.extnID.valueBlock.toString();\n        if (CRITICAL in asn1.result) {\n            this.critical = asn1.result.critical.valueBlock.value;\n        }\n        this.extnValue = asn1.result.extnValue;\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.extnID }));\n        if (this.critical !== Extension.defaultValues(CRITICAL)) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Boolean({ value: this.critical }));\n        }\n        outputArray.push(this.extnValue);\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const object = {\n            extnID: this.extnID,\n            extnValue: this.extnValue.toJSON(),\n        };\n        if (this.critical !== Extension.defaultValues(CRITICAL)) {\n            object.critical = this.critical;\n        }\n        if (this.parsedValue && this.parsedValue.toJSON) {\n            object.parsedValue = this.parsedValue.toJSON();\n        }\n        return object;\n    }\n}\nExtension.CLASS_NAME = \"Extension\";\n\nconst EXTENSIONS$5 = \"extensions\";\nconst CLEAR_PROPS$$ = [\n    EXTENSIONS$5,\n];\nclass Extensions extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXTENSIONS$5, Extensions.defaultValues(EXTENSIONS$5));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case EXTENSIONS$5:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}, optional = false) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            optional,\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.extensions || EMPTY_STRING),\n                    value: Extension.schema(names.extension || {})\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$$);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, Extensions.schema({\n            names: {\n                extensions: EXTENSIONS$5\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.extensions = Array.from(asn1.result.extensions, element => new Extension({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.extensions, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            extensions: this.extensions.map(o => o.toJSON())\n        };\n    }\n}\nExtensions.CLASS_NAME = \"Extensions\";\n\nconst ISSUER$5 = \"issuer\";\nconst SERIAL_NUMBER$6 = \"serialNumber\";\nconst ISSUER_UID = \"issuerUID\";\nconst CLEAR_PROPS$_ = [\n    ISSUER$5,\n    SERIAL_NUMBER$6,\n    ISSUER_UID,\n];\nclass IssuerSerial extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.issuer = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER$5, IssuerSerial.defaultValues(ISSUER$5));\n        this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SERIAL_NUMBER$6, IssuerSerial.defaultValues(SERIAL_NUMBER$6));\n        if (ISSUER_UID in parameters) {\n            this.issuerUID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER_UID, IssuerSerial.defaultValues(ISSUER_UID));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ISSUER$5:\n                return new GeneralNames();\n            case SERIAL_NUMBER$6:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case ISSUER_UID:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                GeneralNames.schema(names.issuer || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.serialNumber || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({\n                    optional: true,\n                    name: (names.issuerUID || EMPTY_STRING)\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$_);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, IssuerSerial.schema({\n            names: {\n                issuer: {\n                    names: {\n                        blockName: ISSUER$5\n                    }\n                },\n                serialNumber: SERIAL_NUMBER$6,\n                issuerUID: ISSUER_UID\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.issuer = new GeneralNames({ schema: asn1.result.issuer });\n        this.serialNumber = asn1.result.serialNumber;\n        if (ISSUER_UID in asn1.result)\n            this.issuerUID = asn1.result.issuerUID;\n    }\n    toSchema() {\n        const result = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.issuer.toSchema(),\n                this.serialNumber\n            ]\n        });\n        if (this.issuerUID) {\n            result.valueBlock.value.push(this.issuerUID);\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {\n            issuer: this.issuer.toJSON(),\n            serialNumber: this.serialNumber.toJSON()\n        };\n        if (this.issuerUID) {\n            result.issuerUID = this.issuerUID.toJSON();\n        }\n        return result;\n    }\n}\nIssuerSerial.CLASS_NAME = \"IssuerSerial\";\n\nconst VERSION$h = \"version\";\nconst BASE_CERTIFICATE_ID$2 = \"baseCertificateID\";\nconst SUBJECT_NAME = \"subjectName\";\nconst ISSUER$4 = \"issuer\";\nconst SIGNATURE$6 = \"signature\";\nconst SERIAL_NUMBER$5 = \"serialNumber\";\nconst ATTR_CERT_VALIDITY_PERIOD$1 = \"attrCertValidityPeriod\";\nconst ATTRIBUTES$3 = \"attributes\";\nconst ISSUER_UNIQUE_ID$2 = \"issuerUniqueID\";\nconst EXTENSIONS$4 = \"extensions\";\nconst CLEAR_PROPS$Z = [\n    VERSION$h,\n    BASE_CERTIFICATE_ID$2,\n    SUBJECT_NAME,\n    ISSUER$4,\n    SIGNATURE$6,\n    SERIAL_NUMBER$5,\n    ATTR_CERT_VALIDITY_PERIOD$1,\n    ATTRIBUTES$3,\n    ISSUER_UNIQUE_ID$2,\n    EXTENSIONS$4,\n];\nclass AttributeCertificateInfoV1 extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$h, AttributeCertificateInfoV1.defaultValues(VERSION$h));\n        if (BASE_CERTIFICATE_ID$2 in parameters) {\n            this.baseCertificateID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, BASE_CERTIFICATE_ID$2, AttributeCertificateInfoV1.defaultValues(BASE_CERTIFICATE_ID$2));\n        }\n        if (SUBJECT_NAME in parameters) {\n            this.subjectName = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SUBJECT_NAME, AttributeCertificateInfoV1.defaultValues(SUBJECT_NAME));\n        }\n        this.issuer = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER$4, AttributeCertificateInfoV1.defaultValues(ISSUER$4));\n        this.signature = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE$6, AttributeCertificateInfoV1.defaultValues(SIGNATURE$6));\n        this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SERIAL_NUMBER$5, AttributeCertificateInfoV1.defaultValues(SERIAL_NUMBER$5));\n        this.attrCertValidityPeriod = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ATTR_CERT_VALIDITY_PERIOD$1, AttributeCertificateInfoV1.defaultValues(ATTR_CERT_VALIDITY_PERIOD$1));\n        this.attributes = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ATTRIBUTES$3, AttributeCertificateInfoV1.defaultValues(ATTRIBUTES$3));\n        if (ISSUER_UNIQUE_ID$2 in parameters)\n            this.issuerUniqueID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER_UNIQUE_ID$2, AttributeCertificateInfoV1.defaultValues(ISSUER_UNIQUE_ID$2));\n        if (EXTENSIONS$4 in parameters) {\n            this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXTENSIONS$4, AttributeCertificateInfoV1.defaultValues(EXTENSIONS$4));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$h:\n                return 0;\n            case BASE_CERTIFICATE_ID$2:\n                return new IssuerSerial();\n            case SUBJECT_NAME:\n                return new GeneralNames();\n            case ISSUER$4:\n                return new GeneralNames();\n            case SIGNATURE$6:\n                return new AlgorithmIdentifier();\n            case SERIAL_NUMBER$5:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case ATTR_CERT_VALIDITY_PERIOD$1:\n                return new AttCertValidityPeriod();\n            case ATTRIBUTES$3:\n                return [];\n            case ISSUER_UNIQUE_ID$2:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            case EXTENSIONS$4:\n                return new Extensions();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            name: (names.baseCertificateID || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: IssuerSerial.schema().valueBlock.value\n                        }),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            name: (names.subjectName || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: GeneralNames.schema().valueBlock.value\n                        }),\n                    ]\n                }),\n                GeneralNames.schema({\n                    names: {\n                        blockName: (names.issuer || EMPTY_STRING)\n                    }\n                }),\n                AlgorithmIdentifier.schema(names.signature || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.serialNumber || EMPTY_STRING) }),\n                AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    name: (names.attributes || EMPTY_STRING),\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            value: Attribute.schema()\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({\n                    optional: true,\n                    name: (names.issuerUniqueID || EMPTY_STRING)\n                }),\n                Extensions.schema(names.extensions || {}, true)\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$Z);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AttributeCertificateInfoV1.schema({\n            names: {\n                version: VERSION$h,\n                baseCertificateID: BASE_CERTIFICATE_ID$2,\n                subjectName: SUBJECT_NAME,\n                issuer: ISSUER$4,\n                signature: {\n                    names: {\n                        blockName: SIGNATURE$6\n                    }\n                },\n                serialNumber: SERIAL_NUMBER$5,\n                attrCertValidityPeriod: {\n                    names: {\n                        blockName: ATTR_CERT_VALIDITY_PERIOD$1\n                    }\n                },\n                attributes: ATTRIBUTES$3,\n                issuerUniqueID: ISSUER_UNIQUE_ID$2,\n                extensions: {\n                    names: {\n                        blockName: EXTENSIONS$4\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        if (BASE_CERTIFICATE_ID$2 in asn1.result) {\n            this.baseCertificateID = new IssuerSerial({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.baseCertificateID.valueBlock.value\n                })\n            });\n        }\n        if (SUBJECT_NAME in asn1.result) {\n            this.subjectName = new GeneralNames({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.subjectName.valueBlock.value\n                })\n            });\n        }\n        this.issuer = asn1.result.issuer;\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\n        this.serialNumber = asn1.result.serialNumber;\n        this.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\n        this.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\n        if (ISSUER_UNIQUE_ID$2 in asn1.result) {\n            this.issuerUniqueID = asn1.result.issuerUniqueID;\n        }\n        if (EXTENSIONS$4 in asn1.result) {\n            this.extensions = new Extensions({ schema: asn1.result.extensions });\n        }\n    }\n    toSchema() {\n        const result = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version })]\n        });\n        if (this.baseCertificateID) {\n            result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.baseCertificateID.toSchema().valueBlock.value\n            }));\n        }\n        if (this.subjectName) {\n            result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: this.subjectName.toSchema().valueBlock.value\n            }));\n        }\n        result.valueBlock.value.push(this.issuer.toSchema());\n        result.valueBlock.value.push(this.signature.toSchema());\n        result.valueBlock.value.push(this.serialNumber);\n        result.valueBlock.value.push(this.attrCertValidityPeriod.toSchema());\n        result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.attributes, o => o.toSchema())\n        }));\n        if (this.issuerUniqueID) {\n            result.valueBlock.value.push(this.issuerUniqueID);\n        }\n        if (this.extensions) {\n            result.valueBlock.value.push(this.extensions.toSchema());\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {\n            version: this.version\n        };\n        if (this.baseCertificateID) {\n            result.baseCertificateID = this.baseCertificateID.toJSON();\n        }\n        if (this.subjectName) {\n            result.subjectName = this.subjectName.toJSON();\n        }\n        result.issuer = this.issuer.toJSON();\n        result.signature = this.signature.toJSON();\n        result.serialNumber = this.serialNumber.toJSON();\n        result.attrCertValidityPeriod = this.attrCertValidityPeriod.toJSON();\n        result.attributes = Array.from(this.attributes, o => o.toJSON());\n        if (this.issuerUniqueID) {\n            result.issuerUniqueID = this.issuerUniqueID.toJSON();\n        }\n        if (this.extensions) {\n            result.extensions = this.extensions.toJSON();\n        }\n        return result;\n    }\n}\nAttributeCertificateInfoV1.CLASS_NAME = \"AttributeCertificateInfoV1\";\n\nconst ACINFO$1 = \"acinfo\";\nconst SIGNATURE_ALGORITHM$7 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE$4 = \"signatureValue\";\nconst CLEAR_PROPS$Y = [\n    ACINFO$1,\n    SIGNATURE_VALUE$4,\n    SIGNATURE_ALGORITHM$7\n];\nclass AttributeCertificateV1 extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.acinfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ACINFO$1, AttributeCertificateV1.defaultValues(ACINFO$1));\n        this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_ALGORITHM$7, AttributeCertificateV1.defaultValues(SIGNATURE_ALGORITHM$7));\n        this.signatureValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_VALUE$4, AttributeCertificateV1.defaultValues(SIGNATURE_VALUE$4));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ACINFO$1:\n                return new AttributeCertificateInfoV1();\n            case SIGNATURE_ALGORITHM$7:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE$4:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AttributeCertificateInfoV1.schema(names.acinfo || {}),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.signatureValue || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$Y);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AttributeCertificateV1.schema({\n            names: {\n                acinfo: {\n                    names: {\n                        blockName: ACINFO$1\n                    }\n                },\n                signatureAlgorithm: {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$7\n                    }\n                },\n                signatureValue: SIGNATURE_VALUE$4\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.acinfo = new AttributeCertificateInfoV1({ schema: asn1.result.acinfo });\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.acinfo.toSchema(),\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            acinfo: this.acinfo.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON(),\n        };\n    }\n}\nAttributeCertificateV1.CLASS_NAME = \"AttributeCertificateV1\";\n\nconst DIGESTED_OBJECT_TYPE = \"digestedObjectType\";\nconst OTHER_OBJECT_TYPE_ID = \"otherObjectTypeID\";\nconst DIGEST_ALGORITHM$2 = \"digestAlgorithm\";\nconst OBJECT_DIGEST = \"objectDigest\";\nconst CLEAR_PROPS$X = [\n    DIGESTED_OBJECT_TYPE,\n    OTHER_OBJECT_TYPE_ID,\n    DIGEST_ALGORITHM$2,\n    OBJECT_DIGEST,\n];\nclass ObjectDigestInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.digestedObjectType = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DIGESTED_OBJECT_TYPE, ObjectDigestInfo.defaultValues(DIGESTED_OBJECT_TYPE));\n        if (OTHER_OBJECT_TYPE_ID in parameters) {\n            this.otherObjectTypeID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OTHER_OBJECT_TYPE_ID, ObjectDigestInfo.defaultValues(OTHER_OBJECT_TYPE_ID));\n        }\n        this.digestAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DIGEST_ALGORITHM$2, ObjectDigestInfo.defaultValues(DIGEST_ALGORITHM$2));\n        this.objectDigest = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OBJECT_DIGEST, ObjectDigestInfo.defaultValues(OBJECT_DIGEST));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DIGESTED_OBJECT_TYPE:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Enumerated();\n            case OTHER_OBJECT_TYPE_ID:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier();\n            case DIGEST_ALGORITHM$2:\n                return new AlgorithmIdentifier();\n            case OBJECT_DIGEST:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Enumerated({ name: (names.digestedObjectType || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({\n                    optional: true,\n                    name: (names.otherObjectTypeID || EMPTY_STRING)\n                }),\n                AlgorithmIdentifier.schema(names.digestAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.objectDigest || EMPTY_STRING) }),\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$X);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, ObjectDigestInfo.schema({\n            names: {\n                digestedObjectType: DIGESTED_OBJECT_TYPE,\n                otherObjectTypeID: OTHER_OBJECT_TYPE_ID,\n                digestAlgorithm: {\n                    names: {\n                        blockName: DIGEST_ALGORITHM$2\n                    }\n                },\n                objectDigest: OBJECT_DIGEST\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.digestedObjectType = asn1.result.digestedObjectType;\n        if (OTHER_OBJECT_TYPE_ID in asn1.result) {\n            this.otherObjectTypeID = asn1.result.otherObjectTypeID;\n        }\n        this.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\n        this.objectDigest = asn1.result.objectDigest;\n    }\n    toSchema() {\n        const result = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [this.digestedObjectType]\n        });\n        if (this.otherObjectTypeID) {\n            result.valueBlock.value.push(this.otherObjectTypeID);\n        }\n        result.valueBlock.value.push(this.digestAlgorithm.toSchema());\n        result.valueBlock.value.push(this.objectDigest);\n        return result;\n    }\n    toJSON() {\n        const result = {\n            digestedObjectType: this.digestedObjectType.toJSON(),\n            digestAlgorithm: this.digestAlgorithm.toJSON(),\n            objectDigest: this.objectDigest.toJSON(),\n        };\n        if (this.otherObjectTypeID) {\n            result.otherObjectTypeID = this.otherObjectTypeID.toJSON();\n        }\n        return result;\n    }\n}\nObjectDigestInfo.CLASS_NAME = \"ObjectDigestInfo\";\n\nconst ISSUER_NAME = \"issuerName\";\nconst BASE_CERTIFICATE_ID$1 = \"baseCertificateID\";\nconst OBJECT_DIGEST_INFO$1 = \"objectDigestInfo\";\nconst CLEAR_PROPS$W = [\n    ISSUER_NAME,\n    BASE_CERTIFICATE_ID$1,\n    OBJECT_DIGEST_INFO$1\n];\nclass V2Form extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (ISSUER_NAME in parameters) {\n            this.issuerName = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER_NAME, V2Form.defaultValues(ISSUER_NAME));\n        }\n        if (BASE_CERTIFICATE_ID$1 in parameters) {\n            this.baseCertificateID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, BASE_CERTIFICATE_ID$1, V2Form.defaultValues(BASE_CERTIFICATE_ID$1));\n        }\n        if (OBJECT_DIGEST_INFO$1 in parameters) {\n            this.objectDigestInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OBJECT_DIGEST_INFO$1, V2Form.defaultValues(OBJECT_DIGEST_INFO$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ISSUER_NAME:\n                return new GeneralNames();\n            case BASE_CERTIFICATE_ID$1:\n                return new IssuerSerial();\n            case OBJECT_DIGEST_INFO$1:\n                return new ObjectDigestInfo();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                GeneralNames.schema({\n                    names: {\n                        blockName: names.issuerName\n                    }\n                }, true),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    name: (names.baseCertificateID || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: IssuerSerial.schema().valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    name: (names.objectDigestInfo || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: ObjectDigestInfo.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$W);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, V2Form.schema({\n            names: {\n                issuerName: ISSUER_NAME,\n                baseCertificateID: BASE_CERTIFICATE_ID$1,\n                objectDigestInfo: OBJECT_DIGEST_INFO$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (ISSUER_NAME in asn1.result)\n            this.issuerName = new GeneralNames({ schema: asn1.result.issuerName });\n        if (BASE_CERTIFICATE_ID$1 in asn1.result) {\n            this.baseCertificateID = new IssuerSerial({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.baseCertificateID.valueBlock.value\n                })\n            });\n        }\n        if (OBJECT_DIGEST_INFO$1 in asn1.result) {\n            this.objectDigestInfo = new ObjectDigestInfo({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.objectDigestInfo.valueBlock.value\n                })\n            });\n        }\n    }\n    toSchema() {\n        const result = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence();\n        if (this.issuerName)\n            result.valueBlock.value.push(this.issuerName.toSchema());\n        if (this.baseCertificateID) {\n            result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.baseCertificateID.toSchema().valueBlock.value\n            }));\n        }\n        if (this.objectDigestInfo) {\n            result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: this.objectDigestInfo.toSchema().valueBlock.value\n            }));\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {};\n        if (this.issuerName) {\n            result.issuerName = this.issuerName.toJSON();\n        }\n        if (this.baseCertificateID) {\n            result.baseCertificateID = this.baseCertificateID.toJSON();\n        }\n        if (this.objectDigestInfo) {\n            result.objectDigestInfo = this.objectDigestInfo.toJSON();\n        }\n        return result;\n    }\n}\nV2Form.CLASS_NAME = \"V2Form\";\n\nconst BASE_CERTIFICATE_ID = \"baseCertificateID\";\nconst ENTITY_NAME = \"entityName\";\nconst OBJECT_DIGEST_INFO = \"objectDigestInfo\";\nconst CLEAR_PROPS$V = [\n    BASE_CERTIFICATE_ID,\n    ENTITY_NAME,\n    OBJECT_DIGEST_INFO\n];\nclass Holder extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        if (BASE_CERTIFICATE_ID in parameters) {\n            this.baseCertificateID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, BASE_CERTIFICATE_ID, Holder.defaultValues(BASE_CERTIFICATE_ID));\n        }\n        if (ENTITY_NAME in parameters) {\n            this.entityName = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENTITY_NAME, Holder.defaultValues(ENTITY_NAME));\n        }\n        if (OBJECT_DIGEST_INFO in parameters) {\n            this.objectDigestInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OBJECT_DIGEST_INFO, Holder.defaultValues(OBJECT_DIGEST_INFO));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case BASE_CERTIFICATE_ID:\n                return new IssuerSerial();\n            case ENTITY_NAME:\n                return new GeneralNames();\n            case OBJECT_DIGEST_INFO:\n                return new ObjectDigestInfo();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    name: (names.baseCertificateID || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: IssuerSerial.schema().valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    name: (names.entityName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: GeneralNames.schema().valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    name: (names.objectDigestInfo || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: ObjectDigestInfo.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$V);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, Holder.schema({\n            names: {\n                baseCertificateID: BASE_CERTIFICATE_ID,\n                entityName: ENTITY_NAME,\n                objectDigestInfo: OBJECT_DIGEST_INFO\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (BASE_CERTIFICATE_ID in asn1.result) {\n            this.baseCertificateID = new IssuerSerial({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.baseCertificateID.valueBlock.value\n                })\n            });\n        }\n        if (ENTITY_NAME in asn1.result) {\n            this.entityName = new GeneralNames({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.entityName.valueBlock.value\n                })\n            });\n        }\n        if (OBJECT_DIGEST_INFO in asn1.result) {\n            this.objectDigestInfo = new ObjectDigestInfo({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.objectDigestInfo.valueBlock.value\n                })\n            });\n        }\n    }\n    toSchema() {\n        const result = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence();\n        if (this.baseCertificateID) {\n            result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.baseCertificateID.toSchema().valueBlock.value\n            }));\n        }\n        if (this.entityName) {\n            result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: this.entityName.toSchema().valueBlock.value\n            }));\n        }\n        if (this.objectDigestInfo) {\n            result.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                value: this.objectDigestInfo.toSchema().valueBlock.value\n            }));\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {};\n        if (this.baseCertificateID) {\n            result.baseCertificateID = this.baseCertificateID.toJSON();\n        }\n        if (this.entityName) {\n            result.entityName = this.entityName.toJSON();\n        }\n        if (this.objectDigestInfo) {\n            result.objectDigestInfo = this.objectDigestInfo.toJSON();\n        }\n        return result;\n    }\n}\nHolder.CLASS_NAME = \"Holder\";\n\nconst VERSION$g = \"version\";\nconst HOLDER = \"holder\";\nconst ISSUER$3 = \"issuer\";\nconst SIGNATURE$5 = \"signature\";\nconst SERIAL_NUMBER$4 = \"serialNumber\";\nconst ATTR_CERT_VALIDITY_PERIOD = \"attrCertValidityPeriod\";\nconst ATTRIBUTES$2 = \"attributes\";\nconst ISSUER_UNIQUE_ID$1 = \"issuerUniqueID\";\nconst EXTENSIONS$3 = \"extensions\";\nconst CLEAR_PROPS$U = [\n    VERSION$g,\n    HOLDER,\n    ISSUER$3,\n    SIGNATURE$5,\n    SERIAL_NUMBER$4,\n    ATTR_CERT_VALIDITY_PERIOD,\n    ATTRIBUTES$2,\n    ISSUER_UNIQUE_ID$1,\n    EXTENSIONS$3\n];\nclass AttributeCertificateInfoV2 extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$g, AttributeCertificateInfoV2.defaultValues(VERSION$g));\n        this.holder = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, HOLDER, AttributeCertificateInfoV2.defaultValues(HOLDER));\n        this.issuer = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER$3, AttributeCertificateInfoV2.defaultValues(ISSUER$3));\n        this.signature = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE$5, AttributeCertificateInfoV2.defaultValues(SIGNATURE$5));\n        this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SERIAL_NUMBER$4, AttributeCertificateInfoV2.defaultValues(SERIAL_NUMBER$4));\n        this.attrCertValidityPeriod = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ATTR_CERT_VALIDITY_PERIOD, AttributeCertificateInfoV2.defaultValues(ATTR_CERT_VALIDITY_PERIOD));\n        this.attributes = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ATTRIBUTES$2, AttributeCertificateInfoV2.defaultValues(ATTRIBUTES$2));\n        if (ISSUER_UNIQUE_ID$1 in parameters) {\n            this.issuerUniqueID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER_UNIQUE_ID$1, AttributeCertificateInfoV2.defaultValues(ISSUER_UNIQUE_ID$1));\n        }\n        if (EXTENSIONS$3 in parameters) {\n            this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXTENSIONS$3, AttributeCertificateInfoV2.defaultValues(EXTENSIONS$3));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$g:\n                return 1;\n            case HOLDER:\n                return new Holder();\n            case ISSUER$3:\n                return {};\n            case SIGNATURE$5:\n                return new AlgorithmIdentifier();\n            case SERIAL_NUMBER$4:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case ATTR_CERT_VALIDITY_PERIOD:\n                return new AttCertValidityPeriod();\n            case ATTRIBUTES$2:\n                return [];\n            case ISSUER_UNIQUE_ID$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            case EXTENSIONS$3:\n                return new Extensions();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                Holder.schema(names.holder || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                    value: [\n                        GeneralNames.schema({\n                            names: {\n                                blockName: (names.issuer || EMPTY_STRING)\n                            }\n                        }),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            name: (names.issuer || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                            value: V2Form.schema().valueBlock.value\n                        })\n                    ]\n                }),\n                AlgorithmIdentifier.schema(names.signature || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.serialNumber || EMPTY_STRING) }),\n                AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    name: (names.attributes || EMPTY_STRING),\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            value: Attribute.schema()\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({\n                    optional: true,\n                    name: (names.issuerUniqueID || EMPTY_STRING)\n                }),\n                Extensions.schema(names.extensions || {}, true)\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$U);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AttributeCertificateInfoV2.schema({\n            names: {\n                version: VERSION$g,\n                holder: {\n                    names: {\n                        blockName: HOLDER\n                    }\n                },\n                issuer: ISSUER$3,\n                signature: {\n                    names: {\n                        blockName: SIGNATURE$5\n                    }\n                },\n                serialNumber: SERIAL_NUMBER$4,\n                attrCertValidityPeriod: {\n                    names: {\n                        blockName: ATTR_CERT_VALIDITY_PERIOD\n                    }\n                },\n                attributes: ATTRIBUTES$2,\n                issuerUniqueID: ISSUER_UNIQUE_ID$1,\n                extensions: {\n                    names: {\n                        blockName: EXTENSIONS$3\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.holder = new Holder({ schema: asn1.result.holder });\n        switch (asn1.result.issuer.idBlock.tagClass) {\n            case 3:\n                this.issuer = new V2Form({\n                    schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                        value: asn1.result.issuer.valueBlock.value\n                    })\n                });\n                break;\n            case 1:\n            default:\n                throw new Error(\"Incorrect value for 'issuer' in AttributeCertificateInfoV2\");\n        }\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\n        this.serialNumber = asn1.result.serialNumber;\n        this.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\n        this.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\n        if (ISSUER_UNIQUE_ID$1 in asn1.result) {\n            this.issuerUniqueID = asn1.result.issuerUniqueID;\n        }\n        if (EXTENSIONS$3 in asn1.result) {\n            this.extensions = new Extensions({ schema: asn1.result.extensions });\n        }\n    }\n    toSchema() {\n        const result = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }),\n                this.holder.toSchema(),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: this.issuer.toSchema().valueBlock.value\n                }),\n                this.signature.toSchema(),\n                this.serialNumber,\n                this.attrCertValidityPeriod.toSchema(),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: Array.from(this.attributes, o => o.toSchema())\n                })\n            ]\n        });\n        if (this.issuerUniqueID) {\n            result.valueBlock.value.push(this.issuerUniqueID);\n        }\n        if (this.extensions) {\n            result.valueBlock.value.push(this.extensions.toSchema());\n        }\n        return result;\n    }\n    toJSON() {\n        const result = {\n            version: this.version,\n            holder: this.holder.toJSON(),\n            issuer: this.issuer.toJSON(),\n            signature: this.signature.toJSON(),\n            serialNumber: this.serialNumber.toJSON(),\n            attrCertValidityPeriod: this.attrCertValidityPeriod.toJSON(),\n            attributes: Array.from(this.attributes, o => o.toJSON())\n        };\n        if (this.issuerUniqueID) {\n            result.issuerUniqueID = this.issuerUniqueID.toJSON();\n        }\n        if (this.extensions) {\n            result.extensions = this.extensions.toJSON();\n        }\n        return result;\n    }\n}\nAttributeCertificateInfoV2.CLASS_NAME = \"AttributeCertificateInfoV2\";\n\nconst ACINFO = \"acinfo\";\nconst SIGNATURE_ALGORITHM$6 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE$3 = \"signatureValue\";\nconst CLEAR_PROPS$T = [\n    ACINFO,\n    SIGNATURE_ALGORITHM$6,\n    SIGNATURE_VALUE$3,\n];\nclass AttributeCertificateV2 extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.acinfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ACINFO, AttributeCertificateV2.defaultValues(ACINFO));\n        this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_ALGORITHM$6, AttributeCertificateV2.defaultValues(SIGNATURE_ALGORITHM$6));\n        this.signatureValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_VALUE$3, AttributeCertificateV2.defaultValues(SIGNATURE_VALUE$3));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ACINFO:\n                return new AttributeCertificateInfoV2();\n            case SIGNATURE_ALGORITHM$6:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE$3:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AttributeCertificateInfoV2.schema(names.acinfo || {}),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.signatureValue || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$T);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AttributeCertificateV2.schema({\n            names: {\n                acinfo: {\n                    names: {\n                        blockName: ACINFO\n                    }\n                },\n                signatureAlgorithm: {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$6\n                    }\n                },\n                signatureValue: SIGNATURE_VALUE$3\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.acinfo = new AttributeCertificateInfoV2({ schema: asn1.result.acinfo });\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.acinfo.toSchema(),\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            acinfo: this.acinfo.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON(),\n        };\n    }\n}\nAttributeCertificateV2.CLASS_NAME = \"AttributeCertificateV2\";\n\nconst CONTENT_TYPE = \"contentType\";\nconst CONTENT = \"content\";\nconst CLEAR_PROPS$S = [CONTENT_TYPE, CONTENT];\nclass ContentInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.contentType = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CONTENT_TYPE, ContentInfo.defaultValues(CONTENT_TYPE));\n        this.content = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CONTENT, ContentInfo.defaultValues(CONTENT));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CONTENT_TYPE:\n                return EMPTY_STRING;\n            case CONTENT:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CONTENT_TYPE:\n                return (typeof memberValue === \"string\" &&\n                    memberValue === this.defaultValues(CONTENT_TYPE));\n            case CONTENT:\n                return (memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        if ((\"optional\" in names) === false) {\n            names.optional = false;\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || \"ContentInfo\"),\n            optional: names.optional,\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.contentType || CONTENT_TYPE) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.content || CONTENT) })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$S);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, ContentInfo.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.contentType = asn1.result.contentType.valueBlock.toString();\n        this.content = asn1.result.content;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.contentType }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [this.content]\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        const object = {\n            contentType: this.contentType\n        };\n        if (!(this.content instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any)) {\n            object.content = this.content.toJSON();\n        }\n        return object;\n    }\n}\nContentInfo.CLASS_NAME = \"ContentInfo\";\nContentInfo.DATA = id_ContentType_Data;\nContentInfo.SIGNED_DATA = id_ContentType_SignedData;\nContentInfo.ENVELOPED_DATA = id_ContentType_EnvelopedData;\nContentInfo.ENCRYPTED_DATA = id_ContentType_EncryptedData;\n\nconst TYPE$1 = \"type\";\nconst VALUE$4 = \"value\";\nconst UTC_TIME_NAME = \"utcTimeName\";\nconst GENERAL_TIME_NAME = \"generalTimeName\";\nconst CLEAR_PROPS$R = [UTC_TIME_NAME, GENERAL_TIME_NAME];\nvar TimeType;\n(function (TimeType) {\n    TimeType[TimeType[\"UTCTime\"] = 0] = \"UTCTime\";\n    TimeType[TimeType[\"GeneralizedTime\"] = 1] = \"GeneralizedTime\";\n    TimeType[TimeType[\"empty\"] = 2] = \"empty\";\n})(TimeType || (TimeType = {}));\nclass Time extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TYPE$1, Time.defaultValues(TYPE$1));\n        this.value = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUE$4, Time.defaultValues(VALUE$4));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE$1:\n                return 0;\n            case VALUE$4:\n                return new Date(0, 0, 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}, optional = false) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n            optional,\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.UTCTime({ name: (names.utcTimeName || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ name: (names.generalTimeName || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$R);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, Time.schema({\n            names: {\n                utcTimeName: UTC_TIME_NAME,\n                generalTimeName: GENERAL_TIME_NAME\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (UTC_TIME_NAME in asn1.result) {\n            this.type = 0;\n            this.value = asn1.result.utcTimeName.toDate();\n        }\n        if (GENERAL_TIME_NAME in asn1.result) {\n            this.type = 1;\n            this.value = asn1.result.generalTimeName.toDate();\n        }\n    }\n    toSchema() {\n        if (this.type === 0) {\n            return new asn1js__WEBPACK_IMPORTED_MODULE_0__.UTCTime({ valueDate: this.value });\n        }\n        else if (this.type === 1) {\n            return new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueDate: this.value });\n        }\n        return {};\n    }\n    toJSON() {\n        return {\n            type: this.type,\n            value: this.value\n        };\n    }\n}\nTime.CLASS_NAME = \"Time\";\n\nconst TBS$4 = \"tbs\";\nconst VERSION$f = \"version\";\nconst SERIAL_NUMBER$3 = \"serialNumber\";\nconst SIGNATURE$4 = \"signature\";\nconst ISSUER$2 = \"issuer\";\nconst NOT_BEFORE = \"notBefore\";\nconst NOT_AFTER = \"notAfter\";\nconst SUBJECT$1 = \"subject\";\nconst SUBJECT_PUBLIC_KEY_INFO = \"subjectPublicKeyInfo\";\nconst ISSUER_UNIQUE_ID = \"issuerUniqueID\";\nconst SUBJECT_UNIQUE_ID = \"subjectUniqueID\";\nconst EXTENSIONS$2 = \"extensions\";\nconst SIGNATURE_ALGORITHM$5 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE$2 = \"signatureValue\";\nconst TBS_CERTIFICATE = \"tbsCertificate\";\nconst TBS_CERTIFICATE_VERSION = `${TBS_CERTIFICATE}.${VERSION$f}`;\nconst TBS_CERTIFICATE_SERIAL_NUMBER = `${TBS_CERTIFICATE}.${SERIAL_NUMBER$3}`;\nconst TBS_CERTIFICATE_SIGNATURE = `${TBS_CERTIFICATE}.${SIGNATURE$4}`;\nconst TBS_CERTIFICATE_ISSUER = `${TBS_CERTIFICATE}.${ISSUER$2}`;\nconst TBS_CERTIFICATE_NOT_BEFORE = `${TBS_CERTIFICATE}.${NOT_BEFORE}`;\nconst TBS_CERTIFICATE_NOT_AFTER = `${TBS_CERTIFICATE}.${NOT_AFTER}`;\nconst TBS_CERTIFICATE_SUBJECT = `${TBS_CERTIFICATE}.${SUBJECT$1}`;\nconst TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY = `${TBS_CERTIFICATE}.${SUBJECT_PUBLIC_KEY_INFO}`;\nconst TBS_CERTIFICATE_ISSUER_UNIQUE_ID = `${TBS_CERTIFICATE}.${ISSUER_UNIQUE_ID}`;\nconst TBS_CERTIFICATE_SUBJECT_UNIQUE_ID = `${TBS_CERTIFICATE}.${SUBJECT_UNIQUE_ID}`;\nconst TBS_CERTIFICATE_EXTENSIONS = `${TBS_CERTIFICATE}.${EXTENSIONS$2}`;\nconst CLEAR_PROPS$Q = [\n    TBS_CERTIFICATE,\n    TBS_CERTIFICATE_VERSION,\n    TBS_CERTIFICATE_SERIAL_NUMBER,\n    TBS_CERTIFICATE_SIGNATURE,\n    TBS_CERTIFICATE_ISSUER,\n    TBS_CERTIFICATE_NOT_BEFORE,\n    TBS_CERTIFICATE_NOT_AFTER,\n    TBS_CERTIFICATE_SUBJECT,\n    TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY,\n    TBS_CERTIFICATE_ISSUER_UNIQUE_ID,\n    TBS_CERTIFICATE_SUBJECT_UNIQUE_ID,\n    TBS_CERTIFICATE_EXTENSIONS,\n    SIGNATURE_ALGORITHM$5,\n    SIGNATURE_VALUE$2\n];\nfunction tbsCertificate(parameters = {}) {\n    const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n    return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n        name: (names.blockName || TBS_CERTIFICATE),\n        value: [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.tbsCertificateVersion || TBS_CERTIFICATE_VERSION) })\n                ]\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.tbsCertificateSerialNumber || TBS_CERTIFICATE_SERIAL_NUMBER) }),\n            AlgorithmIdentifier.schema(names.signature || {\n                names: {\n                    blockName: TBS_CERTIFICATE_SIGNATURE\n                }\n            }),\n            RelativeDistinguishedNames.schema(names.issuer || {\n                names: {\n                    blockName: TBS_CERTIFICATE_ISSUER\n                }\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                name: (names.tbsCertificateValidity || \"tbsCertificate.validity\"),\n                value: [\n                    Time.schema(names.notBefore || {\n                        names: {\n                            utcTimeName: TBS_CERTIFICATE_NOT_BEFORE,\n                            generalTimeName: TBS_CERTIFICATE_NOT_BEFORE\n                        }\n                    }),\n                    Time.schema(names.notAfter || {\n                        names: {\n                            utcTimeName: TBS_CERTIFICATE_NOT_AFTER,\n                            generalTimeName: TBS_CERTIFICATE_NOT_AFTER\n                        }\n                    })\n                ]\n            }),\n            RelativeDistinguishedNames.schema(names.subject || {\n                names: {\n                    blockName: TBS_CERTIFICATE_SUBJECT\n                }\n            }),\n            PublicKeyInfo.schema(names.subjectPublicKeyInfo || {\n                names: {\n                    blockName: TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY\n                }\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                name: (names.tbsCertificateIssuerUniqueID || TBS_CERTIFICATE_ISSUER_UNIQUE_ID),\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                }\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                name: (names.tbsCertificateSubjectUniqueID || TBS_CERTIFICATE_SUBJECT_UNIQUE_ID),\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                }\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                value: [Extensions.schema(names.extensions || {\n                        names: {\n                            blockName: TBS_CERTIFICATE_EXTENSIONS\n                        }\n                    })]\n            })\n        ]\n    }));\n}\nclass Certificate extends PkiObject {\n    get tbs() {\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TBS$4, Certificate.defaultValues(TBS$4)));\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$f, Certificate.defaultValues(VERSION$f));\n        this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SERIAL_NUMBER$3, Certificate.defaultValues(SERIAL_NUMBER$3));\n        this.signature = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE$4, Certificate.defaultValues(SIGNATURE$4));\n        this.issuer = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER$2, Certificate.defaultValues(ISSUER$2));\n        this.notBefore = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NOT_BEFORE, Certificate.defaultValues(NOT_BEFORE));\n        this.notAfter = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NOT_AFTER, Certificate.defaultValues(NOT_AFTER));\n        this.subject = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SUBJECT$1, Certificate.defaultValues(SUBJECT$1));\n        this.subjectPublicKeyInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SUBJECT_PUBLIC_KEY_INFO, Certificate.defaultValues(SUBJECT_PUBLIC_KEY_INFO));\n        if (ISSUER_UNIQUE_ID in parameters) {\n            this.issuerUniqueID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER_UNIQUE_ID, Certificate.defaultValues(ISSUER_UNIQUE_ID));\n        }\n        if (SUBJECT_UNIQUE_ID in parameters) {\n            this.subjectUniqueID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SUBJECT_UNIQUE_ID, Certificate.defaultValues(SUBJECT_UNIQUE_ID));\n        }\n        if (EXTENSIONS$2 in parameters) {\n            this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXTENSIONS$2, Certificate.defaultValues(EXTENSIONS$2));\n        }\n        this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_ALGORITHM$5, Certificate.defaultValues(SIGNATURE_ALGORITHM$5));\n        this.signatureValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_VALUE$2, Certificate.defaultValues(SIGNATURE_VALUE$2));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS$4:\n                return EMPTY_BUFFER;\n            case VERSION$f:\n                return 0;\n            case SERIAL_NUMBER$3:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case SIGNATURE$4:\n                return new AlgorithmIdentifier();\n            case ISSUER$2:\n                return new RelativeDistinguishedNames();\n            case NOT_BEFORE:\n                return new Time();\n            case NOT_AFTER:\n                return new Time();\n            case SUBJECT$1:\n                return new RelativeDistinguishedNames();\n            case SUBJECT_PUBLIC_KEY_INFO:\n                return new PublicKeyInfo();\n            case ISSUER_UNIQUE_ID:\n                return EMPTY_BUFFER;\n            case SUBJECT_UNIQUE_ID:\n                return EMPTY_BUFFER;\n            case EXTENSIONS$2:\n                return [];\n            case SIGNATURE_ALGORITHM$5:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE$2:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                tbsCertificate(names.tbsCertificate),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$5\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.signatureValue || SIGNATURE_VALUE$2) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$Q);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, Certificate.schema({\n            names: {\n                tbsCertificate: {\n                    names: {\n                        extensions: {\n                            names: {\n                                extensions: TBS_CERTIFICATE_EXTENSIONS\n                            }\n                        }\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.tbsCertificate.valueBeforeDecodeView;\n        if (TBS_CERTIFICATE_VERSION in asn1.result)\n            this.version = asn1.result[TBS_CERTIFICATE_VERSION].valueBlock.valueDec;\n        this.serialNumber = asn1.result[TBS_CERTIFICATE_SERIAL_NUMBER];\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result[TBS_CERTIFICATE_SIGNATURE] });\n        this.issuer = new RelativeDistinguishedNames({ schema: asn1.result[TBS_CERTIFICATE_ISSUER] });\n        this.notBefore = new Time({ schema: asn1.result[TBS_CERTIFICATE_NOT_BEFORE] });\n        this.notAfter = new Time({ schema: asn1.result[TBS_CERTIFICATE_NOT_AFTER] });\n        this.subject = new RelativeDistinguishedNames({ schema: asn1.result[TBS_CERTIFICATE_SUBJECT] });\n        this.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY] });\n        if (TBS_CERTIFICATE_ISSUER_UNIQUE_ID in asn1.result)\n            this.issuerUniqueID = asn1.result[TBS_CERTIFICATE_ISSUER_UNIQUE_ID].valueBlock.valueHex;\n        if (TBS_CERTIFICATE_SUBJECT_UNIQUE_ID in asn1.result)\n            this.subjectUniqueID = asn1.result[TBS_CERTIFICATE_SUBJECT_UNIQUE_ID].valueBlock.valueHex;\n        if (TBS_CERTIFICATE_EXTENSIONS in asn1.result)\n            this.extensions = Array.from(asn1.result[TBS_CERTIFICATE_EXTENSIONS], element => new Extension({ schema: element }));\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    encodeTBS() {\n        const outputArray = [];\n        if ((VERSION$f in this) && (this.version !== Certificate.defaultValues(VERSION$f))) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version })\n                ]\n            }));\n        }\n        outputArray.push(this.serialNumber);\n        outputArray.push(this.signature.toSchema());\n        outputArray.push(this.issuer.toSchema());\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.notBefore.toSchema(),\n                this.notAfter.toSchema()\n            ]\n        }));\n        outputArray.push(this.subject.toSchema());\n        outputArray.push(this.subjectPublicKeyInfo.toSchema());\n        if (this.issuerUniqueID) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                valueHex: this.issuerUniqueID\n            }));\n        }\n        if (this.subjectUniqueID) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                valueHex: this.subjectUniqueID\n            }));\n        }\n        if (this.extensions) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 3\n                },\n                value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                        value: Array.from(this.extensions, o => o.toSchema())\n                    })]\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (encodeFlag === false) {\n            if (!this.tbsView.byteLength) {\n                return Certificate.schema().value[0];\n            }\n            const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"TBS Certificate\");\n            tbsSchema = asn1.result;\n        }\n        else {\n            tbsSchema = this.encodeTBS();\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                tbsSchema,\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            tbs: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToHex(this.tbsView),\n            version: this.version,\n            serialNumber: this.serialNumber.toJSON(),\n            signature: this.signature.toJSON(),\n            issuer: this.issuer.toJSON(),\n            notBefore: this.notBefore.toJSON(),\n            notAfter: this.notAfter.toJSON(),\n            subject: this.subject.toJSON(),\n            subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON(),\n        };\n        if ((VERSION$f in this) && (this.version !== Certificate.defaultValues(VERSION$f))) {\n            res.version = this.version;\n        }\n        if (this.issuerUniqueID) {\n            res.issuerUniqueID = pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToHex(this.issuerUniqueID);\n        }\n        if (this.subjectUniqueID) {\n            res.subjectUniqueID = pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToHex(this.subjectUniqueID);\n        }\n        if (this.extensions) {\n            res.extensions = Array.from(this.extensions, o => o.toJSON());\n        }\n        return res;\n    }\n    async getPublicKey(parameters, crypto = getCrypto(true)) {\n        return crypto.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\n    }\n    async getKeyHash(hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        return crypto.digest({ name: hashAlgorithm }, this.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        if (!privateKey) {\n            throw new Error(\"Need to provide a private key for signing\");\n        }\n        const signatureParameters = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const parameters = signatureParameters.parameters;\n        this.signature = signatureParameters.signatureAlgorithm;\n        this.signatureAlgorithm = signatureParameters.signatureAlgorithm;\n        this.tbsView = new Uint8Array(this.encodeTBS().toBER());\n        const signature = await crypto.signWithPrivateKey(this.tbsView, privateKey, parameters);\n        this.signatureValue = new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ valueHex: signature });\n    }\n    async verify(issuerCertificate, crypto = getCrypto(true)) {\n        let subjectPublicKeyInfo;\n        if (issuerCertificate) {\n            subjectPublicKeyInfo = issuerCertificate.subjectPublicKeyInfo;\n        }\n        else if (this.issuer.isEqual(this.subject)) {\n            subjectPublicKeyInfo = this.subjectPublicKeyInfo;\n        }\n        if (!(subjectPublicKeyInfo instanceof PublicKeyInfo)) {\n            throw new Error(\"Please provide issuer certificate as a parameter\");\n        }\n        return crypto.verifyWithPublicKey(this.tbsView, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);\n    }\n}\nCertificate.CLASS_NAME = \"Certificate\";\nfunction checkCA(cert, signerCert = null) {\n    if (signerCert && cert.issuer.isEqual(signerCert.issuer) && cert.serialNumber.isEqual(signerCert.serialNumber)) {\n        return null;\n    }\n    let isCA = false;\n    if (cert.extensions) {\n        for (const extension of cert.extensions) {\n            if (extension.extnID === id_BasicConstraints && extension.parsedValue instanceof BasicConstraints) {\n                if (extension.parsedValue.cA) {\n                    isCA = true;\n                    break;\n                }\n            }\n        }\n    }\n    if (isCA) {\n        return cert;\n    }\n    return null;\n}\n\nconst CERT_ID$1 = \"certId\";\nconst CERT_VALUE = \"certValue\";\nconst PARSED_VALUE$4 = \"parsedValue\";\nconst CLEAR_PROPS$P = [\n    CERT_ID$1,\n    CERT_VALUE\n];\nclass CertBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certId = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERT_ID$1, CertBag.defaultValues(CERT_ID$1));\n        this.certValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERT_VALUE, CertBag.defaultValues(CERT_VALUE));\n        if (PARSED_VALUE$4 in parameters) {\n            this.parsedValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PARSED_VALUE$4, CertBag.defaultValues(PARSED_VALUE$4));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERT_ID$1:\n                return EMPTY_STRING;\n            case CERT_VALUE:\n                return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any());\n            case PARSED_VALUE$4:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CERT_ID$1:\n                return (memberValue === EMPTY_STRING);\n            case CERT_VALUE:\n                return (memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any);\n            case PARSED_VALUE$4:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.id || \"id\") }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.value || \"value\") })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$P);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, CertBag.schema({\n            names: {\n                id: CERT_ID$1,\n                value: CERT_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.certId = asn1.result.certId.valueBlock.toString();\n        this.certValue = asn1.result.certValue;\n        const certValueHex = this.certValue.valueBlock.valueHexView;\n        switch (this.certId) {\n            case id_CertBag_X509Certificate:\n                {\n                    try {\n                        this.parsedValue = Certificate.fromBER(certValueHex);\n                    }\n                    catch (ex) {\n                        AttributeCertificateV2.fromBER(certValueHex);\n                    }\n                }\n                break;\n            case id_CertBag_AttributeCertificate:\n                {\n                    this.parsedValue = AttributeCertificateV2.fromBER(certValueHex);\n                }\n                break;\n            case id_CertBag_SDSICertificate:\n            default:\n                throw new Error(`Incorrect CERT_ID value in CertBag: ${this.certId}`);\n        }\n    }\n    toSchema() {\n        if (PARSED_VALUE$4 in this) {\n            if (\"acinfo\" in this.parsedValue) {\n                this.certId = id_CertBag_AttributeCertificate;\n            }\n            else {\n                this.certId = id_CertBag_X509Certificate;\n            }\n            this.certValue = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.certId }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [((\"toSchema\" in this.certValue) ? this.certValue.toSchema() : this.certValue)]\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            certId: this.certId,\n            certValue: this.certValue.toJSON()\n        };\n    }\n}\nCertBag.CLASS_NAME = \"CertBag\";\n\nconst USER_CERTIFICATE = \"userCertificate\";\nconst REVOCATION_DATE = \"revocationDate\";\nconst CRL_ENTRY_EXTENSIONS = \"crlEntryExtensions\";\nconst CLEAR_PROPS$O = [\n    USER_CERTIFICATE,\n    REVOCATION_DATE,\n    CRL_ENTRY_EXTENSIONS\n];\nclass RevokedCertificate extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.userCertificate = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, USER_CERTIFICATE, RevokedCertificate.defaultValues(USER_CERTIFICATE));\n        this.revocationDate = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, REVOCATION_DATE, RevokedCertificate.defaultValues(REVOCATION_DATE));\n        if (CRL_ENTRY_EXTENSIONS in parameters) {\n            this.crlEntryExtensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRL_ENTRY_EXTENSIONS, RevokedCertificate.defaultValues(CRL_ENTRY_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case USER_CERTIFICATE:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case REVOCATION_DATE:\n                return new Time();\n            case CRL_ENTRY_EXTENSIONS:\n                return new Extensions();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.userCertificate || USER_CERTIFICATE) }),\n                Time.schema({\n                    names: {\n                        utcTimeName: (names.revocationDate || REVOCATION_DATE),\n                        generalTimeName: (names.revocationDate || REVOCATION_DATE)\n                    }\n                }),\n                Extensions.schema({\n                    names: {\n                        blockName: (names.crlEntryExtensions || CRL_ENTRY_EXTENSIONS)\n                    }\n                }, true)\n            ]\n        });\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$O);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RevokedCertificate.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.userCertificate = asn1.result.userCertificate;\n        this.revocationDate = new Time({ schema: asn1.result.revocationDate });\n        if (CRL_ENTRY_EXTENSIONS in asn1.result) {\n            this.crlEntryExtensions = new Extensions({ schema: asn1.result.crlEntryExtensions });\n        }\n    }\n    toSchema() {\n        const outputArray = [\n            this.userCertificate,\n            this.revocationDate.toSchema()\n        ];\n        if (this.crlEntryExtensions) {\n            outputArray.push(this.crlEntryExtensions.toSchema());\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            userCertificate: this.userCertificate.toJSON(),\n            revocationDate: this.revocationDate.toJSON(),\n        };\n        if (this.crlEntryExtensions) {\n            res.crlEntryExtensions = this.crlEntryExtensions.toJSON();\n        }\n        return res;\n    }\n}\nRevokedCertificate.CLASS_NAME = \"RevokedCertificate\";\n\nconst TBS$3 = \"tbs\";\nconst VERSION$e = \"version\";\nconst SIGNATURE$3 = \"signature\";\nconst ISSUER$1 = \"issuer\";\nconst THIS_UPDATE$1 = \"thisUpdate\";\nconst NEXT_UPDATE$1 = \"nextUpdate\";\nconst REVOKED_CERTIFICATES = \"revokedCertificates\";\nconst CRL_EXTENSIONS = \"crlExtensions\";\nconst SIGNATURE_ALGORITHM$4 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE$1 = \"signatureValue\";\nconst TBS_CERT_LIST = \"tbsCertList\";\nconst TBS_CERT_LIST_VERSION = `${TBS_CERT_LIST}.version`;\nconst TBS_CERT_LIST_SIGNATURE = `${TBS_CERT_LIST}.signature`;\nconst TBS_CERT_LIST_ISSUER = `${TBS_CERT_LIST}.issuer`;\nconst TBS_CERT_LIST_THIS_UPDATE = `${TBS_CERT_LIST}.thisUpdate`;\nconst TBS_CERT_LIST_NEXT_UPDATE = `${TBS_CERT_LIST}.nextUpdate`;\nconst TBS_CERT_LIST_REVOKED_CERTIFICATES = `${TBS_CERT_LIST}.revokedCertificates`;\nconst TBS_CERT_LIST_EXTENSIONS = `${TBS_CERT_LIST}.extensions`;\nconst CLEAR_PROPS$N = [\n    TBS_CERT_LIST,\n    TBS_CERT_LIST_VERSION,\n    TBS_CERT_LIST_SIGNATURE,\n    TBS_CERT_LIST_ISSUER,\n    TBS_CERT_LIST_THIS_UPDATE,\n    TBS_CERT_LIST_NEXT_UPDATE,\n    TBS_CERT_LIST_REVOKED_CERTIFICATES,\n    TBS_CERT_LIST_EXTENSIONS,\n    SIGNATURE_ALGORITHM$4,\n    SIGNATURE_VALUE$1\n];\nfunction tbsCertList(parameters = {}) {\n    const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n    return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n        name: (names.blockName || TBS_CERT_LIST),\n        value: [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n                optional: true,\n                name: (names.tbsCertListVersion || TBS_CERT_LIST_VERSION),\n                value: 2\n            }),\n            AlgorithmIdentifier.schema(names.signature || {\n                names: {\n                    blockName: TBS_CERT_LIST_SIGNATURE\n                }\n            }),\n            RelativeDistinguishedNames.schema(names.issuer || {\n                names: {\n                    blockName: TBS_CERT_LIST_ISSUER\n                }\n            }),\n            Time.schema(names.tbsCertListThisUpdate || {\n                names: {\n                    utcTimeName: TBS_CERT_LIST_THIS_UPDATE,\n                    generalTimeName: TBS_CERT_LIST_THIS_UPDATE\n                }\n            }),\n            Time.schema(names.tbsCertListNextUpdate || {\n                names: {\n                    utcTimeName: TBS_CERT_LIST_NEXT_UPDATE,\n                    generalTimeName: TBS_CERT_LIST_NEXT_UPDATE\n                }\n            }, true),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                optional: true,\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                        name: (names.tbsCertListRevokedCertificates || TBS_CERT_LIST_REVOKED_CERTIFICATES),\n                        value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                            value: [\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer(),\n                                Time.schema(),\n                                Extensions.schema({}, true)\n                            ]\n                        })\n                    })\n                ]\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [Extensions.schema(names.crlExtensions || {\n                        names: {\n                            blockName: TBS_CERT_LIST_EXTENSIONS\n                        }\n                    })]\n            })\n        ]\n    }));\n}\nconst WELL_KNOWN_EXTENSIONS = [\n    id_AuthorityKeyIdentifier,\n    id_IssuerAltName,\n    id_CRLNumber,\n    id_BaseCRLNumber,\n    id_IssuingDistributionPoint,\n    id_FreshestCRL,\n    id_AuthorityInfoAccess,\n    id_CRLReason,\n    id_InvalidityDate,\n    id_CertificateIssuer,\n];\nclass CertificateRevocationList extends PkiObject {\n    get tbs() {\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TBS$3, CertificateRevocationList.defaultValues(TBS$3)));\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$e, CertificateRevocationList.defaultValues(VERSION$e));\n        this.signature = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE$3, CertificateRevocationList.defaultValues(SIGNATURE$3));\n        this.issuer = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER$1, CertificateRevocationList.defaultValues(ISSUER$1));\n        this.thisUpdate = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, THIS_UPDATE$1, CertificateRevocationList.defaultValues(THIS_UPDATE$1));\n        if (NEXT_UPDATE$1 in parameters) {\n            this.nextUpdate = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NEXT_UPDATE$1, CertificateRevocationList.defaultValues(NEXT_UPDATE$1));\n        }\n        if (REVOKED_CERTIFICATES in parameters) {\n            this.revokedCertificates = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, REVOKED_CERTIFICATES, CertificateRevocationList.defaultValues(REVOKED_CERTIFICATES));\n        }\n        if (CRL_EXTENSIONS in parameters) {\n            this.crlExtensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRL_EXTENSIONS, CertificateRevocationList.defaultValues(CRL_EXTENSIONS));\n        }\n        this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_ALGORITHM$4, CertificateRevocationList.defaultValues(SIGNATURE_ALGORITHM$4));\n        this.signatureValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_VALUE$1, CertificateRevocationList.defaultValues(SIGNATURE_VALUE$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS$3:\n                return EMPTY_BUFFER;\n            case VERSION$e:\n                return 0;\n            case SIGNATURE$3:\n                return new AlgorithmIdentifier();\n            case ISSUER$1:\n                return new RelativeDistinguishedNames();\n            case THIS_UPDATE$1:\n                return new Time();\n            case NEXT_UPDATE$1:\n                return new Time();\n            case REVOKED_CERTIFICATES:\n                return [];\n            case CRL_EXTENSIONS:\n                return new Extensions();\n            case SIGNATURE_ALGORITHM$4:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || \"CertificateList\"),\n            value: [\n                tbsCertList(parameters),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$4\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.signatureValue || SIGNATURE_VALUE$1) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$N);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, CertificateRevocationList.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.tbsCertList.valueBeforeDecodeView;\n        if (TBS_CERT_LIST_VERSION in asn1.result) {\n            this.version = asn1.result[TBS_CERT_LIST_VERSION].valueBlock.valueDec;\n        }\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result[TBS_CERT_LIST_SIGNATURE] });\n        this.issuer = new RelativeDistinguishedNames({ schema: asn1.result[TBS_CERT_LIST_ISSUER] });\n        this.thisUpdate = new Time({ schema: asn1.result[TBS_CERT_LIST_THIS_UPDATE] });\n        if (TBS_CERT_LIST_NEXT_UPDATE in asn1.result) {\n            this.nextUpdate = new Time({ schema: asn1.result[TBS_CERT_LIST_NEXT_UPDATE] });\n        }\n        if (TBS_CERT_LIST_REVOKED_CERTIFICATES in asn1.result) {\n            this.revokedCertificates = Array.from(asn1.result[TBS_CERT_LIST_REVOKED_CERTIFICATES], element => new RevokedCertificate({ schema: element }));\n        }\n        if (TBS_CERT_LIST_EXTENSIONS in asn1.result) {\n            this.crlExtensions = new Extensions({ schema: asn1.result[TBS_CERT_LIST_EXTENSIONS] });\n        }\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    encodeTBS() {\n        const outputArray = [];\n        if (this.version !== CertificateRevocationList.defaultValues(VERSION$e)) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        }\n        outputArray.push(this.signature.toSchema());\n        outputArray.push(this.issuer.toSchema());\n        outputArray.push(this.thisUpdate.toSchema());\n        if (this.nextUpdate) {\n            outputArray.push(this.nextUpdate.toSchema());\n        }\n        if (this.revokedCertificates) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: Array.from(this.revokedCertificates, o => o.toSchema())\n            }));\n        }\n        if (this.crlExtensions) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    this.crlExtensions.toSchema()\n                ]\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (!encodeFlag) {\n            if (!this.tbsView.byteLength) {\n                return CertificateRevocationList.schema();\n            }\n            const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"TBS Certificate Revocation List\");\n            tbsSchema = asn1.result;\n        }\n        else {\n            tbsSchema = this.encodeTBS();\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                tbsSchema,\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            tbs: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToHex(this.tbsView),\n            version: this.version,\n            signature: this.signature.toJSON(),\n            issuer: this.issuer.toJSON(),\n            thisUpdate: this.thisUpdate.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON()\n        };\n        if (this.version !== CertificateRevocationList.defaultValues(VERSION$e))\n            res.version = this.version;\n        if (this.nextUpdate) {\n            res.nextUpdate = this.nextUpdate.toJSON();\n        }\n        if (this.revokedCertificates) {\n            res.revokedCertificates = Array.from(this.revokedCertificates, o => o.toJSON());\n        }\n        if (this.crlExtensions) {\n            res.crlExtensions = this.crlExtensions.toJSON();\n        }\n        return res;\n    }\n    isCertificateRevoked(certificate) {\n        if (!this.issuer.isEqual(certificate.issuer)) {\n            return false;\n        }\n        if (!this.revokedCertificates) {\n            return false;\n        }\n        for (const revokedCertificate of this.revokedCertificates) {\n            if (revokedCertificate.userCertificate.isEqual(certificate.serialNumber)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        if (!privateKey) {\n            throw new Error(\"Need to provide a private key for signing\");\n        }\n        const signatureParameters = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const { parameters } = signatureParameters;\n        this.signature = signatureParameters.signatureAlgorithm;\n        this.signatureAlgorithm = signatureParameters.signatureAlgorithm;\n        this.tbsView = new Uint8Array(this.encodeTBS().toBER());\n        const signature = await crypto.signWithPrivateKey(this.tbsView, privateKey, parameters);\n        this.signatureValue = new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ valueHex: signature });\n    }\n    async verify(parameters = {}, crypto = getCrypto(true)) {\n        let subjectPublicKeyInfo;\n        if (parameters.issuerCertificate) {\n            subjectPublicKeyInfo = parameters.issuerCertificate.subjectPublicKeyInfo;\n            if (!this.issuer.isEqual(parameters.issuerCertificate.subject)) {\n                return false;\n            }\n        }\n        if (parameters.publicKeyInfo) {\n            subjectPublicKeyInfo = parameters.publicKeyInfo;\n        }\n        if (!subjectPublicKeyInfo) {\n            throw new Error(\"Issuer's certificate must be provided as an input parameter\");\n        }\n        if (this.crlExtensions) {\n            for (const extension of this.crlExtensions.extensions) {\n                if (extension.critical) {\n                    if (!WELL_KNOWN_EXTENSIONS.includes(extension.extnID))\n                        return false;\n                }\n            }\n        }\n        return crypto.verifyWithPublicKey(this.tbsView, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);\n    }\n}\nCertificateRevocationList.CLASS_NAME = \"CertificateRevocationList\";\n\nconst CRL_ID = \"crlId\";\nconst CRL_VALUE = \"crlValue\";\nconst PARSED_VALUE$3 = \"parsedValue\";\nconst CLEAR_PROPS$M = [\n    CRL_ID,\n    CRL_VALUE,\n];\nclass CRLBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.crlId = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRL_ID, CRLBag.defaultValues(CRL_ID));\n        this.crlValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRL_VALUE, CRLBag.defaultValues(CRL_VALUE));\n        if (PARSED_VALUE$3 in parameters) {\n            this.parsedValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PARSED_VALUE$3, CRLBag.defaultValues(PARSED_VALUE$3));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CRL_ID:\n                return EMPTY_STRING;\n            case CRL_VALUE:\n                return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any());\n            case PARSED_VALUE$3:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CRL_ID:\n                return (memberValue === EMPTY_STRING);\n            case CRL_VALUE:\n                return (memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any);\n            case PARSED_VALUE$3:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.id || \"id\") }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.value || \"value\") })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$M);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, CRLBag.schema({\n            names: {\n                id: CRL_ID,\n                value: CRL_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.crlId = asn1.result.crlId.valueBlock.toString();\n        this.crlValue = asn1.result.crlValue;\n        switch (this.crlId) {\n            case id_CRLBag_X509CRL:\n                {\n                    this.parsedValue = CertificateRevocationList.fromBER(this.certValue.valueBlock.valueHex);\n                }\n                break;\n            default:\n                throw new Error(`Incorrect CRL_ID value in CRLBag: ${this.crlId}`);\n        }\n    }\n    toSchema() {\n        if (this.parsedValue) {\n            this.crlId = id_CRLBag_X509CRL;\n            this.crlValue = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.crlId }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [this.crlValue.toSchema()]\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            crlId: this.crlId,\n            crlValue: this.crlValue.toJSON()\n        };\n    }\n}\nCRLBag.CLASS_NAME = \"CRLBag\";\n\nconst VERSION$d = \"version\";\nconst ENCRYPTED_CONTENT_INFO$1 = \"encryptedContentInfo\";\nconst UNPROTECTED_ATTRS$1 = \"unprotectedAttrs\";\nconst CLEAR_PROPS$L = [\n    VERSION$d,\n    ENCRYPTED_CONTENT_INFO$1,\n    UNPROTECTED_ATTRS$1,\n];\nclass EncryptedData extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$d, EncryptedData.defaultValues(VERSION$d));\n        this.encryptedContentInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTED_CONTENT_INFO$1, EncryptedData.defaultValues(ENCRYPTED_CONTENT_INFO$1));\n        if (UNPROTECTED_ATTRS$1 in parameters) {\n            this.unprotectedAttrs = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, UNPROTECTED_ATTRS$1, EncryptedData.defaultValues(UNPROTECTED_ATTRS$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$d:\n                return 0;\n            case ENCRYPTED_CONTENT_INFO$1:\n                return new EncryptedContentInfo();\n            case UNPROTECTED_ATTRS$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$d:\n                return (memberValue === 0);\n            case ENCRYPTED_CONTENT_INFO$1:\n                return ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\n                    (EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm)) &&\n                    (EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent)));\n            case UNPROTECTED_ATTRS$1:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                EncryptedContentInfo.schema(names.encryptedContentInfo || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.unprotectedAttrs || EMPTY_STRING),\n                            value: Attribute.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$L);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, EncryptedData.schema({\n            names: {\n                version: VERSION$d,\n                encryptedContentInfo: {\n                    names: {\n                        blockName: ENCRYPTED_CONTENT_INFO$1\n                    }\n                },\n                unprotectedAttrs: UNPROTECTED_ATTRS$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\n        if (UNPROTECTED_ATTRS$1 in asn1.result)\n            this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        outputArray.push(this.encryptedContentInfo.toSchema());\n        if (this.unprotectedAttrs) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.unprotectedAttrs, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            encryptedContentInfo: this.encryptedContentInfo.toJSON()\n        };\n        if (this.unprotectedAttrs)\n            res.unprotectedAttrs = Array.from(this.unprotectedAttrs, o => o.toJSON());\n        return res;\n    }\n    async encrypt(parameters, crypto = getCrypto(true)) {\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        const encryptParams = {\n            ...parameters,\n            contentType: \"1.2.840.113549.1.7.1\",\n        };\n        this.encryptedContentInfo = await crypto.encryptEncryptedContentInfo(encryptParams);\n    }\n    async decrypt(parameters, crypto = getCrypto(true)) {\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        const decryptParams = {\n            ...parameters,\n            encryptedContentInfo: this.encryptedContentInfo,\n        };\n        return crypto.decryptEncryptedContentInfo(decryptParams);\n    }\n}\nEncryptedData.CLASS_NAME = \"EncryptedData\";\n\nconst ENCRYPTION_ALGORITHM = \"encryptionAlgorithm\";\nconst ENCRYPTED_DATA = \"encryptedData\";\nconst PARSED_VALUE$2 = \"parsedValue\";\nconst CLEAR_PROPS$K = [\n    ENCRYPTION_ALGORITHM,\n    ENCRYPTED_DATA,\n];\nclass PKCS8ShroudedKeyBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.encryptionAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTION_ALGORITHM, PKCS8ShroudedKeyBag.defaultValues(ENCRYPTION_ALGORITHM));\n        this.encryptedData = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTED_DATA, PKCS8ShroudedKeyBag.defaultValues(ENCRYPTED_DATA));\n        if (PARSED_VALUE$2 in parameters) {\n            this.parsedValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PARSED_VALUE$2, PKCS8ShroudedKeyBag.defaultValues(PARSED_VALUE$2));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ENCRYPTION_ALGORITHM:\n                return (new AlgorithmIdentifier());\n            case ENCRYPTED_DATA:\n                return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString());\n            case PARSED_VALUE$2:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ENCRYPTION_ALGORITHM:\n                return ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\n                    ((\"algorithmParams\" in memberValue) === false));\n            case ENCRYPTED_DATA:\n                return (memberValue.isEqual(PKCS8ShroudedKeyBag.defaultValues(memberName)));\n            case PARSED_VALUE$2:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.encryptionAlgorithm || {\n                    names: {\n                        blockName: ENCRYPTION_ALGORITHM\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.encryptedData || ENCRYPTED_DATA) }),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({\n                            idBlock: {\n                                isConstructed: true\n                            },\n                            name: (names.encryptedData || ENCRYPTED_DATA)\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$K);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PKCS8ShroudedKeyBag.schema({\n            names: {\n                encryptionAlgorithm: {\n                    names: {\n                        blockName: ENCRYPTION_ALGORITHM\n                    }\n                },\n                encryptedData: ENCRYPTED_DATA\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.encryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.encryptionAlgorithm });\n        this.encryptedData = asn1.result.encryptedData;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.encryptionAlgorithm.toSchema(),\n                this.encryptedData\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            encryptionAlgorithm: this.encryptionAlgorithm.toJSON(),\n            encryptedData: this.encryptedData.toJSON(),\n        };\n    }\n    async parseInternalValues(parameters, crypto = getCrypto(true)) {\n        const cmsEncrypted = new EncryptedData({\n            encryptedContentInfo: new EncryptedContentInfo({\n                contentEncryptionAlgorithm: this.encryptionAlgorithm,\n                encryptedContent: this.encryptedData\n            })\n        });\n        const decryptedData = await cmsEncrypted.decrypt(parameters, crypto);\n        this.parsedValue = PrivateKeyInfo.fromBER(decryptedData);\n    }\n    async makeInternalValues(parameters, crypto = getCrypto(true)) {\n        if (!this.parsedValue) {\n            throw new Error(\"Please initialize \\\"parsedValue\\\" first\");\n        }\n        const cmsEncrypted = new EncryptedData();\n        const encryptParams = {\n            ...parameters,\n            contentToEncrypt: this.parsedValue.toSchema().toBER(false),\n        };\n        await cmsEncrypted.encrypt(encryptParams, crypto);\n        if (!cmsEncrypted.encryptedContentInfo.encryptedContent) {\n            throw new Error(\"The filed `encryptedContent` in EncryptedContentInfo is empty\");\n        }\n        this.encryptionAlgorithm = cmsEncrypted.encryptedContentInfo.contentEncryptionAlgorithm;\n        this.encryptedData = cmsEncrypted.encryptedContentInfo.encryptedContent;\n    }\n}\nPKCS8ShroudedKeyBag.CLASS_NAME = \"PKCS8ShroudedKeyBag\";\n\nconst SECRET_TYPE_ID = \"secretTypeId\";\nconst SECRET_VALUE = \"secretValue\";\nconst CLEAR_PROPS$J = [\n    SECRET_TYPE_ID,\n    SECRET_VALUE,\n];\nclass SecretBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.secretTypeId = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SECRET_TYPE_ID, SecretBag.defaultValues(SECRET_TYPE_ID));\n        this.secretValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SECRET_VALUE, SecretBag.defaultValues(SECRET_VALUE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SECRET_TYPE_ID:\n                return EMPTY_STRING;\n            case SECRET_VALUE:\n                return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any());\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SECRET_TYPE_ID:\n                return (memberValue === EMPTY_STRING);\n            case SECRET_VALUE:\n                return (memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.id || \"id\") }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.value || \"value\") })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$J);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, SecretBag.schema({\n            names: {\n                id: SECRET_TYPE_ID,\n                value: SECRET_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.secretTypeId = asn1.result.secretTypeId.valueBlock.toString();\n        this.secretValue = asn1.result.secretValue;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.secretTypeId }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [this.secretValue.toSchema()]\n                })\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            secretTypeId: this.secretTypeId,\n            secretValue: this.secretValue.toJSON()\n        };\n    }\n}\nSecretBag.CLASS_NAME = \"SecretBag\";\n\nclass SafeBagValueFactory {\n    static getItems() {\n        if (!this.items) {\n            this.items = {};\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.1\", PrivateKeyInfo);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.2\", PKCS8ShroudedKeyBag);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.3\", CertBag);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.4\", CRLBag);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.5\", SecretBag);\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.6\", SafeContents);\n        }\n        return this.items;\n    }\n    static register(id, type) {\n        this.getItems()[id] = type;\n    }\n    static find(id) {\n        return this.getItems()[id] || null;\n    }\n}\n\nconst BAG_ID = \"bagId\";\nconst BAG_VALUE = \"bagValue\";\nconst BAG_ATTRIBUTES = \"bagAttributes\";\nconst CLEAR_PROPS$I = [\n    BAG_ID,\n    BAG_VALUE,\n    BAG_ATTRIBUTES\n];\nclass SafeBag extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.bagId = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, BAG_ID, SafeBag.defaultValues(BAG_ID));\n        this.bagValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, BAG_VALUE, SafeBag.defaultValues(BAG_VALUE));\n        if (BAG_ATTRIBUTES in parameters) {\n            this.bagAttributes = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, BAG_ATTRIBUTES, SafeBag.defaultValues(BAG_ATTRIBUTES));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case BAG_ID:\n                return EMPTY_STRING;\n            case BAG_VALUE:\n                return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any());\n            case BAG_ATTRIBUTES:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case BAG_ID:\n                return (memberValue === EMPTY_STRING);\n            case BAG_VALUE:\n                return (memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any);\n            case BAG_ATTRIBUTES:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.bagId || BAG_ID) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.bagValue || BAG_VALUE) })]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    optional: true,\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.bagAttributes || BAG_ATTRIBUTES),\n                            value: Attribute.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$I);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, SafeBag.schema({\n            names: {\n                bagId: BAG_ID,\n                bagValue: BAG_VALUE,\n                bagAttributes: BAG_ATTRIBUTES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.bagId = asn1.result.bagId.valueBlock.toString();\n        const bagType = SafeBagValueFactory.find(this.bagId);\n        if (!bagType) {\n            throw new Error(`Invalid BAG_ID for SafeBag: ${this.bagId}`);\n        }\n        this.bagValue = new bagType({ schema: asn1.result.bagValue });\n        if (BAG_ATTRIBUTES in asn1.result) {\n            this.bagAttributes = Array.from(asn1.result.bagAttributes, element => new Attribute({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.bagId }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.bagValue.toSchema()]\n            })\n        ];\n        if (this.bagAttributes) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                value: Array.from(this.bagAttributes, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const output = {\n            bagId: this.bagId,\n            bagValue: this.bagValue.toJSON()\n        };\n        if (this.bagAttributes) {\n            output.bagAttributes = Array.from(this.bagAttributes, o => o.toJSON());\n        }\n        return output;\n    }\n}\nSafeBag.CLASS_NAME = \"SafeBag\";\n\nconst SAFE_BUGS = \"safeBags\";\nclass SafeContents extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.safeBags = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SAFE_BUGS, SafeContents.defaultValues(SAFE_BUGS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SAFE_BUGS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SAFE_BUGS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.safeBags || EMPTY_STRING),\n                    value: SafeBag.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            SAFE_BUGS\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, SafeContents.schema({\n            names: {\n                safeBags: SAFE_BUGS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.safeBags = Array.from(asn1.result.safeBags, element => new SafeBag({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.safeBags, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            safeBags: Array.from(this.safeBags, o => o.toJSON())\n        };\n    }\n}\nSafeContents.CLASS_NAME = \"SafeContents\";\n\nconst OTHER_CERT_FORMAT = \"otherCertFormat\";\nconst OTHER_CERT = \"otherCert\";\nconst CLEAR_PROPS$H = [\n    OTHER_CERT_FORMAT,\n    OTHER_CERT\n];\nclass OtherCertificateFormat extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.otherCertFormat = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OTHER_CERT_FORMAT, OtherCertificateFormat.defaultValues(OTHER_CERT_FORMAT));\n        this.otherCert = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OTHER_CERT, OtherCertificateFormat.defaultValues(OTHER_CERT));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case OTHER_CERT_FORMAT:\n                return EMPTY_STRING;\n            case OTHER_CERT:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.otherCertFormat || OTHER_CERT_FORMAT) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.otherCert || OTHER_CERT) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$H);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OtherCertificateFormat.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.otherCertFormat = asn1.result.otherCertFormat.valueBlock.toString();\n        this.otherCert = asn1.result.otherCert;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.otherCertFormat }),\n                this.otherCert\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            otherCertFormat: this.otherCertFormat\n        };\n        if (!(this.otherCert instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any)) {\n            res.otherCert = this.otherCert.toJSON();\n        }\n        return res;\n    }\n}\n\nconst CERTIFICATES$1 = \"certificates\";\nconst CLEAR_PROPS$G = [\n    CERTIFICATES$1,\n];\nclass CertificateSet extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certificates = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERTIFICATES$1, CertificateSet.defaultValues(CERTIFICATES$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERTIFICATES$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.certificates || CERTIFICATES$1),\n                    value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                        value: [\n                            Certificate.schema(),\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 0\n                                },\n                                value: [\n                                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any()\n                                ]\n                            }),\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 1\n                                },\n                                value: [\n                                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence\n                                ]\n                            }),\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 2\n                                },\n                                value: AttributeCertificateV2.schema().valueBlock.value\n                            }),\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 3\n                                },\n                                value: OtherCertificateFormat.schema().valueBlock.value\n                            })\n                        ]\n                    })\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$G);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, CertificateSet.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.certificates = Array.from(asn1.result.certificates || [], (element) => {\n            const initialTagNumber = element.idBlock.tagNumber;\n            if (element.idBlock.tagClass === 1)\n                return new Certificate({ schema: element });\n            const elementSequence = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: element.valueBlock.value\n            });\n            switch (initialTagNumber) {\n                case 1:\n                    if (elementSequence.valueBlock.value[0].valueBlock.value[0].valueBlock.valueDec === 1) {\n                        return new AttributeCertificateV2({ schema: elementSequence });\n                    }\n                    else {\n                        return new AttributeCertificateV1({ schema: elementSequence });\n                    }\n                case 2:\n                    return new AttributeCertificateV2({ schema: elementSequence });\n                case 3:\n                    return new OtherCertificateFormat({ schema: elementSequence });\n            }\n            return element;\n        });\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n            value: Array.from(this.certificates, element => {\n                switch (true) {\n                    case (element instanceof Certificate):\n                        return element.toSchema();\n                    case (element instanceof AttributeCertificateV1):\n                        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: element.toSchema().valueBlock.value\n                        });\n                    case (element instanceof AttributeCertificateV2):\n                        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 2\n                            },\n                            value: element.toSchema().valueBlock.value\n                        });\n                    case (element instanceof OtherCertificateFormat):\n                        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 3\n                            },\n                            value: element.toSchema().valueBlock.value\n                        });\n                }\n                return element.toSchema();\n            })\n        }));\n    }\n    toJSON() {\n        return {\n            certificates: Array.from(this.certificates, o => o.toJSON())\n        };\n    }\n}\nCertificateSet.CLASS_NAME = \"CertificateSet\";\n\nconst OTHER_REV_INFO_FORMAT = \"otherRevInfoFormat\";\nconst OTHER_REV_INFO = \"otherRevInfo\";\nconst CLEAR_PROPS$F = [\n    OTHER_REV_INFO_FORMAT,\n    OTHER_REV_INFO\n];\nclass OtherRevocationInfoFormat extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.otherRevInfoFormat = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OTHER_REV_INFO_FORMAT, OtherRevocationInfoFormat.defaultValues(OTHER_REV_INFO_FORMAT));\n        this.otherRevInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OTHER_REV_INFO, OtherRevocationInfoFormat.defaultValues(OTHER_REV_INFO));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case OTHER_REV_INFO_FORMAT:\n                return EMPTY_STRING;\n            case OTHER_REV_INFO:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.otherRevInfoFormat || OTHER_REV_INFO_FORMAT) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.otherRevInfo || OTHER_REV_INFO) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$F);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OtherRevocationInfoFormat.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.otherRevInfoFormat = asn1.result.otherRevInfoFormat.valueBlock.toString();\n        this.otherRevInfo = asn1.result.otherRevInfo;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.otherRevInfoFormat }),\n                this.otherRevInfo\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            otherRevInfoFormat: this.otherRevInfoFormat\n        };\n        if (!(this.otherRevInfo instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any)) {\n            res.otherRevInfo = this.otherRevInfo.toJSON();\n        }\n        return res;\n    }\n}\nOtherRevocationInfoFormat.CLASS_NAME = \"OtherRevocationInfoFormat\";\n\nconst CRLS$3 = \"crls\";\nconst OTHER_REVOCATION_INFOS = \"otherRevocationInfos\";\nconst CLEAR_PROPS$E = [\n    CRLS$3\n];\nclass RevocationInfoChoices extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.crls = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRLS$3, RevocationInfoChoices.defaultValues(CRLS$3));\n        this.otherRevocationInfos = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OTHER_REVOCATION_INFOS, RevocationInfoChoices.defaultValues(OTHER_REVOCATION_INFOS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CRLS$3:\n                return [];\n            case OTHER_REVOCATION_INFOS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.crls || EMPTY_STRING),\n                    value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                        value: [\n                            CertificateRevocationList.schema(),\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                idBlock: {\n                                    tagClass: 3,\n                                    tagNumber: 1\n                                },\n                                value: [\n                                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier(),\n                                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any()\n                                ]\n                            })\n                        ]\n                    })\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$E);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RevocationInfoChoices.schema({\n            names: {\n                crls: CRLS$3\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.crls) {\n            for (const element of asn1.result.crls) {\n                if (element.idBlock.tagClass === 1)\n                    this.crls.push(new CertificateRevocationList({ schema: element }));\n                else\n                    this.otherRevocationInfos.push(new OtherRevocationInfoFormat({ schema: element }));\n            }\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(...Array.from(this.crls, o => o.toSchema()));\n        outputArray.push(...Array.from(this.otherRevocationInfos, element => {\n            const schema = element.toSchema();\n            schema.idBlock.tagClass = 3;\n            schema.idBlock.tagNumber = 1;\n            return schema;\n        }));\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        return {\n            crls: Array.from(this.crls, o => o.toJSON()),\n            otherRevocationInfos: Array.from(this.otherRevocationInfos, o => o.toJSON())\n        };\n    }\n}\nRevocationInfoChoices.CLASS_NAME = \"RevocationInfoChoices\";\n\nconst CERTS$3 = \"certs\";\nconst CRLS$2 = \"crls\";\nconst CLEAR_PROPS$D = [\n    CERTS$3,\n    CRLS$2,\n];\nclass OriginatorInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.crls = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRLS$2, OriginatorInfo.defaultValues(CRLS$2));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERTS$3:\n                return new CertificateSet();\n            case CRLS$2:\n                return new RevocationInfoChoices();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CERTS$3:\n                return (memberValue.certificates.length === 0);\n            case CRLS$2:\n                return ((memberValue.crls.length === 0) && (memberValue.otherRevocationInfos.length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.certs || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: CertificateSet.schema().valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.crls || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: RevocationInfoChoices.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$D);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OriginatorInfo.schema({\n            names: {\n                certs: CERTS$3,\n                crls: CRLS$2\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (CERTS$3 in asn1.result) {\n            this.certs = new CertificateSet({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    value: asn1.result.certs.valueBlock.value\n                })\n            });\n        }\n        if (CRLS$2 in asn1.result) {\n            this.crls = new RevocationInfoChoices({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    value: asn1.result.crls.valueBlock.value\n                })\n            });\n        }\n    }\n    toSchema() {\n        const sequenceValue = [];\n        if (this.certs) {\n            sequenceValue.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.certs.toSchema().valueBlock.value\n            }));\n        }\n        if (this.crls) {\n            sequenceValue.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: this.crls.toSchema().valueBlock.value\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: sequenceValue\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (this.certs) {\n            res.certs = this.certs.toJSON();\n        }\n        if (this.crls) {\n            res.crls = this.crls.toJSON();\n        }\n        return res;\n    }\n}\nOriginatorInfo.CLASS_NAME = \"OriginatorInfo\";\n\nconst ISSUER = \"issuer\";\nconst SERIAL_NUMBER$2 = \"serialNumber\";\nconst CLEAR_PROPS$C = [\n    ISSUER,\n    SERIAL_NUMBER$2,\n];\nclass IssuerAndSerialNumber extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.issuer = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER, IssuerAndSerialNumber.defaultValues(ISSUER));\n        this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SERIAL_NUMBER$2, IssuerAndSerialNumber.defaultValues(SERIAL_NUMBER$2));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ISSUER:\n                return new RelativeDistinguishedNames();\n            case SERIAL_NUMBER$2:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                RelativeDistinguishedNames.schema(names.issuer || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.serialNumber || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$C);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, IssuerAndSerialNumber.schema({\n            names: {\n                issuer: {\n                    names: {\n                        blockName: ISSUER\n                    }\n                },\n                serialNumber: SERIAL_NUMBER$2\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.issuer = new RelativeDistinguishedNames({ schema: asn1.result.issuer });\n        this.serialNumber = asn1.result.serialNumber;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.issuer.toSchema(),\n                this.serialNumber\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            issuer: this.issuer.toJSON(),\n            serialNumber: this.serialNumber.toJSON(),\n        };\n    }\n}\nIssuerAndSerialNumber.CLASS_NAME = \"IssuerAndSerialNumber\";\n\nconst VARIANT$3 = \"variant\";\nconst VALUE$3 = \"value\";\nconst CLEAR_PROPS$B = [\n    \"blockName\"\n];\nclass RecipientIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.variant = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VARIANT$3, RecipientIdentifier.defaultValues(VARIANT$3));\n        if (VALUE$3 in parameters) {\n            this.value = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUE$3, RecipientIdentifier.defaultValues(VALUE$3));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VARIANT$3:\n                return (-1);\n            case VALUE$3:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VARIANT$3:\n                return (memberValue === (-1));\n            case VALUE$3:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n            value: [\n                IssuerAndSerialNumber.schema({\n                    names: {\n                        blockName: (names.blockName || EMPTY_STRING)\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$B);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RecipientIdentifier.schema({\n            names: {\n                blockName: \"blockName\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\n            this.variant = 1;\n            this.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\n        }\n        else {\n            this.variant = 2;\n            this.value = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: asn1.result.blockName.valueBlock.valueHex });\n        }\n    }\n    toSchema() {\n        switch (this.variant) {\n            case 1:\n                if (!(this.value instanceof IssuerAndSerialNumber)) {\n                    throw new Error(\"Incorrect type of RecipientIdentifier.value. It should be IssuerAndSerialNumber.\");\n                }\n                return this.value.toSchema();\n            case 2:\n                if (!(this.value instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString)) {\n                    throw new Error(\"Incorrect type of RecipientIdentifier.value. It should be ASN.1 OctetString.\");\n                }\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    valueHex: this.value.valueBlock.valueHexView\n                });\n            default:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n        }\n    }\n    toJSON() {\n        const res = {\n            variant: this.variant\n        };\n        if ((this.variant === 1 || this.variant === 2) && this.value) {\n            res.value = this.value.toJSON();\n        }\n        return res;\n    }\n}\nRecipientIdentifier.CLASS_NAME = \"RecipientIdentifier\";\n\nconst VERSION$c = \"version\";\nconst RID$1 = \"rid\";\nconst KEY_ENCRYPTION_ALGORITHM$3 = \"keyEncryptionAlgorithm\";\nconst ENCRYPTED_KEY$3 = \"encryptedKey\";\nconst RECIPIENT_CERTIFICATE$1 = \"recipientCertificate\";\nconst CLEAR_PROPS$A = [\n    VERSION$c,\n    RID$1,\n    KEY_ENCRYPTION_ALGORITHM$3,\n    ENCRYPTED_KEY$3,\n];\nclass KeyTransRecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$c, KeyTransRecipientInfo.defaultValues(VERSION$c));\n        this.rid = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RID$1, KeyTransRecipientInfo.defaultValues(RID$1));\n        this.keyEncryptionAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$3, KeyTransRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$3));\n        this.encryptedKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTED_KEY$3, KeyTransRecipientInfo.defaultValues(ENCRYPTED_KEY$3));\n        this.recipientCertificate = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RECIPIENT_CERTIFICATE$1, KeyTransRecipientInfo.defaultValues(RECIPIENT_CERTIFICATE$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$c:\n                return (-1);\n            case RID$1:\n                return {};\n            case KEY_ENCRYPTION_ALGORITHM$3:\n                return new AlgorithmIdentifier();\n            case ENCRYPTED_KEY$3:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case RECIPIENT_CERTIFICATE$1:\n                return new Certificate();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$c:\n                return (memberValue === KeyTransRecipientInfo.defaultValues(VERSION$c));\n            case RID$1:\n                return (Object.keys(memberValue).length === 0);\n            case KEY_ENCRYPTION_ALGORITHM$3:\n            case ENCRYPTED_KEY$3:\n                return memberValue.isEqual(KeyTransRecipientInfo.defaultValues(memberName));\n            case RECIPIENT_CERTIFICATE$1:\n                return false;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                RecipientIdentifier.schema(names.rid || {}),\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$A);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, KeyTransRecipientInfo.schema({\n            names: {\n                version: VERSION$c,\n                rid: {\n                    names: {\n                        blockName: RID$1\n                    }\n                },\n                keyEncryptionAlgorithm: {\n                    names: {\n                        blockName: KEY_ENCRYPTION_ALGORITHM$3\n                    }\n                },\n                encryptedKey: ENCRYPTED_KEY$3\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        if (asn1.result.rid.idBlock.tagClass === 3) {\n            this.rid = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: asn1.result.rid.valueBlock.valueHex });\n        }\n        else {\n            this.rid = new IssuerAndSerialNumber({ schema: asn1.result.rid });\n        }\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\n        this.encryptedKey = asn1.result.encryptedKey;\n    }\n    toSchema() {\n        const outputArray = [];\n        if (this.rid instanceof IssuerAndSerialNumber) {\n            this.version = 0;\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n            outputArray.push(this.rid.toSchema());\n        }\n        else {\n            this.version = 2;\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                valueHex: this.rid.valueBlock.valueHexView\n            }));\n        }\n        outputArray.push(this.keyEncryptionAlgorithm.toSchema());\n        outputArray.push(this.encryptedKey);\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        return {\n            version: this.version,\n            rid: this.rid.toJSON(),\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n            encryptedKey: this.encryptedKey.toJSON(),\n        };\n    }\n}\nKeyTransRecipientInfo.CLASS_NAME = \"KeyTransRecipientInfo\";\n\nconst ALGORITHM = \"algorithm\";\nconst PUBLIC_KEY = \"publicKey\";\nconst CLEAR_PROPS$z = [\n    ALGORITHM,\n    PUBLIC_KEY\n];\nclass OriginatorPublicKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.algorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ALGORITHM, OriginatorPublicKey.defaultValues(ALGORITHM));\n        this.publicKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PUBLIC_KEY, OriginatorPublicKey.defaultValues(PUBLIC_KEY));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ALGORITHM:\n                return new AlgorithmIdentifier();\n            case PUBLIC_KEY:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ALGORITHM:\n            case PUBLIC_KEY:\n                return (memberValue.isEqual(OriginatorPublicKey.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.algorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.publicKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$z);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OriginatorPublicKey.schema({\n            names: {\n                algorithm: {\n                    names: {\n                        blockName: ALGORITHM\n                    }\n                },\n                publicKey: PUBLIC_KEY\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\n        this.publicKey = asn1.result.publicKey;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.algorithm.toSchema(),\n                this.publicKey\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            algorithm: this.algorithm.toJSON(),\n            publicKey: this.publicKey.toJSON(),\n        };\n    }\n}\nOriginatorPublicKey.CLASS_NAME = \"OriginatorPublicKey\";\n\nconst VARIANT$2 = \"variant\";\nconst VALUE$2 = \"value\";\nconst CLEAR_PROPS$y = [\n    \"blockName\",\n];\nclass OriginatorIdentifierOrKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.variant = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VARIANT$2, OriginatorIdentifierOrKey.defaultValues(VARIANT$2));\n        if (VALUE$2 in parameters) {\n            this.value = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUE$2, OriginatorIdentifierOrKey.defaultValues(VALUE$2));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VARIANT$2:\n                return (-1);\n            case VALUE$2:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VARIANT$2:\n                return (memberValue === (-1));\n            case VALUE$2:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n            value: [\n                IssuerAndSerialNumber.schema({\n                    names: {\n                        blockName: (names.blockName || EMPTY_STRING)\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    name: (names.blockName || EMPTY_STRING)\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    name: (names.blockName || EMPTY_STRING),\n                    value: OriginatorPublicKey.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$y);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OriginatorIdentifierOrKey.schema({\n            names: {\n                blockName: \"blockName\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\n            this.variant = 1;\n            this.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\n        }\n        else {\n            if (asn1.result.blockName.idBlock.tagNumber === 0) {\n                asn1.result.blockName.idBlock.tagClass = 1;\n                asn1.result.blockName.idBlock.tagNumber = 4;\n                this.variant = 2;\n                this.value = asn1.result.blockName;\n            }\n            else {\n                this.variant = 3;\n                this.value = new OriginatorPublicKey({\n                    schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                        value: asn1.result.blockName.valueBlock.value\n                    })\n                });\n            }\n        }\n    }\n    toSchema() {\n        switch (this.variant) {\n            case 1:\n                return this.value.toSchema();\n            case 2:\n                this.value.idBlock.tagClass = 3;\n                this.value.idBlock.tagNumber = 0;\n                return this.value;\n            case 3:\n                {\n                    const _schema = this.value.toSchema();\n                    _schema.idBlock.tagClass = 3;\n                    _schema.idBlock.tagNumber = 1;\n                    return _schema;\n                }\n            default:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n        }\n    }\n    toJSON() {\n        const res = {\n            variant: this.variant\n        };\n        if ((this.variant === 1) || (this.variant === 2) || (this.variant === 3)) {\n            res.value = this.value.toJSON();\n        }\n        return res;\n    }\n}\nOriginatorIdentifierOrKey.CLASS_NAME = \"OriginatorIdentifierOrKey\";\n\nconst KEY_ATTR_ID = \"keyAttrId\";\nconst KEY_ATTR = \"keyAttr\";\nconst CLEAR_PROPS$x = [\n    KEY_ATTR_ID,\n    KEY_ATTR,\n];\nclass OtherKeyAttribute extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyAttrId = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_ATTR_ID, OtherKeyAttribute.defaultValues(KEY_ATTR_ID));\n        if (KEY_ATTR in parameters) {\n            this.keyAttr = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_ATTR, OtherKeyAttribute.defaultValues(KEY_ATTR));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_ATTR_ID:\n                return EMPTY_STRING;\n            case KEY_ATTR:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case KEY_ATTR_ID:\n                return (typeof memberValue === \"string\" && memberValue === EMPTY_STRING);\n            case KEY_ATTR:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            optional: (names.optional || true),\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.keyAttrId || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({\n                    optional: true,\n                    name: (names.keyAttr || EMPTY_STRING)\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$x);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OtherKeyAttribute.schema({\n            names: {\n                keyAttrId: KEY_ATTR_ID,\n                keyAttr: KEY_ATTR\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyAttrId = asn1.result.keyAttrId.valueBlock.toString();\n        if (KEY_ATTR in asn1.result) {\n            this.keyAttr = asn1.result.keyAttr;\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.keyAttrId }));\n        if (KEY_ATTR in this) {\n            outputArray.push(this.keyAttr);\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray,\n        }));\n    }\n    toJSON() {\n        const res = {\n            keyAttrId: this.keyAttrId\n        };\n        if (KEY_ATTR in this) {\n            res.keyAttr = this.keyAttr.toJSON();\n        }\n        return res;\n    }\n}\nOtherKeyAttribute.CLASS_NAME = \"OtherKeyAttribute\";\n\nconst SUBJECT_KEY_IDENTIFIER = \"subjectKeyIdentifier\";\nconst DATE$1 = \"date\";\nconst OTHER$1 = \"other\";\nconst CLEAR_PROPS$w = [\n    SUBJECT_KEY_IDENTIFIER,\n    DATE$1,\n    OTHER$1,\n];\nclass RecipientKeyIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.subjectKeyIdentifier = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SUBJECT_KEY_IDENTIFIER, RecipientKeyIdentifier.defaultValues(SUBJECT_KEY_IDENTIFIER));\n        if (DATE$1 in parameters) {\n            this.date = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DATE$1, RecipientKeyIdentifier.defaultValues(DATE$1));\n        }\n        if (OTHER$1 in parameters) {\n            this.other = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OTHER$1, RecipientKeyIdentifier.defaultValues(OTHER$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SUBJECT_KEY_IDENTIFIER:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case DATE$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime();\n            case OTHER$1:\n                return new OtherKeyAttribute();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SUBJECT_KEY_IDENTIFIER:\n                return (memberValue.isEqual(RecipientKeyIdentifier.defaultValues(SUBJECT_KEY_IDENTIFIER)));\n            case DATE$1:\n                return ((memberValue.year === 0) &&\n                    (memberValue.month === 0) &&\n                    (memberValue.day === 0) &&\n                    (memberValue.hour === 0) &&\n                    (memberValue.minute === 0) &&\n                    (memberValue.second === 0) &&\n                    (memberValue.millisecond === 0));\n            case OTHER$1:\n                return ((memberValue.keyAttrId === EMPTY_STRING) && ((\"keyAttr\" in memberValue) === false));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.subjectKeyIdentifier || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({\n                    optional: true,\n                    name: (names.date || EMPTY_STRING)\n                }),\n                OtherKeyAttribute.schema(names.other || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$w);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RecipientKeyIdentifier.schema({\n            names: {\n                subjectKeyIdentifier: SUBJECT_KEY_IDENTIFIER,\n                date: DATE$1,\n                other: {\n                    names: {\n                        blockName: OTHER$1\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.subjectKeyIdentifier = asn1.result.subjectKeyIdentifier;\n        if (DATE$1 in asn1.result)\n            this.date = asn1.result.date;\n        if (OTHER$1 in asn1.result)\n            this.other = new OtherKeyAttribute({ schema: asn1.result.other });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.subjectKeyIdentifier);\n        if (this.date) {\n            outputArray.push(this.date);\n        }\n        if (this.other) {\n            outputArray.push(this.other.toSchema());\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            subjectKeyIdentifier: this.subjectKeyIdentifier.toJSON()\n        };\n        if (this.date) {\n            res.date = this.date.toJSON();\n        }\n        if (this.other) {\n            res.other = this.other.toJSON();\n        }\n        return res;\n    }\n}\nRecipientKeyIdentifier.CLASS_NAME = \"RecipientKeyIdentifier\";\n\nconst VARIANT$1 = \"variant\";\nconst VALUE$1 = \"value\";\nconst CLEAR_PROPS$v = [\n    \"blockName\",\n];\nclass KeyAgreeRecipientIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.variant = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VARIANT$1, KeyAgreeRecipientIdentifier.defaultValues(VARIANT$1));\n        this.value = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUE$1, KeyAgreeRecipientIdentifier.defaultValues(VALUE$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VARIANT$1:\n                return (-1);\n            case VALUE$1:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VARIANT$1:\n                return (memberValue === (-1));\n            case VALUE$1:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n            value: [\n                IssuerAndSerialNumber.schema(names.issuerAndSerialNumber || {\n                    names: {\n                        blockName: (names.blockName || EMPTY_STRING)\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: RecipientKeyIdentifier.schema(names.rKeyId || {\n                        names: {\n                            blockName: (names.blockName || EMPTY_STRING)\n                        }\n                    }).valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$v);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, KeyAgreeRecipientIdentifier.schema({\n            names: {\n                blockName: \"blockName\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\n            this.variant = 1;\n            this.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\n        }\n        else {\n            this.variant = 2;\n            this.value = new RecipientKeyIdentifier({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.blockName.valueBlock.value\n                })\n            });\n        }\n    }\n    toSchema() {\n        switch (this.variant) {\n            case 1:\n                return this.value.toSchema();\n            case 2:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: this.value.toSchema().valueBlock.value\n                });\n            default:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n        }\n    }\n    toJSON() {\n        const res = {\n            variant: this.variant,\n        };\n        if ((this.variant === 1) || (this.variant === 2)) {\n            res.value = this.value.toJSON();\n        }\n        return res;\n    }\n}\nKeyAgreeRecipientIdentifier.CLASS_NAME = \"KeyAgreeRecipientIdentifier\";\n\nconst RID = \"rid\";\nconst ENCRYPTED_KEY$2 = \"encryptedKey\";\nconst CLEAR_PROPS$u = [\n    RID,\n    ENCRYPTED_KEY$2,\n];\nclass RecipientEncryptedKey extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.rid = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RID, RecipientEncryptedKey.defaultValues(RID));\n        this.encryptedKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTED_KEY$2, RecipientEncryptedKey.defaultValues(ENCRYPTED_KEY$2));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case RID:\n                return new KeyAgreeRecipientIdentifier();\n            case ENCRYPTED_KEY$2:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case RID:\n                return ((memberValue.variant === (-1)) && ((\"value\" in memberValue) === false));\n            case ENCRYPTED_KEY$2:\n                return (memberValue.isEqual(RecipientEncryptedKey.defaultValues(ENCRYPTED_KEY$2)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                KeyAgreeRecipientIdentifier.schema(names.rid || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$u);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RecipientEncryptedKey.schema({\n            names: {\n                rid: {\n                    names: {\n                        blockName: RID\n                    }\n                },\n                encryptedKey: ENCRYPTED_KEY$2\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.rid = new KeyAgreeRecipientIdentifier({ schema: asn1.result.rid });\n        this.encryptedKey = asn1.result.encryptedKey;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.rid.toSchema(),\n                this.encryptedKey\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            rid: this.rid.toJSON(),\n            encryptedKey: this.encryptedKey.toJSON(),\n        };\n    }\n}\nRecipientEncryptedKey.CLASS_NAME = \"RecipientEncryptedKey\";\n\nconst ENCRYPTED_KEYS = \"encryptedKeys\";\nconst RECIPIENT_ENCRYPTED_KEYS = \"RecipientEncryptedKeys\";\nconst CLEAR_PROPS$t = [\n    RECIPIENT_ENCRYPTED_KEYS,\n];\nclass RecipientEncryptedKeys extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.encryptedKeys = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTED_KEYS, RecipientEncryptedKeys.defaultValues(ENCRYPTED_KEYS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ENCRYPTED_KEYS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ENCRYPTED_KEYS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.RecipientEncryptedKeys || EMPTY_STRING),\n                    value: RecipientEncryptedKey.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$t);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RecipientEncryptedKeys.schema({\n            names: {\n                RecipientEncryptedKeys: RECIPIENT_ENCRYPTED_KEYS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.encryptedKeys = Array.from(asn1.result.RecipientEncryptedKeys, element => new RecipientEncryptedKey({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.encryptedKeys, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            encryptedKeys: Array.from(this.encryptedKeys, o => o.toJSON())\n        };\n    }\n}\nRecipientEncryptedKeys.CLASS_NAME = \"RecipientEncryptedKeys\";\n\nconst VERSION$b = \"version\";\nconst ORIGINATOR = \"originator\";\nconst UKM = \"ukm\";\nconst KEY_ENCRYPTION_ALGORITHM$2 = \"keyEncryptionAlgorithm\";\nconst RECIPIENT_ENCRYPTED_KEY = \"recipientEncryptedKeys\";\nconst RECIPIENT_CERTIFICATE = \"recipientCertificate\";\nconst RECIPIENT_PUBLIC_KEY = \"recipientPublicKey\";\nconst CLEAR_PROPS$s = [\n    VERSION$b,\n    ORIGINATOR,\n    UKM,\n    KEY_ENCRYPTION_ALGORITHM$2,\n    RECIPIENT_ENCRYPTED_KEY,\n];\nclass KeyAgreeRecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$b, KeyAgreeRecipientInfo.defaultValues(VERSION$b));\n        this.originator = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ORIGINATOR, KeyAgreeRecipientInfo.defaultValues(ORIGINATOR));\n        if (UKM in parameters) {\n            this.ukm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, UKM, KeyAgreeRecipientInfo.defaultValues(UKM));\n        }\n        this.keyEncryptionAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$2, KeyAgreeRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$2));\n        this.recipientEncryptedKeys = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RECIPIENT_ENCRYPTED_KEY, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_ENCRYPTED_KEY));\n        this.recipientCertificate = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RECIPIENT_CERTIFICATE, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_CERTIFICATE));\n        this.recipientPublicKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RECIPIENT_PUBLIC_KEY, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_PUBLIC_KEY));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$b:\n                return 0;\n            case ORIGINATOR:\n                return new OriginatorIdentifierOrKey();\n            case UKM:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case KEY_ENCRYPTION_ALGORITHM$2:\n                return new AlgorithmIdentifier();\n            case RECIPIENT_ENCRYPTED_KEY:\n                return new RecipientEncryptedKeys();\n            case RECIPIENT_CERTIFICATE:\n                return new Certificate();\n            case RECIPIENT_PUBLIC_KEY:\n                return null;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$b:\n                return (memberValue === 0);\n            case ORIGINATOR:\n                return ((memberValue.variant === (-1)) && ((\"value\" in memberValue) === false));\n            case UKM:\n                return (memberValue.isEqual(KeyAgreeRecipientInfo.defaultValues(UKM)));\n            case KEY_ENCRYPTION_ALGORITHM$2:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case RECIPIENT_ENCRYPTED_KEY:\n                return (memberValue.encryptedKeys.length === 0);\n            case RECIPIENT_CERTIFICATE:\n                return false;\n            case RECIPIENT_PUBLIC_KEY:\n                return false;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: names.blockName || EMPTY_STRING,\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: names.version || EMPTY_STRING }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        OriginatorIdentifierOrKey.schema(names.originator || {})\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: names.ukm || EMPTY_STRING })]\n                }),\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\n                RecipientEncryptedKeys.schema(names.recipientEncryptedKeys || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$s);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, KeyAgreeRecipientInfo.schema({\n            names: {\n                version: VERSION$b,\n                originator: {\n                    names: {\n                        blockName: ORIGINATOR\n                    }\n                },\n                ukm: UKM,\n                keyEncryptionAlgorithm: {\n                    names: {\n                        blockName: KEY_ENCRYPTION_ALGORITHM$2\n                    }\n                },\n                recipientEncryptedKeys: {\n                    names: {\n                        blockName: RECIPIENT_ENCRYPTED_KEY\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.originator = new OriginatorIdentifierOrKey({ schema: asn1.result.originator });\n        if (UKM in asn1.result)\n            this.ukm = asn1.result.ukm;\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\n        this.recipientEncryptedKeys = new RecipientEncryptedKeys({ schema: asn1.result.recipientEncryptedKeys });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n            idBlock: {\n                tagClass: 3,\n                tagNumber: 0\n            },\n            value: [this.originator.toSchema()]\n        }));\n        if (this.ukm) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [this.ukm]\n            }));\n        }\n        outputArray.push(this.keyEncryptionAlgorithm.toSchema());\n        outputArray.push(this.recipientEncryptedKeys.toSchema());\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            originator: this.originator.toJSON(),\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n            recipientEncryptedKeys: this.recipientEncryptedKeys.toJSON(),\n        };\n        if (this.ukm) {\n            res.ukm = this.ukm.toJSON();\n        }\n        return res;\n    }\n}\nKeyAgreeRecipientInfo.CLASS_NAME = \"KeyAgreeRecipientInfo\";\n\nconst KEY_IDENTIFIER = \"keyIdentifier\";\nconst DATE = \"date\";\nconst OTHER = \"other\";\nconst CLEAR_PROPS$r = [\n    KEY_IDENTIFIER,\n    DATE,\n    OTHER,\n];\nclass KEKIdentifier extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyIdentifier = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_IDENTIFIER, KEKIdentifier.defaultValues(KEY_IDENTIFIER));\n        if (DATE in parameters) {\n            this.date = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DATE, KEKIdentifier.defaultValues(DATE));\n        }\n        if (OTHER in parameters) {\n            this.other = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OTHER, KEKIdentifier.defaultValues(OTHER));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_IDENTIFIER:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case DATE:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime();\n            case OTHER:\n                return new OtherKeyAttribute();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case KEY_IDENTIFIER:\n                return (memberValue.isEqual(KEKIdentifier.defaultValues(KEY_IDENTIFIER)));\n            case DATE:\n                return ((memberValue.year === 0) &&\n                    (memberValue.month === 0) &&\n                    (memberValue.day === 0) &&\n                    (memberValue.hour === 0) &&\n                    (memberValue.minute === 0) &&\n                    (memberValue.second === 0) &&\n                    (memberValue.millisecond === 0));\n            case OTHER:\n                return ((memberValue.compareWithDefault(\"keyAttrId\", memberValue.keyAttrId)) &&\n                    ((\"keyAttr\" in memberValue) === false));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.keyIdentifier || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({\n                    optional: true,\n                    name: (names.date || EMPTY_STRING)\n                }),\n                OtherKeyAttribute.schema(names.other || {})\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$r);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, KEKIdentifier.schema({\n            names: {\n                keyIdentifier: KEY_IDENTIFIER,\n                date: DATE,\n                other: {\n                    names: {\n                        blockName: OTHER\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyIdentifier = asn1.result.keyIdentifier;\n        if (DATE in asn1.result)\n            this.date = asn1.result.date;\n        if (OTHER in asn1.result)\n            this.other = new OtherKeyAttribute({ schema: asn1.result.other });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.keyIdentifier);\n        if (this.date) {\n            outputArray.push(this.date);\n        }\n        if (this.other) {\n            outputArray.push(this.other.toSchema());\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            keyIdentifier: this.keyIdentifier.toJSON()\n        };\n        if (this.date) {\n            res.date = this.date;\n        }\n        if (this.other) {\n            res.other = this.other.toJSON();\n        }\n        return res;\n    }\n}\nKEKIdentifier.CLASS_NAME = \"KEKIdentifier\";\n\nconst VERSION$a = \"version\";\nconst KEK_ID = \"kekid\";\nconst KEY_ENCRYPTION_ALGORITHM$1 = \"keyEncryptionAlgorithm\";\nconst ENCRYPTED_KEY$1 = \"encryptedKey\";\nconst PER_DEFINED_KEK = \"preDefinedKEK\";\nconst CLEAR_PROPS$q = [\n    VERSION$a,\n    KEK_ID,\n    KEY_ENCRYPTION_ALGORITHM$1,\n    ENCRYPTED_KEY$1,\n];\nclass KEKRecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$a, KEKRecipientInfo.defaultValues(VERSION$a));\n        this.kekid = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEK_ID, KEKRecipientInfo.defaultValues(KEK_ID));\n        this.keyEncryptionAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$1, KEKRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$1));\n        this.encryptedKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTED_KEY$1, KEKRecipientInfo.defaultValues(ENCRYPTED_KEY$1));\n        this.preDefinedKEK = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PER_DEFINED_KEK, KEKRecipientInfo.defaultValues(PER_DEFINED_KEK));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$a:\n                return 0;\n            case KEK_ID:\n                return new KEKIdentifier();\n            case KEY_ENCRYPTION_ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case ENCRYPTED_KEY$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case PER_DEFINED_KEK:\n                return EMPTY_BUFFER;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case \"KEKRecipientInfo\":\n                return (memberValue === KEKRecipientInfo.defaultValues(VERSION$a));\n            case KEK_ID:\n                return ((memberValue.compareWithDefault(\"keyIdentifier\", memberValue.keyIdentifier)) &&\n                    ((\"date\" in memberValue) === false) &&\n                    ((\"other\" in memberValue) === false));\n            case KEY_ENCRYPTION_ALGORITHM$1:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case ENCRYPTED_KEY$1:\n                return (memberValue.isEqual(KEKRecipientInfo.defaultValues(ENCRYPTED_KEY$1)));\n            case PER_DEFINED_KEK:\n                return (memberValue.byteLength === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                KEKIdentifier.schema(names.kekid || {}),\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$q);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, KEKRecipientInfo.schema({\n            names: {\n                version: VERSION$a,\n                kekid: {\n                    names: {\n                        blockName: KEK_ID\n                    }\n                },\n                keyEncryptionAlgorithm: {\n                    names: {\n                        blockName: KEY_ENCRYPTION_ALGORITHM$1\n                    }\n                },\n                encryptedKey: ENCRYPTED_KEY$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.kekid = new KEKIdentifier({ schema: asn1.result.kekid });\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\n        this.encryptedKey = asn1.result.encryptedKey;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }),\n                this.kekid.toSchema(),\n                this.keyEncryptionAlgorithm.toSchema(),\n                this.encryptedKey\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            version: this.version,\n            kekid: this.kekid.toJSON(),\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n            encryptedKey: this.encryptedKey.toJSON(),\n        };\n    }\n}\nKEKRecipientInfo.CLASS_NAME = \"KEKRecipientInfo\";\n\nconst VERSION$9 = \"version\";\nconst KEY_DERIVATION_ALGORITHM = \"keyDerivationAlgorithm\";\nconst KEY_ENCRYPTION_ALGORITHM = \"keyEncryptionAlgorithm\";\nconst ENCRYPTED_KEY = \"encryptedKey\";\nconst PASSWORD = \"password\";\nconst CLEAR_PROPS$p = [\n    VERSION$9,\n    KEY_DERIVATION_ALGORITHM,\n    KEY_ENCRYPTION_ALGORITHM,\n    ENCRYPTED_KEY\n];\nclass PasswordRecipientinfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$9, PasswordRecipientinfo.defaultValues(VERSION$9));\n        if (KEY_DERIVATION_ALGORITHM in parameters) {\n            this.keyDerivationAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_DERIVATION_ALGORITHM, PasswordRecipientinfo.defaultValues(KEY_DERIVATION_ALGORITHM));\n        }\n        this.keyEncryptionAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM, PasswordRecipientinfo.defaultValues(KEY_ENCRYPTION_ALGORITHM));\n        this.encryptedKey = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTED_KEY, PasswordRecipientinfo.defaultValues(ENCRYPTED_KEY));\n        this.password = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PASSWORD, PasswordRecipientinfo.defaultValues(PASSWORD));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$9:\n                return (-1);\n            case KEY_DERIVATION_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case KEY_ENCRYPTION_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case ENCRYPTED_KEY:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case PASSWORD:\n                return EMPTY_BUFFER;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$9:\n                return (memberValue === (-1));\n            case KEY_DERIVATION_ALGORITHM:\n            case KEY_ENCRYPTION_ALGORITHM:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case ENCRYPTED_KEY:\n                return (memberValue.isEqual(PasswordRecipientinfo.defaultValues(ENCRYPTED_KEY)));\n            case PASSWORD:\n                return (memberValue.byteLength === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.keyDerivationAlgorithm || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: AlgorithmIdentifier.schema().valueBlock.value\n                }),\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$p);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PasswordRecipientinfo.schema({\n            names: {\n                version: VERSION$9,\n                keyDerivationAlgorithm: KEY_DERIVATION_ALGORITHM,\n                keyEncryptionAlgorithm: {\n                    names: {\n                        blockName: KEY_ENCRYPTION_ALGORITHM\n                    }\n                },\n                encryptedKey: ENCRYPTED_KEY\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        if (KEY_DERIVATION_ALGORITHM in asn1.result) {\n            this.keyDerivationAlgorithm = new AlgorithmIdentifier({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.keyDerivationAlgorithm.valueBlock.value\n                })\n            });\n        }\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\n        this.encryptedKey = asn1.result.encryptedKey;\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        if (this.keyDerivationAlgorithm) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.keyDerivationAlgorithm.toSchema().valueBlock.value\n            }));\n        }\n        outputArray.push(this.keyEncryptionAlgorithm.toSchema());\n        outputArray.push(this.encryptedKey);\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\n            encryptedKey: this.encryptedKey.toJSON(),\n        };\n        if (this.keyDerivationAlgorithm) {\n            res.keyDerivationAlgorithm = this.keyDerivationAlgorithm.toJSON();\n        }\n        return res;\n    }\n}\nPasswordRecipientinfo.CLASS_NAME = \"PasswordRecipientInfo\";\n\nconst ORI_TYPE = \"oriType\";\nconst ORI_VALUE = \"oriValue\";\nconst CLEAR_PROPS$o = [\n    ORI_TYPE,\n    ORI_VALUE\n];\nclass OtherRecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.oriType = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ORI_TYPE, OtherRecipientInfo.defaultValues(ORI_TYPE));\n        this.oriValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ORI_VALUE, OtherRecipientInfo.defaultValues(ORI_VALUE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case ORI_TYPE:\n                return EMPTY_STRING;\n            case ORI_VALUE:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case ORI_TYPE:\n                return (memberValue === EMPTY_STRING);\n            case ORI_VALUE:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.oriType || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.oriValue || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$o);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OtherRecipientInfo.schema({\n            names: {\n                oriType: ORI_TYPE,\n                oriValue: ORI_VALUE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.oriType = asn1.result.oriType.valueBlock.toString();\n        this.oriValue = asn1.result.oriValue;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.oriType }),\n                this.oriValue\n            ]\n        }));\n    }\n    toJSON() {\n        const res = {\n            oriType: this.oriType\n        };\n        if (!OtherRecipientInfo.compareWithDefault(ORI_VALUE, this.oriValue)) {\n            res.oriValue = this.oriValue.toJSON();\n        }\n        return res;\n    }\n}\nOtherRecipientInfo.CLASS_NAME = \"OtherRecipientInfo\";\n\nconst VARIANT = \"variant\";\nconst VALUE = \"value\";\nconst CLEAR_PROPS$n = [\n    \"blockName\"\n];\nclass RecipientInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.variant = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VARIANT, RecipientInfo.defaultValues(VARIANT));\n        if (VALUE in parameters) {\n            this.value = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VALUE, RecipientInfo.defaultValues(VALUE));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VARIANT:\n                return (-1);\n            case VALUE:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VARIANT:\n                return (memberValue === RecipientInfo.defaultValues(memberName));\n            case VALUE:\n                return (Object.keys(memberValue).length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n            value: [\n                KeyTransRecipientInfo.schema({\n                    names: {\n                        blockName: (names.blockName || EMPTY_STRING)\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: KeyAgreeRecipientInfo.schema().valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: KEKRecipientInfo.schema().valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 3\n                    },\n                    value: PasswordRecipientinfo.schema().valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.blockName || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 4\n                    },\n                    value: OtherRecipientInfo.schema().valueBlock.value\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$n);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RecipientInfo.schema({\n            names: {\n                blockName: \"blockName\"\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\n            this.variant = 1;\n            this.value = new KeyTransRecipientInfo({ schema: asn1.result.blockName });\n        }\n        else {\n            const blockSequence = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: asn1.result.blockName.valueBlock.value\n            });\n            switch (asn1.result.blockName.idBlock.tagNumber) {\n                case 1:\n                    this.variant = 2;\n                    this.value = new KeyAgreeRecipientInfo({ schema: blockSequence });\n                    break;\n                case 2:\n                    this.variant = 3;\n                    this.value = new KEKRecipientInfo({ schema: blockSequence });\n                    break;\n                case 3:\n                    this.variant = 4;\n                    this.value = new PasswordRecipientinfo({ schema: blockSequence });\n                    break;\n                case 4:\n                    this.variant = 5;\n                    this.value = new OtherRecipientInfo({ schema: blockSequence });\n                    break;\n                default:\n                    throw new Error(\"Incorrect structure of RecipientInfo block\");\n            }\n        }\n    }\n    toSchema() {\n        ParameterError.assertEmpty(this.value, \"value\", \"RecipientInfo\");\n        const _schema = this.value.toSchema();\n        switch (this.variant) {\n            case 1:\n                return _schema;\n            case 2:\n            case 3:\n            case 4:\n                _schema.idBlock.tagClass = 3;\n                _schema.idBlock.tagNumber = (this.variant - 1);\n                return _schema;\n            default:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n        }\n    }\n    toJSON() {\n        const res = {\n            variant: this.variant\n        };\n        if (this.value && (this.variant >= 1) && (this.variant <= 4)) {\n            res.value = this.value.toJSON();\n        }\n        return res;\n    }\n}\nRecipientInfo.CLASS_NAME = \"RecipientInfo\";\n\nconst HASH_ALGORITHM$2 = \"hashAlgorithm\";\nconst MASK_GEN_ALGORITHM = \"maskGenAlgorithm\";\nconst P_SOURCE_ALGORITHM = \"pSourceAlgorithm\";\nconst CLEAR_PROPS$m = [\n    HASH_ALGORITHM$2,\n    MASK_GEN_ALGORITHM,\n    P_SOURCE_ALGORITHM\n];\nclass RSAESOAEPParams extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.hashAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, HASH_ALGORITHM$2, RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2));\n        this.maskGenAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MASK_GEN_ALGORITHM, RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM));\n        this.pSourceAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, P_SOURCE_ALGORITHM, RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case HASH_ALGORITHM$2:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.3.14.3.2.26\",\n                    algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                });\n            case MASK_GEN_ALGORITHM:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.2.840.113549.1.1.8\",\n                    algorithmParams: (new AlgorithmIdentifier({\n                        algorithmId: \"1.3.14.3.2.26\",\n                        algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                    })).toSchema()\n                });\n            case P_SOURCE_ALGORITHM:\n                return new AlgorithmIdentifier({\n                    algorithmId: \"1.2.840.113549.1.1.9\",\n                    algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: (new Uint8Array([0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55, 0xbf, 0xef, 0x95, 0x60, 0x18, 0x90, 0xaf, 0xd8, 0x07, 0x09])).buffer })\n                });\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.hashAlgorithm || {})]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    optional: true,\n                    value: [AlgorithmIdentifier.schema(names.pSourceAlgorithm || {})]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$m);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, RSAESOAEPParams.schema({\n            names: {\n                hashAlgorithm: {\n                    names: {\n                        blockName: HASH_ALGORITHM$2\n                    }\n                },\n                maskGenAlgorithm: {\n                    names: {\n                        blockName: MASK_GEN_ALGORITHM\n                    }\n                },\n                pSourceAlgorithm: {\n                    names: {\n                        blockName: P_SOURCE_ALGORITHM\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        if (HASH_ALGORITHM$2 in asn1.result)\n            this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\n        if (MASK_GEN_ALGORITHM in asn1.result)\n            this.maskGenAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.maskGenAlgorithm });\n        if (P_SOURCE_ALGORITHM in asn1.result)\n            this.pSourceAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.pSourceAlgorithm });\n    }\n    toSchema() {\n        const outputArray = [];\n        if (!this.hashAlgorithm.isEqual(RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2))) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.hashAlgorithm.toSchema()]\n            }));\n        }\n        if (!this.maskGenAlgorithm.isEqual(RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM))) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: [this.maskGenAlgorithm.toSchema()]\n            }));\n        }\n        if (!this.pSourceAlgorithm.isEqual(RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM))) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 2\n                },\n                value: [this.pSourceAlgorithm.toSchema()]\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {};\n        if (!this.hashAlgorithm.isEqual(RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2))) {\n            res.hashAlgorithm = this.hashAlgorithm.toJSON();\n        }\n        if (!this.maskGenAlgorithm.isEqual(RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM))) {\n            res.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();\n        }\n        if (!this.pSourceAlgorithm.isEqual(RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM))) {\n            res.pSourceAlgorithm = this.pSourceAlgorithm.toJSON();\n        }\n        return res;\n    }\n}\nRSAESOAEPParams.CLASS_NAME = \"RSAESOAEPParams\";\n\nconst KEY_INFO = \"keyInfo\";\nconst ENTITY_U_INFO = \"entityUInfo\";\nconst SUPP_PUB_INFO = \"suppPubInfo\";\nconst CLEAR_PROPS$l = [\n    KEY_INFO,\n    ENTITY_U_INFO,\n    SUPP_PUB_INFO\n];\nclass ECCCMSSharedInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.keyInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, KEY_INFO, ECCCMSSharedInfo.defaultValues(KEY_INFO));\n        if (ENTITY_U_INFO in parameters) {\n            this.entityUInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENTITY_U_INFO, ECCCMSSharedInfo.defaultValues(ENTITY_U_INFO));\n        }\n        this.suppPubInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SUPP_PUB_INFO, ECCCMSSharedInfo.defaultValues(SUPP_PUB_INFO));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case KEY_INFO:\n                return new AlgorithmIdentifier();\n            case ENTITY_U_INFO:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case SUPP_PUB_INFO:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case KEY_INFO:\n            case ENTITY_U_INFO:\n            case SUPP_PUB_INFO:\n                return (memberValue.isEqual(ECCCMSSharedInfo.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.keyInfo || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.entityUInfo || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    optional: true,\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString()]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.suppPubInfo || EMPTY_STRING),\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString()]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$l);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, ECCCMSSharedInfo.schema({\n            names: {\n                keyInfo: {\n                    names: {\n                        blockName: KEY_INFO\n                    }\n                },\n                entityUInfo: ENTITY_U_INFO,\n                suppPubInfo: SUPP_PUB_INFO\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.keyInfo = new AlgorithmIdentifier({ schema: asn1.result.keyInfo });\n        if (ENTITY_U_INFO in asn1.result)\n            this.entityUInfo = asn1.result.entityUInfo.valueBlock.value[0];\n        this.suppPubInfo = asn1.result.suppPubInfo.valueBlock.value[0];\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.keyInfo.toSchema());\n        if (this.entityUInfo) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.entityUInfo]\n            }));\n        }\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n            idBlock: {\n                tagClass: 3,\n                tagNumber: 2\n            },\n            value: [this.suppPubInfo]\n        }));\n        return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        });\n    }\n    toJSON() {\n        const res = {\n            keyInfo: this.keyInfo.toJSON(),\n            suppPubInfo: this.suppPubInfo.toJSON(),\n        };\n        if (this.entityUInfo) {\n            res.entityUInfo = this.entityUInfo.toJSON();\n        }\n        return res;\n    }\n}\nECCCMSSharedInfo.CLASS_NAME = \"ECCCMSSharedInfo\";\n\nconst VERSION$8 = \"version\";\nconst ORIGINATOR_INFO = \"originatorInfo\";\nconst RECIPIENT_INFOS = \"recipientInfos\";\nconst ENCRYPTED_CONTENT_INFO = \"encryptedContentInfo\";\nconst UNPROTECTED_ATTRS = \"unprotectedAttrs\";\nconst CLEAR_PROPS$k = [\n    VERSION$8,\n    ORIGINATOR_INFO,\n    RECIPIENT_INFOS,\n    ENCRYPTED_CONTENT_INFO,\n    UNPROTECTED_ATTRS\n];\nconst defaultEncryptionParams = {\n    kdfAlgorithm: \"SHA-512\",\n    kekEncryptionLength: 256\n};\nconst curveLengthByName = {\n    \"P-256\": 256,\n    \"P-384\": 384,\n    \"P-521\": 528\n};\nclass EnvelopedData extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$8, EnvelopedData.defaultValues(VERSION$8));\n        if (ORIGINATOR_INFO in parameters) {\n            this.originatorInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ORIGINATOR_INFO, EnvelopedData.defaultValues(ORIGINATOR_INFO));\n        }\n        this.recipientInfos = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RECIPIENT_INFOS, EnvelopedData.defaultValues(RECIPIENT_INFOS));\n        this.encryptedContentInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCRYPTED_CONTENT_INFO, EnvelopedData.defaultValues(ENCRYPTED_CONTENT_INFO));\n        if (UNPROTECTED_ATTRS in parameters) {\n            this.unprotectedAttrs = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, UNPROTECTED_ATTRS, EnvelopedData.defaultValues(UNPROTECTED_ATTRS));\n        }\n        this.policy = {\n            disableSplit: !!parameters.disableSplit,\n        };\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$8:\n                return 0;\n            case ORIGINATOR_INFO:\n                return new OriginatorInfo();\n            case RECIPIENT_INFOS:\n                return [];\n            case ENCRYPTED_CONTENT_INFO:\n                return new EncryptedContentInfo();\n            case UNPROTECTED_ATTRS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$8:\n                return (memberValue === EnvelopedData.defaultValues(memberName));\n            case ORIGINATOR_INFO:\n                return ((memberValue.certs.certificates.length === 0) && (memberValue.crls.crls.length === 0));\n            case RECIPIENT_INFOS:\n            case UNPROTECTED_ATTRS:\n                return (memberValue.length === 0);\n            case ENCRYPTED_CONTENT_INFO:\n                return ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\n                    (EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm) &&\n                        (EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent))));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.originatorInfo || EMPTY_STRING),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: OriginatorInfo.schema().valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.recipientInfos || EMPTY_STRING),\n                            value: RecipientInfo.schema()\n                        })\n                    ]\n                }),\n                EncryptedContentInfo.schema(names.encryptedContentInfo || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.unprotectedAttrs || EMPTY_STRING),\n                            value: Attribute.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$k);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, EnvelopedData.schema({\n            names: {\n                version: VERSION$8,\n                originatorInfo: ORIGINATOR_INFO,\n                recipientInfos: RECIPIENT_INFOS,\n                encryptedContentInfo: {\n                    names: {\n                        blockName: ENCRYPTED_CONTENT_INFO\n                    }\n                },\n                unprotectedAttrs: UNPROTECTED_ATTRS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        if (ORIGINATOR_INFO in asn1.result) {\n            this.originatorInfo = new OriginatorInfo({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: asn1.result.originatorInfo.valueBlock.value\n                })\n            });\n        }\n        this.recipientInfos = Array.from(asn1.result.recipientInfos, o => new RecipientInfo({ schema: o }));\n        this.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\n        if (UNPROTECTED_ATTRS in asn1.result)\n            this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, o => new Attribute({ schema: o }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        if (this.originatorInfo) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: this.originatorInfo.toSchema().valueBlock.value\n            }));\n        }\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n            value: Array.from(this.recipientInfos, o => o.toSchema())\n        }));\n        outputArray.push(this.encryptedContentInfo.toSchema());\n        if (this.unprotectedAttrs) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.unprotectedAttrs, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            recipientInfos: Array.from(this.recipientInfos, o => o.toJSON()),\n            encryptedContentInfo: this.encryptedContentInfo.toJSON(),\n        };\n        if (this.originatorInfo)\n            res.originatorInfo = this.originatorInfo.toJSON();\n        if (this.unprotectedAttrs)\n            res.unprotectedAttrs = Array.from(this.unprotectedAttrs, o => o.toJSON());\n        return res;\n    }\n    addRecipientByCertificate(certificate, parameters, variant, crypto = getCrypto(true)) {\n        const encryptionParameters = Object.assign({ useOAEP: true, oaepHashAlgorithm: \"SHA-512\" }, defaultEncryptionParams, parameters || {});\n        if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.113549\") !== (-1))\n            variant = 1;\n        else {\n            if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.10045\") !== (-1))\n                variant = 2;\n            else\n                throw new Error(`Unknown type of certificate's public key: ${certificate.subjectPublicKeyInfo.algorithm.algorithmId}`);\n        }\n        switch (variant) {\n            case 1:\n                {\n                    let algorithmId;\n                    let algorithmParams;\n                    if (encryptionParameters.useOAEP === true) {\n                        algorithmId = crypto.getOIDByAlgorithm({\n                            name: \"RSA-OAEP\"\n                        }, true, \"keyEncryptionAlgorithm\");\n                        const hashOID = crypto.getOIDByAlgorithm({\n                            name: encryptionParameters.oaepHashAlgorithm\n                        }, true, \"RSAES-OAEP-params\");\n                        const hashAlgorithm = new AlgorithmIdentifier({\n                            algorithmId: hashOID,\n                            algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                        });\n                        const rsaOAEPParams = new RSAESOAEPParams({\n                            hashAlgorithm,\n                            maskGenAlgorithm: new AlgorithmIdentifier({\n                                algorithmId: \"1.2.840.113549.1.1.8\",\n                                algorithmParams: hashAlgorithm.toSchema()\n                            })\n                        });\n                        algorithmParams = rsaOAEPParams.toSchema();\n                    }\n                    else {\n                        algorithmId = crypto.getOIDByAlgorithm({\n                            name: \"RSAES-PKCS1-v1_5\"\n                        });\n                        if (algorithmId === EMPTY_STRING)\n                            throw new Error(\"Can not find OID for RSAES-PKCS1-v1_5\");\n                        algorithmParams = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null();\n                    }\n                    const keyInfo = new KeyTransRecipientInfo({\n                        version: 0,\n                        rid: new IssuerAndSerialNumber({\n                            issuer: certificate.issuer,\n                            serialNumber: certificate.serialNumber\n                        }),\n                        keyEncryptionAlgorithm: new AlgorithmIdentifier({\n                            algorithmId,\n                            algorithmParams\n                        }),\n                        recipientCertificate: certificate,\n                    });\n                    this.recipientInfos.push(new RecipientInfo({\n                        variant: 1,\n                        value: keyInfo\n                    }));\n                }\n                break;\n            case 2:\n                {\n                    const recipientIdentifier = new KeyAgreeRecipientIdentifier({\n                        variant: 1,\n                        value: new IssuerAndSerialNumber({\n                            issuer: certificate.issuer,\n                            serialNumber: certificate.serialNumber\n                        })\n                    });\n                    this._addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, { recipientCertificate: certificate }, crypto);\n                }\n                break;\n            default:\n                throw new Error(`Unknown \"variant\" value: ${variant}`);\n        }\n        return true;\n    }\n    addRecipientByPreDefinedData(preDefinedData, parameters = {}, variant, crypto = getCrypto(true)) {\n        ArgumentError.assert(preDefinedData, \"preDefinedData\", \"ArrayBuffer\");\n        if (!preDefinedData.byteLength) {\n            throw new Error(\"Pre-defined data could have zero length\");\n        }\n        if (!parameters.keyIdentifier) {\n            const keyIdentifierBuffer = new ArrayBuffer(16);\n            const keyIdentifierView = new Uint8Array(keyIdentifierBuffer);\n            crypto.getRandomValues(keyIdentifierView);\n            parameters.keyIdentifier = keyIdentifierBuffer;\n        }\n        if (!parameters.hmacHashAlgorithm)\n            parameters.hmacHashAlgorithm = \"SHA-512\";\n        if (parameters.iterationCount === undefined) {\n            parameters.iterationCount = 2048;\n        }\n        if (!parameters.keyEncryptionAlgorithm) {\n            parameters.keyEncryptionAlgorithm = {\n                name: \"AES-KW\",\n                length: 256\n            };\n        }\n        if (!parameters.keyEncryptionAlgorithmParams)\n            parameters.keyEncryptionAlgorithmParams = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null();\n        switch (variant) {\n            case 1:\n                {\n                    const kekOID = crypto.getOIDByAlgorithm(parameters.keyEncryptionAlgorithm, true, \"keyEncryptionAlgorithm\");\n                    const keyInfo = new KEKRecipientInfo({\n                        version: 4,\n                        kekid: new KEKIdentifier({\n                            keyIdentifier: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: parameters.keyIdentifier })\n                        }),\n                        keyEncryptionAlgorithm: new AlgorithmIdentifier({\n                            algorithmId: kekOID,\n                            algorithmParams: parameters.keyEncryptionAlgorithmParams\n                        }),\n                        preDefinedKEK: preDefinedData\n                    });\n                    this.recipientInfos.push(new RecipientInfo({\n                        variant: 3,\n                        value: keyInfo\n                    }));\n                }\n                break;\n            case 2:\n                {\n                    const pbkdf2OID = crypto.getOIDByAlgorithm({ name: \"PBKDF2\" }, true, \"keyDerivationAlgorithm\");\n                    const saltBuffer = new ArrayBuffer(64);\n                    const saltView = new Uint8Array(saltBuffer);\n                    crypto.getRandomValues(saltView);\n                    const hmacOID = crypto.getOIDByAlgorithm({\n                        name: \"HMAC\",\n                        hash: {\n                            name: parameters.hmacHashAlgorithm\n                        }\n                    }, true, \"hmacHashAlgorithm\");\n                    const pbkdf2Params = new PBKDF2Params({\n                        salt: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: saltBuffer }),\n                        iterationCount: parameters.iterationCount,\n                        prf: new AlgorithmIdentifier({\n                            algorithmId: hmacOID,\n                            algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n                        })\n                    });\n                    const kekOID = crypto.getOIDByAlgorithm(parameters.keyEncryptionAlgorithm, true, \"keyEncryptionAlgorithm\");\n                    const keyInfo = new PasswordRecipientinfo({\n                        version: 0,\n                        keyDerivationAlgorithm: new AlgorithmIdentifier({\n                            algorithmId: pbkdf2OID,\n                            algorithmParams: pbkdf2Params.toSchema()\n                        }),\n                        keyEncryptionAlgorithm: new AlgorithmIdentifier({\n                            algorithmId: kekOID,\n                            algorithmParams: parameters.keyEncryptionAlgorithmParams\n                        }),\n                        password: preDefinedData\n                    });\n                    this.recipientInfos.push(new RecipientInfo({\n                        variant: 4,\n                        value: keyInfo\n                    }));\n                }\n                break;\n            default:\n                throw new Error(`Unknown value for \"variant\": ${variant}`);\n        }\n    }\n    addRecipientByKeyIdentifier(key, keyId, parameters, crypto = getCrypto(true)) {\n        const encryptionParameters = Object.assign({}, defaultEncryptionParams, parameters || {});\n        const recipientIdentifier = new KeyAgreeRecipientIdentifier({\n            variant: 2,\n            value: new RecipientKeyIdentifier({\n                subjectKeyIdentifier: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: keyId }),\n            })\n        });\n        this._addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, { recipientPublicKey: key }, crypto);\n    }\n    _addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, extraRecipientInfoParams, crypto = getCrypto(true)) {\n        const encryptedKey = new RecipientEncryptedKey({\n            rid: recipientIdentifier\n        });\n        const aesKWoid = crypto.getOIDByAlgorithm({\n            name: \"AES-KW\",\n            length: encryptionParameters.kekEncryptionLength\n        }, true, \"keyEncryptionAlgorithm\");\n        const aesKW = new AlgorithmIdentifier({\n            algorithmId: aesKWoid,\n        });\n        const ecdhOID = crypto.getOIDByAlgorithm({\n            name: \"ECDH\",\n            kdf: encryptionParameters.kdfAlgorithm\n        }, true, \"KeyAgreeRecipientInfo\");\n        const ukmBuffer = new ArrayBuffer(64);\n        const ukmView = new Uint8Array(ukmBuffer);\n        crypto.getRandomValues(ukmView);\n        const recipientInfoParams = {\n            version: 3,\n            ukm: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: ukmBuffer }),\n            keyEncryptionAlgorithm: new AlgorithmIdentifier({\n                algorithmId: ecdhOID,\n                algorithmParams: aesKW.toSchema()\n            }),\n            recipientEncryptedKeys: new RecipientEncryptedKeys({\n                encryptedKeys: [encryptedKey]\n            })\n        };\n        const keyInfo = new KeyAgreeRecipientInfo(Object.assign(recipientInfoParams, extraRecipientInfoParams));\n        this.recipientInfos.push(new RecipientInfo({\n            variant: 2,\n            value: keyInfo\n        }));\n    }\n    async encrypt(contentEncryptionAlgorithm, contentToEncrypt, crypto = getCrypto(true)) {\n        const ivBuffer = new ArrayBuffer(16);\n        const ivView = new Uint8Array(ivBuffer);\n        crypto.getRandomValues(ivView);\n        const contentView = new Uint8Array(contentToEncrypt);\n        const contentEncryptionOID = crypto.getOIDByAlgorithm(contentEncryptionAlgorithm, true, \"contentEncryptionAlgorithm\");\n        const sessionKey = await crypto.generateKey(contentEncryptionAlgorithm, true, [\"encrypt\"]);\n        const encryptedContent = await crypto.encrypt({\n            name: contentEncryptionAlgorithm.name,\n            iv: ivView\n        }, sessionKey, contentView);\n        const exportedSessionKey = await crypto.exportKey(\"raw\", sessionKey);\n        this.version = 2;\n        this.encryptedContentInfo = new EncryptedContentInfo({\n            disableSplit: this.policy.disableSplit,\n            contentType: \"1.2.840.113549.1.7.1\",\n            contentEncryptionAlgorithm: new AlgorithmIdentifier({\n                algorithmId: contentEncryptionOID,\n                algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: ivBuffer })\n            }),\n            encryptedContent: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: encryptedContent })\n        });\n        const SubKeyAgreeRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            let recipientCurve;\n            let recipientPublicKey;\n            if (recipientInfo.recipientPublicKey) {\n                recipientCurve = recipientInfo.recipientPublicKey.algorithm.namedCurve;\n                recipientPublicKey = recipientInfo.recipientPublicKey;\n            }\n            else if (recipientInfo.recipientCertificate) {\n                const curveObject = recipientInfo.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\n                if (curveObject.constructor.blockName() !== asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier.blockName())\n                    throw new Error(`Incorrect \"recipientCertificate\" for index ${index}`);\n                const curveOID = curveObject.valueBlock.toString();\n                switch (curveOID) {\n                    case \"1.2.840.10045.3.1.7\":\n                        recipientCurve = \"P-256\";\n                        break;\n                    case \"1.3.132.0.34\":\n                        recipientCurve = \"P-384\";\n                        break;\n                    case \"1.3.132.0.35\":\n                        recipientCurve = \"P-521\";\n                        break;\n                    default:\n                        throw new Error(`Incorrect curve OID for index ${index}`);\n                }\n                recipientPublicKey = await recipientInfo.recipientCertificate.getPublicKey({\n                    algorithm: {\n                        algorithm: {\n                            name: \"ECDH\",\n                            namedCurve: recipientCurve\n                        },\n                        usages: []\n                    }\n                }, crypto);\n            }\n            else {\n                throw new Error(\"Unsupported RecipientInfo\");\n            }\n            const recipientCurveLength = curveLengthByName[recipientCurve];\n            const ecdhKeys = await crypto.generateKey({ name: \"ECDH\", namedCurve: recipientCurve }, true, [\"deriveBits\"]);\n            const exportedECDHPublicKey = await crypto.exportKey(\"spki\", ecdhKeys.publicKey);\n            const derivedBits = await crypto.deriveBits({\n                name: \"ECDH\",\n                public: recipientPublicKey\n            }, ecdhKeys.privateKey, recipientCurveLength);\n            const aesKWAlgorithm = new AlgorithmIdentifier({ schema: recipientInfo.keyEncryptionAlgorithm.algorithmParams });\n            const kwAlgorithm = crypto.getAlgorithmByOID(aesKWAlgorithm.algorithmId, true, \"aesKWAlgorithm\");\n            let kwLength = kwAlgorithm.length;\n            const kwLengthBuffer = new ArrayBuffer(4);\n            const kwLengthView = new Uint8Array(kwLengthBuffer);\n            for (let j = 3; j >= 0; j--) {\n                kwLengthView[j] = kwLength;\n                kwLength >>= 8;\n            }\n            const eccInfo = new ECCCMSSharedInfo({\n                keyInfo: new AlgorithmIdentifier({\n                    algorithmId: aesKWAlgorithm.algorithmId\n                }),\n                entityUInfo: recipientInfo.ukm,\n                suppPubInfo: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: kwLengthBuffer })\n            });\n            const encodedInfo = eccInfo.toSchema().toBER(false);\n            const ecdhAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"ecdhAlgorithm\");\n            const derivedKeyRaw = await kdf(ecdhAlgorithm.kdf, derivedBits, kwAlgorithm.length, encodedInfo, crypto);\n            const awsKW = await crypto.importKey(\"raw\", derivedKeyRaw, { name: \"AES-KW\" }, true, [\"wrapKey\"]);\n            const wrappedKey = await crypto.wrapKey(\"raw\", sessionKey, awsKW, { name: \"AES-KW\" });\n            const originator = new OriginatorIdentifierOrKey();\n            originator.variant = 3;\n            originator.value = OriginatorPublicKey.fromBER(exportedECDHPublicKey);\n            recipientInfo.originator = originator;\n            recipientInfo.recipientEncryptedKeys.encryptedKeys[0].encryptedKey = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: wrappedKey });\n            return { ecdhPrivateKey: ecdhKeys.privateKey };\n        };\n        const SubKeyTransRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            const algorithmParameters = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"keyEncryptionAlgorithm\");\n            if (algorithmParameters.name === \"RSA-OAEP\") {\n                const schema = recipientInfo.keyEncryptionAlgorithm.algorithmParams;\n                const rsaOAEPParams = new RSAESOAEPParams({ schema });\n                algorithmParameters.hash = crypto.getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\n                if ((\"name\" in algorithmParameters.hash) === false)\n                    throw new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\n            }\n            try {\n                const publicKey = await recipientInfo.recipientCertificate.getPublicKey({\n                    algorithm: {\n                        algorithm: algorithmParameters,\n                        usages: [\"encrypt\", \"wrapKey\"]\n                    }\n                }, crypto);\n                const encryptedKey = await crypto.encrypt(publicKey.algorithm, publicKey, exportedSessionKey);\n                recipientInfo.encryptedKey = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: encryptedKey });\n            }\n            catch {\n            }\n        };\n        const SubKEKRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"kekAlgorithm\");\n            const kekKey = await crypto.importKey(\"raw\", new Uint8Array(recipientInfo.preDefinedKEK), kekAlgorithm, true, [\"wrapKey\"]);\n            const wrappedKey = await crypto.wrapKey(\"raw\", sessionKey, kekKey, kekAlgorithm);\n            recipientInfo.encryptedKey = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: wrappedKey });\n        };\n        const SubPasswordRecipientinfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            let pbkdf2Params;\n            if (!recipientInfo.keyDerivationAlgorithm)\n                throw new Error(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\n            if (!recipientInfo.keyDerivationAlgorithm.algorithmParams)\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n            try {\n                pbkdf2Params = new PBKDF2Params({ schema: recipientInfo.keyDerivationAlgorithm.algorithmParams });\n            }\n            catch (ex) {\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n            }\n            const passwordView = new Uint8Array(recipientInfo.password);\n            const derivationKey = await crypto.importKey(\"raw\", passwordView, \"PBKDF2\", false, [\"deriveKey\"]);\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"kekAlgorithm\");\n            let hmacHashAlgorithm = \"SHA-1\";\n            if (pbkdf2Params.prf) {\n                const prfAlgorithm = crypto.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true, \"prfAlgorithm\");\n                hmacHashAlgorithm = prfAlgorithm.hash.name;\n            }\n            const saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\n            const iterations = pbkdf2Params.iterationCount;\n            const derivedKey = await crypto.deriveKey({\n                name: \"PBKDF2\",\n                hash: {\n                    name: hmacHashAlgorithm\n                },\n                salt: saltView,\n                iterations\n            }, derivationKey, kekAlgorithm, true, [\"wrapKey\"]);\n            const wrappedKey = await crypto.wrapKey(\"raw\", sessionKey, derivedKey, kekAlgorithm);\n            recipientInfo.encryptedKey = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: wrappedKey });\n        };\n        const res = [];\n        for (let i = 0; i < this.recipientInfos.length; i++) {\n            switch (this.recipientInfos[i].variant) {\n                case 1:\n                    res.push(await SubKeyTransRecipientInfo(i));\n                    break;\n                case 2:\n                    res.push(await SubKeyAgreeRecipientInfo(i));\n                    break;\n                case 3:\n                    res.push(await SubKEKRecipientInfo(i));\n                    break;\n                case 4:\n                    res.push(await SubPasswordRecipientinfo(i));\n                    break;\n                default:\n                    throw new Error(`Unknown recipient type in array with index ${i}`);\n            }\n        }\n        return res;\n    }\n    async decrypt(recipientIndex, parameters, crypto = getCrypto(true)) {\n        const decryptionParameters = parameters || {};\n        if ((recipientIndex + 1) > this.recipientInfos.length) {\n            throw new Error(`Maximum value for \"index\" is: ${this.recipientInfos.length - 1}`);\n        }\n        const SubKeyAgreeRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            let curveOID;\n            let recipientCurve;\n            let recipientCurveLength;\n            const originator = recipientInfo.originator;\n            if (decryptionParameters.recipientCertificate) {\n                const curveObject = decryptionParameters.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\n                if (curveObject.constructor.blockName() !== asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier.blockName()) {\n                    throw new Error(`Incorrect \"recipientCertificate\" for index ${index}`);\n                }\n                curveOID = curveObject.valueBlock.toString();\n            }\n            else if (originator.value.algorithm.algorithmParams) {\n                const curveObject = originator.value.algorithm.algorithmParams;\n                if (curveObject.constructor.blockName() !== asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier.blockName()) {\n                    throw new Error(`Incorrect originator for index ${index}`);\n                }\n                curveOID = curveObject.valueBlock.toString();\n            }\n            else {\n                throw new Error(\"Parameter \\\"recipientCertificate\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\" if algorithm params are missing from originator\");\n            }\n            if (!decryptionParameters.recipientPrivateKey)\n                throw new Error(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\n            switch (curveOID) {\n                case \"1.2.840.10045.3.1.7\":\n                    recipientCurve = \"P-256\";\n                    recipientCurveLength = 256;\n                    break;\n                case \"1.3.132.0.34\":\n                    recipientCurve = \"P-384\";\n                    recipientCurveLength = 384;\n                    break;\n                case \"1.3.132.0.35\":\n                    recipientCurve = \"P-521\";\n                    recipientCurveLength = 528;\n                    break;\n                default:\n                    throw new Error(`Incorrect curve OID for index ${index}`);\n            }\n            let ecdhPrivateKey;\n            let keyCrypto = crypto;\n            if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isBufferSource(decryptionParameters.recipientPrivateKey)) {\n                ecdhPrivateKey = await crypto.importKey(\"pkcs8\", decryptionParameters.recipientPrivateKey, {\n                    name: \"ECDH\",\n                    namedCurve: recipientCurve\n                }, true, [\"deriveBits\"]);\n            }\n            else {\n                ecdhPrivateKey = decryptionParameters.recipientPrivateKey;\n                if (\"crypto\" in decryptionParameters && decryptionParameters.crypto) {\n                    keyCrypto = decryptionParameters.crypto.subtle;\n                }\n            }\n            if ((\"algorithmParams\" in originator.value.algorithm) === false)\n                originator.value.algorithm.algorithmParams = new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: curveOID });\n            const buffer = originator.value.toSchema().toBER(false);\n            const ecdhPublicKey = await crypto.importKey(\"spki\", buffer, {\n                name: \"ECDH\",\n                namedCurve: recipientCurve\n            }, true, []);\n            const sharedSecret = await keyCrypto.deriveBits({\n                name: \"ECDH\",\n                public: ecdhPublicKey\n            }, ecdhPrivateKey, recipientCurveLength);\n            async function applyKDF(includeAlgorithmParams) {\n                includeAlgorithmParams = includeAlgorithmParams || false;\n                const aesKWAlgorithm = new AlgorithmIdentifier({ schema: recipientInfo.keyEncryptionAlgorithm.algorithmParams });\n                const kwAlgorithm = crypto.getAlgorithmByOID(aesKWAlgorithm.algorithmId, true, \"kwAlgorithm\");\n                let kwLength = kwAlgorithm.length;\n                const kwLengthBuffer = new ArrayBuffer(4);\n                const kwLengthView = new Uint8Array(kwLengthBuffer);\n                for (let j = 3; j >= 0; j--) {\n                    kwLengthView[j] = kwLength;\n                    kwLength >>= 8;\n                }\n                const keyInfoAlgorithm = {\n                    algorithmId: aesKWAlgorithm.algorithmId\n                };\n                if (includeAlgorithmParams) {\n                    keyInfoAlgorithm.algorithmParams = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null();\n                }\n                const eccInfo = new ECCCMSSharedInfo({\n                    keyInfo: new AlgorithmIdentifier(keyInfoAlgorithm),\n                    entityUInfo: recipientInfo.ukm,\n                    suppPubInfo: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: kwLengthBuffer })\n                });\n                const encodedInfo = eccInfo.toSchema().toBER(false);\n                const ecdhAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"ecdhAlgorithm\");\n                if (!ecdhAlgorithm.name) {\n                    throw new Error(`Incorrect OID for key encryption algorithm: ${recipientInfo.keyEncryptionAlgorithm.algorithmId}`);\n                }\n                return kdf(ecdhAlgorithm.kdf, sharedSecret, kwAlgorithm.length, encodedInfo, crypto);\n            }\n            const kdfResult = await applyKDF();\n            const importAesKwKey = async (kdfResult) => {\n                return crypto.importKey(\"raw\", kdfResult, { name: \"AES-KW\" }, true, [\"unwrapKey\"]);\n            };\n            const aesKwKey = await importAesKwKey(kdfResult);\n            const unwrapSessionKey = async (aesKwKey) => {\n                const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n                const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n                return crypto.unwrapKey(\"raw\", recipientInfo.recipientEncryptedKeys.encryptedKeys[0].encryptedKey.valueBlock.valueHexView, aesKwKey, { name: \"AES-KW\" }, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n            };\n            try {\n                return await unwrapSessionKey(aesKwKey);\n            }\n            catch {\n                const kdfResult = await applyKDF(true);\n                const aesKwKey = await importAesKwKey(kdfResult);\n                return unwrapSessionKey(aesKwKey);\n            }\n        };\n        const SubKeyTransRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            if (!decryptionParameters.recipientPrivateKey) {\n                throw new Error(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyTransRecipientInfo\\\"\");\n            }\n            const algorithmParameters = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"keyEncryptionAlgorithm\");\n            if (algorithmParameters.name === \"RSA-OAEP\") {\n                const schema = recipientInfo.keyEncryptionAlgorithm.algorithmParams;\n                const rsaOAEPParams = new RSAESOAEPParams({ schema });\n                algorithmParameters.hash = crypto.getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\n                if ((\"name\" in algorithmParameters.hash) === false)\n                    throw new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\n            }\n            let privateKey;\n            let keyCrypto = crypto;\n            if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isBufferSource(decryptionParameters.recipientPrivateKey)) {\n                privateKey = await crypto.importKey(\"pkcs8\", decryptionParameters.recipientPrivateKey, algorithmParameters, true, [\"decrypt\"]);\n            }\n            else {\n                privateKey = decryptionParameters.recipientPrivateKey;\n                if (\"crypto\" in decryptionParameters && decryptionParameters.crypto) {\n                    keyCrypto = decryptionParameters.crypto.subtle;\n                }\n            }\n            const sessionKey = await keyCrypto.decrypt(privateKey.algorithm, privateKey, recipientInfo.encryptedKey.valueBlock.valueHexView);\n            const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n            const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n            if ((\"name\" in contentEncryptionAlgorithm) === false)\n                throw new Error(`Incorrect \"contentEncryptionAlgorithm\": ${algorithmId}`);\n            return crypto.importKey(\"raw\", sessionKey, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n        };\n        const SubKEKRecipientInfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            if (!decryptionParameters.preDefinedData)\n                throw new Error(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"kekAlgorithm\");\n            const importedKey = await crypto.importKey(\"raw\", decryptionParameters.preDefinedData, kekAlgorithm, true, [\"unwrapKey\"]);\n            const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n            const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n            if (!contentEncryptionAlgorithm.name) {\n                throw new Error(`Incorrect \"contentEncryptionAlgorithm\": ${algorithmId}`);\n            }\n            return crypto.unwrapKey(\"raw\", recipientInfo.encryptedKey.valueBlock.valueHexView, importedKey, kekAlgorithm, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n        };\n        const SubPasswordRecipientinfo = async (index) => {\n            const recipientInfo = this.recipientInfos[index].value;\n            let pbkdf2Params;\n            if (!decryptionParameters.preDefinedData) {\n                throw new Error(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\n            }\n            if (!recipientInfo.keyDerivationAlgorithm) {\n                throw new Error(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\n            }\n            if (!recipientInfo.keyDerivationAlgorithm.algorithmParams) {\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n            }\n            try {\n                pbkdf2Params = new PBKDF2Params({ schema: recipientInfo.keyDerivationAlgorithm.algorithmParams });\n            }\n            catch (ex) {\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\n            }\n            const pbkdf2Key = await crypto.importKey(\"raw\", decryptionParameters.preDefinedData, \"PBKDF2\", false, [\"deriveKey\"]);\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"keyEncryptionAlgorithm\");\n            const hmacHashAlgorithm = pbkdf2Params.prf\n                ? crypto.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true, \"prfAlgorithm\").hash.name\n                : \"SHA-1\";\n            const saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\n            const iterations = pbkdf2Params.iterationCount;\n            const kekKey = await crypto.deriveKey({\n                name: \"PBKDF2\",\n                hash: {\n                    name: hmacHashAlgorithm\n                },\n                salt: saltView,\n                iterations\n            }, pbkdf2Key, kekAlgorithm, true, [\"unwrapKey\"]);\n            const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n            const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n            return crypto.unwrapKey(\"raw\", recipientInfo.encryptedKey.valueBlock.valueHexView, kekKey, kekAlgorithm, contentEncryptionAlgorithm, true, [\"decrypt\"]);\n        };\n        let unwrappedKey;\n        switch (this.recipientInfos[recipientIndex].variant) {\n            case 1:\n                unwrappedKey = await SubKeyTransRecipientInfo(recipientIndex);\n                break;\n            case 2:\n                unwrappedKey = await SubKeyAgreeRecipientInfo(recipientIndex);\n                break;\n            case 3:\n                unwrappedKey = await SubKEKRecipientInfo(recipientIndex);\n                break;\n            case 4:\n                unwrappedKey = await SubPasswordRecipientinfo(recipientIndex);\n                break;\n            default:\n                throw new Error(`Unknown recipient type in array with index ${recipientIndex}`);\n        }\n        const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\n        const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\n        const ivBuffer = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams.valueBlock.valueHex;\n        const ivView = new Uint8Array(ivBuffer);\n        if (!this.encryptedContentInfo.encryptedContent) {\n            throw new Error(\"Required property `encryptedContent` is empty\");\n        }\n        const dataBuffer = this.encryptedContentInfo.getEncryptedContent();\n        return crypto.decrypt({\n            name: contentEncryptionAlgorithm.name,\n            iv: ivView\n        }, unwrappedKey, dataBuffer);\n    }\n}\nEnvelopedData.CLASS_NAME = \"EnvelopedData\";\n\nconst SAFE_CONTENTS = \"safeContents\";\nconst PARSED_VALUE$1 = \"parsedValue\";\nconst CONTENT_INFOS = \"contentInfos\";\nclass AuthenticatedSafe extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.safeContents = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SAFE_CONTENTS, AuthenticatedSafe.defaultValues(SAFE_CONTENTS));\n        if (PARSED_VALUE$1 in parameters) {\n            this.parsedValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PARSED_VALUE$1, AuthenticatedSafe.defaultValues(PARSED_VALUE$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SAFE_CONTENTS:\n                return [];\n            case PARSED_VALUE$1:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SAFE_CONTENTS:\n                return (memberValue.length === 0);\n            case PARSED_VALUE$1:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.contentInfos || EMPTY_STRING),\n                    value: ContentInfo.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            CONTENT_INFOS\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, AuthenticatedSafe.schema({\n            names: {\n                contentInfos: CONTENT_INFOS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.safeContents = Array.from(asn1.result.contentInfos, element => new ContentInfo({ schema: element }));\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: Array.from(this.safeContents, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        return {\n            safeContents: Array.from(this.safeContents, o => o.toJSON())\n        };\n    }\n    async parseInternalValues(parameters, crypto = getCrypto(true)) {\n        ParameterError.assert(parameters, SAFE_CONTENTS);\n        ArgumentError.assert(parameters.safeContents, SAFE_CONTENTS, \"Array\");\n        if (parameters.safeContents.length !== this.safeContents.length) {\n            throw new ArgumentError(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.safeContents.length\\\"\");\n        }\n        this.parsedValue = {\n            safeContents: [],\n        };\n        for (const [index, content] of this.safeContents.entries()) {\n            const safeContent = parameters.safeContents[index];\n            const errorTarget = `parameters.safeContents[${index}]`;\n            switch (content.contentType) {\n                case id_ContentType_Data:\n                    {\n                        ArgumentError.assert(content.content, \"this.safeContents[j].content\", asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString);\n                        const authSafeContent = content.content.getValue();\n                        this.parsedValue.safeContents.push({\n                            privacyMode: 0,\n                            value: SafeContents.fromBER(authSafeContent)\n                        });\n                    }\n                    break;\n                case id_ContentType_EnvelopedData:\n                    {\n                        const cmsEnveloped = new EnvelopedData({ schema: content.content });\n                        ParameterError.assert(errorTarget, safeContent, \"recipientCertificate\", \"recipientKey\");\n                        const envelopedData = safeContent;\n                        const recipientCertificate = envelopedData.recipientCertificate;\n                        const recipientKey = envelopedData.recipientKey;\n                        const decrypted = await cmsEnveloped.decrypt(0, {\n                            recipientCertificate,\n                            recipientPrivateKey: recipientKey\n                        }, crypto);\n                        this.parsedValue.safeContents.push({\n                            privacyMode: 2,\n                            value: SafeContents.fromBER(decrypted),\n                        });\n                    }\n                    break;\n                case id_ContentType_EncryptedData:\n                    {\n                        const cmsEncrypted = new EncryptedData({ schema: content.content });\n                        ParameterError.assert(errorTarget, safeContent, \"password\");\n                        const password = safeContent.password;\n                        const decrypted = await cmsEncrypted.decrypt({\n                            password\n                        }, crypto);\n                        this.parsedValue.safeContents.push({\n                            privacyMode: 1,\n                            value: SafeContents.fromBER(decrypted),\n                        });\n                    }\n                    break;\n                default:\n                    throw new Error(`Unknown \"contentType\" for AuthenticatedSafe: \" ${content.contentType}`);\n            }\n        }\n    }\n    async makeInternalValues(parameters, crypto = getCrypto(true)) {\n        if (!(this.parsedValue)) {\n            throw new Error(\"Please run \\\"parseValues\\\" first or add \\\"parsedValue\\\" manually\");\n        }\n        ArgumentError.assert(this.parsedValue, \"this.parsedValue\", \"object\");\n        ArgumentError.assert(this.parsedValue.safeContents, \"this.parsedValue.safeContents\", \"Array\");\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        ParameterError.assert(parameters, \"safeContents\");\n        ArgumentError.assert(parameters.safeContents, \"parameters.safeContents\", \"Array\");\n        if (parameters.safeContents.length !== this.parsedValue.safeContents.length) {\n            throw new ArgumentError(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.parsedValue.safeContents\\\"\");\n        }\n        this.safeContents = [];\n        for (const [index, content] of this.parsedValue.safeContents.entries()) {\n            ParameterError.assert(\"content\", content, \"privacyMode\", \"value\");\n            ArgumentError.assert(content.value, \"content.value\", SafeContents);\n            switch (content.privacyMode) {\n                case 0:\n                    {\n                        const contentBuffer = content.value.toSchema().toBER(false);\n                        this.safeContents.push(new ContentInfo({\n                            contentType: \"1.2.840.113549.1.7.1\",\n                            content: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: contentBuffer })\n                        }));\n                    }\n                    break;\n                case 1:\n                    {\n                        const cmsEncrypted = new EncryptedData();\n                        const currentParameters = parameters.safeContents[index];\n                        currentParameters.contentToEncrypt = content.value.toSchema().toBER(false);\n                        await cmsEncrypted.encrypt(currentParameters, crypto);\n                        this.safeContents.push(new ContentInfo({\n                            contentType: \"1.2.840.113549.1.7.6\",\n                            content: cmsEncrypted.toSchema()\n                        }));\n                    }\n                    break;\n                case 2:\n                    {\n                        const cmsEnveloped = new EnvelopedData();\n                        const contentToEncrypt = content.value.toSchema().toBER(false);\n                        const safeContent = parameters.safeContents[index];\n                        ParameterError.assert(`parameters.safeContents[${index}]`, safeContent, \"encryptingCertificate\", \"encryptionAlgorithm\");\n                        switch (true) {\n                            case (safeContent.encryptionAlgorithm.name.toLowerCase() === \"aes-cbc\"):\n                            case (safeContent.encryptionAlgorithm.name.toLowerCase() === \"aes-gcm\"):\n                                break;\n                            default:\n                                throw new Error(`Incorrect parameter \"encryptionAlgorithm\" in \"parameters.safeContents[i]\": ${safeContent.encryptionAlgorithm}`);\n                        }\n                        switch (true) {\n                            case (safeContent.encryptionAlgorithm.length === 128):\n                            case (safeContent.encryptionAlgorithm.length === 192):\n                            case (safeContent.encryptionAlgorithm.length === 256):\n                                break;\n                            default:\n                                throw new Error(`Incorrect parameter \"encryptionAlgorithm.length\" in \"parameters.safeContents[i]\": ${safeContent.encryptionAlgorithm.length}`);\n                        }\n                        const encryptionAlgorithm = safeContent.encryptionAlgorithm;\n                        cmsEnveloped.addRecipientByCertificate(safeContent.encryptingCertificate, {}, undefined, crypto);\n                        await cmsEnveloped.encrypt(encryptionAlgorithm, contentToEncrypt, crypto);\n                        this.safeContents.push(new ContentInfo({\n                            contentType: \"1.2.840.113549.1.7.3\",\n                            content: cmsEnveloped.toSchema()\n                        }));\n                    }\n                    break;\n                default:\n                    throw new Error(`Incorrect value for \"content.privacyMode\": ${content.privacyMode}`);\n            }\n        }\n        return this;\n    }\n}\nAuthenticatedSafe.CLASS_NAME = \"AuthenticatedSafe\";\n\nconst HASH_ALGORITHM$1 = \"hashAlgorithm\";\nconst ISSUER_NAME_HASH = \"issuerNameHash\";\nconst ISSUER_KEY_HASH = \"issuerKeyHash\";\nconst SERIAL_NUMBER$1 = \"serialNumber\";\nconst CLEAR_PROPS$j = [\n    HASH_ALGORITHM$1,\n    ISSUER_NAME_HASH,\n    ISSUER_KEY_HASH,\n    SERIAL_NUMBER$1,\n];\nclass CertID extends PkiObject {\n    static async create(certificate, parameters, crypto = getCrypto(true)) {\n        const certID = new CertID();\n        await certID.createForCertificate(certificate, parameters, crypto);\n        return certID;\n    }\n    constructor(parameters = {}) {\n        super();\n        this.hashAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, HASH_ALGORITHM$1, CertID.defaultValues(HASH_ALGORITHM$1));\n        this.issuerNameHash = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER_NAME_HASH, CertID.defaultValues(ISSUER_NAME_HASH));\n        this.issuerKeyHash = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ISSUER_KEY_HASH, CertID.defaultValues(ISSUER_KEY_HASH));\n        this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SERIAL_NUMBER$1, CertID.defaultValues(SERIAL_NUMBER$1));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case HASH_ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case ISSUER_NAME_HASH:\n            case ISSUER_KEY_HASH:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case SERIAL_NUMBER$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case HASH_ALGORITHM$1:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case ISSUER_NAME_HASH:\n            case ISSUER_KEY_HASH:\n            case SERIAL_NUMBER$1:\n                return (memberValue.isEqual(CertID.defaultValues(SERIAL_NUMBER$1)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.hashAlgorithmObject || {\n                    names: {\n                        blockName: (names.hashAlgorithm || EMPTY_STRING)\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.issuerNameHash || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.issuerKeyHash || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.serialNumber || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$j);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, CertID.schema({\n            names: {\n                hashAlgorithm: HASH_ALGORITHM$1,\n                issuerNameHash: ISSUER_NAME_HASH,\n                issuerKeyHash: ISSUER_KEY_HASH,\n                serialNumber: SERIAL_NUMBER$1\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\n        this.issuerNameHash = asn1.result.issuerNameHash;\n        this.issuerKeyHash = asn1.result.issuerKeyHash;\n        this.serialNumber = asn1.result.serialNumber;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.hashAlgorithm.toSchema(),\n                this.issuerNameHash,\n                this.issuerKeyHash,\n                this.serialNumber\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            hashAlgorithm: this.hashAlgorithm.toJSON(),\n            issuerNameHash: this.issuerNameHash.toJSON(),\n            issuerKeyHash: this.issuerKeyHash.toJSON(),\n            serialNumber: this.serialNumber.toJSON(),\n        };\n    }\n    isEqual(certificateID) {\n        if (this.hashAlgorithm.algorithmId !== certificateID.hashAlgorithm.algorithmId) {\n            return false;\n        }\n        if (!pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(this.issuerNameHash.valueBlock.valueHexView, certificateID.issuerNameHash.valueBlock.valueHexView)) {\n            return false;\n        }\n        if (!pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(this.issuerKeyHash.valueBlock.valueHexView, certificateID.issuerKeyHash.valueBlock.valueHexView)) {\n            return false;\n        }\n        if (!this.serialNumber.isEqual(certificateID.serialNumber)) {\n            return false;\n        }\n        return true;\n    }\n    async createForCertificate(certificate, parameters, crypto = getCrypto(true)) {\n        ParameterError.assert(parameters, HASH_ALGORITHM$1, \"issuerCertificate\");\n        const hashOID = crypto.getOIDByAlgorithm({ name: parameters.hashAlgorithm }, true, \"hashAlgorithm\");\n        this.hashAlgorithm = new AlgorithmIdentifier({\n            algorithmId: hashOID,\n            algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n        });\n        const issuerCertificate = parameters.issuerCertificate;\n        this.serialNumber = certificate.serialNumber;\n        const hashIssuerName = await crypto.digest({ name: parameters.hashAlgorithm }, issuerCertificate.subject.toSchema().toBER(false));\n        this.issuerNameHash = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: hashIssuerName });\n        const issuerKeyBuffer = issuerCertificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView;\n        const hashIssuerKey = await crypto.digest({ name: parameters.hashAlgorithm }, issuerKeyBuffer);\n        this.issuerKeyHash = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: hashIssuerKey });\n    }\n}\nCertID.CLASS_NAME = \"CertID\";\n\nconst CERT_ID = \"certID\";\nconst CERT_STATUS = \"certStatus\";\nconst THIS_UPDATE = \"thisUpdate\";\nconst NEXT_UPDATE = \"nextUpdate\";\nconst SINGLE_EXTENSIONS = \"singleExtensions\";\nconst CLEAR_PROPS$i = [\n    CERT_ID,\n    CERT_STATUS,\n    THIS_UPDATE,\n    NEXT_UPDATE,\n    SINGLE_EXTENSIONS,\n];\nclass SingleResponse extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.certID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERT_ID, SingleResponse.defaultValues(CERT_ID));\n        this.certStatus = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERT_STATUS, SingleResponse.defaultValues(CERT_STATUS));\n        this.thisUpdate = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, THIS_UPDATE, SingleResponse.defaultValues(THIS_UPDATE));\n        if (NEXT_UPDATE in parameters) {\n            this.nextUpdate = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NEXT_UPDATE, SingleResponse.defaultValues(NEXT_UPDATE));\n        }\n        if (SINGLE_EXTENSIONS in parameters) {\n            this.singleExtensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SINGLE_EXTENSIONS, SingleResponse.defaultValues(SINGLE_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case CERT_ID:\n                return new CertID();\n            case CERT_STATUS:\n                return {};\n            case THIS_UPDATE:\n            case NEXT_UPDATE:\n                return new Date(0, 0, 0);\n            case SINGLE_EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case CERT_ID:\n                return ((CertID.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\n                    (CertID.compareWithDefault(\"issuerNameHash\", memberValue.issuerNameHash)) &&\n                    (CertID.compareWithDefault(\"issuerKeyHash\", memberValue.issuerKeyHash)) &&\n                    (CertID.compareWithDefault(\"serialNumber\", memberValue.serialNumber)));\n            case CERT_STATUS:\n                return (Object.keys(memberValue).length === 0);\n            case THIS_UPDATE:\n            case NEXT_UPDATE:\n                return (memberValue === SingleResponse.defaultValues(memberName));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                CertID.schema(names.certID || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                            name: (names.certStatus || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 0\n                            },\n                        }),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            name: (names.certStatus || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: [\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime(),\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                    optional: true,\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    },\n                                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Enumerated()]\n                                })\n                            ]\n                        }),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                            name: (names.certStatus || EMPTY_STRING),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 2\n                            },\n                            lenBlock: { length: 1 }\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ name: (names.thisUpdate || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ name: (names.nextUpdate || EMPTY_STRING) })]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [Extensions.schema(names.singleExtensions || {})]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$i);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, SingleResponse.schema({\n            names: {\n                certID: {\n                    names: {\n                        blockName: CERT_ID\n                    }\n                },\n                certStatus: CERT_STATUS,\n                thisUpdate: THIS_UPDATE,\n                nextUpdate: NEXT_UPDATE,\n                singleExtensions: {\n                    names: {\n                        blockName: SINGLE_EXTENSIONS\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.certID = new CertID({ schema: asn1.result.certID });\n        this.certStatus = asn1.result.certStatus;\n        this.thisUpdate = asn1.result.thisUpdate.toDate();\n        if (NEXT_UPDATE in asn1.result)\n            this.nextUpdate = asn1.result.nextUpdate.toDate();\n        if (SINGLE_EXTENSIONS in asn1.result)\n            this.singleExtensions = Array.from(asn1.result.singleExtensions.valueBlock.value, element => new Extension({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.certID.toSchema());\n        outputArray.push(this.certStatus);\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueDate: this.thisUpdate }));\n        if (this.nextUpdate) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueDate: this.nextUpdate })]\n            }));\n        }\n        if (this.singleExtensions) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: Array.from(this.singleExtensions, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            certID: this.certID.toJSON(),\n            certStatus: this.certStatus.toJSON(),\n            thisUpdate: this.thisUpdate\n        };\n        if (this.nextUpdate) {\n            res.nextUpdate = this.nextUpdate;\n        }\n        if (this.singleExtensions) {\n            res.singleExtensions = Array.from(this.singleExtensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nSingleResponse.CLASS_NAME = \"SingleResponse\";\n\nconst TBS$2 = \"tbs\";\nconst VERSION$7 = \"version\";\nconst RESPONDER_ID = \"responderID\";\nconst PRODUCED_AT = \"producedAt\";\nconst RESPONSES = \"responses\";\nconst RESPONSE_EXTENSIONS = \"responseExtensions\";\nconst RESPONSE_DATA = \"ResponseData\";\nconst RESPONSE_DATA_VERSION = `${RESPONSE_DATA}.${VERSION$7}`;\nconst RESPONSE_DATA_RESPONDER_ID = `${RESPONSE_DATA}.${RESPONDER_ID}`;\nconst RESPONSE_DATA_PRODUCED_AT = `${RESPONSE_DATA}.${PRODUCED_AT}`;\nconst RESPONSE_DATA_RESPONSES = `${RESPONSE_DATA}.${RESPONSES}`;\nconst RESPONSE_DATA_RESPONSE_EXTENSIONS = `${RESPONSE_DATA}.${RESPONSE_EXTENSIONS}`;\nconst CLEAR_PROPS$h = [\n    RESPONSE_DATA,\n    RESPONSE_DATA_VERSION,\n    RESPONSE_DATA_RESPONDER_ID,\n    RESPONSE_DATA_PRODUCED_AT,\n    RESPONSE_DATA_RESPONSES,\n    RESPONSE_DATA_RESPONSE_EXTENSIONS\n];\nclass ResponseData extends PkiObject {\n    get tbs() {\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TBS$2, ResponseData.defaultValues(TBS$2)));\n        if (VERSION$7 in parameters) {\n            this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$7, ResponseData.defaultValues(VERSION$7));\n        }\n        this.responderID = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RESPONDER_ID, ResponseData.defaultValues(RESPONDER_ID));\n        this.producedAt = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PRODUCED_AT, ResponseData.defaultValues(PRODUCED_AT));\n        this.responses = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RESPONSES, ResponseData.defaultValues(RESPONSES));\n        if (RESPONSE_EXTENSIONS in parameters) {\n            this.responseExtensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RESPONSE_EXTENSIONS, ResponseData.defaultValues(RESPONSE_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$7:\n                return 0;\n            case TBS$2:\n                return EMPTY_BUFFER;\n            case RESPONDER_ID:\n                return {};\n            case PRODUCED_AT:\n                return new Date(0, 0, 0);\n            case RESPONSES:\n            case RESPONSE_EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TBS$2:\n                return (memberValue.byteLength === 0);\n            case RESPONDER_ID:\n                return (Object.keys(memberValue).length === 0);\n            case PRODUCED_AT:\n                return (memberValue === ResponseData.defaultValues(memberName));\n            case RESPONSES:\n            case RESPONSE_EXTENSIONS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || RESPONSE_DATA),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || RESPONSE_DATA_VERSION) })]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            name: (names.responderID || RESPONSE_DATA_RESPONDER_ID),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 1\n                            },\n                            value: [RelativeDistinguishedNames.schema(names.ResponseDataByName || {\n                                    names: {\n                                        blockName: \"ResponseData.byName\"\n                                    }\n                                })]\n                        }),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                            name: (names.responderID || RESPONSE_DATA_RESPONDER_ID),\n                            idBlock: {\n                                tagClass: 3,\n                                tagNumber: 2\n                            },\n                            value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.ResponseDataByKey || \"ResponseData.byKey\") })]\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ name: (names.producedAt || RESPONSE_DATA_PRODUCED_AT) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: RESPONSE_DATA_RESPONSES,\n                            value: SingleResponse.schema(names.response || {})\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [Extensions.schema(names.extensions || {\n                            names: {\n                                blockName: RESPONSE_DATA_RESPONSE_EXTENSIONS\n                            }\n                        })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$h);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, ResponseData.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.ResponseData.valueBeforeDecodeView;\n        if (RESPONSE_DATA_VERSION in asn1.result)\n            this.version = asn1.result[RESPONSE_DATA_VERSION].valueBlock.valueDec;\n        if (asn1.result[RESPONSE_DATA_RESPONDER_ID].idBlock.tagNumber === 1)\n            this.responderID = new RelativeDistinguishedNames({ schema: asn1.result[RESPONSE_DATA_RESPONDER_ID].valueBlock.value[0] });\n        else\n            this.responderID = asn1.result[RESPONSE_DATA_RESPONDER_ID].valueBlock.value[0];\n        this.producedAt = asn1.result[RESPONSE_DATA_PRODUCED_AT].toDate();\n        this.responses = Array.from(asn1.result[RESPONSE_DATA_RESPONSES], element => new SingleResponse({ schema: element }));\n        if (RESPONSE_DATA_RESPONSE_EXTENSIONS in asn1.result)\n            this.responseExtensions = Array.from(asn1.result[RESPONSE_DATA_RESPONSE_EXTENSIONS].valueBlock.value, element => new Extension({ schema: element }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (encodeFlag === false) {\n            if (!this.tbsView.byteLength) {\n                return ResponseData.schema();\n            }\n            const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"TBS Response Data\");\n            tbsSchema = asn1.result;\n        }\n        else {\n            const outputArray = [];\n            if (VERSION$7 in this) {\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version })]\n                }));\n            }\n            if (this.responderID instanceof RelativeDistinguishedNames) {\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [this.responderID.toSchema()]\n                }));\n            }\n            else {\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [this.responderID]\n                }));\n            }\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueDate: this.producedAt }));\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: Array.from(this.responses, o => o.toSchema())\n            }));\n            if (this.responseExtensions) {\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                            value: Array.from(this.responseExtensions, o => o.toSchema())\n                        })]\n                }));\n            }\n            tbsSchema = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: outputArray\n            });\n        }\n        return tbsSchema;\n    }\n    toJSON() {\n        const res = {};\n        if (VERSION$7 in this) {\n            res.version = this.version;\n        }\n        if (this.responderID) {\n            res.responderID = this.responderID;\n        }\n        if (this.producedAt) {\n            res.producedAt = this.producedAt;\n        }\n        if (this.responses) {\n            res.responses = Array.from(this.responses, o => o.toJSON());\n        }\n        if (this.responseExtensions) {\n            res.responseExtensions = Array.from(this.responseExtensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nResponseData.CLASS_NAME = \"ResponseData\";\n\nconst TRUSTED_CERTS = \"trustedCerts\";\nconst CERTS$2 = \"certs\";\nconst CRLS$1 = \"crls\";\nconst OCSPS$1 = \"ocsps\";\nconst CHECK_DATE = \"checkDate\";\nconst FIND_ORIGIN = \"findOrigin\";\nconst FIND_ISSUER = \"findIssuer\";\nvar ChainValidationCode;\n(function (ChainValidationCode) {\n    ChainValidationCode[ChainValidationCode[\"unknown\"] = -1] = \"unknown\";\n    ChainValidationCode[ChainValidationCode[\"success\"] = 0] = \"success\";\n    ChainValidationCode[ChainValidationCode[\"noRevocation\"] = 11] = \"noRevocation\";\n    ChainValidationCode[ChainValidationCode[\"noPath\"] = 60] = \"noPath\";\n    ChainValidationCode[ChainValidationCode[\"noValidPath\"] = 97] = \"noValidPath\";\n})(ChainValidationCode || (ChainValidationCode = {}));\nclass ChainValidationError extends Error {\n    constructor(code, message) {\n        super(message);\n        this.name = ChainValidationError.NAME;\n        this.code = code;\n        this.message = message;\n    }\n}\nChainValidationError.NAME = \"ChainValidationError\";\nfunction isTrusted(cert, trustedList) {\n    for (let i = 0; i < trustedList.length; i++) {\n        if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(cert.tbsView, trustedList[i].tbsView)) {\n            return true;\n        }\n    }\n    return false;\n}\nclass CertificateChainValidationEngine {\n    constructor(parameters = {}) {\n        this.trustedCerts = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TRUSTED_CERTS, this.defaultValues(TRUSTED_CERTS));\n        this.certs = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERTS$2, this.defaultValues(CERTS$2));\n        this.crls = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRLS$1, this.defaultValues(CRLS$1));\n        this.ocsps = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OCSPS$1, this.defaultValues(OCSPS$1));\n        this.checkDate = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CHECK_DATE, this.defaultValues(CHECK_DATE));\n        this.findOrigin = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, FIND_ORIGIN, this.defaultValues(FIND_ORIGIN));\n        this.findIssuer = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, FIND_ISSUER, this.defaultValues(FIND_ISSUER));\n    }\n    static defaultFindOrigin(certificate, validationEngine) {\n        if (certificate.tbsView.byteLength === 0) {\n            certificate.tbsView = new Uint8Array(certificate.encodeTBS().toBER());\n        }\n        for (const localCert of validationEngine.certs) {\n            if (localCert.tbsView.byteLength === 0) {\n                localCert.tbsView = new Uint8Array(localCert.encodeTBS().toBER());\n            }\n            if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(certificate.tbsView, localCert.tbsView))\n                return \"Intermediate Certificates\";\n        }\n        for (const trustedCert of validationEngine.trustedCerts) {\n            if (trustedCert.tbsView.byteLength === 0)\n                trustedCert.tbsView = new Uint8Array(trustedCert.encodeTBS().toBER());\n            if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(certificate.tbsView, trustedCert.tbsView))\n                return \"Trusted Certificates\";\n        }\n        return \"Unknown\";\n    }\n    async defaultFindIssuer(certificate, validationEngine, crypto = getCrypto(true)) {\n        const result = [];\n        let keyIdentifier = null;\n        let authorityCertIssuer = null;\n        let authorityCertSerialNumber = null;\n        if (certificate.subject.isEqual(certificate.issuer)) {\n            try {\n                const verificationResult = await certificate.verify(undefined, crypto);\n                if (verificationResult) {\n                    return [certificate];\n                }\n            }\n            catch (ex) {\n            }\n        }\n        if (certificate.extensions) {\n            for (const extension of certificate.extensions) {\n                if (extension.extnID === id_AuthorityKeyIdentifier && extension.parsedValue instanceof AuthorityKeyIdentifier) {\n                    if (extension.parsedValue.keyIdentifier) {\n                        keyIdentifier = extension.parsedValue.keyIdentifier;\n                    }\n                    else {\n                        if (extension.parsedValue.authorityCertIssuer) {\n                            authorityCertIssuer = extension.parsedValue.authorityCertIssuer;\n                        }\n                        if (extension.parsedValue.authorityCertSerialNumber) {\n                            authorityCertSerialNumber = extension.parsedValue.authorityCertSerialNumber;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        function checkCertificate(possibleIssuer) {\n            if (keyIdentifier !== null) {\n                if (possibleIssuer.extensions) {\n                    let extensionFound = false;\n                    for (const extension of possibleIssuer.extensions) {\n                        if (extension.extnID === id_SubjectKeyIdentifier && extension.parsedValue) {\n                            extensionFound = true;\n                            if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(extension.parsedValue.valueBlock.valueHex, keyIdentifier.valueBlock.valueHexView)) {\n                                result.push(possibleIssuer);\n                            }\n                            break;\n                        }\n                    }\n                    if (extensionFound) {\n                        return;\n                    }\n                }\n            }\n            let authorityCertSerialNumberEqual = false;\n            if (authorityCertSerialNumber !== null)\n                authorityCertSerialNumberEqual = possibleIssuer.serialNumber.isEqual(authorityCertSerialNumber);\n            if (authorityCertIssuer !== null) {\n                if (possibleIssuer.subject.isEqual(authorityCertIssuer)) {\n                    if (authorityCertSerialNumberEqual)\n                        result.push(possibleIssuer);\n                }\n            }\n            else {\n                if (certificate.issuer.isEqual(possibleIssuer.subject))\n                    result.push(possibleIssuer);\n            }\n        }\n        for (const trustedCert of validationEngine.trustedCerts) {\n            checkCertificate(trustedCert);\n        }\n        for (const intermediateCert of validationEngine.certs) {\n            checkCertificate(intermediateCert);\n        }\n        for (let i = result.length - 1; i >= 0; i--) {\n            try {\n                const verificationResult = await certificate.verify(result[i], crypto);\n                if (verificationResult === false)\n                    result.splice(i, 1);\n            }\n            catch (ex) {\n                result.splice(i, 1);\n            }\n        }\n        return result;\n    }\n    defaultValues(memberName) {\n        switch (memberName) {\n            case TRUSTED_CERTS:\n                return [];\n            case CERTS$2:\n                return [];\n            case CRLS$1:\n                return [];\n            case OCSPS$1:\n                return [];\n            case CHECK_DATE:\n                return new Date();\n            case FIND_ORIGIN:\n                return CertificateChainValidationEngine.defaultFindOrigin;\n            case FIND_ISSUER:\n                return this.defaultFindIssuer;\n            default:\n                throw new Error(`Invalid member name for CertificateChainValidationEngine class: ${memberName}`);\n        }\n    }\n    async sort(passedWhenNotRevValues = false, crypto = getCrypto(true)) {\n        const localCerts = [];\n        const buildPath = async (certificate, crypto) => {\n            const result = [];\n            function checkUnique(array) {\n                let unique = true;\n                for (let i = 0; i < array.length; i++) {\n                    for (let j = 0; j < array.length; j++) {\n                        if (j === i)\n                            continue;\n                        if (array[i] === array[j]) {\n                            unique = false;\n                            break;\n                        }\n                    }\n                    if (!unique)\n                        break;\n                }\n                return unique;\n            }\n            if (isTrusted(certificate, this.trustedCerts)) {\n                return [[certificate]];\n            }\n            const findIssuerResult = await this.findIssuer(certificate, this, crypto);\n            if (findIssuerResult.length === 0) {\n                throw new Error(\"No valid certificate paths found\");\n            }\n            for (let i = 0; i < findIssuerResult.length; i++) {\n                if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(findIssuerResult[i].tbsView, certificate.tbsView)) {\n                    result.push([findIssuerResult[i]]);\n                    continue;\n                }\n                const buildPathResult = await buildPath(findIssuerResult[i], crypto);\n                for (let j = 0; j < buildPathResult.length; j++) {\n                    const copy = buildPathResult[j].slice();\n                    copy.splice(0, 0, findIssuerResult[i]);\n                    if (checkUnique(copy))\n                        result.push(copy);\n                    else\n                        result.push(buildPathResult[j]);\n                }\n            }\n            return result;\n        };\n        const findCRL = async (certificate) => {\n            const issuerCertificates = [];\n            const crls = [];\n            const crlsAndCertificates = [];\n            issuerCertificates.push(...localCerts.filter(element => certificate.issuer.isEqual(element.subject)));\n            if (issuerCertificates.length === 0) {\n                return {\n                    status: 1,\n                    statusMessage: \"No certificate's issuers\"\n                };\n            }\n            crls.push(...this.crls.filter(o => o.issuer.isEqual(certificate.issuer)));\n            if (crls.length === 0) {\n                return {\n                    status: 2,\n                    statusMessage: \"No CRLs for specific certificate issuer\"\n                };\n            }\n            for (let i = 0; i < crls.length; i++) {\n                const crl = crls[i];\n                if (crl.nextUpdate && crl.nextUpdate.value < this.checkDate) {\n                    continue;\n                }\n                for (let j = 0; j < issuerCertificates.length; j++) {\n                    try {\n                        const result = await crls[i].verify({ issuerCertificate: issuerCertificates[j] }, crypto);\n                        if (result) {\n                            crlsAndCertificates.push({\n                                crl: crls[i],\n                                certificate: issuerCertificates[j]\n                            });\n                            break;\n                        }\n                    }\n                    catch (ex) {\n                    }\n                }\n            }\n            if (crlsAndCertificates.length) {\n                return {\n                    status: 0,\n                    statusMessage: EMPTY_STRING,\n                    result: crlsAndCertificates\n                };\n            }\n            return {\n                status: 3,\n                statusMessage: \"No valid CRLs found\"\n            };\n        };\n        const findOCSP = async (certificate, issuerCertificate) => {\n            const hashAlgorithm = crypto.getAlgorithmByOID(certificate.signatureAlgorithm.algorithmId);\n            if (!hashAlgorithm.name) {\n                return 1;\n            }\n            if (!hashAlgorithm.hash) {\n                return 1;\n            }\n            for (let i = 0; i < this.ocsps.length; i++) {\n                const ocsp = this.ocsps[i];\n                const result = await ocsp.getCertificateStatus(certificate, issuerCertificate, crypto);\n                if (result.isForCertificate) {\n                    if (result.status === 0)\n                        return 0;\n                    return 1;\n                }\n            }\n            return 2;\n        };\n        async function checkForCA(certificate, needToCheckCRL = false) {\n            let isCA = false;\n            let mustBeCA = false;\n            let keyUsagePresent = false;\n            let cRLSign = false;\n            if (certificate.extensions) {\n                for (let j = 0; j < certificate.extensions.length; j++) {\n                    const extension = certificate.extensions[j];\n                    if (extension.critical && !extension.parsedValue) {\n                        return {\n                            result: false,\n                            resultCode: 6,\n                            resultMessage: `Unable to parse critical certificate extension: ${extension.extnID}`\n                        };\n                    }\n                    if (extension.extnID === id_KeyUsage) {\n                        keyUsagePresent = true;\n                        const view = new Uint8Array(extension.parsedValue.valueBlock.valueHex);\n                        if ((view[0] & 0x04) === 0x04)\n                            mustBeCA = true;\n                        if ((view[0] & 0x02) === 0x02)\n                            cRLSign = true;\n                    }\n                    if (extension.extnID === id_BasicConstraints) {\n                        if (\"cA\" in extension.parsedValue) {\n                            if (extension.parsedValue.cA === true)\n                                isCA = true;\n                        }\n                    }\n                }\n                if ((mustBeCA === true) && (isCA === false)) {\n                    return {\n                        result: false,\n                        resultCode: 3,\n                        resultMessage: \"Unable to build certificate chain - using \\\"keyCertSign\\\" flag set without BasicConstraints\"\n                    };\n                }\n                if ((keyUsagePresent === true) && (isCA === true) && (mustBeCA === false)) {\n                    return {\n                        result: false,\n                        resultCode: 4,\n                        resultMessage: \"Unable to build certificate chain - \\\"keyCertSign\\\" flag was not set\"\n                    };\n                }\n                if ((isCA === true) && (keyUsagePresent === true) && ((needToCheckCRL) && (cRLSign === false))) {\n                    return {\n                        result: false,\n                        resultCode: 5,\n                        resultMessage: \"Unable to build certificate chain - intermediate certificate must have \\\"cRLSign\\\" key usage flag\"\n                    };\n                }\n            }\n            if (isCA === false) {\n                return {\n                    result: false,\n                    resultCode: 7,\n                    resultMessage: \"Unable to build certificate chain - more than one possible end-user certificate\"\n                };\n            }\n            return {\n                result: true,\n                resultCode: 0,\n                resultMessage: EMPTY_STRING\n            };\n        }\n        const basicCheck = async (path, checkDate) => {\n            for (let i = 0; i < path.length; i++) {\n                if ((path[i].notBefore.value > checkDate) ||\n                    (path[i].notAfter.value < checkDate)) {\n                    return {\n                        result: false,\n                        resultCode: 8,\n                        resultMessage: \"The certificate is either not yet valid or expired\"\n                    };\n                }\n            }\n            if (path.length < 2) {\n                return {\n                    result: false,\n                    resultCode: 9,\n                    resultMessage: \"Too short certificate path\"\n                };\n            }\n            for (let i = (path.length - 2); i >= 0; i--) {\n                if (path[i].issuer.isEqual(path[i].subject) === false) {\n                    if (path[i].issuer.isEqual(path[i + 1].subject) === false) {\n                        return {\n                            result: false,\n                            resultCode: 10,\n                            resultMessage: \"Incorrect name chaining\"\n                        };\n                    }\n                }\n            }\n            if ((this.crls.length !== 0) || (this.ocsps.length !== 0)) {\n                for (let i = 0; i < (path.length - 1); i++) {\n                    let ocspResult = 2;\n                    let crlResult = {\n                        status: 0,\n                        statusMessage: EMPTY_STRING\n                    };\n                    if (this.ocsps.length !== 0) {\n                        ocspResult = await findOCSP(path[i], path[i + 1]);\n                        switch (ocspResult) {\n                            case 0:\n                                continue;\n                            case 1:\n                                return {\n                                    result: false,\n                                    resultCode: 12,\n                                    resultMessage: \"One of certificates was revoked via OCSP response\"\n                                };\n                        }\n                    }\n                    if (this.crls.length !== 0) {\n                        crlResult = await findCRL(path[i]);\n                        if (crlResult.status === 0 && crlResult.result) {\n                            for (let j = 0; j < crlResult.result.length; j++) {\n                                const isCertificateRevoked = crlResult.result[j].crl.isCertificateRevoked(path[i]);\n                                if (isCertificateRevoked) {\n                                    return {\n                                        result: false,\n                                        resultCode: 12,\n                                        resultMessage: \"One of certificates had been revoked\"\n                                    };\n                                }\n                                const isCertificateCA = await checkForCA(crlResult.result[j].certificate, true);\n                                if (isCertificateCA.result === false) {\n                                    return {\n                                        result: false,\n                                        resultCode: 13,\n                                        resultMessage: \"CRL issuer certificate is not a CA certificate or does not have crlSign flag\"\n                                    };\n                                }\n                            }\n                        }\n                        else {\n                            if (passedWhenNotRevValues === false) {\n                                throw new ChainValidationError(ChainValidationCode.noRevocation, `No revocation values found for one of certificates: ${crlResult.statusMessage}`);\n                            }\n                        }\n                    }\n                    else {\n                        if (ocspResult === 2) {\n                            return {\n                                result: false,\n                                resultCode: 11,\n                                resultMessage: \"No revocation values found for one of certificates\"\n                            };\n                        }\n                    }\n                    if ((ocspResult === 2) && (crlResult.status === 2) && passedWhenNotRevValues) {\n                        const issuerCertificate = path[i + 1];\n                        let extensionFound = false;\n                        if (issuerCertificate.extensions) {\n                            for (const extension of issuerCertificate.extensions) {\n                                switch (extension.extnID) {\n                                    case id_CRLDistributionPoints:\n                                    case id_FreshestCRL:\n                                    case id_AuthorityInfoAccess:\n                                        extensionFound = true;\n                                        break;\n                                }\n                            }\n                        }\n                        if (extensionFound) {\n                            throw new ChainValidationError(ChainValidationCode.noRevocation, `No revocation values found for one of certificates: ${crlResult.statusMessage}`);\n                        }\n                    }\n                }\n            }\n            for (const [i, cert] of path.entries()) {\n                if (!i) {\n                    continue;\n                }\n                const result = await checkForCA(cert);\n                if (!result.result) {\n                    return {\n                        result: false,\n                        resultCode: 14,\n                        resultMessage: \"One of intermediate certificates is not a CA certificate\"\n                    };\n                }\n            }\n            return {\n                result: true\n            };\n        };\n        localCerts.push(...this.trustedCerts);\n        localCerts.push(...this.certs);\n        for (let i = 0; i < localCerts.length; i++) {\n            for (let j = 0; j < localCerts.length; j++) {\n                if (i === j)\n                    continue;\n                if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(localCerts[i].tbsView, localCerts[j].tbsView)) {\n                    localCerts.splice(j, 1);\n                    i = 0;\n                    break;\n                }\n            }\n        }\n        const leafCert = localCerts[localCerts.length - 1];\n        let result;\n        const certificatePath = [leafCert];\n        result = await buildPath(leafCert, crypto);\n        if (result.length === 0) {\n            throw new ChainValidationError(ChainValidationCode.noPath, \"Unable to find certificate path\");\n        }\n        for (let i = result.length - 1; i >= 0; i--) {\n            let found = false;\n            for (let j = 0; j < (result[i]).length; j++) {\n                const certificate = (result[i])[j];\n                for (let k = 0; k < this.trustedCerts.length; k++) {\n                    if (pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(certificate.tbsView, this.trustedCerts[k].tbsView)) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (found)\n                    break;\n            }\n            if (!found) {\n                result.splice(i, 1);\n            }\n        }\n        if (result.length === 0) {\n            throw new ChainValidationError(ChainValidationCode.noValidPath, \"No valid certificate paths found\");\n        }\n        let shortestLength = result[0].length;\n        let shortestIndex = 0;\n        for (let i = 0; i < result.length; i++) {\n            if (result[i].length < shortestLength) {\n                shortestLength = result[i].length;\n                shortestIndex = i;\n            }\n        }\n        for (let i = 0; i < result[shortestIndex].length; i++)\n            certificatePath.push((result[shortestIndex])[i]);\n        result = await basicCheck(certificatePath, this.checkDate);\n        if (result.result === false)\n            throw result;\n        return certificatePath;\n    }\n    async verify(parameters = {}, crypto = getCrypto(true)) {\n        function compareDNSName(name, constraint) {\n            const namePrepared = stringPrep(name);\n            const constraintPrepared = stringPrep(constraint);\n            const nameSplitted = namePrepared.split(\".\");\n            const constraintSplitted = constraintPrepared.split(\".\");\n            const nameLen = nameSplitted.length;\n            const constrLen = constraintSplitted.length;\n            if ((nameLen === 0) || (constrLen === 0) || (nameLen < constrLen)) {\n                return false;\n            }\n            for (let i = 0; i < nameLen; i++) {\n                if (nameSplitted[i].length === 0) {\n                    return false;\n                }\n            }\n            for (let i = 0; i < constrLen; i++) {\n                if (constraintSplitted[i].length === 0) {\n                    if (i === 0) {\n                        if (constrLen === 1) {\n                            return false;\n                        }\n                        continue;\n                    }\n                    return false;\n                }\n            }\n            for (let i = 0; i < constrLen; i++) {\n                if (constraintSplitted[constrLen - 1 - i].length === 0) {\n                    continue;\n                }\n                if (nameSplitted[nameLen - 1 - i].localeCompare(constraintSplitted[constrLen - 1 - i]) !== 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        function compareRFC822Name(name, constraint) {\n            const namePrepared = stringPrep(name);\n            const constraintPrepared = stringPrep(constraint);\n            const nameSplitted = namePrepared.split(\"@\");\n            const constraintSplitted = constraintPrepared.split(\"@\");\n            if ((nameSplitted.length === 0) || (constraintSplitted.length === 0) || (nameSplitted.length < constraintSplitted.length))\n                return false;\n            if (constraintSplitted.length === 1) {\n                const result = compareDNSName(nameSplitted[1], constraintSplitted[0]);\n                if (result) {\n                    const ns = nameSplitted[1].split(\".\");\n                    const cs = constraintSplitted[0].split(\".\");\n                    if (cs[0].length === 0)\n                        return true;\n                    return ns.length === cs.length;\n                }\n                return false;\n            }\n            return (namePrepared.localeCompare(constraintPrepared) === 0);\n        }\n        function compareUniformResourceIdentifier(name, constraint) {\n            let namePrepared = stringPrep(name);\n            const constraintPrepared = stringPrep(constraint);\n            const ns = namePrepared.split(\"/\");\n            const cs = constraintPrepared.split(\"/\");\n            if (cs.length > 1)\n                return false;\n            if (ns.length > 1) {\n                for (let i = 0; i < ns.length; i++) {\n                    if ((ns[i].length > 0) && (ns[i].charAt(ns[i].length - 1) !== \":\")) {\n                        const nsPort = ns[i].split(\":\");\n                        namePrepared = nsPort[0];\n                        break;\n                    }\n                }\n            }\n            const result = compareDNSName(namePrepared, constraintPrepared);\n            if (result) {\n                const nameSplitted = namePrepared.split(\".\");\n                const constraintSplitted = constraintPrepared.split(\".\");\n                if (constraintSplitted[0].length === 0)\n                    return true;\n                return nameSplitted.length === constraintSplitted.length;\n            }\n            return false;\n        }\n        function compareIPAddress(name, constraint) {\n            const nameView = name.valueBlock.valueHexView;\n            const constraintView = constraint.valueBlock.valueHexView;\n            if ((nameView.length === 4) && (constraintView.length === 8)) {\n                for (let i = 0; i < 4; i++) {\n                    if ((nameView[i] ^ constraintView[i]) & constraintView[i + 4])\n                        return false;\n                }\n                return true;\n            }\n            if ((nameView.length === 16) && (constraintView.length === 32)) {\n                for (let i = 0; i < 16; i++) {\n                    if ((nameView[i] ^ constraintView[i]) & constraintView[i + 16])\n                        return false;\n                }\n                return true;\n            }\n            return false;\n        }\n        function compareDirectoryName(name, constraint) {\n            if ((name.typesAndValues.length === 0) || (constraint.typesAndValues.length === 0))\n                return true;\n            if (name.typesAndValues.length < constraint.typesAndValues.length)\n                return false;\n            let result = true;\n            let nameStart = 0;\n            for (let i = 0; i < constraint.typesAndValues.length; i++) {\n                let localResult = false;\n                for (let j = nameStart; j < name.typesAndValues.length; j++) {\n                    localResult = name.typesAndValues[j].isEqual(constraint.typesAndValues[i]);\n                    if (name.typesAndValues[j].type === constraint.typesAndValues[i].type)\n                        result = result && localResult;\n                    if (localResult === true) {\n                        if ((nameStart === 0) || (nameStart === j)) {\n                            nameStart = j + 1;\n                            break;\n                        }\n                        else\n                            return false;\n                    }\n                }\n                if (localResult === false)\n                    return false;\n            }\n            return (nameStart === 0) ? false : result;\n        }\n        try {\n            if (this.certs.length === 0)\n                throw new Error(\"Empty certificate array\");\n            const passedWhenNotRevValues = parameters.passedWhenNotRevValues || false;\n            const initialPolicySet = parameters.initialPolicySet || [id_AnyPolicy];\n            const initialExplicitPolicy = parameters.initialExplicitPolicy || false;\n            const initialPolicyMappingInhibit = parameters.initialPolicyMappingInhibit || false;\n            const initialInhibitPolicy = parameters.initialInhibitPolicy || false;\n            const initialPermittedSubtreesSet = parameters.initialPermittedSubtreesSet || [];\n            const initialExcludedSubtreesSet = parameters.initialExcludedSubtreesSet || [];\n            const initialRequiredNameForms = parameters.initialRequiredNameForms || [];\n            let explicitPolicyIndicator = initialExplicitPolicy;\n            let policyMappingInhibitIndicator = initialPolicyMappingInhibit;\n            let inhibitAnyPolicyIndicator = initialInhibitPolicy;\n            const pendingConstraints = [\n                false,\n                false,\n                false,\n            ];\n            let explicitPolicyPending = 0;\n            let policyMappingInhibitPending = 0;\n            let inhibitAnyPolicyPending = 0;\n            let permittedSubtrees = initialPermittedSubtreesSet;\n            let excludedSubtrees = initialExcludedSubtreesSet;\n            const requiredNameForms = initialRequiredNameForms;\n            let pathDepth = 1;\n            this.certs = await this.sort(passedWhenNotRevValues, crypto);\n            const allPolicies = [];\n            allPolicies.push(id_AnyPolicy);\n            const policiesAndCerts = [];\n            const anyPolicyArray = new Array(this.certs.length - 1);\n            for (let ii = 0; ii < (this.certs.length - 1); ii++)\n                anyPolicyArray[ii] = true;\n            policiesAndCerts.push(anyPolicyArray);\n            const policyMappings = new Array(this.certs.length - 1);\n            const certPolicies = new Array(this.certs.length - 1);\n            let explicitPolicyStart = (explicitPolicyIndicator) ? (this.certs.length - 1) : (-1);\n            for (let i = (this.certs.length - 2); i >= 0; i--, pathDepth++) {\n                const cert = this.certs[i];\n                if (cert.extensions) {\n                    for (let j = 0; j < cert.extensions.length; j++) {\n                        const extension = cert.extensions[j];\n                        if (extension.extnID === id_CertificatePolicies) {\n                            certPolicies[i] = extension.parsedValue;\n                            for (let s = 0; s < allPolicies.length; s++) {\n                                if (allPolicies[s] === id_AnyPolicy) {\n                                    delete (policiesAndCerts[s])[i];\n                                    break;\n                                }\n                            }\n                            for (let k = 0; k < extension.parsedValue.certificatePolicies.length; k++) {\n                                let policyIndex = (-1);\n                                const policyId = extension.parsedValue.certificatePolicies[k].policyIdentifier;\n                                for (let s = 0; s < allPolicies.length; s++) {\n                                    if (policyId === allPolicies[s]) {\n                                        policyIndex = s;\n                                        break;\n                                    }\n                                }\n                                if (policyIndex === (-1)) {\n                                    allPolicies.push(policyId);\n                                    const certArray = new Array(this.certs.length - 1);\n                                    certArray[i] = true;\n                                    policiesAndCerts.push(certArray);\n                                }\n                                else\n                                    (policiesAndCerts[policyIndex])[i] = true;\n                            }\n                        }\n                        if (extension.extnID === id_PolicyMappings) {\n                            if (policyMappingInhibitIndicator) {\n                                return {\n                                    result: false,\n                                    resultCode: 98,\n                                    resultMessage: \"Policy mapping prohibited\"\n                                };\n                            }\n                            policyMappings[i] = extension.parsedValue;\n                        }\n                        if (extension.extnID === id_PolicyConstraints) {\n                            if (explicitPolicyIndicator === false) {\n                                if (extension.parsedValue.requireExplicitPolicy === 0) {\n                                    explicitPolicyIndicator = true;\n                                    explicitPolicyStart = i;\n                                }\n                                else {\n                                    if (pendingConstraints[0] === false) {\n                                        pendingConstraints[0] = true;\n                                        explicitPolicyPending = extension.parsedValue.requireExplicitPolicy;\n                                    }\n                                    else\n                                        explicitPolicyPending = (explicitPolicyPending > extension.parsedValue.requireExplicitPolicy) ? extension.parsedValue.requireExplicitPolicy : explicitPolicyPending;\n                                }\n                                if (extension.parsedValue.inhibitPolicyMapping === 0)\n                                    policyMappingInhibitIndicator = true;\n                                else {\n                                    if (pendingConstraints[1] === false) {\n                                        pendingConstraints[1] = true;\n                                        policyMappingInhibitPending = extension.parsedValue.inhibitPolicyMapping + 1;\n                                    }\n                                    else\n                                        policyMappingInhibitPending = (policyMappingInhibitPending > (extension.parsedValue.inhibitPolicyMapping + 1)) ? (extension.parsedValue.inhibitPolicyMapping + 1) : policyMappingInhibitPending;\n                                }\n                            }\n                        }\n                        if (extension.extnID === id_InhibitAnyPolicy) {\n                            if (inhibitAnyPolicyIndicator === false) {\n                                if (extension.parsedValue.valueBlock.valueDec === 0)\n                                    inhibitAnyPolicyIndicator = true;\n                                else {\n                                    if (pendingConstraints[2] === false) {\n                                        pendingConstraints[2] = true;\n                                        inhibitAnyPolicyPending = extension.parsedValue.valueBlock.valueDec;\n                                    }\n                                    else\n                                        inhibitAnyPolicyPending = (inhibitAnyPolicyPending > extension.parsedValue.valueBlock.valueDec) ? extension.parsedValue.valueBlock.valueDec : inhibitAnyPolicyPending;\n                                }\n                            }\n                        }\n                    }\n                    if (inhibitAnyPolicyIndicator === true) {\n                        let policyIndex = (-1);\n                        for (let searchAnyPolicy = 0; searchAnyPolicy < allPolicies.length; searchAnyPolicy++) {\n                            if (allPolicies[searchAnyPolicy] === id_AnyPolicy) {\n                                policyIndex = searchAnyPolicy;\n                                break;\n                            }\n                        }\n                        if (policyIndex !== (-1))\n                            delete (policiesAndCerts[0])[i];\n                    }\n                    if (explicitPolicyIndicator === false) {\n                        if (pendingConstraints[0] === true) {\n                            explicitPolicyPending--;\n                            if (explicitPolicyPending === 0) {\n                                explicitPolicyIndicator = true;\n                                explicitPolicyStart = i;\n                                pendingConstraints[0] = false;\n                            }\n                        }\n                    }\n                    if (policyMappingInhibitIndicator === false) {\n                        if (pendingConstraints[1] === true) {\n                            policyMappingInhibitPending--;\n                            if (policyMappingInhibitPending === 0) {\n                                policyMappingInhibitIndicator = true;\n                                pendingConstraints[1] = false;\n                            }\n                        }\n                    }\n                    if (inhibitAnyPolicyIndicator === false) {\n                        if (pendingConstraints[2] === true) {\n                            inhibitAnyPolicyPending--;\n                            if (inhibitAnyPolicyPending === 0) {\n                                inhibitAnyPolicyIndicator = true;\n                                pendingConstraints[2] = false;\n                            }\n                        }\n                    }\n                }\n            }\n            for (let i = 0; i < (this.certs.length - 1); i++) {\n                if ((i < (this.certs.length - 2)) && (typeof policyMappings[i + 1] !== \"undefined\")) {\n                    for (let k = 0; k < policyMappings[i + 1].mappings.length; k++) {\n                        if ((policyMappings[i + 1].mappings[k].issuerDomainPolicy === id_AnyPolicy) || (policyMappings[i + 1].mappings[k].subjectDomainPolicy === id_AnyPolicy)) {\n                            return {\n                                result: false,\n                                resultCode: 99,\n                                resultMessage: \"The \\\"anyPolicy\\\" should not be a part of policy mapping scheme\"\n                            };\n                        }\n                        let issuerDomainPolicyIndex = (-1);\n                        let subjectDomainPolicyIndex = (-1);\n                        for (let n = 0; n < allPolicies.length; n++) {\n                            if (allPolicies[n] === policyMappings[i + 1].mappings[k].issuerDomainPolicy)\n                                issuerDomainPolicyIndex = n;\n                            if (allPolicies[n] === policyMappings[i + 1].mappings[k].subjectDomainPolicy)\n                                subjectDomainPolicyIndex = n;\n                        }\n                        if (typeof (policiesAndCerts[issuerDomainPolicyIndex])[i] !== \"undefined\")\n                            delete (policiesAndCerts[issuerDomainPolicyIndex])[i];\n                        for (let j = 0; j < certPolicies[i].certificatePolicies.length; j++) {\n                            if (policyMappings[i + 1].mappings[k].subjectDomainPolicy === certPolicies[i].certificatePolicies[j].policyIdentifier) {\n                                if ((issuerDomainPolicyIndex !== (-1)) && (subjectDomainPolicyIndex !== (-1))) {\n                                    for (let m = 0; m <= i; m++) {\n                                        if (typeof (policiesAndCerts[subjectDomainPolicyIndex])[m] !== \"undefined\") {\n                                            (policiesAndCerts[issuerDomainPolicyIndex])[m] = true;\n                                            delete (policiesAndCerts[subjectDomainPolicyIndex])[m];\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            for (let i = 0; i < allPolicies.length; i++) {\n                if (allPolicies[i] === id_AnyPolicy) {\n                    for (let j = 0; j < explicitPolicyStart; j++)\n                        delete (policiesAndCerts[i])[j];\n                }\n            }\n            const authConstrPolicies = [];\n            for (let i = 0; i < policiesAndCerts.length; i++) {\n                let found = true;\n                for (let j = 0; j < (this.certs.length - 1); j++) {\n                    let anyPolicyFound = false;\n                    if ((j < explicitPolicyStart) && (allPolicies[i] === id_AnyPolicy) && (allPolicies.length > 1)) {\n                        found = false;\n                        break;\n                    }\n                    if (typeof (policiesAndCerts[i])[j] === \"undefined\") {\n                        if (j >= explicitPolicyStart) {\n                            for (let k = 0; k < allPolicies.length; k++) {\n                                if (allPolicies[k] === id_AnyPolicy) {\n                                    if ((policiesAndCerts[k])[j] === true)\n                                        anyPolicyFound = true;\n                                    break;\n                                }\n                            }\n                        }\n                        if (!anyPolicyFound) {\n                            found = false;\n                            break;\n                        }\n                    }\n                }\n                if (found === true)\n                    authConstrPolicies.push(allPolicies[i]);\n            }\n            let userConstrPolicies = [];\n            if ((initialPolicySet.length === 1) && (initialPolicySet[0] === id_AnyPolicy) && (explicitPolicyIndicator === false))\n                userConstrPolicies = initialPolicySet;\n            else {\n                if ((authConstrPolicies.length === 1) && (authConstrPolicies[0] === id_AnyPolicy))\n                    userConstrPolicies = initialPolicySet;\n                else {\n                    for (let i = 0; i < authConstrPolicies.length; i++) {\n                        for (let j = 0; j < initialPolicySet.length; j++) {\n                            if ((initialPolicySet[j] === authConstrPolicies[i]) || (initialPolicySet[j] === id_AnyPolicy)) {\n                                userConstrPolicies.push(authConstrPolicies[i]);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            const policyResult = {\n                result: (userConstrPolicies.length > 0),\n                resultCode: 0,\n                resultMessage: (userConstrPolicies.length > 0) ? EMPTY_STRING : \"Zero \\\"userConstrPolicies\\\" array, no intersections with \\\"authConstrPolicies\\\"\",\n                authConstrPolicies,\n                userConstrPolicies,\n                explicitPolicyIndicator,\n                policyMappings,\n                certificatePath: this.certs\n            };\n            if (userConstrPolicies.length === 0)\n                return policyResult;\n            if (policyResult.result === false)\n                return policyResult;\n            pathDepth = 1;\n            for (let i = (this.certs.length - 2); i >= 0; i--, pathDepth++) {\n                const cert = this.certs[i];\n                let subjectAltNames = [];\n                let certPermittedSubtrees = [];\n                let certExcludedSubtrees = [];\n                if (cert.extensions) {\n                    for (let j = 0; j < cert.extensions.length; j++) {\n                        const extension = cert.extensions[j];\n                        if (extension.extnID === id_NameConstraints) {\n                            if (\"permittedSubtrees\" in extension.parsedValue)\n                                certPermittedSubtrees = certPermittedSubtrees.concat(extension.parsedValue.permittedSubtrees);\n                            if (\"excludedSubtrees\" in extension.parsedValue)\n                                certExcludedSubtrees = certExcludedSubtrees.concat(extension.parsedValue.excludedSubtrees);\n                        }\n                        if (extension.extnID === id_SubjectAltName)\n                            subjectAltNames = subjectAltNames.concat(extension.parsedValue.altNames);\n                    }\n                }\n                let formFound = (requiredNameForms.length <= 0);\n                for (let j = 0; j < requiredNameForms.length; j++) {\n                    switch (requiredNameForms[j].base.type) {\n                        case 4:\n                            {\n                                if (requiredNameForms[j].base.value.typesAndValues.length !== cert.subject.typesAndValues.length)\n                                    continue;\n                                formFound = true;\n                                for (let k = 0; k < cert.subject.typesAndValues.length; k++) {\n                                    if (cert.subject.typesAndValues[k].type !== requiredNameForms[j].base.value.typesAndValues[k].type) {\n                                        formFound = false;\n                                        break;\n                                    }\n                                }\n                                if (formFound === true)\n                                    break;\n                            }\n                            break;\n                        default:\n                    }\n                }\n                if (formFound === false) {\n                    policyResult.result = false;\n                    policyResult.resultCode = 21;\n                    policyResult.resultMessage = \"No necessary name form found\";\n                    throw policyResult;\n                }\n                const constrGroups = [\n                    [],\n                    [],\n                    [],\n                    [],\n                    [],\n                ];\n                for (let j = 0; j < permittedSubtrees.length; j++) {\n                    switch (permittedSubtrees[j].base.type) {\n                        case 1:\n                            constrGroups[0].push(permittedSubtrees[j]);\n                            break;\n                        case 2:\n                            constrGroups[1].push(permittedSubtrees[j]);\n                            break;\n                        case 4:\n                            constrGroups[2].push(permittedSubtrees[j]);\n                            break;\n                        case 6:\n                            constrGroups[3].push(permittedSubtrees[j]);\n                            break;\n                        case 7:\n                            constrGroups[4].push(permittedSubtrees[j]);\n                            break;\n                        default:\n                    }\n                }\n                for (let p = 0; p < 5; p++) {\n                    let groupPermitted = false;\n                    let valueExists = false;\n                    const group = constrGroups[p];\n                    for (let j = 0; j < group.length; j++) {\n                        switch (p) {\n                            case 0:\n                                if (subjectAltNames.length > 0) {\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\n                                        if (subjectAltNames[k].type === 1) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareRFC822Name(subjectAltNames[k].value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                else {\n                                    for (let k = 0; k < cert.subject.typesAndValues.length; k++) {\n                                        if ((cert.subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||\n                                            (cert.subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareRFC822Name(cert.subject.typesAndValues[k].value.valueBlock.value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                break;\n                            case 1:\n                                if (subjectAltNames.length > 0) {\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\n                                        if (subjectAltNames[k].type === 2) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareDNSName(subjectAltNames[k].value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                break;\n                            case 2:\n                                valueExists = true;\n                                groupPermitted = compareDirectoryName(cert.subject, group[j].base.value);\n                                break;\n                            case 3:\n                                if (subjectAltNames.length > 0) {\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\n                                        if (subjectAltNames[k].type === 6) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareUniformResourceIdentifier(subjectAltNames[k].value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                break;\n                            case 4:\n                                if (subjectAltNames.length > 0) {\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\n                                        if (subjectAltNames[k].type === 7) {\n                                            valueExists = true;\n                                            groupPermitted = groupPermitted || compareIPAddress(subjectAltNames[k].value, group[j].base.value);\n                                        }\n                                    }\n                                }\n                                break;\n                            default:\n                        }\n                        if (groupPermitted)\n                            break;\n                    }\n                    if ((groupPermitted === false) && (group.length > 0) && valueExists) {\n                        policyResult.result = false;\n                        policyResult.resultCode = 41;\n                        policyResult.resultMessage = \"Failed to meet \\\"permitted sub-trees\\\" name constraint\";\n                        throw policyResult;\n                    }\n                }\n                let excluded = false;\n                for (let j = 0; j < excludedSubtrees.length; j++) {\n                    switch (excludedSubtrees[j].base.type) {\n                        case 1:\n                            if (subjectAltNames.length >= 0) {\n                                for (let k = 0; k < subjectAltNames.length; k++) {\n                                    if (subjectAltNames[k].type === 1)\n                                        excluded = excluded || compareRFC822Name(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            else {\n                                for (let k = 0; k < cert.subject.typesAndValues.length; k++) {\n                                    if ((cert.subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||\n                                        (cert.subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\"))\n                                        excluded = excluded || compareRFC822Name(cert.subject.typesAndValues[k].value.valueBlock.value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            break;\n                        case 2:\n                            if (subjectAltNames.length > 0) {\n                                for (let k = 0; k < subjectAltNames.length; k++) {\n                                    if (subjectAltNames[k].type === 2)\n                                        excluded = excluded || compareDNSName(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            break;\n                        case 4:\n                            excluded = excluded || compareDirectoryName(cert.subject, excludedSubtrees[j].base.value);\n                            break;\n                        case 6:\n                            if (subjectAltNames.length > 0) {\n                                for (let k = 0; k < subjectAltNames.length; k++) {\n                                    if (subjectAltNames[k].type === 6)\n                                        excluded = excluded || compareUniformResourceIdentifier(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            break;\n                        case 7:\n                            if (subjectAltNames.length > 0) {\n                                for (let k = 0; k < subjectAltNames.length; k++) {\n                                    if (subjectAltNames[k].type === 7)\n                                        excluded = excluded || compareIPAddress(subjectAltNames[k].value, excludedSubtrees[j].base.value);\n                                }\n                            }\n                            break;\n                        default:\n                    }\n                    if (excluded)\n                        break;\n                }\n                if (excluded === true) {\n                    policyResult.result = false;\n                    policyResult.resultCode = 42;\n                    policyResult.resultMessage = \"Failed to meet \\\"excluded sub-trees\\\" name constraint\";\n                    throw policyResult;\n                }\n                permittedSubtrees = permittedSubtrees.concat(certPermittedSubtrees);\n                excludedSubtrees = excludedSubtrees.concat(certExcludedSubtrees);\n            }\n            return policyResult;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                if (error instanceof ChainValidationError) {\n                    return {\n                        result: false,\n                        resultCode: error.code,\n                        resultMessage: error.message,\n                        error: error,\n                    };\n                }\n                return {\n                    result: false,\n                    resultCode: ChainValidationCode.unknown,\n                    resultMessage: error.message,\n                    error: error,\n                };\n            }\n            if (error && typeof error === \"object\" && \"resultMessage\" in error) {\n                return error;\n            }\n            return {\n                result: false,\n                resultCode: -1,\n                resultMessage: `${error}`,\n            };\n        }\n    }\n}\n\nconst TBS_RESPONSE_DATA = \"tbsResponseData\";\nconst SIGNATURE_ALGORITHM$3 = \"signatureAlgorithm\";\nconst SIGNATURE$2 = \"signature\";\nconst CERTS$1 = \"certs\";\nconst BASIC_OCSP_RESPONSE = \"BasicOCSPResponse\";\nconst BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA = `${BASIC_OCSP_RESPONSE}.${TBS_RESPONSE_DATA}`;\nconst BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM = `${BASIC_OCSP_RESPONSE}.${SIGNATURE_ALGORITHM$3}`;\nconst BASIC_OCSP_RESPONSE_SIGNATURE = `${BASIC_OCSP_RESPONSE}.${SIGNATURE$2}`;\nconst BASIC_OCSP_RESPONSE_CERTS = `${BASIC_OCSP_RESPONSE}.${CERTS$1}`;\nconst CLEAR_PROPS$g = [\n    BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA,\n    BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM,\n    BASIC_OCSP_RESPONSE_SIGNATURE,\n    BASIC_OCSP_RESPONSE_CERTS\n];\nclass BasicOCSPResponse extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.tbsResponseData = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TBS_RESPONSE_DATA, BasicOCSPResponse.defaultValues(TBS_RESPONSE_DATA));\n        this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_ALGORITHM$3, BasicOCSPResponse.defaultValues(SIGNATURE_ALGORITHM$3));\n        this.signature = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE$2, BasicOCSPResponse.defaultValues(SIGNATURE$2));\n        if (CERTS$1 in parameters) {\n            this.certs = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERTS$1, BasicOCSPResponse.defaultValues(CERTS$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS_RESPONSE_DATA:\n                return new ResponseData();\n            case SIGNATURE_ALGORITHM$3:\n                return new AlgorithmIdentifier();\n            case SIGNATURE$2:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            case CERTS$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case \"type\":\n                {\n                    let comparisonResult = ((ResponseData.compareWithDefault(\"tbs\", memberValue.tbs)) &&\n                        (ResponseData.compareWithDefault(\"responderID\", memberValue.responderID)) &&\n                        (ResponseData.compareWithDefault(\"producedAt\", memberValue.producedAt)) &&\n                        (ResponseData.compareWithDefault(\"responses\", memberValue.responses)));\n                    if (\"responseExtensions\" in memberValue)\n                        comparisonResult = comparisonResult && (ResponseData.compareWithDefault(\"responseExtensions\", memberValue.responseExtensions));\n                    return comparisonResult;\n                }\n            case SIGNATURE_ALGORITHM$3:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case SIGNATURE$2:\n                return (memberValue.isEqual(BasicOCSPResponse.defaultValues(memberName)));\n            case CERTS$1:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || BASIC_OCSP_RESPONSE),\n            value: [\n                ResponseData.schema(names.tbsResponseData || {\n                    names: {\n                        blockName: BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA\n                    }\n                }),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n                    names: {\n                        blockName: BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.signature || BASIC_OCSP_RESPONSE_SIGNATURE) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                            value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                                    name: BASIC_OCSP_RESPONSE_CERTS,\n                                    value: Certificate.schema(names.certs || {})\n                                })]\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$g);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, BasicOCSPResponse.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsResponseData = new ResponseData({ schema: asn1.result[BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA] });\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM] });\n        this.signature = asn1.result[BASIC_OCSP_RESPONSE_SIGNATURE];\n        if (BASIC_OCSP_RESPONSE_CERTS in asn1.result) {\n            this.certs = Array.from(asn1.result[BASIC_OCSP_RESPONSE_CERTS], element => new Certificate({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.tbsResponseData.toSchema());\n        outputArray.push(this.signatureAlgorithm.toSchema());\n        outputArray.push(this.signature);\n        if (this.certs) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                        value: Array.from(this.certs, o => o.toSchema())\n                    })\n                ]\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            tbsResponseData: this.tbsResponseData.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signature: this.signature.toJSON(),\n        };\n        if (this.certs) {\n            res.certs = Array.from(this.certs, o => o.toJSON());\n        }\n        return res;\n    }\n    async getCertificateStatus(certificate, issuerCertificate, crypto = getCrypto(true)) {\n        const result = {\n            isForCertificate: false,\n            status: 2\n        };\n        const hashesObject = {};\n        const certIDs = [];\n        for (const response of this.tbsResponseData.responses) {\n            const hashAlgorithm = crypto.getAlgorithmByOID(response.certID.hashAlgorithm.algorithmId, true, \"CertID.hashAlgorithm\");\n            if (!hashesObject[hashAlgorithm.name]) {\n                hashesObject[hashAlgorithm.name] = 1;\n                const certID = new CertID();\n                certIDs.push(certID);\n                await certID.createForCertificate(certificate, {\n                    hashAlgorithm: hashAlgorithm.name,\n                    issuerCertificate\n                }, crypto);\n            }\n        }\n        for (const response of this.tbsResponseData.responses) {\n            for (const id of certIDs) {\n                if (response.certID.isEqual(id)) {\n                    result.isForCertificate = true;\n                    try {\n                        switch (response.certStatus.idBlock.isConstructed) {\n                            case true:\n                                if (response.certStatus.idBlock.tagNumber === 1)\n                                    result.status = 1;\n                                break;\n                            case false:\n                                switch (response.certStatus.idBlock.tagNumber) {\n                                    case 0:\n                                        result.status = 0;\n                                        break;\n                                    case 2:\n                                        result.status = 2;\n                                        break;\n                                    default:\n                                }\n                                break;\n                            default:\n                        }\n                    }\n                    catch (ex) {\n                    }\n                    return result;\n                }\n            }\n        }\n        return result;\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        if (!privateKey) {\n            throw new Error(\"Need to provide a private key for signing\");\n        }\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const algorithm = signatureParams.parameters.algorithm;\n        if (!(\"name\" in algorithm)) {\n            throw new Error(\"Empty algorithm\");\n        }\n        this.signatureAlgorithm = signatureParams.signatureAlgorithm;\n        this.tbsResponseData.tbsView = new Uint8Array(this.tbsResponseData.toSchema(true).toBER());\n        const signature = await crypto.signWithPrivateKey(this.tbsResponseData.tbsView, privateKey, { algorithm });\n        this.signature = new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ valueHex: signature });\n    }\n    async verify(params = {}, crypto = getCrypto(true)) {\n        let signerCert = null;\n        let certIndex = -1;\n        const trustedCerts = params.trustedCerts || [];\n        if (!this.certs) {\n            throw new Error(\"No certificates attached to the BasicOCSPResponse\");\n        }\n        switch (true) {\n            case (this.tbsResponseData.responderID instanceof RelativeDistinguishedNames):\n                for (const [index, certificate] of this.certs.entries()) {\n                    if (certificate.subject.isEqual(this.tbsResponseData.responderID)) {\n                        certIndex = index;\n                        break;\n                    }\n                }\n                break;\n            case (this.tbsResponseData.responderID instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString):\n                for (const [index, cert] of this.certs.entries()) {\n                    const hash = await crypto.digest({ name: \"sha-1\" }, cert.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);\n                    if (pvutils__WEBPACK_IMPORTED_MODULE_2__.isEqualBuffer(hash, this.tbsResponseData.responderID.valueBlock.valueHex)) {\n                        certIndex = index;\n                        break;\n                    }\n                }\n                break;\n            default:\n                throw new Error(\"Wrong value for responderID\");\n        }\n        if (certIndex === (-1))\n            throw new Error(\"Correct certificate was not found in OCSP response\");\n        signerCert = this.certs[certIndex];\n        const additionalCerts = [signerCert];\n        for (const cert of this.certs) {\n            const caCert = await checkCA(cert, signerCert);\n            if (caCert) {\n                additionalCerts.push(caCert);\n            }\n        }\n        const certChain = new CertificateChainValidationEngine({\n            certs: additionalCerts,\n            trustedCerts,\n        });\n        const verificationResult = await certChain.verify({}, crypto);\n        if (!verificationResult.result) {\n            throw new Error(\"Validation of signer's certificate failed\");\n        }\n        return crypto.verifyWithPublicKey(this.tbsResponseData.tbsView, this.signature, this.certs[certIndex].subjectPublicKeyInfo, this.signatureAlgorithm);\n    }\n}\nBasicOCSPResponse.CLASS_NAME = \"BasicOCSPResponse\";\n\nconst TBS$1 = \"tbs\";\nconst VERSION$6 = \"version\";\nconst SUBJECT = \"subject\";\nconst SPKI = \"subjectPublicKeyInfo\";\nconst ATTRIBUTES$1 = \"attributes\";\nconst SIGNATURE_ALGORITHM$2 = \"signatureAlgorithm\";\nconst SIGNATURE_VALUE = \"signatureValue\";\nconst CSR_INFO = \"CertificationRequestInfo\";\nconst CSR_INFO_VERSION = `${CSR_INFO}.version`;\nconst CSR_INFO_SUBJECT = `${CSR_INFO}.subject`;\nconst CSR_INFO_SPKI = `${CSR_INFO}.subjectPublicKeyInfo`;\nconst CSR_INFO_ATTRS = `${CSR_INFO}.attributes`;\nconst CLEAR_PROPS$f = [\n    CSR_INFO,\n    CSR_INFO_VERSION,\n    CSR_INFO_SUBJECT,\n    CSR_INFO_SPKI,\n    CSR_INFO_ATTRS,\n    SIGNATURE_ALGORITHM$2,\n    SIGNATURE_VALUE\n];\nfunction CertificationRequestInfo(parameters = {}) {\n    const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n    return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n        name: (names.CertificationRequestInfo || CSR_INFO),\n        value: [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.CertificationRequestInfoVersion || CSR_INFO_VERSION) }),\n            RelativeDistinguishedNames.schema(names.subject || {\n                names: {\n                    blockName: CSR_INFO_SUBJECT\n                }\n            }),\n            PublicKeyInfo.schema({\n                names: {\n                    blockName: CSR_INFO_SPKI\n                }\n            }),\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                        optional: true,\n                        name: (names.CertificationRequestInfoAttributes || CSR_INFO_ATTRS),\n                        value: Attribute.schema(names.attributes || {})\n                    })\n                ]\n            })\n        ]\n    }));\n}\nclass CertificationRequest extends PkiObject {\n    get tbs() {\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TBS$1, CertificationRequest.defaultValues(TBS$1)));\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$6, CertificationRequest.defaultValues(VERSION$6));\n        this.subject = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SUBJECT, CertificationRequest.defaultValues(SUBJECT));\n        this.subjectPublicKeyInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SPKI, CertificationRequest.defaultValues(SPKI));\n        if (ATTRIBUTES$1 in parameters) {\n            this.attributes = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ATTRIBUTES$1, CertificationRequest.defaultValues(ATTRIBUTES$1));\n        }\n        this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_ALGORITHM$2, CertificationRequest.defaultValues(SIGNATURE_ALGORITHM$2));\n        this.signatureValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_VALUE, CertificationRequest.defaultValues(SIGNATURE_VALUE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS$1:\n                return EMPTY_BUFFER;\n            case VERSION$6:\n                return 0;\n            case SUBJECT:\n                return new RelativeDistinguishedNames();\n            case SPKI:\n                return new PublicKeyInfo();\n            case ATTRIBUTES$1:\n                return [];\n            case SIGNATURE_ALGORITHM$2:\n                return new AlgorithmIdentifier();\n            case SIGNATURE_VALUE:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                CertificationRequestInfo(names.certificationRequestInfo || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    name: (names.signatureAlgorithm || SIGNATURE_ALGORITHM$2),\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier(),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ optional: true })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.signatureValue || SIGNATURE_VALUE) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$f);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, CertificationRequest.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.CertificationRequestInfo.valueBeforeDecodeView;\n        this.version = asn1.result[CSR_INFO_VERSION].valueBlock.valueDec;\n        this.subject = new RelativeDistinguishedNames({ schema: asn1.result[CSR_INFO_SUBJECT] });\n        this.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[CSR_INFO_SPKI] });\n        if (CSR_INFO_ATTRS in asn1.result) {\n            this.attributes = Array.from(asn1.result[CSR_INFO_ATTRS], element => new Attribute({ schema: element }));\n        }\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signatureValue = asn1.result.signatureValue;\n    }\n    encodeTBS() {\n        const outputArray = [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }),\n            this.subject.toSchema(),\n            this.subjectPublicKeyInfo.toSchema()\n        ];\n        if (ATTRIBUTES$1 in this) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: Array.from(this.attributes || [], o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (encodeFlag === false) {\n            if (this.tbsView.byteLength === 0) {\n                return CertificationRequest.schema();\n            }\n            const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"PKCS#10 Certificate Request\");\n            tbsSchema = asn1.result;\n        }\n        else {\n            tbsSchema = this.encodeTBS();\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                tbsSchema,\n                this.signatureAlgorithm.toSchema(),\n                this.signatureValue\n            ]\n        }));\n    }\n    toJSON() {\n        const object = {\n            tbs: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.Convert.ToHex(this.tbsView),\n            version: this.version,\n            subject: this.subject.toJSON(),\n            subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signatureValue: this.signatureValue.toJSON(),\n        };\n        if (ATTRIBUTES$1 in this) {\n            object.attributes = Array.from(this.attributes || [], o => o.toJSON());\n        }\n        return object;\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        if (!privateKey) {\n            throw new Error(\"Need to provide a private key for signing\");\n        }\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const parameters = signatureParams.parameters;\n        this.signatureAlgorithm = signatureParams.signatureAlgorithm;\n        this.tbsView = new Uint8Array(this.encodeTBS().toBER());\n        const signature = await crypto.signWithPrivateKey(this.tbsView, privateKey, parameters);\n        this.signatureValue = new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ valueHex: signature });\n    }\n    async verify(crypto = getCrypto(true)) {\n        return crypto.verifyWithPublicKey(this.tbsView, this.signatureValue, this.subjectPublicKeyInfo, this.signatureAlgorithm);\n    }\n    async getPublicKey(parameters, crypto = getCrypto(true)) {\n        return crypto.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\n    }\n}\nCertificationRequest.CLASS_NAME = \"CertificationRequest\";\n\nconst DIGEST_ALGORITHM$1 = \"digestAlgorithm\";\nconst DIGEST = \"digest\";\nconst CLEAR_PROPS$e = [\n    DIGEST_ALGORITHM$1,\n    DIGEST\n];\nclass DigestInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.digestAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DIGEST_ALGORITHM$1, DigestInfo.defaultValues(DIGEST_ALGORITHM$1));\n        this.digest = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DIGEST, DigestInfo.defaultValues(DIGEST));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case DIGEST_ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case DIGEST:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case DIGEST_ALGORITHM$1:\n                return ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\n                    ((\"algorithmParams\" in memberValue) === false));\n            case DIGEST:\n                return (memberValue.isEqual(DigestInfo.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.digestAlgorithm || {\n                    names: {\n                        blockName: DIGEST_ALGORITHM$1\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.digest || DIGEST) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$e);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, DigestInfo.schema({\n            names: {\n                digestAlgorithm: {\n                    names: {\n                        blockName: DIGEST_ALGORITHM$1\n                    }\n                },\n                digest: DIGEST\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\n        this.digest = asn1.result.digest;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.digestAlgorithm.toSchema(),\n                this.digest\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            digestAlgorithm: this.digestAlgorithm.toJSON(),\n            digest: this.digest.toJSON(),\n        };\n    }\n}\nDigestInfo.CLASS_NAME = \"DigestInfo\";\n\nconst E_CONTENT_TYPE = \"eContentType\";\nconst E_CONTENT = \"eContent\";\nconst CLEAR_PROPS$d = [\n    E_CONTENT_TYPE,\n    E_CONTENT,\n];\nclass EncapsulatedContentInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.eContentType = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, E_CONTENT_TYPE, EncapsulatedContentInfo.defaultValues(E_CONTENT_TYPE));\n        if (E_CONTENT in parameters) {\n            this.eContent = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, E_CONTENT, EncapsulatedContentInfo.defaultValues(E_CONTENT));\n            if ((this.eContent.idBlock.tagClass === 1) &&\n                (this.eContent.idBlock.tagNumber === 4)) {\n                if (this.eContent.idBlock.isConstructed === false) {\n                    const constrString = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({\n                        idBlock: { isConstructed: true },\n                        isConstructed: true\n                    });\n                    let offset = 0;\n                    const viewHex = this.eContent.valueBlock.valueHexView.slice().buffer;\n                    let length = viewHex.byteLength;\n                    while (length > 0) {\n                        const pieceView = new Uint8Array(viewHex, offset, ((offset + 65536) > viewHex.byteLength) ? (viewHex.byteLength - offset) : 65536);\n                        const _array = new ArrayBuffer(pieceView.length);\n                        const _view = new Uint8Array(_array);\n                        for (let i = 0; i < _view.length; i++) {\n                            _view[i] = pieceView[i];\n                        }\n                        constrString.valueBlock.value.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: _array }));\n                        length -= pieceView.length;\n                        offset += pieceView.length;\n                    }\n                    this.eContent = constrString;\n                }\n            }\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case E_CONTENT_TYPE:\n                return EMPTY_STRING;\n            case E_CONTENT:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case E_CONTENT_TYPE:\n                return (memberValue === EMPTY_STRING);\n            case E_CONTENT:\n                {\n                    if ((memberValue.idBlock.tagClass === 1) && (memberValue.idBlock.tagNumber === 4))\n                        return (memberValue.isEqual(EncapsulatedContentInfo.defaultValues(E_CONTENT)));\n                    return false;\n                }\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.eContentType || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any({ name: (names.eContent || EMPTY_STRING) })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$d);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, EncapsulatedContentInfo.schema({\n            names: {\n                eContentType: E_CONTENT_TYPE,\n                eContent: E_CONTENT\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.eContentType = asn1.result.eContentType.valueBlock.toString();\n        if (E_CONTENT in asn1.result)\n            this.eContent = asn1.result.eContent;\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.eContentType }));\n        if (this.eContent) {\n            if (EncapsulatedContentInfo.compareWithDefault(E_CONTENT, this.eContent) === false) {\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [this.eContent]\n                }));\n            }\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            eContentType: this.eContentType\n        };\n        if (this.eContent && EncapsulatedContentInfo.compareWithDefault(E_CONTENT, this.eContent) === false) {\n            res.eContent = this.eContent.toJSON();\n        }\n        return res;\n    }\n}\nEncapsulatedContentInfo.CLASS_NAME = \"EncapsulatedContentInfo\";\n\nclass KeyBag extends PrivateKeyInfo {\n    constructor(parameters = {}) {\n        super(parameters);\n    }\n}\n\nconst MAC = \"mac\";\nconst MAC_SALT = \"macSalt\";\nconst ITERATIONS = \"iterations\";\nconst CLEAR_PROPS$c = [\n    MAC,\n    MAC_SALT,\n    ITERATIONS\n];\nclass MacData extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.mac = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MAC, MacData.defaultValues(MAC));\n        this.macSalt = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MAC_SALT, MacData.defaultValues(MAC_SALT));\n        if (ITERATIONS in parameters) {\n            this.iterations = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ITERATIONS, MacData.defaultValues(ITERATIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case MAC:\n                return new DigestInfo();\n            case MAC_SALT:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case ITERATIONS:\n                return 1;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case MAC:\n                return ((DigestInfo.compareWithDefault(\"digestAlgorithm\", memberValue.digestAlgorithm)) &&\n                    (DigestInfo.compareWithDefault(\"digest\", memberValue.digest)));\n            case MAC_SALT:\n                return (memberValue.isEqual(MacData.defaultValues(memberName)));\n            case ITERATIONS:\n                return (memberValue === MacData.defaultValues(memberName));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            optional: (names.optional || true),\n            value: [\n                DigestInfo.schema(names.mac || {\n                    names: {\n                        blockName: MAC\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.macSalt || MAC_SALT) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n                    optional: true,\n                    name: (names.iterations || ITERATIONS)\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$c);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, MacData.schema({\n            names: {\n                mac: {\n                    names: {\n                        blockName: MAC\n                    }\n                },\n                macSalt: MAC_SALT,\n                iterations: ITERATIONS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.mac = new DigestInfo({ schema: asn1.result.mac });\n        this.macSalt = asn1.result.macSalt;\n        if (ITERATIONS in asn1.result)\n            this.iterations = asn1.result.iterations.valueBlock.valueDec;\n    }\n    toSchema() {\n        const outputArray = [\n            this.mac.toSchema(),\n            this.macSalt\n        ];\n        if (this.iterations !== undefined) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.iterations }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            mac: this.mac.toJSON(),\n            macSalt: this.macSalt.toJSON(),\n        };\n        if (this.iterations !== undefined) {\n            res.iterations = this.iterations;\n        }\n        return res;\n    }\n}\nMacData.CLASS_NAME = \"MacData\";\n\nconst HASH_ALGORITHM = \"hashAlgorithm\";\nconst HASHED_MESSAGE = \"hashedMessage\";\nconst CLEAR_PROPS$b = [\n    HASH_ALGORITHM,\n    HASHED_MESSAGE,\n];\nclass MessageImprint extends PkiObject {\n    static async create(hashAlgorithm, message, crypto = getCrypto(true)) {\n        const hashAlgorithmOID = crypto.getOIDByAlgorithm({ name: hashAlgorithm }, true, \"hashAlgorithm\");\n        const hashedMessage = await crypto.digest(hashAlgorithm, message);\n        const res = new MessageImprint({\n            hashAlgorithm: new AlgorithmIdentifier({\n                algorithmId: hashAlgorithmOID,\n                algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null(),\n            }),\n            hashedMessage: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: hashedMessage })\n        });\n        return res;\n    }\n    constructor(parameters = {}) {\n        super();\n        this.hashAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, HASH_ALGORITHM, MessageImprint.defaultValues(HASH_ALGORITHM));\n        this.hashedMessage = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, HASHED_MESSAGE, MessageImprint.defaultValues(HASHED_MESSAGE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case HASH_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case HASHED_MESSAGE:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case HASH_ALGORITHM:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case HASHED_MESSAGE:\n                return (memberValue.isEqual(MessageImprint.defaultValues(memberName)) === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.hashAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.hashedMessage || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$b);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, MessageImprint.schema({\n            names: {\n                hashAlgorithm: {\n                    names: {\n                        blockName: HASH_ALGORITHM\n                    }\n                },\n                hashedMessage: HASHED_MESSAGE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\n        this.hashedMessage = asn1.result.hashedMessage;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                this.hashAlgorithm.toSchema(),\n                this.hashedMessage\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            hashAlgorithm: this.hashAlgorithm.toJSON(),\n            hashedMessage: this.hashedMessage.toJSON(),\n        };\n    }\n}\nMessageImprint.CLASS_NAME = \"MessageImprint\";\n\nconst REQ_CERT = \"reqCert\";\nconst SINGLE_REQUEST_EXTENSIONS = \"singleRequestExtensions\";\nconst CLEAR_PROPS$a = [\n    REQ_CERT,\n    SINGLE_REQUEST_EXTENSIONS,\n];\nclass Request extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.reqCert = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, REQ_CERT, Request.defaultValues(REQ_CERT));\n        if (SINGLE_REQUEST_EXTENSIONS in parameters) {\n            this.singleRequestExtensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SINGLE_REQUEST_EXTENSIONS, Request.defaultValues(SINGLE_REQUEST_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case REQ_CERT:\n                return new CertID();\n            case SINGLE_REQUEST_EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case REQ_CERT:\n                return (memberValue.isEqual(Request.defaultValues(memberName)));\n            case SINGLE_REQUEST_EXTENSIONS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                CertID.schema(names.reqCert || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [Extension.schema(names.extensions || {\n                            names: {\n                                blockName: (names.singleRequestExtensions || EMPTY_STRING)\n                            }\n                        })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$a);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, Request.schema({\n            names: {\n                reqCert: {\n                    names: {\n                        blockName: REQ_CERT\n                    }\n                },\n                extensions: {\n                    names: {\n                        blockName: SINGLE_REQUEST_EXTENSIONS\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.reqCert = new CertID({ schema: asn1.result.reqCert });\n        if (SINGLE_REQUEST_EXTENSIONS in asn1.result) {\n            this.singleRequestExtensions = Array.from(asn1.result.singleRequestExtensions.valueBlock.value, element => new Extension({ schema: element }));\n        }\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.reqCert.toSchema());\n        if (this.singleRequestExtensions) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                        value: Array.from(this.singleRequestExtensions, o => o.toSchema())\n                    })\n                ]\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            reqCert: this.reqCert.toJSON()\n        };\n        if (this.singleRequestExtensions) {\n            res.singleRequestExtensions = Array.from(this.singleRequestExtensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nRequest.CLASS_NAME = \"Request\";\n\nconst TBS = \"tbs\";\nconst VERSION$5 = \"version\";\nconst REQUESTOR_NAME = \"requestorName\";\nconst REQUEST_LIST = \"requestList\";\nconst REQUEST_EXTENSIONS = \"requestExtensions\";\nconst TBS_REQUEST$1 = \"TBSRequest\";\nconst TBS_REQUEST_VERSION = `${TBS_REQUEST$1}.${VERSION$5}`;\nconst TBS_REQUEST_REQUESTOR_NAME = `${TBS_REQUEST$1}.${REQUESTOR_NAME}`;\nconst TBS_REQUEST_REQUESTS = `${TBS_REQUEST$1}.requests`;\nconst TBS_REQUEST_REQUEST_EXTENSIONS = `${TBS_REQUEST$1}.${REQUEST_EXTENSIONS}`;\nconst CLEAR_PROPS$9 = [\n    TBS_REQUEST$1,\n    TBS_REQUEST_VERSION,\n    TBS_REQUEST_REQUESTOR_NAME,\n    TBS_REQUEST_REQUESTS,\n    TBS_REQUEST_REQUEST_EXTENSIONS\n];\nclass TBSRequest extends PkiObject {\n    get tbs() {\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(this.tbsView);\n    }\n    set tbs(value) {\n        this.tbsView = new Uint8Array(value);\n    }\n    constructor(parameters = {}) {\n        super();\n        this.tbsView = new Uint8Array(pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TBS, TBSRequest.defaultValues(TBS)));\n        if (VERSION$5 in parameters) {\n            this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$5, TBSRequest.defaultValues(VERSION$5));\n        }\n        if (REQUESTOR_NAME in parameters) {\n            this.requestorName = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, REQUESTOR_NAME, TBSRequest.defaultValues(REQUESTOR_NAME));\n        }\n        this.requestList = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, REQUEST_LIST, TBSRequest.defaultValues(REQUEST_LIST));\n        if (REQUEST_EXTENSIONS in parameters) {\n            this.requestExtensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, REQUEST_EXTENSIONS, TBSRequest.defaultValues(REQUEST_EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS:\n                return EMPTY_BUFFER;\n            case VERSION$5:\n                return 0;\n            case REQUESTOR_NAME:\n                return new GeneralName();\n            case REQUEST_LIST:\n            case REQUEST_EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TBS:\n                return (memberValue.byteLength === 0);\n            case VERSION$5:\n                return (memberValue === TBSRequest.defaultValues(memberName));\n            case REQUESTOR_NAME:\n                return ((memberValue.type === GeneralName.defaultValues(\"type\")) && (Object.keys(memberValue.value).length === 0));\n            case REQUEST_LIST:\n            case REQUEST_EXTENSIONS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || TBS_REQUEST$1),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.TBSRequestVersion || TBS_REQUEST_VERSION) })]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [GeneralName.schema(names.requestorName || {\n                            names: {\n                                blockName: TBS_REQUEST_REQUESTOR_NAME\n                            }\n                        })]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    name: (names.requestList || \"TBSRequest.requestList\"),\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.requests || TBS_REQUEST_REQUESTS),\n                            value: Request.schema(names.requestNames || {})\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [Extensions.schema(names.extensions || {\n                            names: {\n                                blockName: (names.requestExtensions || TBS_REQUEST_REQUEST_EXTENSIONS)\n                            }\n                        })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$9);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, TBSRequest.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsView = asn1.result.TBSRequest.valueBeforeDecodeView;\n        if (TBS_REQUEST_VERSION in asn1.result)\n            this.version = asn1.result[TBS_REQUEST_VERSION].valueBlock.valueDec;\n        if (TBS_REQUEST_REQUESTOR_NAME in asn1.result)\n            this.requestorName = new GeneralName({ schema: asn1.result[TBS_REQUEST_REQUESTOR_NAME] });\n        this.requestList = Array.from(asn1.result[TBS_REQUEST_REQUESTS], element => new Request({ schema: element }));\n        if (TBS_REQUEST_REQUEST_EXTENSIONS in asn1.result)\n            this.requestExtensions = Array.from(asn1.result[TBS_REQUEST_REQUEST_EXTENSIONS].valueBlock.value, element => new Extension({ schema: element }));\n    }\n    toSchema(encodeFlag = false) {\n        let tbsSchema;\n        if (encodeFlag === false) {\n            if (this.tbsView.byteLength === 0)\n                return TBSRequest.schema();\n            const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.tbsView);\n            AsnError.assert(asn1, \"TBS Request\");\n            if (!(asn1.result instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence)) {\n                throw new Error(\"ASN.1 result should be SEQUENCE\");\n            }\n            tbsSchema = asn1.result;\n        }\n        else {\n            const outputArray = [];\n            if (this.version !== undefined) {\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version })]\n                }));\n            }\n            if (this.requestorName) {\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [this.requestorName.toSchema()]\n                }));\n            }\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: Array.from(this.requestList, o => o.toSchema())\n            }));\n            if (this.requestExtensions) {\n                outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 2\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                            value: Array.from(this.requestExtensions, o => o.toSchema())\n                        })\n                    ]\n                }));\n            }\n            tbsSchema = new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                value: outputArray\n            });\n        }\n        return tbsSchema;\n    }\n    toJSON() {\n        const res = {};\n        if (this.version != undefined)\n            res.version = this.version;\n        if (this.requestorName) {\n            res.requestorName = this.requestorName.toJSON();\n        }\n        res.requestList = Array.from(this.requestList, o => o.toJSON());\n        if (this.requestExtensions) {\n            res.requestExtensions = Array.from(this.requestExtensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nTBSRequest.CLASS_NAME = \"TBSRequest\";\n\nconst SIGNATURE_ALGORITHM$1 = \"signatureAlgorithm\";\nconst SIGNATURE$1 = \"signature\";\nconst CERTS = \"certs\";\nclass Signature extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_ALGORITHM$1, Signature.defaultValues(SIGNATURE_ALGORITHM$1));\n        this.signature = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE$1, Signature.defaultValues(SIGNATURE$1));\n        if (CERTS in parameters) {\n            this.certs = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERTS, Signature.defaultValues(CERTS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case SIGNATURE_ALGORITHM$1:\n                return new AlgorithmIdentifier();\n            case SIGNATURE$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            case CERTS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case SIGNATURE_ALGORITHM$1:\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\n            case SIGNATURE$1:\n                return (memberValue.isEqual(Signature.defaultValues(memberName)));\n            case CERTS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ name: (names.signature || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                            value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                                    name: (names.certs || EMPTY_STRING),\n                                    value: Certificate.schema({})\n                                })]\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            SIGNATURE_ALGORITHM$1,\n            SIGNATURE$1,\n            CERTS\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, Signature.schema({\n            names: {\n                signatureAlgorithm: {\n                    names: {\n                        blockName: SIGNATURE_ALGORITHM$1\n                    }\n                },\n                signature: SIGNATURE$1,\n                certs: CERTS\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\n        this.signature = asn1.result.signature;\n        if (CERTS in asn1.result)\n            this.certs = Array.from(asn1.result.certs, element => new Certificate({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.signatureAlgorithm.toSchema());\n        outputArray.push(this.signature);\n        if (this.certs) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                        value: Array.from(this.certs, o => o.toSchema())\n                    })\n                ]\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signature: this.signature.toJSON(),\n        };\n        if (this.certs) {\n            res.certs = Array.from(this.certs, o => o.toJSON());\n        }\n        return res;\n    }\n}\nSignature.CLASS_NAME = \"Signature\";\n\nconst TBS_REQUEST = \"tbsRequest\";\nconst OPTIONAL_SIGNATURE = \"optionalSignature\";\nconst CLEAR_PROPS$8 = [\n    TBS_REQUEST,\n    OPTIONAL_SIGNATURE\n];\nclass OCSPRequest extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.tbsRequest = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TBS_REQUEST, OCSPRequest.defaultValues(TBS_REQUEST));\n        if (OPTIONAL_SIGNATURE in parameters) {\n            this.optionalSignature = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OPTIONAL_SIGNATURE, OCSPRequest.defaultValues(OPTIONAL_SIGNATURE));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TBS_REQUEST:\n                return new TBSRequest();\n            case OPTIONAL_SIGNATURE:\n                return new Signature();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TBS_REQUEST:\n                return ((TBSRequest.compareWithDefault(\"tbs\", memberValue.tbs)) &&\n                    (TBSRequest.compareWithDefault(\"version\", memberValue.version)) &&\n                    (TBSRequest.compareWithDefault(\"requestorName\", memberValue.requestorName)) &&\n                    (TBSRequest.compareWithDefault(\"requestList\", memberValue.requestList)) &&\n                    (TBSRequest.compareWithDefault(\"requestExtensions\", memberValue.requestExtensions)));\n            case OPTIONAL_SIGNATURE:\n                return ((Signature.compareWithDefault(\"signatureAlgorithm\", memberValue.signatureAlgorithm)) &&\n                    (Signature.compareWithDefault(\"signature\", memberValue.signature)) &&\n                    (Signature.compareWithDefault(\"certs\", memberValue.certs)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: names.blockName || \"OCSPRequest\",\n            value: [\n                TBSRequest.schema(names.tbsRequest || {\n                    names: {\n                        blockName: TBS_REQUEST\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        Signature.schema(names.optionalSignature || {\n                            names: {\n                                blockName: OPTIONAL_SIGNATURE\n                            }\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$8);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OCSPRequest.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.tbsRequest = new TBSRequest({ schema: asn1.result.tbsRequest });\n        if (OPTIONAL_SIGNATURE in asn1.result)\n            this.optionalSignature = new Signature({ schema: asn1.result.optionalSignature });\n    }\n    toSchema(encodeFlag = false) {\n        const outputArray = [];\n        outputArray.push(this.tbsRequest.toSchema(encodeFlag));\n        if (this.optionalSignature)\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [\n                    this.optionalSignature.toSchema()\n                ]\n            }));\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            tbsRequest: this.tbsRequest.toJSON()\n        };\n        if (this.optionalSignature) {\n            res.optionalSignature = this.optionalSignature.toJSON();\n        }\n        return res;\n    }\n    async createForCertificate(certificate, parameters, crypto = getCrypto(true)) {\n        const certID = new CertID();\n        await certID.createForCertificate(certificate, parameters, crypto);\n        this.tbsRequest.requestList.push(new Request({\n            reqCert: certID,\n        }));\n    }\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\n        ParameterError.assertEmpty(privateKey, \"privateKey\", \"OCSPRequest.sign method\");\n        if (!this.optionalSignature) {\n            throw new Error(\"Need to create \\\"optionalSignature\\\" field before signing\");\n        }\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const parameters = signatureParams.parameters;\n        this.optionalSignature.signatureAlgorithm = signatureParams.signatureAlgorithm;\n        const tbs = this.tbsRequest.toSchema(true).toBER(false);\n        const signature = await crypto.signWithPrivateKey(tbs, privateKey, parameters);\n        this.optionalSignature.signature = new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({ valueHex: signature });\n    }\n    verify() {\n    }\n}\nOCSPRequest.CLASS_NAME = \"OCSPRequest\";\n\nconst RESPONSE_TYPE = \"responseType\";\nconst RESPONSE = \"response\";\nconst CLEAR_PROPS$7 = [\n    RESPONSE_TYPE,\n    RESPONSE\n];\nclass ResponseBytes extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.responseType = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RESPONSE_TYPE, ResponseBytes.defaultValues(RESPONSE_TYPE));\n        this.response = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RESPONSE, ResponseBytes.defaultValues(RESPONSE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case RESPONSE_TYPE:\n                return EMPTY_STRING;\n            case RESPONSE:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case RESPONSE_TYPE:\n                return (memberValue === EMPTY_STRING);\n            case RESPONSE:\n                return (memberValue.isEqual(ResponseBytes.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.responseType || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.response || EMPTY_STRING) })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$7);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, ResponseBytes.schema({\n            names: {\n                responseType: RESPONSE_TYPE,\n                response: RESPONSE\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.responseType = asn1.result.responseType.valueBlock.toString();\n        this.response = asn1.result.response;\n    }\n    toSchema() {\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.responseType }),\n                this.response\n            ]\n        }));\n    }\n    toJSON() {\n        return {\n            responseType: this.responseType,\n            response: this.response.toJSON(),\n        };\n    }\n}\nResponseBytes.CLASS_NAME = \"ResponseBytes\";\n\nconst RESPONSE_STATUS = \"responseStatus\";\nconst RESPONSE_BYTES = \"responseBytes\";\nclass OCSPResponse extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.responseStatus = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RESPONSE_STATUS, OCSPResponse.defaultValues(RESPONSE_STATUS));\n        if (RESPONSE_BYTES in parameters) {\n            this.responseBytes = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, RESPONSE_BYTES, OCSPResponse.defaultValues(RESPONSE_BYTES));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case RESPONSE_STATUS:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Enumerated();\n            case RESPONSE_BYTES:\n                return new ResponseBytes();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case RESPONSE_STATUS:\n                return (memberValue.isEqual(OCSPResponse.defaultValues(memberName)));\n            case RESPONSE_BYTES:\n                return ((ResponseBytes.compareWithDefault(\"responseType\", memberValue.responseType)) &&\n                    (ResponseBytes.compareWithDefault(\"response\", memberValue.response)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || \"OCSPResponse\"),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Enumerated({ name: (names.responseStatus || RESPONSE_STATUS) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [\n                        ResponseBytes.schema(names.responseBytes || {\n                            names: {\n                                blockName: RESPONSE_BYTES\n                            }\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, [\n            RESPONSE_STATUS,\n            RESPONSE_BYTES\n        ]);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, OCSPResponse.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.responseStatus = asn1.result.responseStatus;\n        if (RESPONSE_BYTES in asn1.result)\n            this.responseBytes = new ResponseBytes({ schema: asn1.result.responseBytes });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.responseStatus);\n        if (this.responseBytes) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.responseBytes.toSchema()]\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            responseStatus: this.responseStatus.toJSON()\n        };\n        if (this.responseBytes) {\n            res.responseBytes = this.responseBytes.toJSON();\n        }\n        return res;\n    }\n    async getCertificateStatus(certificate, issuerCertificate, crypto = getCrypto(true)) {\n        let basicResponse;\n        const result = {\n            isForCertificate: false,\n            status: 2\n        };\n        if (!this.responseBytes)\n            return result;\n        if (this.responseBytes.responseType !== id_PKIX_OCSP_Basic)\n            return result;\n        try {\n            const asn1Basic = asn1js__WEBPACK_IMPORTED_MODULE_0__.fromBER(this.responseBytes.response.valueBlock.valueHexView);\n            AsnError.assert(asn1Basic, \"Basic OCSP response\");\n            basicResponse = new BasicOCSPResponse({ schema: asn1Basic.result });\n        }\n        catch (ex) {\n            return result;\n        }\n        return basicResponse.getCertificateStatus(certificate, issuerCertificate, crypto);\n    }\n    async sign(privateKey, hashAlgorithm, crypto = getCrypto(true)) {\n        var _a;\n        if (this.responseBytes && this.responseBytes.responseType === id_PKIX_OCSP_Basic) {\n            const basicResponse = BasicOCSPResponse.fromBER(this.responseBytes.response.valueBlock.valueHexView);\n            return basicResponse.sign(privateKey, hashAlgorithm, crypto);\n        }\n        throw new Error(`Unknown ResponseBytes type: ${((_a = this.responseBytes) === null || _a === void 0 ? void 0 : _a.responseType) || \"Unknown\"}`);\n    }\n    async verify(issuerCertificate = null, crypto = getCrypto(true)) {\n        var _a;\n        if ((RESPONSE_BYTES in this) === false)\n            throw new Error(\"Empty ResponseBytes field\");\n        if (this.responseBytes && this.responseBytes.responseType === id_PKIX_OCSP_Basic) {\n            const basicResponse = BasicOCSPResponse.fromBER(this.responseBytes.response.valueBlock.valueHexView);\n            if (issuerCertificate !== null) {\n                if (!basicResponse.certs) {\n                    basicResponse.certs = [];\n                }\n                basicResponse.certs.push(issuerCertificate);\n            }\n            return basicResponse.verify({}, crypto);\n        }\n        throw new Error(`Unknown ResponseBytes type: ${((_a = this.responseBytes) === null || _a === void 0 ? void 0 : _a.responseType) || \"Unknown\"}`);\n    }\n}\nOCSPResponse.CLASS_NAME = \"OCSPResponse\";\n\nconst TYPE = \"type\";\nconst ATTRIBUTES = \"attributes\";\nconst ENCODED_VALUE = \"encodedValue\";\nconst CLEAR_PROPS$6 = [\n    ATTRIBUTES\n];\nclass SignedAndUnsignedAttributes extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.type = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TYPE, SignedAndUnsignedAttributes.defaultValues(TYPE));\n        this.attributes = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ATTRIBUTES, SignedAndUnsignedAttributes.defaultValues(ATTRIBUTES));\n        this.encodedValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCODED_VALUE, SignedAndUnsignedAttributes.defaultValues(ENCODED_VALUE));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case TYPE:\n                return (-1);\n            case ATTRIBUTES:\n                return [];\n            case ENCODED_VALUE:\n                return EMPTY_BUFFER;\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case TYPE:\n                return (memberValue === SignedAndUnsignedAttributes.defaultValues(TYPE));\n            case ATTRIBUTES:\n                return (memberValue.length === 0);\n            case ENCODED_VALUE:\n                return (memberValue.byteLength === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n            name: (names.blockName || EMPTY_STRING),\n            optional: true,\n            idBlock: {\n                tagClass: 3,\n                tagNumber: names.tagNumber || 0\n            },\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                    name: (names.attributes || EMPTY_STRING),\n                    value: Attribute.schema()\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$6);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, SignedAndUnsignedAttributes.schema({\n            names: {\n                tagNumber: this.type,\n                attributes: ATTRIBUTES\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.type = asn1.result.idBlock.tagNumber;\n        this.encodedValue = pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(asn1.result.valueBeforeDecodeView);\n        const encodedView = new Uint8Array(this.encodedValue);\n        encodedView[0] = 0x31;\n        if ((ATTRIBUTES in asn1.result) === false) {\n            if (this.type === 0)\n                throw new Error(\"Wrong structure of SignedUnsignedAttributes\");\n            else\n                return;\n        }\n        this.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\n    }\n    toSchema() {\n        if (SignedAndUnsignedAttributes.compareWithDefault(TYPE, this.type) || SignedAndUnsignedAttributes.compareWithDefault(ATTRIBUTES, this.attributes))\n            throw new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n            optional: true,\n            idBlock: {\n                tagClass: 3,\n                tagNumber: this.type\n            },\n            value: Array.from(this.attributes, o => o.toSchema())\n        }));\n    }\n    toJSON() {\n        if (SignedAndUnsignedAttributes.compareWithDefault(TYPE, this.type) || SignedAndUnsignedAttributes.compareWithDefault(ATTRIBUTES, this.attributes))\n            throw new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\n        return {\n            type: this.type,\n            attributes: Array.from(this.attributes, o => o.toJSON())\n        };\n    }\n}\nSignedAndUnsignedAttributes.CLASS_NAME = \"SignedAndUnsignedAttributes\";\n\nconst VERSION$4 = \"version\";\nconst SID = \"sid\";\nconst DIGEST_ALGORITHM = \"digestAlgorithm\";\nconst SIGNED_ATTRS = \"signedAttrs\";\nconst SIGNATURE_ALGORITHM = \"signatureAlgorithm\";\nconst SIGNATURE = \"signature\";\nconst UNSIGNED_ATTRS = \"unsignedAttrs\";\nconst SIGNER_INFO = \"SignerInfo\";\nconst SIGNER_INFO_VERSION = `${SIGNER_INFO}.${VERSION$4}`;\nconst SIGNER_INFO_SID = `${SIGNER_INFO}.${SID}`;\nconst SIGNER_INFO_DIGEST_ALGORITHM = `${SIGNER_INFO}.${DIGEST_ALGORITHM}`;\nconst SIGNER_INFO_SIGNED_ATTRS = `${SIGNER_INFO}.${SIGNED_ATTRS}`;\nconst SIGNER_INFO_SIGNATURE_ALGORITHM = `${SIGNER_INFO}.${SIGNATURE_ALGORITHM}`;\nconst SIGNER_INFO_SIGNATURE = `${SIGNER_INFO}.${SIGNATURE}`;\nconst SIGNER_INFO_UNSIGNED_ATTRS = `${SIGNER_INFO}.${UNSIGNED_ATTRS}`;\nconst CLEAR_PROPS$5 = [\n    SIGNER_INFO_VERSION,\n    SIGNER_INFO_SID,\n    SIGNER_INFO_DIGEST_ALGORITHM,\n    SIGNER_INFO_SIGNED_ATTRS,\n    SIGNER_INFO_SIGNATURE_ALGORITHM,\n    SIGNER_INFO_SIGNATURE,\n    SIGNER_INFO_UNSIGNED_ATTRS\n];\nclass SignerInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$4, SignerInfo.defaultValues(VERSION$4));\n        this.sid = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SID, SignerInfo.defaultValues(SID));\n        this.digestAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DIGEST_ALGORITHM, SignerInfo.defaultValues(DIGEST_ALGORITHM));\n        if (SIGNED_ATTRS in parameters) {\n            this.signedAttrs = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNED_ATTRS, SignerInfo.defaultValues(SIGNED_ATTRS));\n        }\n        this.signatureAlgorithm = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE_ALGORITHM, SignerInfo.defaultValues(SIGNATURE_ALGORITHM));\n        this.signature = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNATURE, SignerInfo.defaultValues(SIGNATURE));\n        if (UNSIGNED_ATTRS in parameters) {\n            this.unsignedAttrs = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, UNSIGNED_ATTRS, SignerInfo.defaultValues(UNSIGNED_ATTRS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$4:\n                return 0;\n            case SID:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Any();\n            case DIGEST_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case SIGNED_ATTRS:\n                return new SignedAndUnsignedAttributes({ type: 0 });\n            case SIGNATURE_ALGORITHM:\n                return new AlgorithmIdentifier();\n            case SIGNATURE:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString();\n            case UNSIGNED_ATTRS:\n                return new SignedAndUnsignedAttributes({ type: 1 });\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$4:\n                return (SignerInfo.defaultValues(VERSION$4) === memberValue);\n            case SID:\n                return (memberValue instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any);\n            case DIGEST_ALGORITHM:\n                if ((memberValue instanceof AlgorithmIdentifier) === false)\n                    return false;\n                return memberValue.isEqual(SignerInfo.defaultValues(DIGEST_ALGORITHM));\n            case SIGNED_ATTRS:\n                return ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\n            case SIGNATURE_ALGORITHM:\n                if ((memberValue instanceof AlgorithmIdentifier) === false)\n                    return false;\n                return memberValue.isEqual(SignerInfo.defaultValues(SIGNATURE_ALGORITHM));\n            case SIGNATURE:\n            case UNSIGNED_ATTRS:\n                return ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: SIGNER_INFO,\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || SIGNER_INFO_VERSION) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                    value: [\n                        IssuerAndSerialNumber.schema(names.sidSchema || {\n                            names: {\n                                blockName: SIGNER_INFO_SID\n                            }\n                        }),\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Choice({\n                            value: [\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                                    optional: true,\n                                    name: (names.sid || SIGNER_INFO_SID),\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    },\n                                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString()]\n                                }),\n                                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Primitive({\n                                    optional: true,\n                                    name: (names.sid || SIGNER_INFO_SID),\n                                    idBlock: {\n                                        tagClass: 3,\n                                        tagNumber: 0\n                                    }\n                                }),\n                            ]\n                        }),\n                    ]\n                }),\n                AlgorithmIdentifier.schema(names.digestAlgorithm || {\n                    names: {\n                        blockName: SIGNER_INFO_DIGEST_ALGORITHM\n                    }\n                }),\n                SignedAndUnsignedAttributes.schema(names.signedAttrs || {\n                    names: {\n                        blockName: SIGNER_INFO_SIGNED_ATTRS,\n                        tagNumber: 0\n                    }\n                }),\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\n                    names: {\n                        blockName: SIGNER_INFO_SIGNATURE_ALGORITHM\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ name: (names.signature || SIGNER_INFO_SIGNATURE) }),\n                SignedAndUnsignedAttributes.schema(names.unsignedAttrs || {\n                    names: {\n                        blockName: SIGNER_INFO_UNSIGNED_ATTRS,\n                        tagNumber: 1\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$5);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, SignerInfo.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result[SIGNER_INFO_VERSION].valueBlock.valueDec;\n        const currentSid = asn1.result[SIGNER_INFO_SID];\n        if (currentSid.idBlock.tagClass === 1)\n            this.sid = new IssuerAndSerialNumber({ schema: currentSid });\n        else\n            this.sid = currentSid;\n        this.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[SIGNER_INFO_DIGEST_ALGORITHM] });\n        if (SIGNER_INFO_SIGNED_ATTRS in asn1.result)\n            this.signedAttrs = new SignedAndUnsignedAttributes({ type: 0, schema: asn1.result[SIGNER_INFO_SIGNED_ATTRS] });\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[SIGNER_INFO_SIGNATURE_ALGORITHM] });\n        this.signature = asn1.result[SIGNER_INFO_SIGNATURE];\n        if (SIGNER_INFO_UNSIGNED_ATTRS in asn1.result)\n            this.unsignedAttrs = new SignedAndUnsignedAttributes({ type: 1, schema: asn1.result[SIGNER_INFO_UNSIGNED_ATTRS] });\n    }\n    toSchema() {\n        if (SignerInfo.compareWithDefault(SID, this.sid))\n            throw new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        if (this.sid instanceof IssuerAndSerialNumber)\n            outputArray.push(this.sid.toSchema());\n        else\n            outputArray.push(this.sid);\n        outputArray.push(this.digestAlgorithm.toSchema());\n        if (this.signedAttrs) {\n            if (SignerInfo.compareWithDefault(SIGNED_ATTRS, this.signedAttrs) === false)\n                outputArray.push(this.signedAttrs.toSchema());\n        }\n        outputArray.push(this.signatureAlgorithm.toSchema());\n        outputArray.push(this.signature);\n        if (this.unsignedAttrs) {\n            if (SignerInfo.compareWithDefault(UNSIGNED_ATTRS, this.unsignedAttrs) === false)\n                outputArray.push(this.unsignedAttrs.toSchema());\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        if (SignerInfo.compareWithDefault(SID, this.sid)) {\n            throw new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\n        }\n        const res = {\n            version: this.version,\n            digestAlgorithm: this.digestAlgorithm.toJSON(),\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\n            signature: this.signature.toJSON(),\n        };\n        if (!(this.sid instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any))\n            res.sid = this.sid.toJSON();\n        if (this.signedAttrs && SignerInfo.compareWithDefault(SIGNED_ATTRS, this.signedAttrs) === false) {\n            res.signedAttrs = this.signedAttrs.toJSON();\n        }\n        if (this.unsignedAttrs && SignerInfo.compareWithDefault(UNSIGNED_ATTRS, this.unsignedAttrs) === false) {\n            res.unsignedAttrs = this.unsignedAttrs.toJSON();\n        }\n        return res;\n    }\n}\nSignerInfo.CLASS_NAME = \"SignerInfo\";\n\nconst VERSION$3 = \"version\";\nconst POLICY = \"policy\";\nconst MESSAGE_IMPRINT$1 = \"messageImprint\";\nconst SERIAL_NUMBER = \"serialNumber\";\nconst GEN_TIME = \"genTime\";\nconst ORDERING = \"ordering\";\nconst NONCE$1 = \"nonce\";\nconst ACCURACY = \"accuracy\";\nconst TSA = \"tsa\";\nconst EXTENSIONS$1 = \"extensions\";\nconst TST_INFO = \"TSTInfo\";\nconst TST_INFO_VERSION = `${TST_INFO}.${VERSION$3}`;\nconst TST_INFO_POLICY = `${TST_INFO}.${POLICY}`;\nconst TST_INFO_MESSAGE_IMPRINT = `${TST_INFO}.${MESSAGE_IMPRINT$1}`;\nconst TST_INFO_SERIAL_NUMBER = `${TST_INFO}.${SERIAL_NUMBER}`;\nconst TST_INFO_GEN_TIME = `${TST_INFO}.${GEN_TIME}`;\nconst TST_INFO_ACCURACY = `${TST_INFO}.${ACCURACY}`;\nconst TST_INFO_ORDERING = `${TST_INFO}.${ORDERING}`;\nconst TST_INFO_NONCE = `${TST_INFO}.${NONCE$1}`;\nconst TST_INFO_TSA = `${TST_INFO}.${TSA}`;\nconst TST_INFO_EXTENSIONS = `${TST_INFO}.${EXTENSIONS$1}`;\nconst CLEAR_PROPS$4 = [\n    TST_INFO_VERSION,\n    TST_INFO_POLICY,\n    TST_INFO_MESSAGE_IMPRINT,\n    TST_INFO_SERIAL_NUMBER,\n    TST_INFO_GEN_TIME,\n    TST_INFO_ACCURACY,\n    TST_INFO_ORDERING,\n    TST_INFO_NONCE,\n    TST_INFO_TSA,\n    TST_INFO_EXTENSIONS\n];\nclass TSTInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$3, TSTInfo.defaultValues(VERSION$3));\n        this.policy = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, POLICY, TSTInfo.defaultValues(POLICY));\n        this.messageImprint = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MESSAGE_IMPRINT$1, TSTInfo.defaultValues(MESSAGE_IMPRINT$1));\n        this.serialNumber = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SERIAL_NUMBER, TSTInfo.defaultValues(SERIAL_NUMBER));\n        this.genTime = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, GEN_TIME, TSTInfo.defaultValues(GEN_TIME));\n        if (ACCURACY in parameters) {\n            this.accuracy = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ACCURACY, TSTInfo.defaultValues(ACCURACY));\n        }\n        if (ORDERING in parameters) {\n            this.ordering = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ORDERING, TSTInfo.defaultValues(ORDERING));\n        }\n        if (NONCE$1 in parameters) {\n            this.nonce = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NONCE$1, TSTInfo.defaultValues(NONCE$1));\n        }\n        if (TSA in parameters) {\n            this.tsa = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TSA, TSTInfo.defaultValues(TSA));\n        }\n        if (EXTENSIONS$1 in parameters) {\n            this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXTENSIONS$1, TSTInfo.defaultValues(EXTENSIONS$1));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$3:\n                return 0;\n            case POLICY:\n                return EMPTY_STRING;\n            case MESSAGE_IMPRINT$1:\n                return new MessageImprint();\n            case SERIAL_NUMBER:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case GEN_TIME:\n                return new Date(0, 0, 0);\n            case ACCURACY:\n                return new Accuracy();\n            case ORDERING:\n                return false;\n            case NONCE$1:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case TSA:\n                return new GeneralName();\n            case EXTENSIONS$1:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$3:\n            case POLICY:\n            case GEN_TIME:\n            case ORDERING:\n                return (memberValue === TSTInfo.defaultValues(ORDERING));\n            case MESSAGE_IMPRINT$1:\n                return ((MessageImprint.compareWithDefault(HASH_ALGORITHM, memberValue.hashAlgorithm)) &&\n                    (MessageImprint.compareWithDefault(HASHED_MESSAGE, memberValue.hashedMessage)));\n            case SERIAL_NUMBER:\n            case NONCE$1:\n                return (memberValue.isEqual(TSTInfo.defaultValues(NONCE$1)));\n            case ACCURACY:\n                return ((Accuracy.compareWithDefault(SECONDS, memberValue.seconds)) &&\n                    (Accuracy.compareWithDefault(MILLIS, memberValue.millis)) &&\n                    (Accuracy.compareWithDefault(MICROS, memberValue.micros)));\n            case TSA:\n                return ((GeneralName.compareWithDefault(TYPE$4, memberValue.type)) &&\n                    (GeneralName.compareWithDefault(VALUE$5, memberValue.value)));\n            case EXTENSIONS$1:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || TST_INFO),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || TST_INFO_VERSION) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ name: (names.policy || TST_INFO_POLICY) }),\n                MessageImprint.schema(names.messageImprint || {\n                    names: {\n                        blockName: TST_INFO_MESSAGE_IMPRINT\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.serialNumber || TST_INFO_SERIAL_NUMBER) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ name: (names.genTime || TST_INFO_GEN_TIME) }),\n                Accuracy.schema(names.accuracy || {\n                    names: {\n                        blockName: TST_INFO_ACCURACY\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Boolean({\n                    name: (names.ordering || TST_INFO_ORDERING),\n                    optional: true\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n                    name: (names.nonce || TST_INFO_NONCE),\n                    optional: true\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [GeneralName.schema(names.tsa || {\n                            names: {\n                                blockName: TST_INFO_TSA\n                            }\n                        })]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.extensions || TST_INFO_EXTENSIONS),\n                            value: Extension.schema(names.extension || {})\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$4);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, TSTInfo.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result[TST_INFO_VERSION].valueBlock.valueDec;\n        this.policy = asn1.result[TST_INFO_POLICY].valueBlock.toString();\n        this.messageImprint = new MessageImprint({ schema: asn1.result[TST_INFO_MESSAGE_IMPRINT] });\n        this.serialNumber = asn1.result[TST_INFO_SERIAL_NUMBER];\n        this.genTime = asn1.result[TST_INFO_GEN_TIME].toDate();\n        if (TST_INFO_ACCURACY in asn1.result)\n            this.accuracy = new Accuracy({ schema: asn1.result[TST_INFO_ACCURACY] });\n        if (TST_INFO_ORDERING in asn1.result)\n            this.ordering = asn1.result[TST_INFO_ORDERING].valueBlock.value;\n        if (TST_INFO_NONCE in asn1.result)\n            this.nonce = asn1.result[TST_INFO_NONCE];\n        if (TST_INFO_TSA in asn1.result)\n            this.tsa = new GeneralName({ schema: asn1.result[TST_INFO_TSA] });\n        if (TST_INFO_EXTENSIONS in asn1.result)\n            this.extensions = Array.from(asn1.result[TST_INFO_EXTENSIONS], element => new Extension({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.policy }));\n        outputArray.push(this.messageImprint.toSchema());\n        outputArray.push(this.serialNumber);\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.GeneralizedTime({ valueDate: this.genTime }));\n        if (this.accuracy)\n            outputArray.push(this.accuracy.toSchema());\n        if (this.ordering !== undefined)\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Boolean({ value: this.ordering }));\n        if (this.nonce)\n            outputArray.push(this.nonce);\n        if (this.tsa) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: [this.tsa.toSchema()]\n            }));\n        }\n        if (this.extensions) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                optional: true,\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.extensions, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            policy: this.policy,\n            messageImprint: this.messageImprint.toJSON(),\n            serialNumber: this.serialNumber.toJSON(),\n            genTime: this.genTime\n        };\n        if (this.accuracy)\n            res.accuracy = this.accuracy.toJSON();\n        if (this.ordering !== undefined)\n            res.ordering = this.ordering;\n        if (this.nonce)\n            res.nonce = this.nonce.toJSON();\n        if (this.tsa)\n            res.tsa = this.tsa.toJSON();\n        if (this.extensions)\n            res.extensions = Array.from(this.extensions, o => o.toJSON());\n        return res;\n    }\n    async verify(params, crypto = getCrypto(true)) {\n        if (!params.data) {\n            throw new Error(\"\\\"data\\\" is a mandatory attribute for TST_INFO verification\");\n        }\n        const data = params.data;\n        if (params.notBefore) {\n            if (this.genTime < params.notBefore)\n                throw new Error(\"Generation time for TSTInfo object is less than notBefore value\");\n        }\n        if (params.notAfter) {\n            if (this.genTime > params.notAfter)\n                throw new Error(\"Generation time for TSTInfo object is more than notAfter value\");\n        }\n        const shaAlgorithm = crypto.getAlgorithmByOID(this.messageImprint.hashAlgorithm.algorithmId, true, \"MessageImprint.hashAlgorithm\");\n        const hash = await crypto.digest(shaAlgorithm.name, new Uint8Array(data));\n        return pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.isEqual(hash, this.messageImprint.hashedMessage.valueBlock.valueHexView);\n    }\n}\nTSTInfo.CLASS_NAME = \"TSTInfo\";\n\nconst VERSION$2 = \"version\";\nconst DIGEST_ALGORITHMS = \"digestAlgorithms\";\nconst ENCAP_CONTENT_INFO = \"encapContentInfo\";\nconst CERTIFICATES = \"certificates\";\nconst CRLS = \"crls\";\nconst SIGNER_INFOS = \"signerInfos\";\nconst OCSPS = \"ocsps\";\nconst SIGNED_DATA = \"SignedData\";\nconst SIGNED_DATA_VERSION = `${SIGNED_DATA}.${VERSION$2}`;\nconst SIGNED_DATA_DIGEST_ALGORITHMS = `${SIGNED_DATA}.${DIGEST_ALGORITHMS}`;\nconst SIGNED_DATA_ENCAP_CONTENT_INFO = `${SIGNED_DATA}.${ENCAP_CONTENT_INFO}`;\nconst SIGNED_DATA_CERTIFICATES = `${SIGNED_DATA}.${CERTIFICATES}`;\nconst SIGNED_DATA_CRLS = `${SIGNED_DATA}.${CRLS}`;\nconst SIGNED_DATA_SIGNER_INFOS = `${SIGNED_DATA}.${SIGNER_INFOS}`;\nconst CLEAR_PROPS$3 = [\n    SIGNED_DATA_VERSION,\n    SIGNED_DATA_DIGEST_ALGORITHMS,\n    SIGNED_DATA_ENCAP_CONTENT_INFO,\n    SIGNED_DATA_CERTIFICATES,\n    SIGNED_DATA_CRLS,\n    SIGNED_DATA_SIGNER_INFOS\n];\nclass SignedDataVerifyError extends Error {\n    constructor({ message, code = 0, date = new Date(), signatureVerified = null, signerCertificate = null, signerCertificateVerified = null, timestampSerial = null, certificatePath = [], }) {\n        super(message);\n        this.name = \"SignedDataVerifyError\";\n        this.date = date;\n        this.code = code;\n        this.timestampSerial = timestampSerial;\n        this.signatureVerified = signatureVerified;\n        this.signerCertificate = signerCertificate;\n        this.signerCertificateVerified = signerCertificateVerified;\n        this.certificatePath = certificatePath;\n    }\n}\nclass SignedData extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$2, SignedData.defaultValues(VERSION$2));\n        this.digestAlgorithms = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, DIGEST_ALGORITHMS, SignedData.defaultValues(DIGEST_ALGORITHMS));\n        this.encapContentInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, ENCAP_CONTENT_INFO, SignedData.defaultValues(ENCAP_CONTENT_INFO));\n        if (CERTIFICATES in parameters) {\n            this.certificates = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERTIFICATES, SignedData.defaultValues(CERTIFICATES));\n        }\n        if (CRLS in parameters) {\n            this.crls = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CRLS, SignedData.defaultValues(CRLS));\n        }\n        if (OCSPS in parameters) {\n            this.ocsps = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, OCSPS, SignedData.defaultValues(OCSPS));\n        }\n        this.signerInfos = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, SIGNER_INFOS, SignedData.defaultValues(SIGNER_INFOS));\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$2:\n                return 0;\n            case DIGEST_ALGORITHMS:\n                return [];\n            case ENCAP_CONTENT_INFO:\n                return new EncapsulatedContentInfo();\n            case CERTIFICATES:\n                return [];\n            case CRLS:\n                return [];\n            case OCSPS:\n                return [];\n            case SIGNER_INFOS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$2:\n                return (memberValue === SignedData.defaultValues(VERSION$2));\n            case ENCAP_CONTENT_INFO:\n                return EncapsulatedContentInfo.compareWithDefault(\"eContentType\", memberValue.eContentType) &&\n                    EncapsulatedContentInfo.compareWithDefault(\"eContent\", memberValue.eContent);\n            case DIGEST_ALGORITHMS:\n            case CERTIFICATES:\n            case CRLS:\n            case OCSPS:\n            case SIGNER_INFOS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        if (names.optional === undefined) {\n            names.optional = false;\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || SIGNED_DATA),\n            optional: names.optional,\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || SIGNED_DATA_VERSION) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.digestAlgorithms || SIGNED_DATA_DIGEST_ALGORITHMS),\n                            value: AlgorithmIdentifier.schema()\n                        })\n                    ]\n                }),\n                EncapsulatedContentInfo.schema(names.encapContentInfo || {\n                    names: {\n                        blockName: SIGNED_DATA_ENCAP_CONTENT_INFO\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    name: (names.certificates || SIGNED_DATA_CERTIFICATES),\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: CertificateSet.schema().valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 1\n                    },\n                    value: RevocationInfoChoices.schema(names.crls || {\n                        names: {\n                            crls: SIGNED_DATA_CRLS\n                        }\n                    }).valueBlock.value\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.signerInfos || SIGNED_DATA_SIGNER_INFOS),\n                            value: SignerInfo.schema()\n                        })\n                    ]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$3);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, SignedData.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result[SIGNED_DATA_VERSION].valueBlock.valueDec;\n        if (SIGNED_DATA_DIGEST_ALGORITHMS in asn1.result)\n            this.digestAlgorithms = Array.from(asn1.result[SIGNED_DATA_DIGEST_ALGORITHMS], algorithm => new AlgorithmIdentifier({ schema: algorithm }));\n        this.encapContentInfo = new EncapsulatedContentInfo({ schema: asn1.result[SIGNED_DATA_ENCAP_CONTENT_INFO] });\n        if (SIGNED_DATA_CERTIFICATES in asn1.result) {\n            const certificateSet = new CertificateSet({\n                schema: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n                    value: asn1.result[SIGNED_DATA_CERTIFICATES].valueBlock.value\n                })\n            });\n            this.certificates = certificateSet.certificates.slice(0);\n        }\n        if (SIGNED_DATA_CRLS in asn1.result) {\n            this.crls = Array.from(asn1.result[SIGNED_DATA_CRLS], (crl) => {\n                if (crl.idBlock.tagClass === 1)\n                    return new CertificateRevocationList({ schema: crl });\n                crl.idBlock.tagClass = 1;\n                crl.idBlock.tagNumber = 16;\n                return new OtherRevocationInfoFormat({ schema: crl });\n            });\n        }\n        if (SIGNED_DATA_SIGNER_INFOS in asn1.result)\n            this.signerInfos = Array.from(asn1.result[SIGNED_DATA_SIGNER_INFOS], signerInfoSchema => new SignerInfo({ schema: signerInfoSchema }));\n    }\n    toSchema(encodeFlag = false) {\n        const outputArray = [];\n        if ((this.certificates && this.certificates.length && this.certificates.some(o => o instanceof OtherCertificateFormat))\n            || (this.crls && this.crls.length && this.crls.some(o => o instanceof OtherRevocationInfoFormat))) {\n            this.version = 5;\n        }\n        else if (this.certificates && this.certificates.length && this.certificates.some(o => o instanceof AttributeCertificateV2)) {\n            this.version = 4;\n        }\n        else if ((this.certificates && this.certificates.length && this.certificates.some(o => o instanceof AttributeCertificateV1))\n            || this.signerInfos.some(o => o.version === 3)\n            || this.encapContentInfo.eContentType !== SignedData.ID_DATA) {\n            this.version = 3;\n        }\n        else {\n            this.version = 1;\n        }\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n            value: Array.from(this.digestAlgorithms, algorithm => algorithm.toSchema())\n        }));\n        outputArray.push(this.encapContentInfo.toSchema());\n        if (this.certificates) {\n            const certificateSet = new CertificateSet({ certificates: this.certificates });\n            const certificateSetSchema = certificateSet.toSchema();\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: certificateSetSchema.valueBlock.value\n            }));\n        }\n        if (this.crls) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 1\n                },\n                value: Array.from(this.crls, crl => {\n                    if (crl instanceof OtherRevocationInfoFormat) {\n                        const crlSchema = crl.toSchema();\n                        crlSchema.idBlock.tagClass = 3;\n                        crlSchema.idBlock.tagNumber = 1;\n                        return crlSchema;\n                    }\n                    return crl.toSchema(encodeFlag);\n                })\n            }));\n        }\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Set({\n            value: Array.from(this.signerInfos, signerInfo => signerInfo.toSchema())\n        }));\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            digestAlgorithms: Array.from(this.digestAlgorithms, algorithm => algorithm.toJSON()),\n            encapContentInfo: this.encapContentInfo.toJSON(),\n            signerInfos: Array.from(this.signerInfos, signerInfo => signerInfo.toJSON()),\n        };\n        if (this.certificates) {\n            res.certificates = Array.from(this.certificates, certificate => certificate.toJSON());\n        }\n        if (this.crls) {\n            res.crls = Array.from(this.crls, crl => crl.toJSON());\n        }\n        return res;\n    }\n    async verify({ signer = (-1), data = (EMPTY_BUFFER), trustedCerts = [], checkDate = (new Date()), checkChain = false, passedWhenNotRevValues = false, extendedMode = false, findOrigin = null, findIssuer = null } = {}, crypto = getCrypto(true)) {\n        let signerCert = null;\n        let timestampSerial = null;\n        try {\n            let messageDigestValue = EMPTY_BUFFER;\n            let shaAlgorithm = EMPTY_STRING;\n            let certificatePath = [];\n            const signerInfo = this.signerInfos[signer];\n            if (!signerInfo) {\n                throw new SignedDataVerifyError({\n                    date: checkDate,\n                    code: 1,\n                    message: \"Unable to get signer by supplied index\",\n                });\n            }\n            if (!this.certificates) {\n                throw new SignedDataVerifyError({\n                    date: checkDate,\n                    code: 2,\n                    message: \"No certificates attached to this signed data\",\n                });\n            }\n            if (signerInfo.sid instanceof IssuerAndSerialNumber) {\n                for (const certificate of this.certificates) {\n                    if (!(certificate instanceof Certificate))\n                        continue;\n                    if ((certificate.issuer.isEqual(signerInfo.sid.issuer)) &&\n                        (certificate.serialNumber.isEqual(signerInfo.sid.serialNumber))) {\n                        signerCert = certificate;\n                        break;\n                    }\n                }\n            }\n            else {\n                const sid = signerInfo.sid;\n                const keyId = sid.idBlock.isConstructed\n                    ? sid.valueBlock.value[0].valueBlock.valueHex\n                    : sid.valueBlock.valueHex;\n                for (const certificate of this.certificates) {\n                    if (!(certificate instanceof Certificate)) {\n                        continue;\n                    }\n                    const digest = await crypto.digest({ name: \"sha-1\" }, certificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);\n                    if (pvutils__WEBPACK_IMPORTED_MODULE_2__.isEqualBuffer(digest, keyId)) {\n                        signerCert = certificate;\n                        break;\n                    }\n                }\n            }\n            if (!signerCert) {\n                throw new SignedDataVerifyError({\n                    date: checkDate,\n                    code: 3,\n                    message: \"Unable to find signer certificate\",\n                });\n            }\n            if (this.encapContentInfo.eContentType === id_eContentType_TSTInfo) {\n                if (!this.encapContentInfo.eContent) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 15,\n                        message: \"Error during verification: TSTInfo eContent is empty\",\n                        signatureVerified: null,\n                        signerCertificate: signerCert,\n                        timestampSerial,\n                        signerCertificateVerified: true\n                    });\n                }\n                let tstInfo;\n                try {\n                    tstInfo = TSTInfo.fromBER(this.encapContentInfo.eContent.valueBlock.valueHexView);\n                }\n                catch (ex) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 15,\n                        message: \"Error during verification: TSTInfo wrong ASN.1 schema \",\n                        signatureVerified: null,\n                        signerCertificate: signerCert,\n                        timestampSerial,\n                        signerCertificateVerified: true\n                    });\n                }\n                checkDate = tstInfo.genTime;\n                timestampSerial = tstInfo.serialNumber.valueBlock.valueHexView.slice();\n                if (data.byteLength === 0) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 4,\n                        message: \"Missed detached data input array\",\n                    });\n                }\n                if (!(await tstInfo.verify({ data }, crypto))) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 15,\n                        message: \"Error during verification: TSTInfo verification is failed\",\n                        signatureVerified: false,\n                        signerCertificate: signerCert,\n                        timestampSerial,\n                        signerCertificateVerified: true\n                    });\n                }\n            }\n            if (checkChain) {\n                const certs = this.certificates.filter(certificate => (certificate instanceof Certificate && !!checkCA(certificate, signerCert)));\n                const chainParams = {\n                    checkDate,\n                    certs,\n                    trustedCerts,\n                };\n                if (findIssuer) {\n                    chainParams.findIssuer = findIssuer;\n                }\n                if (findOrigin) {\n                    chainParams.findOrigin = findOrigin;\n                }\n                const chainEngine = new CertificateChainValidationEngine(chainParams);\n                chainEngine.certs.push(signerCert);\n                if (this.crls) {\n                    for (const crl of this.crls) {\n                        if (\"thisUpdate\" in crl)\n                            chainEngine.crls.push(crl);\n                        else {\n                            if (crl.otherRevInfoFormat === id_PKIX_OCSP_Basic)\n                                chainEngine.ocsps.push(new BasicOCSPResponse({ schema: crl.otherRevInfo }));\n                        }\n                    }\n                }\n                if (this.ocsps) {\n                    chainEngine.ocsps.push(...(this.ocsps));\n                }\n                const verificationResult = await chainEngine.verify({ passedWhenNotRevValues }, crypto)\n                    .catch(e => {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 5,\n                        message: `Validation of signer's certificate failed with error: ${((e instanceof Object) ? e.resultMessage : e)}`,\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: false\n                    });\n                });\n                if (verificationResult.certificatePath) {\n                    certificatePath = verificationResult.certificatePath;\n                }\n                if (!verificationResult.result)\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 5,\n                        message: `Validation of signer's certificate failed: ${verificationResult.resultMessage}`,\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: false\n                    });\n            }\n            const signerInfoHashAlgorithm = crypto.getAlgorithmByOID(signerInfo.digestAlgorithm.algorithmId);\n            if (!(\"name\" in signerInfoHashAlgorithm)) {\n                throw new SignedDataVerifyError({\n                    date: checkDate,\n                    code: 7,\n                    message: `Unsupported signature algorithm: ${signerInfo.digestAlgorithm.algorithmId}`,\n                    signerCertificate: signerCert,\n                    signerCertificateVerified: true\n                });\n            }\n            shaAlgorithm = signerInfoHashAlgorithm.name;\n            const eContent = this.encapContentInfo.eContent;\n            if (eContent) {\n                if ((eContent.idBlock.tagClass === 1) &&\n                    (eContent.idBlock.tagNumber === 4)) {\n                    data = eContent.getValue();\n                }\n                else\n                    data = eContent.valueBlock.valueBeforeDecodeView;\n            }\n            else {\n                if (data.byteLength === 0) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 8,\n                        message: \"Missed detached data input array\",\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: true\n                    });\n                }\n            }\n            if (signerInfo.signedAttrs) {\n                let foundContentType = false;\n                let foundMessageDigest = false;\n                for (const attribute of signerInfo.signedAttrs.attributes) {\n                    if (attribute.type === \"1.2.840.113549.1.9.3\")\n                        foundContentType = true;\n                    if (attribute.type === \"1.2.840.113549.1.9.4\") {\n                        foundMessageDigest = true;\n                        messageDigestValue = attribute.values[0].valueBlock.valueHex;\n                    }\n                    if (foundContentType && foundMessageDigest)\n                        break;\n                }\n                if (foundContentType === false) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 9,\n                        message: \"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: true\n                    });\n                }\n                if (foundMessageDigest === false) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 10,\n                        message: \"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\n                        signatureVerified: null,\n                        signerCertificate: signerCert,\n                        signerCertificateVerified: true\n                    });\n                }\n            }\n            if (signerInfo.signedAttrs) {\n                const messageDigest = await crypto.digest(shaAlgorithm, new Uint8Array(data));\n                if (!pvutils__WEBPACK_IMPORTED_MODULE_2__.isEqualBuffer(messageDigest, messageDigestValue)) {\n                    throw new SignedDataVerifyError({\n                        date: checkDate,\n                        code: 15,\n                        message: \"Error during verification: Message digest doesn't match\",\n                        signatureVerified: null,\n                        signerCertificate: signerCert,\n                        timestampSerial,\n                        signerCertificateVerified: true\n                    });\n                }\n                data = signerInfo.signedAttrs.encodedValue;\n            }\n            const verifyResult = signerInfo.signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.1\"\n                ? await crypto.verifyWithPublicKey(data, signerInfo.signature, signerCert.subjectPublicKeyInfo, signerInfo.signatureAlgorithm, shaAlgorithm)\n                : await crypto.verifyWithPublicKey(data, signerInfo.signature, signerCert.subjectPublicKeyInfo, signerInfo.signatureAlgorithm);\n            if (extendedMode) {\n                return {\n                    date: checkDate,\n                    code: 14,\n                    message: EMPTY_STRING,\n                    signatureVerified: verifyResult,\n                    signerCertificate: signerCert,\n                    timestampSerial,\n                    signerCertificateVerified: true,\n                    certificatePath\n                };\n            }\n            else {\n                return verifyResult;\n            }\n        }\n        catch (e) {\n            if (e instanceof SignedDataVerifyError) {\n                throw e;\n            }\n            throw new SignedDataVerifyError({\n                date: checkDate,\n                code: 15,\n                message: `Error during verification: ${e instanceof Error ? e.message : e}`,\n                signatureVerified: null,\n                signerCertificate: signerCert,\n                timestampSerial,\n                signerCertificateVerified: true\n            });\n        }\n    }\n    async sign(privateKey, signerIndex, hashAlgorithm = \"SHA-1\", data = (EMPTY_BUFFER), crypto = getCrypto(true)) {\n        var _a;\n        if (!privateKey)\n            throw new Error(\"Need to provide a private key for signing\");\n        const signerInfo = this.signerInfos[signerIndex];\n        if (!signerInfo) {\n            throw new RangeError(\"SignerInfo index is out of range\");\n        }\n        if (!((_a = signerInfo.signedAttrs) === null || _a === void 0 ? void 0 : _a.attributes.length) && \"hash\" in privateKey.algorithm && \"hash\" in privateKey.algorithm && privateKey.algorithm.hash) {\n            hashAlgorithm = privateKey.algorithm.hash.name;\n        }\n        const hashAlgorithmOID = crypto.getOIDByAlgorithm({ name: hashAlgorithm }, true, \"hashAlgorithm\");\n        if ((this.digestAlgorithms.filter(algorithm => algorithm.algorithmId === hashAlgorithmOID)).length === 0) {\n            this.digestAlgorithms.push(new AlgorithmIdentifier({\n                algorithmId: hashAlgorithmOID,\n                algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n            }));\n        }\n        signerInfo.digestAlgorithm = new AlgorithmIdentifier({\n            algorithmId: hashAlgorithmOID,\n            algorithmParams: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Null()\n        });\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\n        const parameters = signatureParams.parameters;\n        signerInfo.signatureAlgorithm = signatureParams.signatureAlgorithm;\n        if (signerInfo.signedAttrs) {\n            if (signerInfo.signedAttrs.encodedValue.byteLength !== 0)\n                data = signerInfo.signedAttrs.encodedValue;\n            else {\n                data = signerInfo.signedAttrs.toSchema().toBER();\n                const view = pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toUint8Array(data);\n                view[0] = 0x31;\n            }\n        }\n        else {\n            const eContent = this.encapContentInfo.eContent;\n            if (eContent) {\n                if ((eContent.idBlock.tagClass === 1) &&\n                    (eContent.idBlock.tagNumber === 4)) {\n                    data = eContent.getValue();\n                }\n                else\n                    data = eContent.valueBlock.valueBeforeDecodeView;\n            }\n            else {\n                if (data.byteLength === 0)\n                    throw new Error(\"Missed detached data input array\");\n            }\n        }\n        const signature = await crypto.signWithPrivateKey(data, privateKey, parameters);\n        signerInfo.signature = new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: signature });\n    }\n}\nSignedData.CLASS_NAME = \"SignedData\";\nSignedData.ID_DATA = id_ContentType_Data;\n\nconst VERSION$1 = \"version\";\nconst AUTH_SAFE = \"authSafe\";\nconst MAC_DATA = \"macData\";\nconst PARSED_VALUE = \"parsedValue\";\nconst CLERA_PROPS = [\n    VERSION$1,\n    AUTH_SAFE,\n    MAC_DATA\n];\nclass PFX extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION$1, PFX.defaultValues(VERSION$1));\n        this.authSafe = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, AUTH_SAFE, PFX.defaultValues(AUTH_SAFE));\n        if (MAC_DATA in parameters) {\n            this.macData = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MAC_DATA, PFX.defaultValues(MAC_DATA));\n        }\n        if (PARSED_VALUE in parameters) {\n            this.parsedValue = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, PARSED_VALUE, PFX.defaultValues(PARSED_VALUE));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION$1:\n                return 3;\n            case AUTH_SAFE:\n                return (new ContentInfo());\n            case MAC_DATA:\n                return (new MacData());\n            case PARSED_VALUE:\n                return {};\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION$1:\n                return (memberValue === PFX.defaultValues(memberName));\n            case AUTH_SAFE:\n                return ((ContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\n                    (ContentInfo.compareWithDefault(\"content\", memberValue.content)));\n            case MAC_DATA:\n                return ((MacData.compareWithDefault(\"mac\", memberValue.mac)) &&\n                    (MacData.compareWithDefault(\"macSalt\", memberValue.macSalt)) &&\n                    (MacData.compareWithDefault(\"iterations\", memberValue.iterations)));\n            case PARSED_VALUE:\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || VERSION$1) }),\n                ContentInfo.schema(names.authSafe || {\n                    names: {\n                        blockName: AUTH_SAFE\n                    }\n                }),\n                MacData.schema(names.macData || {\n                    names: {\n                        blockName: MAC_DATA,\n                        optional: true\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLERA_PROPS);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PFX.schema({\n            names: {\n                version: VERSION$1,\n                authSafe: {\n                    names: {\n                        blockName: AUTH_SAFE\n                    }\n                },\n                macData: {\n                    names: {\n                        blockName: MAC_DATA\n                    }\n                }\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result.version.valueBlock.valueDec;\n        this.authSafe = new ContentInfo({ schema: asn1.result.authSafe });\n        if (MAC_DATA in asn1.result)\n            this.macData = new MacData({ schema: asn1.result.macData });\n    }\n    toSchema() {\n        const outputArray = [\n            new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }),\n            this.authSafe.toSchema()\n        ];\n        if (this.macData) {\n            outputArray.push(this.macData.toSchema());\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const output = {\n            version: this.version,\n            authSafe: this.authSafe.toJSON()\n        };\n        if (this.macData) {\n            output.macData = this.macData.toJSON();\n        }\n        return output;\n    }\n    async makeInternalValues(parameters = {}, crypto = getCrypto(true)) {\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        if (!this.parsedValue) {\n            throw new Error(\"Please call \\\"parseValues\\\" function first in order to make \\\"parsedValue\\\" data\");\n        }\n        ParameterError.assertEmpty(this.parsedValue.integrityMode, \"integrityMode\", \"parsedValue\");\n        ParameterError.assertEmpty(this.parsedValue.authenticatedSafe, \"authenticatedSafe\", \"parsedValue\");\n        switch (this.parsedValue.integrityMode) {\n            case 0:\n                {\n                    if (!(\"iterations\" in parameters))\n                        throw new ParameterError(\"iterations\");\n                    ParameterError.assertEmpty(parameters.pbkdf2HashAlgorithm, \"pbkdf2HashAlgorithm\");\n                    ParameterError.assertEmpty(parameters.hmacHashAlgorithm, \"hmacHashAlgorithm\");\n                    ParameterError.assertEmpty(parameters.password, \"password\");\n                    const saltBuffer = new ArrayBuffer(64);\n                    const saltView = new Uint8Array(saltBuffer);\n                    crypto.getRandomValues(saltView);\n                    const data = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\n                    this.authSafe = new ContentInfo({\n                        contentType: ContentInfo.DATA,\n                        content: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: data })\n                    });\n                    const result = await crypto.stampDataWithPassword({\n                        password: parameters.password,\n                        hashAlgorithm: parameters.hmacHashAlgorithm,\n                        salt: saltBuffer,\n                        iterationCount: parameters.iterations,\n                        contentToStamp: data\n                    });\n                    this.macData = new MacData({\n                        mac: new DigestInfo({\n                            digestAlgorithm: new AlgorithmIdentifier({\n                                algorithmId: crypto.getOIDByAlgorithm({ name: parameters.hmacHashAlgorithm }, true, \"hmacHashAlgorithm\"),\n                            }),\n                            digest: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: result })\n                        }),\n                        macSalt: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: saltBuffer }),\n                        iterations: parameters.iterations\n                    });\n                }\n                break;\n            case 1:\n                {\n                    if (!(\"signingCertificate\" in parameters)) {\n                        throw new ParameterError(\"signingCertificate\");\n                    }\n                    ParameterError.assertEmpty(parameters.privateKey, \"privateKey\");\n                    ParameterError.assertEmpty(parameters.hashAlgorithm, \"hashAlgorithm\");\n                    const toBeSigned = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\n                    const cmsSigned = new SignedData({\n                        version: 1,\n                        encapContentInfo: new EncapsulatedContentInfo({\n                            eContentType: \"1.2.840.113549.1.7.1\",\n                            eContent: new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: toBeSigned })\n                        }),\n                        certificates: [parameters.signingCertificate]\n                    });\n                    const result = await crypto.digest({ name: parameters.hashAlgorithm }, new Uint8Array(toBeSigned));\n                    const signedAttr = [];\n                    signedAttr.push(new Attribute({\n                        type: \"1.2.840.113549.1.9.3\",\n                        values: [\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: \"1.2.840.113549.1.7.1\" })\n                        ]\n                    }));\n                    signedAttr.push(new Attribute({\n                        type: \"1.2.840.113549.1.9.5\",\n                        values: [\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.UTCTime({ valueDate: new Date() })\n                        ]\n                    }));\n                    signedAttr.push(new Attribute({\n                        type: \"1.2.840.113549.1.9.4\",\n                        values: [\n                            new asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString({ valueHex: result })\n                        ]\n                    }));\n                    cmsSigned.signerInfos.push(new SignerInfo({\n                        version: 1,\n                        sid: new IssuerAndSerialNumber({\n                            issuer: parameters.signingCertificate.issuer,\n                            serialNumber: parameters.signingCertificate.serialNumber\n                        }),\n                        signedAttrs: new SignedAndUnsignedAttributes({\n                            type: 0,\n                            attributes: signedAttr\n                        })\n                    }));\n                    await cmsSigned.sign(parameters.privateKey, 0, parameters.hashAlgorithm, undefined, crypto);\n                    this.authSafe = new ContentInfo({\n                        contentType: \"1.2.840.113549.1.7.2\",\n                        content: cmsSigned.toSchema(true)\n                    });\n                }\n                break;\n            default:\n                throw new Error(`Parameter \"integrityMode\" has unknown value: ${this.parsedValue.integrityMode}`);\n        }\n    }\n    async parseInternalValues(parameters, crypto = getCrypto(true)) {\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\n        if (parameters.checkIntegrity === undefined) {\n            parameters.checkIntegrity = true;\n        }\n        this.parsedValue = {};\n        switch (this.authSafe.contentType) {\n            case ContentInfo.DATA:\n                {\n                    ParameterError.assertEmpty(parameters.password, \"password\");\n                    this.parsedValue.integrityMode = 0;\n                    ArgumentError.assert(this.authSafe.content, \"authSafe.content\", asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString);\n                    const authSafeContent = this.authSafe.content.getValue();\n                    this.parsedValue.authenticatedSafe = AuthenticatedSafe.fromBER(authSafeContent);\n                    if (parameters.checkIntegrity) {\n                        if (!this.macData) {\n                            throw new Error(\"Absent \\\"macData\\\" value, can not check PKCS#12 data integrity\");\n                        }\n                        const hashAlgorithm = crypto.getAlgorithmByOID(this.macData.mac.digestAlgorithm.algorithmId, true, \"digestAlgorithm\");\n                        const result = await crypto.verifyDataStampedWithPassword({\n                            password: parameters.password,\n                            hashAlgorithm: hashAlgorithm.name,\n                            salt: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(this.macData.macSalt.valueBlock.valueHexView),\n                            iterationCount: this.macData.iterations || 1,\n                            contentToVerify: authSafeContent,\n                            signatureToVerify: pvtsutils__WEBPACK_IMPORTED_MODULE_1__.BufferSourceConverter.toArrayBuffer(this.macData.mac.digest.valueBlock.valueHexView),\n                        });\n                        if (!result) {\n                            throw new Error(\"Integrity for the PKCS#12 data is broken!\");\n                        }\n                    }\n                }\n                break;\n            case ContentInfo.SIGNED_DATA:\n                {\n                    this.parsedValue.integrityMode = 1;\n                    const cmsSigned = new SignedData({ schema: this.authSafe.content });\n                    const eContent = cmsSigned.encapContentInfo.eContent;\n                    ParameterError.assert(eContent, \"eContent\", \"cmsSigned.encapContentInfo\");\n                    ArgumentError.assert(eContent, \"eContent\", asn1js__WEBPACK_IMPORTED_MODULE_0__.OctetString);\n                    const data = eContent.getValue();\n                    this.parsedValue.authenticatedSafe = AuthenticatedSafe.fromBER(data);\n                    const ok = await cmsSigned.verify({ signer: 0, checkChain: false }, crypto);\n                    if (!ok) {\n                        throw new Error(\"Integrity for the PKCS#12 data is broken!\");\n                    }\n                }\n                break;\n            default:\n                throw new Error(`Incorrect value for \"this.authSafe.contentType\": ${this.authSafe.contentType}`);\n        }\n    }\n}\nPFX.CLASS_NAME = \"PFX\";\n\nconst STATUS$1 = \"status\";\nconst STATUS_STRINGS = \"statusStrings\";\nconst FAIL_INFO = \"failInfo\";\nconst CLEAR_PROPS$2 = [\n    STATUS$1,\n    STATUS_STRINGS,\n    FAIL_INFO\n];\nvar PKIStatus;\n(function (PKIStatus) {\n    PKIStatus[PKIStatus[\"granted\"] = 0] = \"granted\";\n    PKIStatus[PKIStatus[\"grantedWithMods\"] = 1] = \"grantedWithMods\";\n    PKIStatus[PKIStatus[\"rejection\"] = 2] = \"rejection\";\n    PKIStatus[PKIStatus[\"waiting\"] = 3] = \"waiting\";\n    PKIStatus[PKIStatus[\"revocationWarning\"] = 4] = \"revocationWarning\";\n    PKIStatus[PKIStatus[\"revocationNotification\"] = 5] = \"revocationNotification\";\n})(PKIStatus || (PKIStatus = {}));\nclass PKIStatusInfo extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.status = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, STATUS$1, PKIStatusInfo.defaultValues(STATUS$1));\n        if (STATUS_STRINGS in parameters) {\n            this.statusStrings = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, STATUS_STRINGS, PKIStatusInfo.defaultValues(STATUS_STRINGS));\n        }\n        if (FAIL_INFO in parameters) {\n            this.failInfo = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, FAIL_INFO, PKIStatusInfo.defaultValues(FAIL_INFO));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case STATUS$1:\n                return 2;\n            case STATUS_STRINGS:\n                return [];\n            case FAIL_INFO:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case STATUS$1:\n                return (memberValue === PKIStatusInfo.defaultValues(memberName));\n            case STATUS_STRINGS:\n                return (memberValue.length === 0);\n            case FAIL_INFO:\n                return (memberValue.isEqual(PKIStatusInfo.defaultValues(memberName)));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || EMPTY_STRING),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.status || EMPTY_STRING) }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                    optional: true,\n                    value: [\n                        new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.statusStrings || EMPTY_STRING),\n                            value: new asn1js__WEBPACK_IMPORTED_MODULE_0__.Utf8String()\n                        })\n                    ]\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.BitString({\n                    name: (names.failInfo || EMPTY_STRING),\n                    optional: true\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$2);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, PKIStatusInfo.schema({\n            names: {\n                status: STATUS$1,\n                statusStrings: STATUS_STRINGS,\n                failInfo: FAIL_INFO\n            }\n        }));\n        AsnError.assertSchema(asn1, this.className);\n        const _status = asn1.result.status;\n        if ((_status.valueBlock.isHexOnly === true) ||\n            (_status.valueBlock.valueDec < 0) ||\n            (_status.valueBlock.valueDec > 5))\n            throw new Error(\"PKIStatusInfo \\\"status\\\" has invalid value\");\n        this.status = _status.valueBlock.valueDec;\n        if (STATUS_STRINGS in asn1.result)\n            this.statusStrings = asn1.result.statusStrings;\n        if (FAIL_INFO in asn1.result)\n            this.failInfo = asn1.result.failInfo;\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.status }));\n        if (this.statusStrings) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n                optional: true,\n                value: this.statusStrings\n            }));\n        }\n        if (this.failInfo) {\n            outputArray.push(this.failInfo);\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            status: this.status\n        };\n        if (this.statusStrings) {\n            res.statusStrings = Array.from(this.statusStrings, o => o.toJSON());\n        }\n        if (this.failInfo) {\n            res.failInfo = this.failInfo.toJSON();\n        }\n        return res;\n    }\n}\nPKIStatusInfo.CLASS_NAME = \"PKIStatusInfo\";\n\nconst VERSION = \"version\";\nconst MESSAGE_IMPRINT = \"messageImprint\";\nconst REQ_POLICY = \"reqPolicy\";\nconst NONCE = \"nonce\";\nconst CERT_REQ = \"certReq\";\nconst EXTENSIONS = \"extensions\";\nconst TIME_STAMP_REQ = \"TimeStampReq\";\nconst TIME_STAMP_REQ_VERSION = `${TIME_STAMP_REQ}.${VERSION}`;\nconst TIME_STAMP_REQ_MESSAGE_IMPRINT = `${TIME_STAMP_REQ}.${MESSAGE_IMPRINT}`;\nconst TIME_STAMP_REQ_POLICY = `${TIME_STAMP_REQ}.${REQ_POLICY}`;\nconst TIME_STAMP_REQ_NONCE = `${TIME_STAMP_REQ}.${NONCE}`;\nconst TIME_STAMP_REQ_CERT_REQ = `${TIME_STAMP_REQ}.${CERT_REQ}`;\nconst TIME_STAMP_REQ_EXTENSIONS = `${TIME_STAMP_REQ}.${EXTENSIONS}`;\nconst CLEAR_PROPS$1 = [\n    TIME_STAMP_REQ_VERSION,\n    TIME_STAMP_REQ_MESSAGE_IMPRINT,\n    TIME_STAMP_REQ_POLICY,\n    TIME_STAMP_REQ_NONCE,\n    TIME_STAMP_REQ_CERT_REQ,\n    TIME_STAMP_REQ_EXTENSIONS,\n];\nclass TimeStampReq extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.version = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, VERSION, TimeStampReq.defaultValues(VERSION));\n        this.messageImprint = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, MESSAGE_IMPRINT, TimeStampReq.defaultValues(MESSAGE_IMPRINT));\n        if (REQ_POLICY in parameters) {\n            this.reqPolicy = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, REQ_POLICY, TimeStampReq.defaultValues(REQ_POLICY));\n        }\n        if (NONCE in parameters) {\n            this.nonce = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, NONCE, TimeStampReq.defaultValues(NONCE));\n        }\n        if (CERT_REQ in parameters) {\n            this.certReq = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, CERT_REQ, TimeStampReq.defaultValues(CERT_REQ));\n        }\n        if (EXTENSIONS in parameters) {\n            this.extensions = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, EXTENSIONS, TimeStampReq.defaultValues(EXTENSIONS));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case VERSION:\n                return 0;\n            case MESSAGE_IMPRINT:\n                return new MessageImprint();\n            case REQ_POLICY:\n                return EMPTY_STRING;\n            case NONCE:\n                return new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer();\n            case CERT_REQ:\n                return false;\n            case EXTENSIONS:\n                return [];\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case VERSION:\n            case REQ_POLICY:\n            case CERT_REQ:\n                return (memberValue === TimeStampReq.defaultValues(memberName));\n            case MESSAGE_IMPRINT:\n                return ((MessageImprint.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\n                    (MessageImprint.compareWithDefault(\"hashedMessage\", memberValue.hashedMessage)));\n            case NONCE:\n                return (memberValue.isEqual(TimeStampReq.defaultValues(memberName)));\n            case EXTENSIONS:\n                return (memberValue.length === 0);\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || TIME_STAMP_REQ),\n            value: [\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ name: (names.version || TIME_STAMP_REQ_VERSION) }),\n                MessageImprint.schema(names.messageImprint || {\n                    names: {\n                        blockName: TIME_STAMP_REQ_MESSAGE_IMPRINT\n                    }\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({\n                    name: (names.reqPolicy || TIME_STAMP_REQ_POLICY),\n                    optional: true\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({\n                    name: (names.nonce || TIME_STAMP_REQ_NONCE),\n                    optional: true\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Boolean({\n                    name: (names.certReq || TIME_STAMP_REQ_CERT_REQ),\n                    optional: true\n                }),\n                new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                    optional: true,\n                    idBlock: {\n                        tagClass: 3,\n                        tagNumber: 0\n                    },\n                    value: [new asn1js__WEBPACK_IMPORTED_MODULE_0__.Repeated({\n                            name: (names.extensions || TIME_STAMP_REQ_EXTENSIONS),\n                            value: Extension.schema()\n                        })]\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS$1);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, TimeStampReq.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.version = asn1.result[TIME_STAMP_REQ_VERSION].valueBlock.valueDec;\n        this.messageImprint = new MessageImprint({ schema: asn1.result[TIME_STAMP_REQ_MESSAGE_IMPRINT] });\n        if (TIME_STAMP_REQ_POLICY in asn1.result)\n            this.reqPolicy = asn1.result[TIME_STAMP_REQ_POLICY].valueBlock.toString();\n        if (TIME_STAMP_REQ_NONCE in asn1.result)\n            this.nonce = asn1.result[TIME_STAMP_REQ_NONCE];\n        if (TIME_STAMP_REQ_CERT_REQ in asn1.result)\n            this.certReq = asn1.result[TIME_STAMP_REQ_CERT_REQ].valueBlock.value;\n        if (TIME_STAMP_REQ_EXTENSIONS in asn1.result)\n            this.extensions = Array.from(asn1.result[TIME_STAMP_REQ_EXTENSIONS], element => new Extension({ schema: element }));\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Integer({ value: this.version }));\n        outputArray.push(this.messageImprint.toSchema());\n        if (this.reqPolicy)\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.ObjectIdentifier({ value: this.reqPolicy }));\n        if (this.nonce)\n            outputArray.push(this.nonce);\n        if ((CERT_REQ in this) && (TimeStampReq.compareWithDefault(CERT_REQ, this.certReq) === false))\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Boolean({ value: this.certReq }));\n        if (this.extensions) {\n            outputArray.push(new asn1js__WEBPACK_IMPORTED_MODULE_0__.Constructed({\n                idBlock: {\n                    tagClass: 3,\n                    tagNumber: 0\n                },\n                value: Array.from(this.extensions, o => o.toSchema())\n            }));\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            version: this.version,\n            messageImprint: this.messageImprint.toJSON()\n        };\n        if (this.reqPolicy !== undefined)\n            res.reqPolicy = this.reqPolicy;\n        if (this.nonce !== undefined)\n            res.nonce = this.nonce.toJSON();\n        if ((this.certReq !== undefined) && (TimeStampReq.compareWithDefault(CERT_REQ, this.certReq) === false))\n            res.certReq = this.certReq;\n        if (this.extensions) {\n            res.extensions = Array.from(this.extensions, o => o.toJSON());\n        }\n        return res;\n    }\n}\nTimeStampReq.CLASS_NAME = \"TimeStampReq\";\n\nconst STATUS = \"status\";\nconst TIME_STAMP_TOKEN = \"timeStampToken\";\nconst TIME_STAMP_RESP = \"TimeStampResp\";\nconst TIME_STAMP_RESP_STATUS = `${TIME_STAMP_RESP}.${STATUS}`;\nconst TIME_STAMP_RESP_TOKEN = `${TIME_STAMP_RESP}.${TIME_STAMP_TOKEN}`;\nconst CLEAR_PROPS = [\n    TIME_STAMP_RESP_STATUS,\n    TIME_STAMP_RESP_TOKEN\n];\nclass TimeStampResp extends PkiObject {\n    constructor(parameters = {}) {\n        super();\n        this.status = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, STATUS, TimeStampResp.defaultValues(STATUS));\n        if (TIME_STAMP_TOKEN in parameters) {\n            this.timeStampToken = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, TIME_STAMP_TOKEN, TimeStampResp.defaultValues(TIME_STAMP_TOKEN));\n        }\n        if (parameters.schema) {\n            this.fromSchema(parameters.schema);\n        }\n    }\n    static defaultValues(memberName) {\n        switch (memberName) {\n            case STATUS:\n                return new PKIStatusInfo();\n            case TIME_STAMP_TOKEN:\n                return new ContentInfo();\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static compareWithDefault(memberName, memberValue) {\n        switch (memberName) {\n            case STATUS:\n                return ((PKIStatusInfo.compareWithDefault(STATUS, memberValue.status)) &&\n                    ((\"statusStrings\" in memberValue) === false) &&\n                    ((\"failInfo\" in memberValue) === false));\n            case TIME_STAMP_TOKEN:\n                return ((memberValue.contentType === EMPTY_STRING) &&\n                    (memberValue.content instanceof asn1js__WEBPACK_IMPORTED_MODULE_0__.Any));\n            default:\n                return super.defaultValues(memberName);\n        }\n    }\n    static schema(parameters = {}) {\n        const names = pvutils__WEBPACK_IMPORTED_MODULE_2__.getParametersValue(parameters, \"names\", {});\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            name: (names.blockName || TIME_STAMP_RESP),\n            value: [\n                PKIStatusInfo.schema(names.status || {\n                    names: {\n                        blockName: TIME_STAMP_RESP_STATUS\n                    }\n                }),\n                ContentInfo.schema(names.timeStampToken || {\n                    names: {\n                        blockName: TIME_STAMP_RESP_TOKEN,\n                        optional: true\n                    }\n                })\n            ]\n        }));\n    }\n    fromSchema(schema) {\n        pvutils__WEBPACK_IMPORTED_MODULE_2__.clearProps(schema, CLEAR_PROPS);\n        const asn1 = asn1js__WEBPACK_IMPORTED_MODULE_0__.compareSchema(schema, schema, TimeStampResp.schema());\n        AsnError.assertSchema(asn1, this.className);\n        this.status = new PKIStatusInfo({ schema: asn1.result[TIME_STAMP_RESP_STATUS] });\n        if (TIME_STAMP_RESP_TOKEN in asn1.result)\n            this.timeStampToken = new ContentInfo({ schema: asn1.result[TIME_STAMP_RESP_TOKEN] });\n    }\n    toSchema() {\n        const outputArray = [];\n        outputArray.push(this.status.toSchema());\n        if (this.timeStampToken) {\n            outputArray.push(this.timeStampToken.toSchema());\n        }\n        return (new asn1js__WEBPACK_IMPORTED_MODULE_0__.Sequence({\n            value: outputArray\n        }));\n    }\n    toJSON() {\n        const res = {\n            status: this.status.toJSON()\n        };\n        if (this.timeStampToken) {\n            res.timeStampToken = this.timeStampToken.toJSON();\n        }\n        return res;\n    }\n    async sign(privateKey, hashAlgorithm, crypto = getCrypto(true)) {\n        this.assertContentType();\n        const signed = new SignedData({ schema: this.timeStampToken.content });\n        return signed.sign(privateKey, 0, hashAlgorithm, undefined, crypto);\n    }\n    async verify(verificationParameters = { signer: 0, trustedCerts: [], data: EMPTY_BUFFER }, crypto = getCrypto(true)) {\n        this.assertContentType();\n        const signed = new SignedData({ schema: this.timeStampToken.content });\n        return signed.verify(verificationParameters, crypto);\n    }\n    assertContentType() {\n        if (!this.timeStampToken) {\n            throw new Error(\"timeStampToken is absent in TSP response\");\n        }\n        if (this.timeStampToken.contentType !== id_ContentType_SignedData) {\n            throw new Error(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\n        }\n    }\n}\nTimeStampResp.CLASS_NAME = \"TimeStampResp\";\n\nfunction initCryptoEngine() {\n    if (typeof self !== \"undefined\") {\n        if (\"crypto\" in self) {\n            let engineName = \"webcrypto\";\n            if (\"webkitSubtle\" in self.crypto) {\n                engineName = \"safari\";\n            }\n            setEngine(engineName, new CryptoEngine({ name: engineName, crypto: crypto }));\n        }\n    }\n    else if (typeof crypto !== \"undefined\" && \"webcrypto\" in crypto) {\n        const name = \"NodeJS ^15\";\n        const nodeCrypto = crypto.webcrypto;\n        setEngine(name, new CryptoEngine({ name, crypto: nodeCrypto }));\n    }\n}\n\ninitCryptoEngine();\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/pkijs/build/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/pvtsutils/build/index.js":
/*!***********************************************!*\
  !*** ./node_modules/pvtsutils/build/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n/*!\n * MIT License\n * \n * Copyright (c) 2017-2024 Peculiar Ventures, LLC\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n */\n\n\n\nconst ARRAY_BUFFER_NAME = \"[object ArrayBuffer]\";\nclass BufferSourceConverter {\n    static isArrayBuffer(data) {\n        return Object.prototype.toString.call(data) === ARRAY_BUFFER_NAME;\n    }\n    static toArrayBuffer(data) {\n        if (this.isArrayBuffer(data)) {\n            return data;\n        }\n        if (data.byteLength === data.buffer.byteLength) {\n            return data.buffer;\n        }\n        if (data.byteOffset === 0 && data.byteLength === data.buffer.byteLength) {\n            return data.buffer;\n        }\n        return this.toUint8Array(data.buffer)\n            .slice(data.byteOffset, data.byteOffset + data.byteLength)\n            .buffer;\n    }\n    static toUint8Array(data) {\n        return this.toView(data, Uint8Array);\n    }\n    static toView(data, type) {\n        if (data.constructor === type) {\n            return data;\n        }\n        if (this.isArrayBuffer(data)) {\n            return new type(data);\n        }\n        if (this.isArrayBufferView(data)) {\n            return new type(data.buffer, data.byteOffset, data.byteLength);\n        }\n        throw new TypeError(\"The provided value is not of type '(ArrayBuffer or ArrayBufferView)'\");\n    }\n    static isBufferSource(data) {\n        return this.isArrayBufferView(data)\n            || this.isArrayBuffer(data);\n    }\n    static isArrayBufferView(data) {\n        return ArrayBuffer.isView(data)\n            || (data && this.isArrayBuffer(data.buffer));\n    }\n    static isEqual(a, b) {\n        const aView = BufferSourceConverter.toUint8Array(a);\n        const bView = BufferSourceConverter.toUint8Array(b);\n        if (aView.length !== bView.byteLength) {\n            return false;\n        }\n        for (let i = 0; i < aView.length; i++) {\n            if (aView[i] !== bView[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    static concat(...args) {\n        let buffers;\n        if (Array.isArray(args[0]) && !(args[1] instanceof Function)) {\n            buffers = args[0];\n        }\n        else if (Array.isArray(args[0]) && args[1] instanceof Function) {\n            buffers = args[0];\n        }\n        else {\n            if (args[args.length - 1] instanceof Function) {\n                buffers = args.slice(0, args.length - 1);\n            }\n            else {\n                buffers = args;\n            }\n        }\n        let size = 0;\n        for (const buffer of buffers) {\n            size += buffer.byteLength;\n        }\n        const res = new Uint8Array(size);\n        let offset = 0;\n        for (const buffer of buffers) {\n            const view = this.toUint8Array(buffer);\n            res.set(view, offset);\n            offset += view.length;\n        }\n        if (args[args.length - 1] instanceof Function) {\n            return this.toView(res, args[args.length - 1]);\n        }\n        return res.buffer;\n    }\n}\n\nconst STRING_TYPE = \"string\";\nconst HEX_REGEX = /^[0-9a-f\\s]+$/i;\nconst BASE64_REGEX = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;\nconst BASE64URL_REGEX = /^[a-zA-Z0-9-_]+$/;\nclass Utf8Converter {\n    static fromString(text) {\n        const s = unescape(encodeURIComponent(text));\n        const uintArray = new Uint8Array(s.length);\n        for (let i = 0; i < s.length; i++) {\n            uintArray[i] = s.charCodeAt(i);\n        }\n        return uintArray.buffer;\n    }\n    static toString(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let encodedString = \"\";\n        for (let i = 0; i < buf.length; i++) {\n            encodedString += String.fromCharCode(buf[i]);\n        }\n        const decodedString = decodeURIComponent(escape(encodedString));\n        return decodedString;\n    }\n}\nclass Utf16Converter {\n    static toString(buffer, littleEndian = false) {\n        const arrayBuffer = BufferSourceConverter.toArrayBuffer(buffer);\n        const dataView = new DataView(arrayBuffer);\n        let res = \"\";\n        for (let i = 0; i < arrayBuffer.byteLength; i += 2) {\n            const code = dataView.getUint16(i, littleEndian);\n            res += String.fromCharCode(code);\n        }\n        return res;\n    }\n    static fromString(text, littleEndian = false) {\n        const res = new ArrayBuffer(text.length * 2);\n        const dataView = new DataView(res);\n        for (let i = 0; i < text.length; i++) {\n            dataView.setUint16(i * 2, text.charCodeAt(i), littleEndian);\n        }\n        return res;\n    }\n}\nclass Convert {\n    static isHex(data) {\n        return typeof data === STRING_TYPE\n            && HEX_REGEX.test(data);\n    }\n    static isBase64(data) {\n        return typeof data === STRING_TYPE\n            && BASE64_REGEX.test(data);\n    }\n    static isBase64Url(data) {\n        return typeof data === STRING_TYPE\n            && BASE64URL_REGEX.test(data);\n    }\n    static ToString(buffer, enc = \"utf8\") {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        switch (enc.toLowerCase()) {\n            case \"utf8\":\n                return this.ToUtf8String(buf);\n            case \"binary\":\n                return this.ToBinary(buf);\n            case \"hex\":\n                return this.ToHex(buf);\n            case \"base64\":\n                return this.ToBase64(buf);\n            case \"base64url\":\n                return this.ToBase64Url(buf);\n            case \"utf16le\":\n                return Utf16Converter.toString(buf, true);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.toString(buf);\n            default:\n                throw new Error(`Unknown type of encoding '${enc}'`);\n        }\n    }\n    static FromString(str, enc = \"utf8\") {\n        if (!str) {\n            return new ArrayBuffer(0);\n        }\n        switch (enc.toLowerCase()) {\n            case \"utf8\":\n                return this.FromUtf8String(str);\n            case \"binary\":\n                return this.FromBinary(str);\n            case \"hex\":\n                return this.FromHex(str);\n            case \"base64\":\n                return this.FromBase64(str);\n            case \"base64url\":\n                return this.FromBase64Url(str);\n            case \"utf16le\":\n                return Utf16Converter.fromString(str, true);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.fromString(str);\n            default:\n                throw new Error(`Unknown type of encoding '${enc}'`);\n        }\n    }\n    static ToBase64(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        if (typeof btoa !== \"undefined\") {\n            const binary = this.ToString(buf, \"binary\");\n            return btoa(binary);\n        }\n        else {\n            return Buffer.from(buf).toString(\"base64\");\n        }\n    }\n    static FromBase64(base64) {\n        const formatted = this.formatString(base64);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isBase64(formatted)) {\n            throw new TypeError(\"Argument 'base64Text' is not Base64 encoded\");\n        }\n        if (typeof atob !== \"undefined\") {\n            return this.FromBinary(atob(formatted));\n        }\n        else {\n            return new Uint8Array(Buffer.from(formatted, \"base64\")).buffer;\n        }\n    }\n    static FromBase64Url(base64url) {\n        const formatted = this.formatString(base64url);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isBase64Url(formatted)) {\n            throw new TypeError(\"Argument 'base64url' is not Base64Url encoded\");\n        }\n        return this.FromBase64(this.Base64Padding(formatted.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\")));\n    }\n    static ToBase64Url(data) {\n        return this.ToBase64(data).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=/g, \"\");\n    }\n    static FromUtf8String(text, encoding = Convert.DEFAULT_UTF8_ENCODING) {\n        switch (encoding) {\n            case \"ascii\":\n                return this.FromBinary(text);\n            case \"utf8\":\n                return Utf8Converter.fromString(text);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.fromString(text);\n            case \"utf16le\":\n            case \"usc2\":\n                return Utf16Converter.fromString(text, true);\n            default:\n                throw new Error(`Unknown type of encoding '${encoding}'`);\n        }\n    }\n    static ToUtf8String(buffer, encoding = Convert.DEFAULT_UTF8_ENCODING) {\n        switch (encoding) {\n            case \"ascii\":\n                return this.ToBinary(buffer);\n            case \"utf8\":\n                return Utf8Converter.toString(buffer);\n            case \"utf16\":\n            case \"utf16be\":\n                return Utf16Converter.toString(buffer);\n            case \"utf16le\":\n            case \"usc2\":\n                return Utf16Converter.toString(buffer, true);\n            default:\n                throw new Error(`Unknown type of encoding '${encoding}'`);\n        }\n    }\n    static FromBinary(text) {\n        const stringLength = text.length;\n        const resultView = new Uint8Array(stringLength);\n        for (let i = 0; i < stringLength; i++) {\n            resultView[i] = text.charCodeAt(i);\n        }\n        return resultView.buffer;\n    }\n    static ToBinary(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let res = \"\";\n        for (let i = 0; i < buf.length; i++) {\n            res += String.fromCharCode(buf[i]);\n        }\n        return res;\n    }\n    static ToHex(buffer) {\n        const buf = BufferSourceConverter.toUint8Array(buffer);\n        let result = \"\";\n        const len = buf.length;\n        for (let i = 0; i < len; i++) {\n            const byte = buf[i];\n            if (byte < 16) {\n                result += \"0\";\n            }\n            result += byte.toString(16);\n        }\n        return result;\n    }\n    static FromHex(hexString) {\n        let formatted = this.formatString(hexString);\n        if (!formatted) {\n            return new ArrayBuffer(0);\n        }\n        if (!Convert.isHex(formatted)) {\n            throw new TypeError(\"Argument 'hexString' is not HEX encoded\");\n        }\n        if (formatted.length % 2) {\n            formatted = `0${formatted}`;\n        }\n        const res = new Uint8Array(formatted.length / 2);\n        for (let i = 0; i < formatted.length; i = i + 2) {\n            const c = formatted.slice(i, i + 2);\n            res[i / 2] = parseInt(c, 16);\n        }\n        return res.buffer;\n    }\n    static ToUtf16String(buffer, littleEndian = false) {\n        return Utf16Converter.toString(buffer, littleEndian);\n    }\n    static FromUtf16String(text, littleEndian = false) {\n        return Utf16Converter.fromString(text, littleEndian);\n    }\n    static Base64Padding(base64) {\n        const padCount = 4 - (base64.length % 4);\n        if (padCount < 4) {\n            for (let i = 0; i < padCount; i++) {\n                base64 += \"=\";\n            }\n        }\n        return base64;\n    }\n    static formatString(data) {\n        return (data === null || data === void 0 ? void 0 : data.replace(/[\\n\\r\\t ]/g, \"\")) || \"\";\n    }\n}\nConvert.DEFAULT_UTF8_ENCODING = \"utf8\";\n\nfunction assign(target, ...sources) {\n    const res = arguments[0];\n    for (let i = 1; i < arguments.length; i++) {\n        const obj = arguments[i];\n        for (const prop in obj) {\n            res[prop] = obj[prop];\n        }\n    }\n    return res;\n}\nfunction combine(...buf) {\n    const totalByteLength = buf.map((item) => item.byteLength).reduce((prev, cur) => prev + cur);\n    const res = new Uint8Array(totalByteLength);\n    let currentPos = 0;\n    buf.map((item) => new Uint8Array(item)).forEach((arr) => {\n        for (const item2 of arr) {\n            res[currentPos++] = item2;\n        }\n    });\n    return res.buffer;\n}\nfunction isEqual(bytes1, bytes2) {\n    if (!(bytes1 && bytes2)) {\n        return false;\n    }\n    if (bytes1.byteLength !== bytes2.byteLength) {\n        return false;\n    }\n    const b1 = new Uint8Array(bytes1);\n    const b2 = new Uint8Array(bytes2);\n    for (let i = 0; i < bytes1.byteLength; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexports.BufferSourceConverter = BufferSourceConverter;\nexports.Convert = Convert;\nexports.assign = assign;\nexports.combine = combine;\nexports.isEqual = isEqual;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/pvtsutils/build/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/pvutils/build/utils.es.js":
/*!************************************************!*\
  !*** ./node_modules/pvutils/build/utils.es.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arrayBufferToString: () => (/* binding */ arrayBufferToString),\n/* harmony export */   bufferToHexCodes: () => (/* binding */ bufferToHexCodes),\n/* harmony export */   checkBufferParams: () => (/* binding */ checkBufferParams),\n/* harmony export */   clearProps: () => (/* binding */ clearProps),\n/* harmony export */   fromBase64: () => (/* binding */ fromBase64),\n/* harmony export */   getParametersValue: () => (/* binding */ getParametersValue),\n/* harmony export */   getUTCDate: () => (/* binding */ getUTCDate),\n/* harmony export */   isEqualBuffer: () => (/* binding */ isEqualBuffer),\n/* harmony export */   nearestPowerOf2: () => (/* binding */ nearestPowerOf2),\n/* harmony export */   padNumber: () => (/* binding */ padNumber),\n/* harmony export */   stringToArrayBuffer: () => (/* binding */ stringToArrayBuffer),\n/* harmony export */   toBase64: () => (/* binding */ toBase64),\n/* harmony export */   utilConcatBuf: () => (/* binding */ utilConcatBuf),\n/* harmony export */   utilConcatView: () => (/* binding */ utilConcatView),\n/* harmony export */   utilDecodeTC: () => (/* binding */ utilDecodeTC),\n/* harmony export */   utilEncodeTC: () => (/* binding */ utilEncodeTC),\n/* harmony export */   utilFromBase: () => (/* binding */ utilFromBase),\n/* harmony export */   utilToBase: () => (/* binding */ utilToBase)\n/* harmony export */ });\n/*!\n Copyright (c) Peculiar Ventures, LLC\n*/\n\nfunction getUTCDate(date) {\r\n    return new Date(date.getTime() + (date.getTimezoneOffset() * 60000));\r\n}\r\nfunction getParametersValue(parameters, name, defaultValue) {\r\n    var _a;\r\n    if ((parameters instanceof Object) === false) {\r\n        return defaultValue;\r\n    }\r\n    return (_a = parameters[name]) !== null && _a !== void 0 ? _a : defaultValue;\r\n}\r\nfunction bufferToHexCodes(inputBuffer, inputOffset = 0, inputLength = (inputBuffer.byteLength - inputOffset), insertSpace = false) {\r\n    let result = \"\";\r\n    for (const item of (new Uint8Array(inputBuffer, inputOffset, inputLength))) {\r\n        const str = item.toString(16).toUpperCase();\r\n        if (str.length === 1) {\r\n            result += \"0\";\r\n        }\r\n        result += str;\r\n        if (insertSpace) {\r\n            result += \" \";\r\n        }\r\n    }\r\n    return result.trim();\r\n}\r\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\r\n    if (!(inputBuffer instanceof ArrayBuffer)) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer must be \\\"ArrayBuffer\\\"\";\r\n        return false;\r\n    }\r\n    if (!inputBuffer.byteLength) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\r\n        return false;\r\n    }\r\n    if (inputOffset < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\r\n        return false;\r\n    }\r\n    if (inputLength < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\r\n        return false;\r\n    }\r\n    if ((inputBuffer.byteLength - inputOffset - inputLength) < 0) {\r\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction utilFromBase(inputBuffer, inputBase) {\r\n    let result = 0;\r\n    if (inputBuffer.length === 1) {\r\n        return inputBuffer[0];\r\n    }\r\n    for (let i = (inputBuffer.length - 1); i >= 0; i--) {\r\n        result += inputBuffer[(inputBuffer.length - 1) - i] * Math.pow(2, inputBase * i);\r\n    }\r\n    return result;\r\n}\r\nfunction utilToBase(value, base, reserved = (-1)) {\r\n    const internalReserved = reserved;\r\n    let internalValue = value;\r\n    let result = 0;\r\n    let biggest = Math.pow(2, base);\r\n    for (let i = 1; i < 8; i++) {\r\n        if (value < biggest) {\r\n            let retBuf;\r\n            if (internalReserved < 0) {\r\n                retBuf = new ArrayBuffer(i);\r\n                result = i;\r\n            }\r\n            else {\r\n                if (internalReserved < i) {\r\n                    return (new ArrayBuffer(0));\r\n                }\r\n                retBuf = new ArrayBuffer(internalReserved);\r\n                result = internalReserved;\r\n            }\r\n            const retView = new Uint8Array(retBuf);\r\n            for (let j = (i - 1); j >= 0; j--) {\r\n                const basis = Math.pow(2, j * base);\r\n                retView[result - j - 1] = Math.floor(internalValue / basis);\r\n                internalValue -= (retView[result - j - 1]) * basis;\r\n            }\r\n            return retBuf;\r\n        }\r\n        biggest *= Math.pow(2, base);\r\n    }\r\n    return new ArrayBuffer(0);\r\n}\r\nfunction utilConcatBuf(...buffers) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const buffer of buffers) {\r\n        outputLength += buffer.byteLength;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const buffer of buffers) {\r\n        retView.set(new Uint8Array(buffer), prevLength);\r\n        prevLength += buffer.byteLength;\r\n    }\r\n    return retBuf;\r\n}\r\nfunction utilConcatView(...views) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const view of views) {\r\n        outputLength += view.length;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const view of views) {\r\n        retView.set(view, prevLength);\r\n        prevLength += view.length;\r\n    }\r\n    return retView;\r\n}\r\nfunction utilDecodeTC() {\r\n    const buf = new Uint8Array(this.valueHex);\r\n    if (this.valueHex.byteLength >= 2) {\r\n        const condition1 = (buf[0] === 0xFF) && (buf[1] & 0x80);\r\n        const condition2 = (buf[0] === 0x00) && ((buf[1] & 0x80) === 0x00);\r\n        if (condition1 || condition2) {\r\n            this.warnings.push(\"Needlessly long format\");\r\n        }\r\n    }\r\n    const bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const bigIntView = new Uint8Array(bigIntBuffer);\r\n    for (let i = 0; i < this.valueHex.byteLength; i++) {\r\n        bigIntView[i] = 0;\r\n    }\r\n    bigIntView[0] = (buf[0] & 0x80);\r\n    const bigInt = utilFromBase(bigIntView, 8);\r\n    const smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const smallIntView = new Uint8Array(smallIntBuffer);\r\n    for (let j = 0; j < this.valueHex.byteLength; j++) {\r\n        smallIntView[j] = buf[j];\r\n    }\r\n    smallIntView[0] &= 0x7F;\r\n    const smallInt = utilFromBase(smallIntView, 8);\r\n    return (smallInt - bigInt);\r\n}\r\nfunction utilEncodeTC(value) {\r\n    const modValue = (value < 0) ? (value * (-1)) : value;\r\n    let bigInt = 128;\r\n    for (let i = 1; i < 8; i++) {\r\n        if (modValue <= bigInt) {\r\n            if (value < 0) {\r\n                const smallInt = bigInt - modValue;\r\n                const retBuf = utilToBase(smallInt, 8, i);\r\n                const retView = new Uint8Array(retBuf);\r\n                retView[0] |= 0x80;\r\n                return retBuf;\r\n            }\r\n            let retBuf = utilToBase(modValue, 8, i);\r\n            let retView = new Uint8Array(retBuf);\r\n            if (retView[0] & 0x80) {\r\n                const tempBuf = retBuf.slice(0);\r\n                const tempView = new Uint8Array(tempBuf);\r\n                retBuf = new ArrayBuffer(retBuf.byteLength + 1);\r\n                retView = new Uint8Array(retBuf);\r\n                for (let k = 0; k < tempBuf.byteLength; k++) {\r\n                    retView[k + 1] = tempView[k];\r\n                }\r\n                retView[0] = 0x00;\r\n            }\r\n            return retBuf;\r\n        }\r\n        bigInt *= Math.pow(2, 8);\r\n    }\r\n    return (new ArrayBuffer(0));\r\n}\r\nfunction isEqualBuffer(inputBuffer1, inputBuffer2) {\r\n    if (inputBuffer1.byteLength !== inputBuffer2.byteLength) {\r\n        return false;\r\n    }\r\n    const view1 = new Uint8Array(inputBuffer1);\r\n    const view2 = new Uint8Array(inputBuffer2);\r\n    for (let i = 0; i < view1.length; i++) {\r\n        if (view1[i] !== view2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction padNumber(inputNumber, fullLength) {\r\n    const str = inputNumber.toString(10);\r\n    if (fullLength < str.length) {\r\n        return \"\";\r\n    }\r\n    const dif = fullLength - str.length;\r\n    const padding = new Array(dif);\r\n    for (let i = 0; i < dif; i++) {\r\n        padding[i] = \"0\";\r\n    }\r\n    const paddingString = padding.join(\"\");\r\n    return paddingString.concat(str);\r\n}\r\nconst base64Template = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\nconst base64UrlTemplate = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\";\r\nfunction toBase64(input, useUrlTemplate = false, skipPadding = false, skipLeadingZeros = false) {\r\n    let i = 0;\r\n    let flag1 = 0;\r\n    let flag2 = 0;\r\n    let output = \"\";\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    if (skipLeadingZeros) {\r\n        let nonZeroPosition = 0;\r\n        for (let i = 0; i < input.length; i++) {\r\n            if (input.charCodeAt(i) !== 0) {\r\n                nonZeroPosition = i;\r\n                break;\r\n            }\r\n        }\r\n        input = input.slice(nonZeroPosition);\r\n    }\r\n    while (i < input.length) {\r\n        const chr1 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag1 = 1;\r\n        }\r\n        const chr2 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag2 = 1;\r\n        }\r\n        const chr3 = input.charCodeAt(i++);\r\n        const enc1 = chr1 >> 2;\r\n        const enc2 = ((chr1 & 0x03) << 4) | (chr2 >> 4);\r\n        let enc3 = ((chr2 & 0x0F) << 2) | (chr3 >> 6);\r\n        let enc4 = chr3 & 0x3F;\r\n        if (flag1 === 1) {\r\n            enc3 = enc4 = 64;\r\n        }\r\n        else {\r\n            if (flag2 === 1) {\r\n                enc4 = 64;\r\n            }\r\n        }\r\n        if (skipPadding) {\r\n            if (enc3 === 64) {\r\n                output += `${template.charAt(enc1)}${template.charAt(enc2)}`;\r\n            }\r\n            else {\r\n                if (enc4 === 64) {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}`;\r\n                }\r\n                else {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction fromBase64(input, useUrlTemplate = false, cutTailZeros = false) {\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    function indexOf(toSearch) {\r\n        for (let i = 0; i < 64; i++) {\r\n            if (template.charAt(i) === toSearch)\r\n                return i;\r\n        }\r\n        return 64;\r\n    }\r\n    function test(incoming) {\r\n        return ((incoming === 64) ? 0x00 : incoming);\r\n    }\r\n    let i = 0;\r\n    let output = \"\";\r\n    while (i < input.length) {\r\n        const enc1 = indexOf(input.charAt(i++));\r\n        const enc2 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc3 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc4 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const chr1 = (test(enc1) << 2) | (test(enc2) >> 4);\r\n        const chr2 = ((test(enc2) & 0x0F) << 4) | (test(enc3) >> 2);\r\n        const chr3 = ((test(enc3) & 0x03) << 6) | test(enc4);\r\n        output += String.fromCharCode(chr1);\r\n        if (enc3 !== 64) {\r\n            output += String.fromCharCode(chr2);\r\n        }\r\n        if (enc4 !== 64) {\r\n            output += String.fromCharCode(chr3);\r\n        }\r\n    }\r\n    if (cutTailZeros) {\r\n        const outputLength = output.length;\r\n        let nonZeroStart = (-1);\r\n        for (let i = (outputLength - 1); i >= 0; i--) {\r\n            if (output.charCodeAt(i) !== 0) {\r\n                nonZeroStart = i;\r\n                break;\r\n            }\r\n        }\r\n        if (nonZeroStart !== (-1)) {\r\n            output = output.slice(0, nonZeroStart + 1);\r\n        }\r\n        else {\r\n            output = \"\";\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction arrayBufferToString(buffer) {\r\n    let resultString = \"\";\r\n    const view = new Uint8Array(buffer);\r\n    for (const element of view) {\r\n        resultString += String.fromCharCode(element);\r\n    }\r\n    return resultString;\r\n}\r\nfunction stringToArrayBuffer(str) {\r\n    const stringLength = str.length;\r\n    const resultBuffer = new ArrayBuffer(stringLength);\r\n    const resultView = new Uint8Array(resultBuffer);\r\n    for (let i = 0; i < stringLength; i++) {\r\n        resultView[i] = str.charCodeAt(i);\r\n    }\r\n    return resultBuffer;\r\n}\r\nconst log2 = Math.log(2);\r\nfunction nearestPowerOf2(length) {\r\n    const base = (Math.log(length) / log2);\r\n    const floor = Math.floor(base);\r\n    const round = Math.round(base);\r\n    return ((floor === round) ? floor : round);\r\n}\r\nfunction clearProps(object, propsArray) {\r\n    for (const prop of propsArray) {\r\n        delete object[prop];\r\n    }\r\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/pvutils/build/utils.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-hot-toast/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/react-hot-toast/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CheckmarkIcon: () => (/* binding */ L),\n/* harmony export */   ErrorIcon: () => (/* binding */ C),\n/* harmony export */   LoaderIcon: () => (/* binding */ F),\n/* harmony export */   ToastBar: () => (/* binding */ N),\n/* harmony export */   ToastIcon: () => (/* binding */ $),\n/* harmony export */   Toaster: () => (/* binding */ Fe),\n/* harmony export */   \"default\": () => (/* binding */ zt),\n/* harmony export */   resolveValue: () => (/* binding */ h),\n/* harmony export */   toast: () => (/* binding */ n),\n/* harmony export */   useToaster: () => (/* binding */ w),\n/* harmony export */   useToasterStore: () => (/* binding */ V)\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_tagged_template_literal */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_tagged_template_literal.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var goober__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! goober */ \"(app-pages-browser)/./node_modules/goober/dist/goober.modern.js\");\n/* __next_internal_client_entry_do_not_use__ CheckmarkIcon,ErrorIcon,LoaderIcon,ToastBar,ToastIcon,Toaster,default,resolveValue,toast,useToaster,useToasterStore auto */ \nfunction _templateObject() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\nfrom {\\n  transform: scale(0) rotate(45deg);\\n\topacity: 0;\\n}\\nto {\\n transform: scale(1) rotate(45deg);\\n  opacity: 1;\\n}\"\n    ]);\n    _templateObject = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject1() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\nfrom {\\n  transform: scale(0);\\n  opacity: 0;\\n}\\nto {\\n  transform: scale(1);\\n  opacity: 1;\\n}\"\n    ]);\n    _templateObject1 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject2() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\nfrom {\\n  transform: scale(0) rotate(90deg);\\n\topacity: 0;\\n}\\nto {\\n  transform: scale(1) rotate(90deg);\\n\topacity: 1;\\n}\"\n    ]);\n    _templateObject2 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject3() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n  width: 20px;\\n  opacity: 0;\\n  height: 20px;\\n  border-radius: 10px;\\n  background: \",\n        \";\\n  position: relative;\\n  transform: rotate(45deg);\\n\\n  animation: \",\n        \" 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)\\n    forwards;\\n  animation-delay: 100ms;\\n\\n  &:after,\\n  &:before {\\n    content: '';\\n    animation: \",\n        \" 0.15s ease-out forwards;\\n    animation-delay: 150ms;\\n    position: absolute;\\n    border-radius: 3px;\\n    opacity: 0;\\n    background: \",\n        \";\\n    bottom: 9px;\\n    left: 4px;\\n    height: 2px;\\n    width: 12px;\\n  }\\n\\n  &:before {\\n    animation: \",\n        \" 0.15s ease-out forwards;\\n    animation-delay: 180ms;\\n    transform: rotate(90deg);\\n  }\\n\"\n    ]);\n    _templateObject3 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject4() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n  from {\\n    transform: rotate(0deg);\\n  }\\n  to {\\n    transform: rotate(360deg);\\n  }\\n\"\n    ]);\n    _templateObject4 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject5() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n  width: 12px;\\n  height: 12px;\\n  box-sizing: border-box;\\n  border: 2px solid;\\n  border-radius: 100%;\\n  border-color: \",\n        \";\\n  border-right-color: \",\n        \";\\n  animation: \",\n        \" 1s linear infinite;\\n\"\n    ]);\n    _templateObject5 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject6() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\nfrom {\\n  transform: scale(0) rotate(45deg);\\n\topacity: 0;\\n}\\nto {\\n  transform: scale(1) rotate(45deg);\\n\topacity: 1;\\n}\"\n    ]);\n    _templateObject6 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject7() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n0% {\\n\theight: 0;\\n\twidth: 0;\\n\topacity: 0;\\n}\\n40% {\\n  height: 0;\\n\twidth: 6px;\\n\topacity: 1;\\n}\\n100% {\\n  opacity: 1;\\n  height: 10px;\\n}\"\n    ]);\n    _templateObject7 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject8() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n  width: 20px;\\n  opacity: 0;\\n  height: 20px;\\n  border-radius: 10px;\\n  background: \",\n        \";\\n  position: relative;\\n  transform: rotate(45deg);\\n\\n  animation: \",\n        \" 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)\\n    forwards;\\n  animation-delay: 100ms;\\n  &:after {\\n    content: '';\\n    box-sizing: border-box;\\n    animation: \",\n        \" 0.2s ease-out forwards;\\n    opacity: 0;\\n    animation-delay: 200ms;\\n    position: absolute;\\n    border-right: 2px solid;\\n    border-bottom: 2px solid;\\n    border-color: \",\n        \";\\n    bottom: 6px;\\n    left: 6px;\\n    height: 10px;\\n    width: 6px;\\n  }\\n\"\n    ]);\n    _templateObject8 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject9() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n  position: absolute;\\n\"\n    ]);\n    _templateObject9 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject10() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n  position: relative;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  min-width: 20px;\\n  min-height: 20px;\\n\"\n    ]);\n    _templateObject10 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject11() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\nfrom {\\n  transform: scale(0.6);\\n  opacity: 0.4;\\n}\\nto {\\n  transform: scale(1);\\n  opacity: 1;\\n}\"\n    ]);\n    _templateObject11 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject12() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n  position: relative;\\n  transform: scale(0.6);\\n  opacity: 0.4;\\n  min-width: 20px;\\n  animation: \",\n        \" 0.3s 0.12s cubic-bezier(0.175, 0.885, 0.32, 1.275)\\n    forwards;\\n\"\n    ]);\n    _templateObject12 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject13() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n  display: flex;\\n  align-items: center;\\n  background: #fff;\\n  color: #363636;\\n  line-height: 1.3;\\n  will-change: transform;\\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1), 0 3px 3px rgba(0, 0, 0, 0.05);\\n  max-width: 350px;\\n  pointer-events: auto;\\n  padding: 8px 10px;\\n  border-radius: 8px;\\n\"\n    ]);\n    _templateObject13 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject14() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n  display: flex;\\n  justify-content: center;\\n  margin: 4px 10px;\\n  color: inherit;\\n  flex: 1 1 auto;\\n  white-space: pre-line;\\n\"\n    ]);\n    _templateObject14 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject15() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"\\n  z-index: 9999;\\n  > * {\\n    pointer-events: auto;\\n  }\\n\"\n    ]);\n    _templateObject15 = function() {\n        return data;\n    };\n    return data;\n}\nvar _s = $RefreshSig$();\nvar Z = (e)=>typeof e == \"function\", h = (e, t)=>Z(e) ? e(t) : e;\nvar W = (()=>{\n    let e = 0;\n    return ()=>(++e).toString();\n})(), E = (()=>{\n    let e;\n    return ()=>{\n        if (e === void 0 && typeof window < \"u\") {\n            let t = matchMedia(\"(prefers-reduced-motion: reduce)\");\n            e = !t || t.matches;\n        }\n        return e;\n    };\n})();\n\nvar re = 20, k = \"default\";\nvar H = (e, t)=>{\n    let { toastLimit: o } = e.settings;\n    switch(t.type){\n        case 0:\n            return {\n                ...e,\n                toasts: [\n                    t.toast,\n                    ...e.toasts\n                ].slice(0, o)\n            };\n        case 1:\n            return {\n                ...e,\n                toasts: e.toasts.map((r)=>r.id === t.toast.id ? {\n                        ...r,\n                        ...t.toast\n                    } : r)\n            };\n        case 2:\n            let { toast: s } = t;\n            return H(e, {\n                type: e.toasts.find((r)=>r.id === s.id) ? 1 : 0,\n                toast: s\n            });\n        case 3:\n            let { toastId: a } = t;\n            return {\n                ...e,\n                toasts: e.toasts.map((r)=>r.id === a || a === void 0 ? {\n                        ...r,\n                        dismissed: !0,\n                        visible: !1\n                    } : r)\n            };\n        case 4:\n            return t.toastId === void 0 ? {\n                ...e,\n                toasts: []\n            } : {\n                ...e,\n                toasts: e.toasts.filter((r)=>r.id !== t.toastId)\n            };\n        case 5:\n            return {\n                ...e,\n                pausedAt: t.time\n            };\n        case 6:\n            let i = t.time - (e.pausedAt || 0);\n            return {\n                ...e,\n                pausedAt: void 0,\n                toasts: e.toasts.map((r)=>({\n                        ...r,\n                        pauseDuration: r.pauseDuration + i\n                    }))\n            };\n    }\n}, v = [], j = {\n    toasts: [],\n    pausedAt: void 0,\n    settings: {\n        toastLimit: re\n    }\n}, f = {}, Y = function(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : k;\n    f[t] = H(f[t] || j, e), v.forEach((param)=>{\n        let [o, s] = param;\n        o === t && s(f[t]);\n    });\n}, _ = (e)=>Object.keys(f).forEach((t)=>Y(e, t)), Q = (e)=>Object.keys(f).find((t)=>f[t].toasts.some((o)=>o.id === e)), S = function() {\n    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : k;\n    return (t)=>{\n        Y(t, e);\n    };\n}, se = {\n    blank: 4e3,\n    error: 4e3,\n    success: 2e3,\n    loading: 1 / 0,\n    custom: 4e3\n}, V = function() {\n    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : k;\n    let [o, s] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(f[t] || j), a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(f[t]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>(a.current !== f[t] && s(f[t]), v.push([\n            t,\n            s\n        ]), ()=>{\n            let r = v.findIndex((param)=>{\n                let [l] = param;\n                return l === t;\n            });\n            r > -1 && v.splice(r, 1);\n        }), [\n        t\n    ]);\n    let i = o.toasts.map((r)=>{\n        var l, g, T;\n        return {\n            ...e,\n            ...e[r.type],\n            ...r,\n            removeDelay: r.removeDelay || ((l = e[r.type]) == null ? void 0 : l.removeDelay) || (e == null ? void 0 : e.removeDelay),\n            duration: r.duration || ((g = e[r.type]) == null ? void 0 : g.duration) || (e == null ? void 0 : e.duration) || se[r.type],\n            style: {\n                ...e.style,\n                ...(T = e[r.type]) == null ? void 0 : T.style,\n                ...r.style\n            }\n        };\n    });\n    return {\n        ...o,\n        toasts: i\n    };\n};\nvar ie = function(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"blank\", o = arguments.length > 2 ? arguments[2] : void 0;\n    return {\n        createdAt: Date.now(),\n        visible: !0,\n        dismissed: !1,\n        type: t,\n        ariaProps: {\n            role: \"status\",\n            \"aria-live\": \"polite\"\n        },\n        message: e,\n        pauseDuration: 0,\n        ...o,\n        id: (o == null ? void 0 : o.id) || W()\n    };\n}, P = (e)=>(t, o)=>{\n        let s = ie(t, e, o);\n        return S(s.toasterId || Q(s.id))({\n            type: 2,\n            toast: s\n        }), s.id;\n    }, n = (e, t)=>P(\"blank\")(e, t);\nn.error = P(\"error\");\nn.success = P(\"success\");\nn.loading = P(\"loading\");\nn.custom = P(\"custom\");\nn.dismiss = (e, t)=>{\n    let o = {\n        type: 3,\n        toastId: e\n    };\n    t ? S(t)(o) : _(o);\n};\nn.dismissAll = (e)=>n.dismiss(void 0, e);\nn.remove = (e, t)=>{\n    let o = {\n        type: 4,\n        toastId: e\n    };\n    t ? S(t)(o) : _(o);\n};\nn.removeAll = (e)=>n.remove(void 0, e);\nn.promise = (e, t, o)=>{\n    let s = n.loading(t.loading, {\n        ...o,\n        ...o == null ? void 0 : o.loading\n    });\n    return typeof e == \"function\" && (e = e()), e.then((a)=>{\n        let i = t.success ? h(t.success, a) : void 0;\n        return i ? n.success(i, {\n            id: s,\n            ...o,\n            ...o == null ? void 0 : o.success\n        }) : n.dismiss(s), a;\n    }).catch((a)=>{\n        let i = t.error ? h(t.error, a) : void 0;\n        i ? n.error(i, {\n            id: s,\n            ...o,\n            ...o == null ? void 0 : o.error\n        }) : n.dismiss(s);\n    }), e;\n};\n\nvar ce = 1e3, w = function(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"default\";\n    let { toasts: o, pausedAt: s } = V(e, t), a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map).current, i = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function(c) {\n        let m = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ce;\n        if (a.has(c)) return;\n        let p = setTimeout(()=>{\n            a.delete(c), r({\n                type: 4,\n                toastId: c\n            });\n        }, m);\n        a.set(c, p);\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (s) return;\n        let c = Date.now(), m = o.map((p)=>{\n            if (p.duration === 1 / 0) return;\n            let R = (p.duration || 0) + p.pauseDuration - (c - p.createdAt);\n            if (R < 0) {\n                p.visible && n.dismiss(p.id);\n                return;\n            }\n            return setTimeout(()=>n.dismiss(p.id, t), R);\n        });\n        return ()=>{\n            m.forEach((p)=>p && clearTimeout(p));\n        };\n    }, [\n        o,\n        s,\n        t\n    ]);\n    let r = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(S(t), [\n        t\n    ]), l = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        r({\n            type: 5,\n            time: Date.now()\n        });\n    }, [\n        r\n    ]), g = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((c, m)=>{\n        r({\n            type: 1,\n            toast: {\n                id: c,\n                height: m\n            }\n        });\n    }, [\n        r\n    ]), T = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        s && r({\n            type: 6,\n            time: Date.now()\n        });\n    }, [\n        s,\n        r\n    ]), d = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((c, m)=>{\n        let { reverseOrder: p = !1, gutter: R = 8, defaultPosition: z } = m || {}, O = o.filter((u)=>(u.position || z) === (c.position || z) && u.height), K = O.findIndex((u)=>u.id === c.id), B = O.filter((u, I)=>I < K && u.visible).length;\n        return O.filter((u)=>u.visible).slice(...p ? [\n            B + 1\n        ] : [\n            0,\n            B\n        ]).reduce((u, I)=>u + (I.height || 0) + R, 0);\n    }, [\n        o\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        o.forEach((c)=>{\n            if (c.dismissed) i(c.id, c.removeDelay);\n            else {\n                let m = a.get(c.id);\n                m && (clearTimeout(m), a.delete(c.id));\n            }\n        });\n    }, [\n        o,\n        i\n    ]), {\n        toasts: o,\n        handlers: {\n            updateHeight: g,\n            startPause: l,\n            endPause: T,\n            calculateOffset: d\n        }\n    };\n};\n\n\n\n\n\nvar de = (0,goober__WEBPACK_IMPORTED_MODULE_2__.keyframes)(_templateObject()), me = (0,goober__WEBPACK_IMPORTED_MODULE_2__.keyframes)(_templateObject1()), le = (0,goober__WEBPACK_IMPORTED_MODULE_2__.keyframes)(_templateObject2()), C = (0,goober__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")(_templateObject3(), (e)=>e.primary || \"#ff4b4b\", de, me, (e)=>e.secondary || \"#fff\", le);\n\nvar Te = (0,goober__WEBPACK_IMPORTED_MODULE_2__.keyframes)(_templateObject4()), F = (0,goober__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")(_templateObject5(), (e)=>e.secondary || \"#e0e0e0\", (e)=>e.primary || \"#616161\", Te);\n\nvar ge = (0,goober__WEBPACK_IMPORTED_MODULE_2__.keyframes)(_templateObject6()), he = (0,goober__WEBPACK_IMPORTED_MODULE_2__.keyframes)(_templateObject7()), L = (0,goober__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")(_templateObject8(), (e)=>e.primary || \"#61d345\", ge, he, (e)=>e.secondary || \"#fff\");\nvar be = (0,goober__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")(_templateObject9()), Se = (0,goober__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")(_templateObject10()), Ae = (0,goober__WEBPACK_IMPORTED_MODULE_2__.keyframes)(_templateObject11()), Pe = (0,goober__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")(_templateObject12(), Ae), $ = (param)=>{\n    let { toast: e } = param;\n    let { icon: t, type: o, iconTheme: s } = e;\n    return t !== void 0 ? typeof t == \"string\" ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Pe, null, t) : t : o === \"blank\" ? null : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Se, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(F, {\n        ...s\n    }), o !== \"loading\" && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(be, null, o === \"error\" ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(C, {\n        ...s\n    }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(L, {\n        ...s\n    })));\n};\nvar Re = (e)=>\"\\n0% {transform: translate3d(0,\".concat(e * -200, \"%,0) scale(.6); opacity:.5;}\\n100% {transform: translate3d(0,0,0) scale(1); opacity:1;}\\n\"), Ee = (e)=>\"\\n0% {transform: translate3d(0,0,-1px) scale(1); opacity:1;}\\n100% {transform: translate3d(0,\".concat(e * -150, \"%,-1px) scale(.6); opacity:0;}\\n\"), ve = \"0%{opacity:0;} 100%{opacity:1;}\", De = \"0%{opacity:1;} 100%{opacity:0;}\", Oe = (0,goober__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")(_templateObject13()), Ie = (0,goober__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")(_templateObject14()), ke = (e, t)=>{\n    let s = e.includes(\"top\") ? 1 : -1, [a, i] = E() ? [\n        ve,\n        De\n    ] : [\n        Re(s),\n        Ee(s)\n    ];\n    return {\n        animation: t ? \"\".concat((0,goober__WEBPACK_IMPORTED_MODULE_2__.keyframes)(a), \" 0.35s cubic-bezier(.21,1.02,.73,1) forwards\") : \"\".concat((0,goober__WEBPACK_IMPORTED_MODULE_2__.keyframes)(i), \" 0.4s forwards cubic-bezier(.06,.71,.55,1)\")\n    };\n}, N = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.memo((param)=>{\n    let { toast: e, position: t, style: o, children: s } = param;\n    let a = e.height ? ke(e.position || t || \"top-center\", e.visible) : {\n        opacity: 0\n    }, i = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement($, {\n        toast: e\n    }), r = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Ie, {\n        ...e.ariaProps\n    }, h(e.message, e));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Oe, {\n        className: e.className,\n        style: {\n            ...a,\n            ...o,\n            ...e.style\n        }\n    }, typeof s == \"function\" ? s({\n        icon: i,\n        message: r\n    }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, i, r));\n});\n\n\n(0,goober__WEBPACK_IMPORTED_MODULE_2__.setup)(react__WEBPACK_IMPORTED_MODULE_1__.createElement);\nvar we = (param)=>{\n    let { id: e, className: t, style: o, onHeightUpdate: s, children: a } = param;\n    _s();\n    let i = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"we.useCallback[i]\": (r)=>{\n            if (r) {\n                let l = {\n                    \"we.useCallback[i].l\": ()=>{\n                        let g = r.getBoundingClientRect().height;\n                        s(e, g);\n                    }\n                }[\"we.useCallback[i].l\"];\n                l(), new MutationObserver(l).observe(r, {\n                    subtree: !0,\n                    childList: !0,\n                    characterData: !0\n                });\n            }\n        }\n    }[\"we.useCallback[i]\"], [\n        e,\n        s\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        ref: i,\n        className: t,\n        style: o\n    }, a);\n}, Me = (e, t)=>{\n    let o = e.includes(\"top\"), s = o ? {\n        top: 0\n    } : {\n        bottom: 0\n    }, a = e.includes(\"center\") ? {\n        justifyContent: \"center\"\n    } : e.includes(\"right\") ? {\n        justifyContent: \"flex-end\"\n    } : {};\n    return {\n        left: 0,\n        right: 0,\n        display: \"flex\",\n        position: \"absolute\",\n        transition: E() ? void 0 : \"all 230ms cubic-bezier(.21,1.02,.73,1)\",\n        transform: \"translateY(\".concat(t * (o ? 1 : -1), \"px)\"),\n        ...s,\n        ...a\n    };\n}, Ce = (0,goober__WEBPACK_IMPORTED_MODULE_2__.css)(_templateObject15()), D = 16, Fe = (param)=>{\n    let { reverseOrder: e, position: t = \"top-center\", toastOptions: o, gutter: s, children: a, toasterId: i, containerStyle: r, containerClassName: l } = param;\n    let { toasts: g, handlers: T } = w(o, i);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        \"data-rht-toaster\": i || \"\",\n        style: {\n            position: \"fixed\",\n            zIndex: 9999,\n            top: D,\n            left: D,\n            right: D,\n            bottom: D,\n            pointerEvents: \"none\",\n            ...r\n        },\n        className: l,\n        onMouseEnter: T.startPause,\n        onMouseLeave: T.endPause\n    }, g.map((d)=>{\n        let c = d.position || t, m = T.calculateOffset(d, {\n            reverseOrder: e,\n            gutter: s,\n            defaultPosition: t\n        }), p = Me(c, m);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(we, {\n            id: d.id,\n            key: d.id,\n            onHeightUpdate: T.updateHeight,\n            className: d.visible ? Ce : \"\",\n            style: p\n        }, d.type === \"custom\" ? h(d.message, d) : a ? a(d) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(N, {\n            toast: d,\n            position: c\n        }));\n    }));\n};\n_s(we, \"I3jlzT54Bk7ZM7+mV1Jh8N0yt+Q=\");\nvar zt = n;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-hot-toast/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/zod/v3/ZodError.js":
/*!*****************************************!*\
  !*** ./node_modules/zod/v3/ZodError.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ZodError: () => (/* binding */ ZodError),\n/* harmony export */   ZodIssueCode: () => (/* binding */ ZodIssueCode),\n/* harmony export */   quotelessJson: () => (/* binding */ quotelessJson)\n/* harmony export */ });\n/* harmony import */ var _helpers_util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/util.js */ \"(app-pages-browser)/./node_modules/zod/v3/helpers/util.js\");\n\nconst ZodIssueCode = _helpers_util_js__WEBPACK_IMPORTED_MODULE_0__.util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, _helpers_util_js__WEBPACK_IMPORTED_MODULE_0__.util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                const firstEl = sub.path[0];\n                fieldErrors[firstEl] = fieldErrors[firstEl] || [];\n                fieldErrors[firstEl].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy96b2QvdjMvWm9kRXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF5QztBQUNsQyxxQkFBcUIsa0RBQUk7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQSwwREFBMEQ7QUFDMUQsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxNQUFNO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxrREFBSTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0Rlc2t0b3AvYzJwYSB0b29sL25vZGVfbW9kdWxlcy96b2QvdjMvWm9kRXJyb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXRpbCB9IGZyb20gXCIuL2hlbHBlcnMvdXRpbC5qc1wiO1xuZXhwb3J0IGNvbnN0IFpvZElzc3VlQ29kZSA9IHV0aWwuYXJyYXlUb0VudW0oW1xuICAgIFwiaW52YWxpZF90eXBlXCIsXG4gICAgXCJpbnZhbGlkX2xpdGVyYWxcIixcbiAgICBcImN1c3RvbVwiLFxuICAgIFwiaW52YWxpZF91bmlvblwiLFxuICAgIFwiaW52YWxpZF91bmlvbl9kaXNjcmltaW5hdG9yXCIsXG4gICAgXCJpbnZhbGlkX2VudW1fdmFsdWVcIixcbiAgICBcInVucmVjb2duaXplZF9rZXlzXCIsXG4gICAgXCJpbnZhbGlkX2FyZ3VtZW50c1wiLFxuICAgIFwiaW52YWxpZF9yZXR1cm5fdHlwZVwiLFxuICAgIFwiaW52YWxpZF9kYXRlXCIsXG4gICAgXCJpbnZhbGlkX3N0cmluZ1wiLFxuICAgIFwidG9vX3NtYWxsXCIsXG4gICAgXCJ0b29fYmlnXCIsXG4gICAgXCJpbnZhbGlkX2ludGVyc2VjdGlvbl90eXBlc1wiLFxuICAgIFwibm90X211bHRpcGxlX29mXCIsXG4gICAgXCJub3RfZmluaXRlXCIsXG5dKTtcbmV4cG9ydCBjb25zdCBxdW90ZWxlc3NKc29uID0gKG9iaikgPT4ge1xuICAgIGNvbnN0IGpzb24gPSBKU09OLnN0cmluZ2lmeShvYmosIG51bGwsIDIpO1xuICAgIHJldHVybiBqc29uLnJlcGxhY2UoL1wiKFteXCJdKylcIjovZywgXCIkMTpcIik7XG59O1xuZXhwb3J0IGNsYXNzIFpvZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGdldCBlcnJvcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzc3VlcztcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaXNzdWVzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaXNzdWVzID0gW107XG4gICAgICAgIHRoaXMuYWRkSXNzdWUgPSAoc3ViKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlzc3VlcyA9IFsuLi50aGlzLmlzc3Vlcywgc3ViXTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hZGRJc3N1ZXMgPSAoc3VicyA9IFtdKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlzc3VlcyA9IFsuLi50aGlzLmlzc3VlcywgLi4uc3Vic107XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGFjdHVhbFByb3RvID0gbmV3LnRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBiYW4vYmFuXG4gICAgICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgYWN0dWFsUHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fX3Byb3RvX18gPSBhY3R1YWxQcm90bztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5hbWUgPSBcIlpvZEVycm9yXCI7XG4gICAgICAgIHRoaXMuaXNzdWVzID0gaXNzdWVzO1xuICAgIH1cbiAgICBmb3JtYXQoX21hcHBlcikge1xuICAgICAgICBjb25zdCBtYXBwZXIgPSBfbWFwcGVyIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoaXNzdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNzdWUubWVzc2FnZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNvbnN0IGZpZWxkRXJyb3JzID0geyBfZXJyb3JzOiBbXSB9O1xuICAgICAgICBjb25zdCBwcm9jZXNzRXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXNzdWUgb2YgZXJyb3IuaXNzdWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzc3VlLmNvZGUgPT09IFwiaW52YWxpZF91bmlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzc3VlLnVuaW9uRXJyb3JzLm1hcChwcm9jZXNzRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc3N1ZS5jb2RlID09PSBcImludmFsaWRfcmV0dXJuX3R5cGVcIikge1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzRXJyb3IoaXNzdWUucmV0dXJuVHlwZUVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUuY29kZSA9PT0gXCJpbnZhbGlkX2FyZ3VtZW50c1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NFcnJvcihpc3N1ZS5hcmd1bWVudHNFcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkRXJyb3JzLl9lcnJvcnMucHVzaChtYXBwZXIoaXNzdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjdXJyID0gZmllbGRFcnJvcnM7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkgPCBpc3N1ZS5wYXRoLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWwgPSBpc3N1ZS5wYXRoW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVybWluYWwgPSBpID09PSBpc3N1ZS5wYXRoLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRlcm1pbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7IF9lcnJvcnM6IFtdIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgKHR5cGVvZiBlbCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7IF9lcnJvcnM6IFtdIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfSBlbHNlIGlmICh0eXBlb2YgZWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGNvbnN0IGVycm9yQXJyYXk6IGFueSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgZXJyb3JBcnJheS5fZXJyb3JzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBjdXJyW2VsXSA9IGN1cnJbZWxdIHx8IGVycm9yQXJyYXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7IF9lcnJvcnM6IFtdIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycltlbF0uX2Vycm9ycy5wdXNoKG1hcHBlcihpc3N1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IGN1cnJbZWxdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBwcm9jZXNzRXJyb3IodGhpcyk7XG4gICAgICAgIHJldHVybiBmaWVsZEVycm9ycztcbiAgICB9XG4gICAgc3RhdGljIGFzc2VydCh2YWx1ZSkge1xuICAgICAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIFpvZEVycm9yKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb3QgYSBab2RFcnJvcjogJHt2YWx1ZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZTtcbiAgICB9XG4gICAgZ2V0IG1lc3NhZ2UoKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLmlzc3VlcywgdXRpbC5qc29uU3RyaW5naWZ5UmVwbGFjZXIsIDIpO1xuICAgIH1cbiAgICBnZXQgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNzdWVzLmxlbmd0aCA9PT0gMDtcbiAgICB9XG4gICAgZmxhdHRlbihtYXBwZXIgPSAoaXNzdWUpID0+IGlzc3VlLm1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgZmllbGRFcnJvcnMgPSB7fTtcbiAgICAgICAgY29uc3QgZm9ybUVycm9ycyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHN1YiBvZiB0aGlzLmlzc3Vlcykge1xuICAgICAgICAgICAgaWYgKHN1Yi5wYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJzdEVsID0gc3ViLnBhdGhbMF07XG4gICAgICAgICAgICAgICAgZmllbGRFcnJvcnNbZmlyc3RFbF0gPSBmaWVsZEVycm9yc1tmaXJzdEVsXSB8fCBbXTtcbiAgICAgICAgICAgICAgICBmaWVsZEVycm9yc1tmaXJzdEVsXS5wdXNoKG1hcHBlcihzdWIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvcm1FcnJvcnMucHVzaChtYXBwZXIoc3ViKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZm9ybUVycm9ycywgZmllbGRFcnJvcnMgfTtcbiAgICB9XG4gICAgZ2V0IGZvcm1FcnJvcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZsYXR0ZW4oKTtcbiAgICB9XG59XG5ab2RFcnJvci5jcmVhdGUgPSAoaXNzdWVzKSA9PiB7XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgWm9kRXJyb3IoaXNzdWVzKTtcbiAgICByZXR1cm4gZXJyb3I7XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/zod/v3/ZodError.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/zod/v3/errors.js":
/*!***************************************!*\
  !*** ./node_modules/zod/v3/errors.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultErrorMap: () => (/* reexport safe */ _locales_en_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   getErrorMap: () => (/* binding */ getErrorMap),\n/* harmony export */   setErrorMap: () => (/* binding */ setErrorMap)\n/* harmony export */ });\n/* harmony import */ var _locales_en_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./locales/en.js */ \"(app-pages-browser)/./node_modules/zod/v3/locales/en.js\");\n\nlet overrideErrorMap = _locales_en_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy96b2QvdjMvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEM7QUFDOUMsdUJBQXVCLHNEQUFlO0FBQ1g7QUFDcEI7QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRGVza3RvcC9jMnBhIHRvb2wvbm9kZV9tb2R1bGVzL3pvZC92My9lcnJvcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlZmF1bHRFcnJvck1hcCBmcm9tIFwiLi9sb2NhbGVzL2VuLmpzXCI7XG5sZXQgb3ZlcnJpZGVFcnJvck1hcCA9IGRlZmF1bHRFcnJvck1hcDtcbmV4cG9ydCB7IGRlZmF1bHRFcnJvck1hcCB9O1xuZXhwb3J0IGZ1bmN0aW9uIHNldEVycm9yTWFwKG1hcCkge1xuICAgIG92ZXJyaWRlRXJyb3JNYXAgPSBtYXA7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RXJyb3JNYXAoKSB7XG4gICAgcmV0dXJuIG92ZXJyaWRlRXJyb3JNYXA7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/zod/v3/errors.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/zod/v3/helpers/errorUtil.js":
/*!**************************************************!*\
  !*** ./node_modules/zod/v3/helpers/errorUtil.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   errorUtil: () => (/* binding */ errorUtil)\n/* harmony export */ });\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    // biome-ignore lint:\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message?.message;\n})(errorUtil || (errorUtil = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy96b2QvdjMvaGVscGVycy9lcnJvclV0aWwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQSxzRUFBc0UsVUFBVTtBQUNoRjtBQUNBO0FBQ0EsQ0FBQyw4QkFBOEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9EZXNrdG9wL2MycGEgdG9vbC9ub2RlX21vZHVsZXMvem9kL3YzL2hlbHBlcnMvZXJyb3JVdGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgZXJyb3JVdGlsO1xuKGZ1bmN0aW9uIChlcnJvclV0aWwpIHtcbiAgICBlcnJvclV0aWwuZXJyVG9PYmogPSAobWVzc2FnZSkgPT4gdHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgPyB7IG1lc3NhZ2UgfSA6IG1lc3NhZ2UgfHwge307XG4gICAgLy8gYmlvbWUtaWdub3JlIGxpbnQ6XG4gICAgZXJyb3JVdGlsLnRvU3RyaW5nID0gKG1lc3NhZ2UpID0+IHR5cGVvZiBtZXNzYWdlID09PSBcInN0cmluZ1wiID8gbWVzc2FnZSA6IG1lc3NhZ2U/Lm1lc3NhZ2U7XG59KShlcnJvclV0aWwgfHwgKGVycm9yVXRpbCA9IHt9KSk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/zod/v3/helpers/errorUtil.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/zod/v3/helpers/parseUtil.js":
/*!**************************************************!*\
  !*** ./node_modules/zod/v3/helpers/parseUtil.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DIRTY: () => (/* binding */ DIRTY),\n/* harmony export */   EMPTY_PATH: () => (/* binding */ EMPTY_PATH),\n/* harmony export */   INVALID: () => (/* binding */ INVALID),\n/* harmony export */   OK: () => (/* binding */ OK),\n/* harmony export */   ParseStatus: () => (/* binding */ ParseStatus),\n/* harmony export */   addIssueToContext: () => (/* binding */ addIssueToContext),\n/* harmony export */   isAborted: () => (/* binding */ isAborted),\n/* harmony export */   isAsync: () => (/* binding */ isAsync),\n/* harmony export */   isDirty: () => (/* binding */ isDirty),\n/* harmony export */   isValid: () => (/* binding */ isValid),\n/* harmony export */   makeIssue: () => (/* binding */ makeIssue)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors.js */ \"(app-pages-browser)/./node_modules/zod/v3/errors.js\");\n/* harmony import */ var _locales_en_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../locales/en.js */ \"(app-pages-browser)/./node_modules/zod/v3/locales/en.js\");\n\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.getErrorMap)();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === _locales_en_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] ? undefined : _locales_en_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" && (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy96b2QvdjMvaGVscGVycy9wYXJzZVV0aWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUEyQztBQUNJO0FBQ3hDO0FBQ1AsWUFBWSxtQ0FBbUM7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLGtDQUFrQztBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ0E7QUFDUCx3QkFBd0IsdURBQVc7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixzREFBZSxlQUFlLHNEQUFlO0FBQ3pFO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixhQUFhO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ087QUFDUDtBQUNBLENBQUM7QUFDTSw0QkFBNEIsd0JBQXdCO0FBQ3BELHlCQUF5Qix3QkFBd0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9EZXNrdG9wL2MycGEgdG9vbC9ub2RlX21vZHVsZXMvem9kL3YzL2hlbHBlcnMvcGFyc2VVdGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEVycm9yTWFwIH0gZnJvbSBcIi4uL2Vycm9ycy5qc1wiO1xuaW1wb3J0IGRlZmF1bHRFcnJvck1hcCBmcm9tIFwiLi4vbG9jYWxlcy9lbi5qc1wiO1xuZXhwb3J0IGNvbnN0IG1ha2VJc3N1ZSA9IChwYXJhbXMpID0+IHtcbiAgICBjb25zdCB7IGRhdGEsIHBhdGgsIGVycm9yTWFwcywgaXNzdWVEYXRhIH0gPSBwYXJhbXM7XG4gICAgY29uc3QgZnVsbFBhdGggPSBbLi4ucGF0aCwgLi4uKGlzc3VlRGF0YS5wYXRoIHx8IFtdKV07XG4gICAgY29uc3QgZnVsbElzc3VlID0ge1xuICAgICAgICAuLi5pc3N1ZURhdGEsXG4gICAgICAgIHBhdGg6IGZ1bGxQYXRoLFxuICAgIH07XG4gICAgaWYgKGlzc3VlRGF0YS5tZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmlzc3VlRGF0YSxcbiAgICAgICAgICAgIHBhdGg6IGZ1bGxQYXRoLFxuICAgICAgICAgICAgbWVzc2FnZTogaXNzdWVEYXRhLm1lc3NhZ2UsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGxldCBlcnJvck1lc3NhZ2UgPSBcIlwiO1xuICAgIGNvbnN0IG1hcHMgPSBlcnJvck1hcHNcbiAgICAgICAgLmZpbHRlcigobSkgPT4gISFtKVxuICAgICAgICAuc2xpY2UoKVxuICAgICAgICAucmV2ZXJzZSgpO1xuICAgIGZvciAoY29uc3QgbWFwIG9mIG1hcHMpIHtcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gbWFwKGZ1bGxJc3N1ZSwgeyBkYXRhLCBkZWZhdWx0RXJyb3I6IGVycm9yTWVzc2FnZSB9KS5tZXNzYWdlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5pc3N1ZURhdGEsXG4gICAgICAgIHBhdGg6IGZ1bGxQYXRoLFxuICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgfTtcbn07XG5leHBvcnQgY29uc3QgRU1QVFlfUEFUSCA9IFtdO1xuZXhwb3J0IGZ1bmN0aW9uIGFkZElzc3VlVG9Db250ZXh0KGN0eCwgaXNzdWVEYXRhKSB7XG4gICAgY29uc3Qgb3ZlcnJpZGVNYXAgPSBnZXRFcnJvck1hcCgpO1xuICAgIGNvbnN0IGlzc3VlID0gbWFrZUlzc3VlKHtcbiAgICAgICAgaXNzdWVEYXRhOiBpc3N1ZURhdGEsXG4gICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgZXJyb3JNYXBzOiBbXG4gICAgICAgICAgICBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcCwgLy8gY29udGV4dHVhbCBlcnJvciBtYXAgaXMgZmlyc3QgcHJpb3JpdHlcbiAgICAgICAgICAgIGN0eC5zY2hlbWFFcnJvck1hcCwgLy8gdGhlbiBzY2hlbWEtYm91bmQgbWFwIGlmIGF2YWlsYWJsZVxuICAgICAgICAgICAgb3ZlcnJpZGVNYXAsIC8vIHRoZW4gZ2xvYmFsIG92ZXJyaWRlIG1hcFxuICAgICAgICAgICAgb3ZlcnJpZGVNYXAgPT09IGRlZmF1bHRFcnJvck1hcCA/IHVuZGVmaW5lZCA6IGRlZmF1bHRFcnJvck1hcCwgLy8gdGhlbiBnbG9iYWwgZGVmYXVsdCBtYXBcbiAgICAgICAgXS5maWx0ZXIoKHgpID0+ICEheCksXG4gICAgfSk7XG4gICAgY3R4LmNvbW1vbi5pc3N1ZXMucHVzaChpc3N1ZSk7XG59XG5leHBvcnQgY2xhc3MgUGFyc2VTdGF0dXMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gXCJ2YWxpZFwiO1xuICAgIH1cbiAgICBkaXJ0eSgpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsdWUgPT09IFwidmFsaWRcIilcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBcImRpcnR5XCI7XG4gICAgfVxuICAgIGFib3J0KCkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZSAhPT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gXCJhYm9ydGVkXCI7XG4gICAgfVxuICAgIHN0YXRpYyBtZXJnZUFycmF5KHN0YXR1cywgcmVzdWx0cykge1xuICAgICAgICBjb25zdCBhcnJheVZhbHVlID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcyBvZiByZXN1bHRzKSB7XG4gICAgICAgICAgICBpZiAocy5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgaWYgKHMuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICBhcnJheVZhbHVlLnB1c2gocy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBhcnJheVZhbHVlIH07XG4gICAgfVxuICAgIHN0YXRpYyBhc3luYyBtZXJnZU9iamVjdEFzeW5jKHN0YXR1cywgcGFpcnMpIHtcbiAgICAgICAgY29uc3Qgc3luY1BhaXJzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcGFpciBvZiBwYWlycykge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgcGFpci5rZXk7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHBhaXIudmFsdWU7XG4gICAgICAgICAgICBzeW5jUGFpcnMucHVzaCh7XG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHN5bmNQYWlycyk7XG4gICAgfVxuICAgIHN0YXRpYyBtZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBwYWlycykge1xuICAgICAgICBjb25zdCBmaW5hbE9iamVjdCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHsga2V5LCB2YWx1ZSB9ID0gcGFpcjtcbiAgICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIGlmIChrZXkudmFsdWUgIT09IFwiX19wcm90b19fXCIgJiYgKHR5cGVvZiB2YWx1ZS52YWx1ZSAhPT0gXCJ1bmRlZmluZWRcIiB8fCBwYWlyLmFsd2F5c1NldCkpIHtcbiAgICAgICAgICAgICAgICBmaW5hbE9iamVjdFtrZXkudmFsdWVdID0gdmFsdWUudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBmaW5hbE9iamVjdCB9O1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBJTlZBTElEID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgc3RhdHVzOiBcImFib3J0ZWRcIixcbn0pO1xuZXhwb3J0IGNvbnN0IERJUlRZID0gKHZhbHVlKSA9PiAoeyBzdGF0dXM6IFwiZGlydHlcIiwgdmFsdWUgfSk7XG5leHBvcnQgY29uc3QgT0sgPSAodmFsdWUpID0+ICh7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZSB9KTtcbmV4cG9ydCBjb25zdCBpc0Fib3J0ZWQgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwiYWJvcnRlZFwiO1xuZXhwb3J0IGNvbnN0IGlzRGlydHkgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwiZGlydHlcIjtcbmV4cG9ydCBjb25zdCBpc1ZhbGlkID0gKHgpID0+IHguc3RhdHVzID09PSBcInZhbGlkXCI7XG5leHBvcnQgY29uc3QgaXNBc3luYyA9ICh4KSA9PiB0eXBlb2YgUHJvbWlzZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiB4IGluc3RhbmNlb2YgUHJvbWlzZTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/zod/v3/helpers/parseUtil.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/zod/v3/helpers/util.js":
/*!*********************************************!*\
  !*** ./node_modules/zod/v3/helpers/util.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ZodParsedType: () => (/* binding */ ZodParsedType),\n/* harmony export */   getParsedType: () => (/* binding */ getParsedType),\n/* harmony export */   objectUtil: () => (/* binding */ objectUtil),\n/* harmony export */   util: () => (/* binding */ util)\n/* harmony export */ });\nvar util;\n(function (util) {\n    util.assertEqual = (_) => { };\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && Number.isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array.map((val) => (typeof val === \"string\" ? `'${val}'` : val)).join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy96b2QvdjMvaGVscGVycy91dGlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSxJQUFJO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9CQUFvQjtBQUNkO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdDQUFnQztBQUMxQjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9EZXNrdG9wL2MycGEgdG9vbC9ub2RlX21vZHVsZXMvem9kL3YzL2hlbHBlcnMvdXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIHV0aWw7XG4oZnVuY3Rpb24gKHV0aWwpIHtcbiAgICB1dGlsLmFzc2VydEVxdWFsID0gKF8pID0+IHsgfTtcbiAgICBmdW5jdGlvbiBhc3NlcnRJcyhfYXJnKSB7IH1cbiAgICB1dGlsLmFzc2VydElzID0gYXNzZXJ0SXM7XG4gICAgZnVuY3Rpb24gYXNzZXJ0TmV2ZXIoX3gpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgfVxuICAgIHV0aWwuYXNzZXJ0TmV2ZXIgPSBhc3NlcnROZXZlcjtcbiAgICB1dGlsLmFycmF5VG9FbnVtID0gKGl0ZW1zKSA9PiB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgICAgIG9ialtpdGVtXSA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuICAgIHV0aWwuZ2V0VmFsaWRFbnVtVmFsdWVzID0gKG9iaikgPT4ge1xuICAgICAgICBjb25zdCB2YWxpZEtleXMgPSB1dGlsLm9iamVjdEtleXMob2JqKS5maWx0ZXIoKGspID0+IHR5cGVvZiBvYmpbb2JqW2tdXSAhPT0gXCJudW1iZXJcIik7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkID0ge307XG4gICAgICAgIGZvciAoY29uc3QgayBvZiB2YWxpZEtleXMpIHtcbiAgICAgICAgICAgIGZpbHRlcmVkW2tdID0gb2JqW2tdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1dGlsLm9iamVjdFZhbHVlcyhmaWx0ZXJlZCk7XG4gICAgfTtcbiAgICB1dGlsLm9iamVjdFZhbHVlcyA9IChvYmopID0+IHtcbiAgICAgICAgcmV0dXJuIHV0aWwub2JqZWN0S2V5cyhvYmopLm1hcChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9ialtlXTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICB1dGlsLm9iamVjdEtleXMgPSB0eXBlb2YgT2JqZWN0LmtleXMgPT09IFwiZnVuY3Rpb25cIiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGJhbi9iYW5cbiAgICAgICAgPyAob2JqKSA9PiBPYmplY3Qua2V5cyhvYmopIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgYmFuL2JhblxuICAgICAgICA6IChvYmplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG9iamVjdCkge1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBrZXlzO1xuICAgICAgICB9O1xuICAgIHV0aWwuZmluZCA9IChhcnIsIGNoZWNrZXIpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGFycikge1xuICAgICAgICAgICAgaWYgKGNoZWNrZXIoaXRlbSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIHV0aWwuaXNJbnRlZ2VyID0gdHlwZW9mIE51bWJlci5pc0ludGVnZXIgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/ICh2YWwpID0+IE51bWJlci5pc0ludGVnZXIodmFsKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGJhbi9iYW5cbiAgICAgICAgOiAodmFsKSA9PiB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICYmIE51bWJlci5pc0Zpbml0ZSh2YWwpICYmIE1hdGguZmxvb3IodmFsKSA9PT0gdmFsO1xuICAgIGZ1bmN0aW9uIGpvaW5WYWx1ZXMoYXJyYXksIHNlcGFyYXRvciA9IFwiIHwgXCIpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5Lm1hcCgodmFsKSA9PiAodHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIiA/IGAnJHt2YWx9J2AgOiB2YWwpKS5qb2luKHNlcGFyYXRvcik7XG4gICAgfVxuICAgIHV0aWwuam9pblZhbHVlcyA9IGpvaW5WYWx1ZXM7XG4gICAgdXRpbC5qc29uU3RyaW5naWZ5UmVwbGFjZXIgPSAoXywgdmFsdWUpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJiaWdpbnRcIikge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG59KSh1dGlsIHx8ICh1dGlsID0ge30pKTtcbmV4cG9ydCB2YXIgb2JqZWN0VXRpbDtcbihmdW5jdGlvbiAob2JqZWN0VXRpbCkge1xuICAgIG9iamVjdFV0aWwubWVyZ2VTaGFwZXMgPSAoZmlyc3QsIHNlY29uZCkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uZmlyc3QsXG4gICAgICAgICAgICAuLi5zZWNvbmQsIC8vIHNlY29uZCBvdmVyd3JpdGVzIGZpcnN0XG4gICAgICAgIH07XG4gICAgfTtcbn0pKG9iamVjdFV0aWwgfHwgKG9iamVjdFV0aWwgPSB7fSkpO1xuZXhwb3J0IGNvbnN0IFpvZFBhcnNlZFR5cGUgPSB1dGlsLmFycmF5VG9FbnVtKFtcbiAgICBcInN0cmluZ1wiLFxuICAgIFwibmFuXCIsXG4gICAgXCJudW1iZXJcIixcbiAgICBcImludGVnZXJcIixcbiAgICBcImZsb2F0XCIsXG4gICAgXCJib29sZWFuXCIsXG4gICAgXCJkYXRlXCIsXG4gICAgXCJiaWdpbnRcIixcbiAgICBcInN5bWJvbFwiLFxuICAgIFwiZnVuY3Rpb25cIixcbiAgICBcInVuZGVmaW5lZFwiLFxuICAgIFwibnVsbFwiLFxuICAgIFwiYXJyYXlcIixcbiAgICBcIm9iamVjdFwiLFxuICAgIFwidW5rbm93blwiLFxuICAgIFwicHJvbWlzZVwiLFxuICAgIFwidm9pZFwiLFxuICAgIFwibmV2ZXJcIixcbiAgICBcIm1hcFwiLFxuICAgIFwic2V0XCIsXG5dKTtcbmV4cG9ydCBjb25zdCBnZXRQYXJzZWRUeXBlID0gKGRhdGEpID0+IHtcbiAgICBjb25zdCB0ID0gdHlwZW9mIGRhdGE7XG4gICAgc3dpdGNoICh0KSB7XG4gICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnVuZGVmaW5lZDtcbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuc3RyaW5nO1xuICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLmlzTmFOKGRhdGEpID8gWm9kUGFyc2VkVHlwZS5uYW4gOiBab2RQYXJzZWRUeXBlLm51bWJlcjtcbiAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmJvb2xlYW47XG4gICAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuZnVuY3Rpb247XG4gICAgICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmJpZ2ludDtcbiAgICAgICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuc3ltYm9sO1xuICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmFycmF5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5udWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGEudGhlbiAmJiB0eXBlb2YgZGF0YS50aGVuID09PSBcImZ1bmN0aW9uXCIgJiYgZGF0YS5jYXRjaCAmJiB0eXBlb2YgZGF0YS5jYXRjaCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUucHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgTWFwICE9PSBcInVuZGVmaW5lZFwiICYmIGRhdGEgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5tYXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIFNldCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkYXRhIGluc3RhbmNlb2YgU2V0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuc2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBEYXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGRhdGEgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuZGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLm9iamVjdDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnVua25vd247XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/zod/v3/helpers/util.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/zod/v3/locales/en.js":
/*!*******************************************!*\
  !*** ./node_modules/zod/v3/locales/en.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ZodError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ZodError.js */ \"(app-pages-browser)/./node_modules/zod/v3/ZodError.js\");\n/* harmony import */ var _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/util.js */ \"(app-pages-browser)/./node_modules/zod/v3/helpers/util.js\");\n\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_type:\n            if (issue.received === _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.jsonStringifyReplacer)}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${_helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.joinValues(issue.keys, \", \")}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${_helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.joinValues(issue.options)}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${_helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"bigint\")\n                message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case _ZodError_js__WEBPACK_IMPORTED_MODULE_0__.ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            _helpers_util_js__WEBPACK_IMPORTED_MODULE_1__.util.assertNever(issue);\n    }\n    return { message };\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (errorMap);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/zod/v3/locales/en.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/zod/v3/types.js":
/*!**************************************!*\
  !*** ./node_modules/zod/v3/types.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BRAND: () => (/* binding */ BRAND),\n/* harmony export */   NEVER: () => (/* binding */ NEVER),\n/* harmony export */   Schema: () => (/* binding */ ZodType),\n/* harmony export */   ZodAny: () => (/* binding */ ZodAny),\n/* harmony export */   ZodArray: () => (/* binding */ ZodArray),\n/* harmony export */   ZodBigInt: () => (/* binding */ ZodBigInt),\n/* harmony export */   ZodBoolean: () => (/* binding */ ZodBoolean),\n/* harmony export */   ZodBranded: () => (/* binding */ ZodBranded),\n/* harmony export */   ZodCatch: () => (/* binding */ ZodCatch),\n/* harmony export */   ZodDate: () => (/* binding */ ZodDate),\n/* harmony export */   ZodDefault: () => (/* binding */ ZodDefault),\n/* harmony export */   ZodDiscriminatedUnion: () => (/* binding */ ZodDiscriminatedUnion),\n/* harmony export */   ZodEffects: () => (/* binding */ ZodEffects),\n/* harmony export */   ZodEnum: () => (/* binding */ ZodEnum),\n/* harmony export */   ZodFirstPartyTypeKind: () => (/* binding */ ZodFirstPartyTypeKind),\n/* harmony export */   ZodFunction: () => (/* binding */ ZodFunction),\n/* harmony export */   ZodIntersection: () => (/* binding */ ZodIntersection),\n/* harmony export */   ZodLazy: () => (/* binding */ ZodLazy),\n/* harmony export */   ZodLiteral: () => (/* binding */ ZodLiteral),\n/* harmony export */   ZodMap: () => (/* binding */ ZodMap),\n/* harmony export */   ZodNaN: () => (/* binding */ ZodNaN),\n/* harmony export */   ZodNativeEnum: () => (/* binding */ ZodNativeEnum),\n/* harmony export */   ZodNever: () => (/* binding */ ZodNever),\n/* harmony export */   ZodNull: () => (/* binding */ ZodNull),\n/* harmony export */   ZodNullable: () => (/* binding */ ZodNullable),\n/* harmony export */   ZodNumber: () => (/* binding */ ZodNumber),\n/* harmony export */   ZodObject: () => (/* binding */ ZodObject),\n/* harmony export */   ZodOptional: () => (/* binding */ ZodOptional),\n/* harmony export */   ZodPipeline: () => (/* binding */ ZodPipeline),\n/* harmony export */   ZodPromise: () => (/* binding */ ZodPromise),\n/* harmony export */   ZodReadonly: () => (/* binding */ ZodReadonly),\n/* harmony export */   ZodRecord: () => (/* binding */ ZodRecord),\n/* harmony export */   ZodSchema: () => (/* binding */ ZodType),\n/* harmony export */   ZodSet: () => (/* binding */ ZodSet),\n/* harmony export */   ZodString: () => (/* binding */ ZodString),\n/* harmony export */   ZodSymbol: () => (/* binding */ ZodSymbol),\n/* harmony export */   ZodTransformer: () => (/* binding */ ZodEffects),\n/* harmony export */   ZodTuple: () => (/* binding */ ZodTuple),\n/* harmony export */   ZodType: () => (/* binding */ ZodType),\n/* harmony export */   ZodUndefined: () => (/* binding */ ZodUndefined),\n/* harmony export */   ZodUnion: () => (/* binding */ ZodUnion),\n/* harmony export */   ZodUnknown: () => (/* binding */ ZodUnknown),\n/* harmony export */   ZodVoid: () => (/* binding */ ZodVoid),\n/* harmony export */   any: () => (/* binding */ anyType),\n/* harmony export */   array: () => (/* binding */ arrayType),\n/* harmony export */   bigint: () => (/* binding */ bigIntType),\n/* harmony export */   boolean: () => (/* binding */ booleanType),\n/* harmony export */   coerce: () => (/* binding */ coerce),\n/* harmony export */   custom: () => (/* binding */ custom),\n/* harmony export */   date: () => (/* binding */ dateType),\n/* harmony export */   datetimeRegex: () => (/* binding */ datetimeRegex),\n/* harmony export */   discriminatedUnion: () => (/* binding */ discriminatedUnionType),\n/* harmony export */   effect: () => (/* binding */ effectsType),\n/* harmony export */   \"enum\": () => (/* binding */ enumType),\n/* harmony export */   \"function\": () => (/* binding */ functionType),\n/* harmony export */   \"instanceof\": () => (/* binding */ instanceOfType),\n/* harmony export */   intersection: () => (/* binding */ intersectionType),\n/* harmony export */   late: () => (/* binding */ late),\n/* harmony export */   lazy: () => (/* binding */ lazyType),\n/* harmony export */   literal: () => (/* binding */ literalType),\n/* harmony export */   map: () => (/* binding */ mapType),\n/* harmony export */   nan: () => (/* binding */ nanType),\n/* harmony export */   nativeEnum: () => (/* binding */ nativeEnumType),\n/* harmony export */   never: () => (/* binding */ neverType),\n/* harmony export */   \"null\": () => (/* binding */ nullType),\n/* harmony export */   nullable: () => (/* binding */ nullableType),\n/* harmony export */   number: () => (/* binding */ numberType),\n/* harmony export */   object: () => (/* binding */ objectType),\n/* harmony export */   oboolean: () => (/* binding */ oboolean),\n/* harmony export */   onumber: () => (/* binding */ onumber),\n/* harmony export */   optional: () => (/* binding */ optionalType),\n/* harmony export */   ostring: () => (/* binding */ ostring),\n/* harmony export */   pipeline: () => (/* binding */ pipelineType),\n/* harmony export */   preprocess: () => (/* binding */ preprocessType),\n/* harmony export */   promise: () => (/* binding */ promiseType),\n/* harmony export */   record: () => (/* binding */ recordType),\n/* harmony export */   set: () => (/* binding */ setType),\n/* harmony export */   strictObject: () => (/* binding */ strictObjectType),\n/* harmony export */   string: () => (/* binding */ stringType),\n/* harmony export */   symbol: () => (/* binding */ symbolType),\n/* harmony export */   transformer: () => (/* binding */ effectsType),\n/* harmony export */   tuple: () => (/* binding */ tupleType),\n/* harmony export */   undefined: () => (/* binding */ undefinedType),\n/* harmony export */   union: () => (/* binding */ unionType),\n/* harmony export */   unknown: () => (/* binding */ unknownType),\n/* harmony export */   \"void\": () => (/* binding */ voidType)\n/* harmony export */ });\n/* harmony import */ var _ZodError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ZodError.js */ \"(app-pages-browser)/./node_modules/zod/v3/ZodError.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./errors.js */ \"(app-pages-browser)/./node_modules/zod/v3/errors.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./errors.js */ \"(app-pages-browser)/./node_modules/zod/v3/locales/en.js\");\n/* harmony import */ var _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/errorUtil.js */ \"(app-pages-browser)/./node_modules/zod/v3/helpers/errorUtil.js\");\n/* harmony import */ var _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/parseUtil.js */ \"(app-pages-browser)/./node_modules/zod/v3/helpers/parseUtil.js\");\n/* harmony import */ var _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/util.js */ \"(app-pages-browser)/./node_modules/zod/v3/helpers/util.js\");\n\n\n\n\n\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (Array.isArray(this._key)) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message ?? ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: message ?? required_error ?? ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: message ?? invalid_type_error ?? ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAsync)(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                async: params?.async ?? false,\n                contextualErrorMap: params?.errorMap,\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if (err?.message?.toLowerCase()?.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params?.errorMap,\n                async: true,\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAsync)(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\" ? refinementData(val, ctx) : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    let secondsRegexSource = `[0-5]\\\\d`;\n    if (args.precision) {\n        secondsRegexSource = `${secondsRegexSource}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        secondsRegexSource = `${secondsRegexSource}(\\\\.\\\\d+)?`;\n    }\n    const secondsQuantifier = args.precision ? \"+\" : \"?\"; // require seconds if precision is nonzero\n    return `([01]\\\\d|2[0-3]):[0-5]\\\\d(:${secondsRegexSource})${secondsQuantifier}`;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        if (!header)\n            return false;\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (\"typ\" in decoded && decoded?.typ !== \"JWT\")\n            return false;\n        if (!decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"email\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"emoji\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"uuid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"nanoid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"cuid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"cuid2\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"ulid\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"url\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"regex\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"duration\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"ip\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"jwt\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"cidr\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"base64\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        validation: \"base64url\",\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_string,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            offset: options?.offset ?? false,\n            local: options?.local ?? false,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options?.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options?.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options?.position,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(options?.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ..._helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: params?.coerce ?? false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = Number.parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = Number.parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / 10 ** decCount;\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        let ctx = undefined;\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" || (ch.kind === \"multipleOf\" && _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null;\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: params?.coerce || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n            expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: params?.coerce ?? false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: params?.coerce || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (Number.isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_date,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const status = new _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: params?.coerce || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n            code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n            expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: tooBig ? _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big : _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(shape);\n        this._cached = { shape, keys };\n        return this._cached;\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                        code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") {\n            }\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.errToObj(message).message ?? defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(mask)) {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(this.shape)) {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(this.shape)) {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        for (const key of _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(this.shape)) {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(result.ctx.common.issues));\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(issues));\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(a);\n    const bType = (0,_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.getParsedType)(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object && bType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object) {\n        const bKeys = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(b);\n        const sharedKeys = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array && bType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.date && bType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.date && +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAborted)(parsedLeft) || (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAborted)(parsedRight)) {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_intersection_types,\n                });\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n            }\n            if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isDirty)(parsedLeft) || (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isDirty)(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\n// type ZodTupleItems = [ZodTypeAny, ...ZodTypeAny[]];\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.map) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.set) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: _helpers_errorUtil_js__WEBPACK_IMPORTED_MODULE_3__.errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.function) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.makeIssue)({\n                data: args,\n                path: ctx.path,\n                errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, (0,_errors_js__WEBPACK_IMPORTED_MODULE_4__.getErrorMap)(), _errors_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]].filter((x) => !!x),\n                issueData: {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.makeIssue)({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, (0,_errors_js__WEBPACK_IMPORTED_MODULE_4__.getErrorMap)(), _errors_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]].filter((x) => !!x),\n                issueData: {\n                    code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(async function (...args) {\n                const error = new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError([]);\n                const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args ? args : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                received: ctx.data,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (!this._cache) {\n            this._cache = new Set(this._def.values);\n        }\n        if (!this._cache.has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                received: ctx.data,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.string && ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.number) {\n            const expectedValues = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectValues(nativeEnumValues);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        if (!this._cache) {\n            this._cache = new Set(_helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.getValidEnumValues(this._def.values));\n        }\n        if (!this._cache.has(input.data)) {\n            const expectedValues = _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.objectValues(nativeEnumValues);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                received: ctx.data,\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.promise && ctx.common.async === false) {\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        const promisified = ctx.parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    if (result.status === \"dirty\")\n                        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(result.value);\n                    if (status.value === \"dirty\")\n                        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                if (result.status === \"dirty\")\n                    return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(result.value);\n                if (status.value === \"dirty\")\n                    return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!(0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(base))\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {\n                    if (!(0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(base))\n                        return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({\n                        status: status.value,\n                        value: result,\n                    }));\n                });\n            }\n        }\n        _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\n\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.null) {\n            return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.OK)(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\" ? params.default : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAsync)(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.addIssueToContext)(ctx, {\n                code: _ZodError_js__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.invalid_type,\n                expected: _helpers_util_js__WEBPACK_IMPORTED_MODULE_2__.ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.DIRTY)(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if ((0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isValid)(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return (0,_helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.isAsync)(result) ? result.then((data) => freeze(data)) : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\" ? params(data) : typeof params === \"string\" ? { message: params } : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n}\nfunction custom(check, _params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            const r = check(data);\n            if (r instanceof Promise) {\n                return r.then((r) => {\n                    if (!r) {\n                        const params = cleanParams(_params, data);\n                        const _fatal = params.fatal ?? fatal ?? true;\n                        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n                    }\n                });\n            }\n            if (!r) {\n                const params = cleanParams(_params, data);\n                const _fatal = params.fatal ?? fatal ?? true;\n                ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n            return;\n        });\n    return ZodAny.create();\n}\n\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\n// requires TS 4.4+\nclass Class {\n    constructor(..._) { }\n}\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\n\nconst NEVER = _helpers_parseUtil_js__WEBPACK_IMPORTED_MODULE_0__.INVALID;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/zod/v3/types.js\n"));

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["main-app"], () => (__webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fjeremiah%2FDesktop%2Fc2pa%20tool%2Fapp%2Fpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);